
DriveMAC.elf:     file format elf32-littlenios2
DriveMAC.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000250

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001a640 memsz 0x0001a640 flags r-x
    LOAD off    0x0001b660 vaddr 0x0801a660 paddr 0x0801c734 align 2**12
         filesz 0x000020d4 memsz 0x000020d4 flags rw-
    LOAD off    0x0001d808 vaddr 0x0801e808 paddr 0x0801e808 align 2**12
         filesz 0x00000000 memsz 0x00800bd0 flags rw-
    LOAD off    0x0001e000 vaddr 0x10001000 paddr 0x0881f3d8 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000230  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019dc8  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000648  0801a018  0801a018  0001b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000020d4  0801a660  0801c734  0001b660  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00800c7a  0801e808  0801e808  0001d808  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0881f3d8  0881f3d8  0001e080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  10001000  0881f3d8  0001e000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .onchip_memory 00000000  10002000  10002000  0001e080  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001e080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001310  00000000  00000000  0001e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0003066b  00000000  00000000  0001f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000c330  00000000  00000000  0004fa23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010753  00000000  00000000  0005bd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000042e0  00000000  00000000  0006c4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000064bf  00000000  00000000  00070788  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00018626  00000000  00000000  00076c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0008f270  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000019d8  00000000  00000000  0008f280  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00097336  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  00097339  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0009733c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0009733d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0009733e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00097342  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00097346  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  0009734a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  0009734e  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  00097352  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000006  00000000  00000000  00097356  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000002a  00000000  00000000  0009735c  2**0
                  CONTENTS, READONLY
 31 .jdi          00004264  00000000  00000000  00097386  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000a711b  00000000  00000000  0009b5ea  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000250 l    d  .text	00000000 .text
0801a018 l    d  .rodata	00000000 .rodata
0801a660 l    d  .rwdata	00000000 .rwdata
0801e808 l    d  .bss	00000000 .bss
0881f3d8 l    d  .sdram	00000000 .sdram
10001000 l    d  .descriptor_memory	00000000 .descriptor_memory
10002000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../DriveMAC_bsp//obj/HAL/src/crt0.o
08000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/FreeRTOS/Source/portable/GCC/NiosII/port_asm.o
08000020 l       .exceptions	00000000 save_context
0800009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
080000ac l       .exceptions	00000000 hw_irq_test
08000150 l       .exceptions	00000000 soft_exceptions
080000c0 l       .exceptions	00000000 hw_irq_handler
080000d4 l       .exceptions	00000000 restore_context
0800016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DriveMAC.c
08000330 l     F .text	00000078 prvPrintTask1
080003a8 l     F .text	00000034 prvPrintTask2
0800066c l     F .text	00000054 prvEMACHandlerTask
00000000 l    df *ABS*	00000000 BlockQ.c
0801e818 l     O .bss	00000006 sBlockingConsumerCount
0801e81e l     O .bss	00000006 sBlockingProducerCount
080009d0 l     F .text	000000a0 vBlockingQueueConsumer
08000944 l     F .text	0000008c vBlockingQueueProducer
0801e824 l     O .bss	00000006 sLastBlockingConsumerCount.2740
0801e82a l     O .bss	00000006 sLastBlockingProducerCount.2741
00000000 l    df *ABS*	00000000 GenQTest.c
0801e830 l     O .bss	00000004 xErrorDetected
0801e834 l     O .bss	00000004 ulLoopCounter
0801e838 l     O .bss	00000004 ulLoopCounter2
0801e83c l     O .bss	00000004 ulGuardedVariable
0801e840 l     O .bss	00000004 xHighPriorityMutexTask
0801e844 l     O .bss	00000004 xMediumPriorityMutexTask
0801e848 l     O .bss	00000004 xBlockWasAborted
08000c98 l     F .text	00000468 prvSendFrontAndBackTest
080013e4 l     F .text	0000005c prvLowPriorityMutexTask
08001440 l     F .text	0000002c prvMediumPriorityMutexTask
0800146c l     F .text	0000007c prvHighPriorityMutexTask
08001100 l     F .text	0000018c prvTakeTwoMutexesReturnInDifferentOrder
0800128c l     F .text	00000158 prvTakeTwoMutexesReturnInSameOrder
0801e84c l     O .bss	00000004 ulLastLoopCounter.2773
0801e850 l     O .bss	00000004 ulLastLoopCounter2.2774
00000000 l    df *ABS*	00000000 PollQ.c
0801e854 l     O .bss	00000004 xPollingConsumerCount
0801e858 l     O .bss	00000004 xPollingProducerCount
0801e85c l     O .bss	00000004 xPolledQueue.2707
08001684 l     F .text	000000b0 vPolledQueueConsumer
080015e0 l     F .text	000000a4 vPolledQueueProducer
00000000 l    df *ABS*	00000000 QPeek.c
0801e860 l     O .bss	00000004 xErrorDetected
0801e864 l     O .bss	00000004 ulLoopCounter
08001b04 l     F .text	00000164 prvLowPriorityPeekTask
08001a7c l     F .text	00000088 prvMediumPriorityPeekTask
080019bc l     F .text	000000c0 prvHighPriorityPeekTask
08001868 l     F .text	00000154 prvHighestPriorityPeekTask
0801e868 l     O .bss	00000004 ulLastLoopCounter.2743
00000000 l    df *ABS*	00000000 blocktim.c
0801e878 l     O .bss	00000004 xTestQueue
0801e87c l     O .bss	00000004 xSecondary
0801e880 l     O .bss	00000004 xPrimaryCycles
0801e884 l     O .bss	00000004 xSecondaryCycles
0801e888 l     O .bss	00000004 xErrorOccurred
0801e88c l     O .bss	00000004 xRunIndicator
08001d44 l     F .text	00000418 vPrimaryBlockTimeTestTask
0800215c l     F .text	0000012c vSecondaryBlockTimeTestTask
08002288 l     F .text	0000011c prvBasicDelayTests
0801e890 l     O .bss	00000004 xLastPrimaryCycleCount.2356
0801e894 l     O .bss	00000004 xLastSecondaryCycleCount.2357
00000000 l    df *ABS*	00000000 comtest.c
0801e898 l     O .bss	00000004 xPort
0801e89c l     O .bss	00000004 uxBaseLED
0801e8a0 l     O .bss	00000004 uxRxLoops
080024a8 l     F .text	000000b4 vComTxTask
0800255c l     F .text	00000118 vComRxTask
00000000 l    df *ABS*	00000000 countsem.c
0801e8a4 l     O .bss	00000004 xErrorDetected
0801f1d0 l     O .bss	00000018 xParameters
0800293c l     F .text	000000a8 prvCountingSemaphoreTask
080027b4 l     F .text	000000c0 prvDecrementSemaphoreCount
08002874 l     F .text	000000c8 prvIncrementSemaphoreCount
0801e8a8 l     O .bss	00000004 uxLastCount0.2321
0801e8ac l     O .bss	00000004 uxLastCount1.2322
00000000 l    df *ABS*	00000000 death.c
0801e8b0 l     O .bss	00000002 usCreationCount
0801e8b4 l     O .bss	00000004 uxTasksRunningAtStart
0801c6e0 l     O .rwdata	00000004 uxMaxNumberOfExtraTasksRunning
08002b50 l     F .text	000000a8 vCreateTasks
08002ac4 l     F .text	0000008c vSuicidalTask
0801c6e4 l     O .rwdata	00000002 usLastCreationCount.2611
0801e8b8 l     O .bss	00000004 uxTasksRunningNow.2613
00000000 l    df *ABS*	00000000 dynamic.c
0801e8c0 l     O .bss	00000004 xContinuousIncrementHandle
0801e8c4 l     O .bss	00000004 xLimitedIncrementHandle
0801e8c8 l     O .bss	00000004 ulCounter
0801e8cc l     O .bss	00000002 usCheckVariable
0801e8d0 l     O .bss	00000004 xSuspendedQueueSendError
0801e8d4 l     O .bss	00000004 xSuspendedQueueReceiveError
0801e8d8 l     O .bss	00000004 ulExpectedValue
08002dd8 l     F .text	00000060 vContinuousIncrementTask
08002d84 l     F .text	00000054 vLimitedIncrementTask
08002e38 l     F .text	000000dc vCounterControlTask
08002f14 l     F .text	0000005c vQueueSendWhenSuspendedTask
08002f70 l     F .text	00000084 vQueueReceiveWhenSuspendedTask
0801e8dc l     O .bss	00000004 ulValueToSend.2744
0801e8e0 l     O .bss	00000002 usLastTaskCheck.2757
0801e8e4 l     O .bss	00000004 ulLastExpectedValue.2758
00000000 l    df *ABS*	00000000 flash.c
0801e8ec l     O .bss	00000004 uxFlashTaskNumber
080030e8 l     F .text	00000090 vLEDFlashTask
00000000 l    df *ABS*	00000000 integer.c
0801e8f0 l     O .bss	00000004 xTaskCheck
080031fc l     F .text	0000009c vCompeteingIntMathTask
00000000 l    df *ABS*	00000000 recmutex.c
0801e8f4 l     O .bss	00000004 xMutex
0801e8f8 l     O .bss	00000004 xErrorOccurred
0801e8fc l     O .bss	00000004 xControllingIsSuspended
0801e900 l     O .bss	00000004 xBlockingIsSuspended
0801e904 l     O .bss	00000004 uxControllingCycles
0801e908 l     O .bss	00000004 uxBlockingCycles
0801e90c l     O .bss	00000004 uxPollingCycles
0801e910 l     O .bss	00000004 xControllingTaskHandle
0801e914 l     O .bss	00000004 xBlockingTaskHandle
080033cc l     F .text	000000fc prvRecursiveMutexControllingTask
080034c8 l     F .text	000000a8 prvRecursiveMutexBlockingTask
08003570 l     F .text	000000b4 prvRecursiveMutexPollingTask
0801e918 l     O .bss	00000004 uxLastControllingCycles.2320
0801e91c l     O .bss	00000004 uxLastBlockingCycles.2321
0801e920 l     O .bss	00000004 uxLastPollingCycles.2322
00000000 l    df *ABS*	00000000 semtest.c
0801e924 l     O .bss	00000008 sCheckVariables
0801e92c l     O .bss	00000002 sNextCheckVariable
08003898 l     F .text	00000184 prvSemaphoreTest
0801e92e l     O .bss	00000008 sLastCheckVariables.2730
00000000 l    df *ABS*	00000000 ParTest.c
0801e938 l     O .bss	00000004 ulLedStates
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
08004004 l     F .text	000000a4 prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 heap_4.c
0801f1e8 l     O .bss	00800000 ucHeap
0801c6e8 l     O .rwdata	00000004 xHeapStructSize
0801e93c l     O .bss	00000008 xStart
0801e944 l     O .bss	00000004 pxEnd
0801e948 l     O .bss	00000004 xFreeBytesRemaining
0801e94c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
0801e950 l     O .bss	00000004 xBlockAllocatedBit
08004608 l     F .text	0000011c prvHeapInit
08004724 l     F .text	00000134 prvInsertBlockIntoFreeList
00000000 l    df *ABS*	00000000 queue.c
08004a2c l     F .text	00000084 prvInitialiseNewQueue
08004ab0 l     F .text	00000060 prvInitialiseMutex
08005888 l     F .text	0000018c prvCopyDataToQueue
08005c3c l     F .text	00000058 prvIsQueueFull
08005ab0 l     F .text	000000f4 prvUnlockQueue
08005a14 l     F .text	0000009c prvCopyDataFromQueue
08005ba4 l     F .text	00000050 prvIsQueueEmpty
08005838 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
0881f1e8 l     O .bss	00000064 pxReadyTasksLists
0881f24c l     O .bss	00000014 xDelayedTaskList1
0881f260 l     O .bss	00000014 xDelayedTaskList2
0801e958 l     O .bss	00000004 pxDelayedTaskList
0801e95c l     O .bss	00000004 pxOverflowDelayedTaskList
0881f274 l     O .bss	00000014 xPendingReadyList
0881f288 l     O .bss	00000014 xTasksWaitingTermination
0801e960 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
0881f29c l     O .bss	00000014 xSuspendedTaskList
0801e964 l     O .bss	00000004 uxCurrentNumberOfTasks
0801e968 l     O .bss	00000004 xTickCount
0801e96c l     O .bss	00000004 uxTopReadyPriority
0801e970 l     O .bss	00000004 xSchedulerRunning
0801e974 l     O .bss	00000004 uxPendedTicks
0801e978 l     O .bss	00000004 xYieldPending
0801e97c l     O .bss	00000004 xNumOfOverflows
0801e980 l     O .bss	00000004 uxTaskNumber
0801e984 l     O .bss	00000004 xNextTaskUnblockTime
0801e988 l     O .bss	00000004 xIdleTaskHandle
0801e98c l     O .bss	00000004 uxSchedulerSuspended
08005dcc l     F .text	000001e4 prvInitialiseNewTask
08005fb0 l     F .text	00000108 prvAddNewTaskToReadyList
08007290 l     F .text	000000c0 prvInitialiseTaskLists
08007494 l     F .text	00000044 prvDeleteTCB
080074d8 l     F .text	00000054 prvResetNextTaskUnblockTime
08008138 l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0800664c l     F .text	0000006c prvTaskIsTaskSuspended
08007274 l     F .text	0000001c prvIdleTask
08007350 l     F .text	00000080 prvCheckTasksWaitingTermination
080073d0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 serial.c
0801e990 l     O .bss	00000004 xRxedChars
0801e994 l     O .bss	00000004 xCharsForTx
08008490 l     F .text	00000074 vUARTInterruptHandler
08008504 l     F .text	000000a4 vUARTReceiveHandler
080085a8 l     F .text	000000a0 vUARTTransmitHandler
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0801aa60 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
08009cf4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801a352 l     O .rodata	00000010 zeroes.4404
0800c404 l     F .text	000000bc __sbprintf
0801a362 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
0800c6c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800e220 l     F .text	00000008 __fp_unlock
0800e234 l     F .text	0000019c __sinit.part.1
0800e3d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0801b2ac l     O .rwdata	00000020 lc_ctype_charset
0801b28c l     O .rwdata	00000020 lc_message_charset
0801b2cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0801a390 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08010c9c l     F .text	000000fc __sprint_r.part.0
0801a4b4 l     O .rodata	00000010 zeroes.4349
080122d8 l     F .text	000000bc __sbprintf
0801a4c4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015f20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08016034 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08016060 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08016304 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080163ec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080164d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
080166b4 l     F .text	0000003c alt_get_errno
080166f0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
08016ba0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801c720 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08016e14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08016f50 l     F .text	00000034 alt_dev_reg
0801b4ac l     O .rwdata	00001060 jtag
0801c50c l     O .rwdata	00000030 sgdma_rx
0801c53c l     O .rwdata	00000030 sgdma_tx
0801c56c l     O .rwdata	000000c4 uart
0801c630 l     O .rwdata	0000002c Button_Pio
0801c65c l     O .rwdata	0000002c IO_Pio
0801c688 l     O .rwdata	0000002c LED_Pio
0801c6b4 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080172c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080174cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
08017b04 l     F .text	0000003c alt_get_errno
08018734 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08018898 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
08018b48 l     F .text	0000009c altera_avalon_uart_irq
08018be4 l     F .text	000000e4 altera_avalon_uart_rxirq
08018cc8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
08018e64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0801907c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080193d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080197f4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08010410 g     F .text	00000074 _mprec_log10
080006c0 g     F .text	00000284 vStartBlockingQueueTasks
080104fc g     F .text	0000008c __any_on
0800f100 g     F .text	00000054 _isatty_r
0801a39c g     O .rodata	00000028 __mprec_tinytens
080165f0 g     F .text	0000007c alt_main
08009c20 g     F .text	000000c0 _puts_r
080005e4 g     F .text	00000088 rx_ethernet_isr
0881f2d8 g     O .bss	00000100 alt_irq
0800f230 g     F .text	00000060 _lseek_r
080000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
08006eac g     F .text	00000064 vTaskPlaceOnUnorderedEventList
080045a8 g     F .text	00000020 xPortGetFreeHeapSize
0801c734 g       *ABS*	00000000 __flash_rwdata_start
0800e5d0 g     F .text	000000ac __sflags
080148f8 g     F .text	00000088 .hidden __eqdf2
0881f3d8 g       *ABS*	00000000 __alt_heap_start
080062ec g     F .text	00000058 uxTaskPriorityGet
08001c68 g     F .text	00000044 xAreQueuePeekTasksStillRunning
08009be4 g     F .text	0000003c printf
08017c64 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
080128d4 g     F .text	0000009c _wcrtomb_r
0800a010 g     F .text	0000005c __sseek
0800e580 g     F .text	00000010 __sinit
0801277c g     F .text	00000140 __swbuf_r
0800f154 g     F .text	0000007c _setlocale_r
0800e3d8 g     F .text	00000078 __sfmoreglue
08016690 g     F .text	00000024 __malloc_unlock
080014e8 g     F .text	00000060 xAreGenericQueueTasksStillRunning
0801837c g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
0800f374 g     F .text	0000015c memmove
080023a4 g     F .text	00000068 xAreBlockTimeTestTasksStillRunning
08007918 g     F .text	00000054 vTaskEnterCritical
0800e568 g     F .text	00000018 _cleanup
08004ea4 g     F .text	000000e8 xQueueGenericSendFromISR
08006b58 g     F .text	00000040 pcTaskGetName
0800f4d0 g     F .text	000000a8 _Balloc
08014980 g     F .text	000000dc .hidden __gtdf2
08019af8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08004b6c g     F .text	00000090 xQueueGiveMutexRecursive
08003314 g     F .text	000000b8 vStartRecursiveMutexTasks
0801e954 g     O .bss	00000004 pxCurrentTCB
08017ecc g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008db0 g     F .text	0000005c _fstat_r
0801e99c g     O .bss	00000004 errno
08009f8c g     F .text	00000008 __seofread
0801e9c0 g     O .bss	00000004 alt_argv
080246e0 g       *ABS*	00000000 _gp
08006390 g     F .text	000001c0 vTaskPrioritySet
08007130 g     F .text	0000003c vTaskInternalSetTimeOutState
0801b32c g     O .rwdata	00000180 alt_fd_list
08002674 g     F .text	0000003c xAreComTestTasksStillRunning
08003fac g     F .text	00000038 xPortStartScheduler
0800690c g     F .text	00000048 vTaskEndScheduler
08019578 g     F .text	00000090 alt_find_dev
080098e4 g     F .text	00000148 memcpy
08006e5c g     F .text	00000050 vTaskPlaceOnEventList
08007010 g     F .text	000000d4 vTaskRemoveFromUnorderedEventList
08003624 g     F .text	0000009c xAreRecursiveMutexTasksStillRunning
0800e228 g     F .text	0000000c _cleanup_r
08015d38 g     F .text	000000dc .hidden __floatsidf
0801e86c g     O .bss	00000004 xHighPriorityTask
080198d8 g     F .text	0000007c alt_io_redirect
08014a5c g     F .text	000000f4 .hidden __ltdf2
080056b4 g     F .text	0000007c xQueuePeekFromISR
0801a018 g       *ABS*	00000000 __DTOR_END__
08009ce0 g     F .text	00000014 puts
080044f0 g     F .text	000000b8 vPortFree
08010b4c g     F .text	00000074 __fpclassifyd
0801036c g     F .text	000000a4 __ratio
080122bc g     F .text	0000001c __vfiprintf_internal
08005210 g     F .text	00000210 xQueueSemaphoreTake
08017fc4 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
080176c4 g     F .text	0000021c altera_avalon_jtag_uart_read
08009bb4 g     F .text	00000030 _printf_r
08008740 g     F .text	00000064 .hidden __udivsi3
08003074 g     F .text	00000074 vStartLEDFlashTasks
08016340 g     F .text	000000ac isatty
0801a3ec g     O .rodata	000000c8 __mprec_tens
0801e870 g     O .bss	00000004 xMediumPriorityTask
08007434 g     F .text	00000060 uxTaskGetStackHighWaterMark
0800f1d0 g     F .text	0000000c __locale_charset
08003ca8 g     F .text	0000008c vListInsertEnd
0801e9a8 g     O .bss	00000004 __malloc_top_pad
0801c6fc g     O .rwdata	00000004 __mb_cur_max
08002c80 g     F .text	00000104 vStartDynamicPriorityTasks
0800f200 g     F .text	0000000c _localeconv_r
0800f904 g     F .text	0000003c __i2b
0800eab0 g     F .text	000004c8 __sfvwrite_r
080082d8 g     F .text	00000024 vSerialClose
080180fc g     F .text	0000005c alt_avalon_sgdma_stop
08009ee4 g     F .text	00000054 _sbrk_r
08006790 g     F .text	000000ec xTaskResumeFromISR
08010588 g     F .text	00000060 _read_r
08003c7c g     F .text	0000002c vListInitialiseItem
08019390 g     F .text	00000028 alt_dcache_flush
08003ba8 g     F .text	0000006c vParTestToggleLED
0801c714 g     O .rwdata	00000004 alt_max_fd
080040a8 g     F .text	00000044 vPortSysTickHandler
08012470 g     F .text	000000f0 _fclose_r
08005068 g     F .text	000001a8 xQueueReceive
0800e1f0 g     F .text	00000030 fflush
0801e9a4 g     O .bss	00000004 __malloc_max_sbrked_mem
08006344 g     F .text	0000004c uxTaskPriorityGetFromISR
080040ec g     F .text	00000170 alt_irq_register
08003b08 g     F .text	000000a0 vParTestSetLED
0801367c g     F .text	000008ac .hidden __adddf3
08010114 g     F .text	0000010c __b2d
080130b8 g     F .text	000005c4 .hidden __umoddi3
08016514 g     F .text	000000dc lseek
0801c6ec g     O .rwdata	00000004 _global_impure_ptr
080105e8 g     F .text	00000564 _realloc_r
0881f3d8 g       *ABS*	00000000 __bss_end
0800425c g     F .text	000000e0 alt_iic_isr_register
08017b40 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
08000a70 g     F .text	00000128 xAreBlockingQueuesStillRunning
080199f0 g     F .text	00000108 alt_tick
10001060 g     O .descriptor_memory	00000020 rx_descriptor_end
08012abc g     F .text	000005fc .hidden __udivdi3
080126d8 g     F .text	00000024 _fputwc_r
0801a3c4 g     O .rodata	00000028 __mprec_bigtens
0800f6e8 g     F .text	00000104 __s2b
08015e14 g     F .text	000000a8 .hidden __floatunsidf
0800fe54 g     F .text	00000060 __mcmp
0800433c g     F .text	000001b4 pvPortMalloc
08018a9c g     F .text	000000ac altera_avalon_uart_init
08001734 g     F .text	00000048 xArePollingQueuesStillRunning
0800e5a0 g     F .text	00000018 __fp_lock_all
080162b8 g     F .text	0000004c alt_ic_irq_enabled
080057fc g     F .text	0000003c vQueueDelete
08003fe4 g     F .text	00000020 vPortEndScheduler
08003c14 g     F .text	00000068 vListInitialise
08019954 g     F .text	0000009c alt_alarm_stop
10001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0801e9b8 g     O .bss	00000004 alt_irq_active
08008950 g     F .text	00000444 _fseeko_r
0801a660 g     O .rwdata	00000400 tx_frame
0800017c g     F .exceptions	000000d4 alt_irq_handler
0801b304 g     O .rwdata	00000028 alt_dev_null
08006ae4 g     F .text	00000028 xTaskGetTickCount
08004cf0 g     F .text	000001b4 xQueueGenericSend
08018158 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
080193b8 g     F .text	00000020 alt_dcache_flush_all
0800f7ec g     F .text	00000068 __hi0bits
08000b98 g     F .text	00000100 vStartGenericQueueTasks
08015cb8 g     F .text	00000080 .hidden __fixdfsi
080029e4 g     F .text	0000008c xAreCountingSemaphoreTasksStillRunning
080076b4 g     F .text	00000108 xTaskPriorityDisinherit
10001040 g     O .descriptor_memory	00000020 rx_descriptor
0801c734 g       *ABS*	00000000 __ram_rwdata_end
10002000 g       *ABS*	00000000 __alt_mem_onchip_memory
0801c70c g     O .rwdata	00000008 alt_dev_list
08016e50 g     F .text	00000100 write
0801829c g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
08019be4 g     F .text	000000a0 _putc_r
08006f10 g     F .text	00000100 xTaskRemoveFromEventList
0801a660 g       *ABS*	00000000 __ram_rodata_end
0801609c g     F .text	000000b8 fstat
080003dc g     F .text	00000208 xNetworkInterfaceInitialise
08014a5c g     F .text	000000f4 .hidden __ledf2
08005420 g     F .text	000001b0 xQueuePeek
08008404 g     F .text	0000008c vSerialPutString
0800fbcc g     F .text	00000140 __pow5mult
08008370 g     F .text	00000094 xSerialPutChar
08010db0 g     F .text	0000150c ___vfiprintf_internal_r
0801e9b4 g     O .bss	00000004 __nlocale_changed
080087a4 g     F .text	00000058 .hidden __umodsi3
08017f44 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
08018050 g     F .text	00000054 alt_avalon_sgdma_register_callback
0881f3d8 g       *ABS*	00000000 end
080060b8 g     F .text	000000e8 vTaskDelete
08008d94 g     F .text	0000001c fseeko
08002bf8 g     F .text	00000088 xIsCreateTaskStillRunning
080190b8 g     F .text	000001ac altera_avalon_uart_write
08008934 g     F .text	0000001c fseek
08017200 g     F .text	000000c0 altera_avalon_jtag_uart_init
08007a10 g     F .text	00000038 pvTaskIncrementMutexHeldCount
0801a018 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0801831c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
08018910 g     F .text	0000007c alt_avalon_timer_sc_init
080189ec g     F .text	00000060 altera_avalon_uart_write_fd
08015ebc g     F .text	00000064 .hidden __clzsi2
08018a4c g     F .text	00000050 altera_avalon_uart_close_fd
080178e0 g     F .text	00000224 altera_avalon_jtag_uart_write
08017d74 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0800e590 g     F .text	00000004 __sfp_lock_acquire
0800f290 g     F .text	000000e4 memchr
0800a10c g     F .text	000022dc ___vfprintf_internal_r
0800716c g     F .text	000000e0 xTaskCheckForTimeOut
08017e6c g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
0800e7a0 g     F .text	00000310 _free_r
08016938 g     F .text	0000022c alt_printf
08007554 g     F .text	00000160 xTaskPriorityInherit
0800f1dc g     F .text	00000010 __locale_mb_cur_max
08019e64 g     F .text	00000180 __call_exitprocs
0800240c g     F .text	0000009c vAltStartComTestTasks
0801e9b0 g     O .bss	00000004 __mlocale_changed
08007a48 g     F .text	000000b0 ulTaskNotifyTake
0801c6f4 g     O .rwdata	00000004 __malloc_sbrk_base
08000250 g     F .text	0000003c _start
0801e9c8 g     O .bss	00000004 _alt_tick_rate
08006954 g     F .text	0000002c vTaskSuspendAll
0801e80c g     O .bss	00000004 sgdma_tx_dev
080181bc g     F .text	00000054 alt_avalon_sgdma_open
08006b0c g     F .text	0000002c xTaskGetTickCountFromISR
0800fd0c g     F .text	00000148 __lshift
0801e9cc g     O .bss	00000004 _alt_nticks
0801e810 g     O .bss	00000004 text_length
08016bdc g     F .text	00000104 read
08016fbc g     F .text	000000e0 alt_sys_init
08003e0c g     F .text	00000098 uxListRemove
08009b54 g     F .text	00000060 _open_r
08019d4c g     F .text	00000118 __register_exitproc
0801e808 g     O .bss	00000004 xEMACRxEventSemaphore
0800f940 g     F .text	0000028c __multiply
0801756c g     F .text	00000068 altera_avalon_jtag_uart_close
080087fc g     F .text	00000028 .hidden __mulsi3
0801a660 g       *ABS*	00000000 __ram_rwdata_start
0801a018 g       *ABS*	00000000 __ram_rodata_start
0881f2b0 g     O .bss	00000028 __malloc_current_mallinfo
080080c0 g     F .text	00000078 xTaskNotifyStateClear
080066b8 g     F .text	000000d8 vTaskResume
08010220 g     F .text	0000014c __d2b
08006d64 g     F .text	000000f8 vTaskSwitchContext
0801709c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08019710 g     F .text	000000c4 alt_get_fd
0800c674 g     F .text	00000054 _close_r
08007af8 g     F .text	000000f4 xTaskNotifyWait
08019b68 g     F .text	0000007c memcmp
0801715c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0881f3d8 g       *ABS*	00000000 __alt_stack_base
080171ac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08008e0c g     F .text	000000dc _fwrite_r
0800c520 g     F .text	00000154 __swsetup_r
08006550 g     F .text	000000fc vTaskSuspend
08013f28 g     F .text	000009d0 .hidden __divdf3
0800e450 g     F .text	00000118 __sfp
08010484 g     F .text	00000078 __copybits
08006b38 g     F .text	00000020 uxTaskGetNumberOfTasks
0801ae84 g     O .rwdata	00000408 __malloc_av_
0800e59c g     F .text	00000004 __sinit_lock_release
08014b50 g     F .text	0000086c .hidden __muldf3
08009f38 g     F .text	00000054 __sread
08019608 g     F .text	00000108 alt_find_file
08019414 g     F .text	000000a4 alt_dev_llist_insert
0801666c g     F .text	00000024 __malloc_lock
08016d64 g     F .text	000000b0 sbrk
08004bfc g     F .text	0000009c xQueueTakeMutexRecursive
080180a4 g     F .text	00000058 alt_avalon_sgdma_start
0800e194 g     F .text	0000005c _fflush_r
0801e874 g     O .bss	00000004 xHighestPriorityTask
08012394 g     F .text	000000dc _calloc_r
08007bec g     F .text	000001b8 xTaskGenericNotify
08008918 g     F .text	00000018 fopen
0801e808 g       *ABS*	00000000 __bss_start
08009a2c g     F .text	00000128 memset
0800028c g     F .text	000000a4 main
0801e9c4 g     O .bss	00000004 alt_envp
08001cac g     F .text	00000098 vCreateBlockTimeTasks
0801e9a0 g     O .bss	00000004 __malloc_max_total_mem
080170fc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080128bc g     F .text	00000018 __swbuf
08003d34 g     F .text	000000d8 vListInsert
0801c724 g     O .rwdata	00000008 alt_sgdma_list
0800a06c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08012560 g     F .text	00000014 fclose
0800c8f0 g     F .text	00001688 _dtoa_r
080090d8 g     F .text	0000080c _malloc_r
08012a30 g     F .text	00000030 __ascii_wctomb
0801c718 g     O .rwdata	00000004 alt_errno
10001000 g     O .descriptor_memory	00000020 tx_descriptor
080061a0 g     F .text	000000f0 vTaskDelayUntil
0801e9d0 g     O .bss	00000800 rx_frame
08003a1c g     F .text	000000b8 xAreSemaphoreTasksStillRunning
0800ef78 g     F .text	000000c4 _fwalk
080055d0 g     F .text	000000e4 xQueueReceiveFromISR
0800752c g     F .text	00000028 xTaskGetCurrentTaskHandle
08019c84 g     F .text	000000c8 putc
08008648 g     F .text	00000084 .hidden __divsi3
08004984 g     F .text	000000a8 xQueueGenericCreate
0800e67c g     F .text	00000124 _malloc_trim_r
0801a018 g       *ABS*	00000000 __CTOR_END__
08010bc0 g     F .text	000000dc strcmp
08004c98 g     F .text	00000058 xQueueCreateCountingSemaphore
0801a018 g       *ABS*	00000000 __flash_rodata_start
0801a018 g       *ABS*	00000000 __DTOR_LIST__
0801e8bc g     O .bss	00000004 xCreatedTask
08007da4 g     F .text	000001f0 xTaskGenericNotifyFromISR
080148f8 g     F .text	00000088 .hidden __nedf2
08016f84 g     F .text	00000038 alt_irq_init
08003178 g     F .text	00000084 vStartIntegerMathTasks
08016ce0 g     F .text	00000084 alt_release_fd
08006980 g     F .text	00000164 xTaskResumeAll
08005770 g     F .text	00000054 uxQueueSpacesAvailable
0801a4d4 g     O .rodata	00000100 .hidden __clz_tab
0800687c g     F .text	00000090 vTaskStartScheduler
0801e9ac g     O .bss	00000004 _PathLocale
08019b1c g     F .text	00000014 atexit
0800c4c0 g     F .text	00000060 _write_r
08003ea4 g     F .text	00000028 prvReadGp
0800f20c g     F .text	00000018 setlocale
08005c94 g     F .text	00000050 xQueueIsQueueFullFromISR
0800177c g     F .text	000000ec vStartQueuePeekTasks
0801c6f0 g     O .rwdata	00000004 _impure_ptr
0801e9bc g     O .bss	00000004 alt_argc
0800df78 g     F .text	0000021c __sflush_r
080082fc g     F .text	00000074 xSerialGetChar
08019518 g     F .text	00000060 _do_dtors
0800f1f8 g     F .text	00000008 __locale_cjk_lang
08008930 g     F .text	00000004 _fseek_r
08009d10 g     F .text	000001d4 __srefill_r
08003298 g     F .text	0000007c xAreIntegerMathsTaskStillRunning
08001548 g     F .text	00000098 vStartPolledQueueTasks
080026b0 g     F .text	00000104 vStartCountingSemaphoreTasks
080100b0 g     F .text	00000064 __ulp
08003ad4 g     F .text	00000034 vParTestInitialise
0800e5b8 g     F .text	00000018 __fp_unlock_all
0800724c g     F .text	00000028 vTaskMissedYield
0801c704 g     O .rwdata	00000008 alt_fs_list
08005730 g     F .text	00000040 uxQueueMessagesWaiting
08006b98 g     F .text	000001cc xTaskIncrementTick
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800f224 g     F .text	0000000c localeconv
08016154 g     F .text	00000050 alt_ic_isr_register
08008ee8 g     F .text	00000034 fwrite
08004858 g     F .text	0000012c xQueueGenericReset
0801c734 g       *ABS*	00000000 _edata
08002a70 g     F .text	00000054 vCreateSuicidalTasks
0801898c g     F .text	00000060 altera_avalon_uart_read_fd
0881f3d8 g       *ABS*	00000000 _end
08012574 g     F .text	00000164 __fputwc
08000250 g       *ABS*	00000000 __ram_exceptions_end
080175d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005ce4 g     F .text	000000e8 xTaskCreate
0801e998 g     O .bss	00000004 uartControl
080045e8 g     F .text	00000020 vPortInitialiseBlocks
0801622c g     F .text	0000008c alt_ic_irq_disable
10001020 g     O .descriptor_memory	00000020 tx_descriptor_end
08018210 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
08009f94 g     F .text	0000007c __swrite
0801c6f8 g     O .rwdata	00000004 __malloc_trim_threshold
0800f1ec g     F .text	0000000c __locale_msgcharset
08019b30 g     F .text	00000038 exit
0800f03c g     F .text	000000c4 _fwalk_reent
0800feb4 g     F .text	000001fc __mdiff
080086cc g     F .text	00000074 .hidden __modsi3
08006290 g     F .text	0000005c vTaskDelay
10000000 g       *ABS*	00000000 __alt_data_end
0800e594 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080077bc g     F .text	0000015c vTaskPriorityDisinheritAfterTimeout
0801e814 g     O .bss	00000004 sgdma_rx_dev
0801e8e8 g     O .bss	00000004 xSuspendedTestQueue
08018e10 g     F .text	00000054 altera_avalon_uart_close
08008824 g     F .text	000000f4 _fopen_r
08019fe4 g     F .text	00000034 _exit
08019264 g     F .text	0000012c alt_alarm_start
08008f1c g     F .text	000001bc __smakebuf_r
0800796c g     F .text	00000060 vTaskExitCritical
08002ff4 g     F .text	00000080 xAreDynamicPriorityTasksStillRunning
0800a074 g     F .text	00000098 strlen
08003ecc g     F .text	000000e0 pxPortInitialiseStack
080167dc g     F .text	0000015c open
08014980 g     F .text	000000dc .hidden __gedf2
08016b64 g     F .text	0000003c alt_putchar
0801c700 g     O .rwdata	00000004 __wctomb
08010d98 g     F .text	00000018 __sprint_r
080197d4 g     F .text	00000020 alt_icache_flush_all
080070e4 g     F .text	0000004c vTaskSetTimeOutState
0801c71c g     O .rwdata	00000004 alt_priority_mask
080161a4 g     F .text	00000088 alt_ic_irq_enable
0800c3e8 g     F .text	0000001c __vfprintf_internal
08018ea0 g     F .text	000001dc altera_avalon_uart_read
08012a60 g     F .text	0000005c _wctomb_r
080057c4 g     F .text	00000038 uxQueueMessagesWaitingFromISR
08005bf4 g     F .text	00000048 xQueueIsQueueEmptyFromISR
08017de8 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
080153bc g     F .text	000008fc .hidden __subdf3
080036c0 g     F .text	000001d8 vStartSemaphoreTasks
0800f854 g     F .text	000000b0 __lo0bits
0801c72c g     O .rwdata	00000008 alt_alarm_list
080194b8 g     F .text	00000060 _do_ctors
080079cc g     F .text	00000044 uxTaskResetEventItemValue
08012970 g     F .text	000000c0 wcrtomb
08004b10 g     F .text	0000005c xQueueCreateMutex
08015f5c g     F .text	000000d8 close
08008220 g     F .text	000000b8 xSerialPortInitMinimal
08007f94 g     F .text	0000012c vTaskNotifyGiveFromISR
08016454 g     F .text	00000084 alt_load
080045c8 g     F .text	00000020 xPortGetMinimumEverFreeHeapSize
080187f0 g     F .text	000000a8 alt_avalon_sgdma_init
08004f8c g     F .text	000000dc xQueueGiveFromISR
080126fc g     F .text	00000080 fputwc
0800e598 g     F .text	00000004 __sinit_lock_acquire
0800f5a0 g     F .text	00000148 __multadd
0800f578 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08409414 	ori	at,at,592
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 8000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 8000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 8000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 800002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 8000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 8000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 8000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 800003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 8000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 8000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 8000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 800004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 8000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 800006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 8000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 8000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 8000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 800007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 8000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 8000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 8000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 800008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 8000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 8000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 8000098:	df001c15 	stw	fp,112(sp)

0800009c <save_sp_to_pxCurrentTCB>:
 800009c:	060200b4 	movhi	et,2050

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 80000a0:	c63a5504 	addi	et,et,-5804
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 80000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 80000a8:	c6c00015 	stw	sp,0(et)

080000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 80000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 80000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 80000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 80000b8:	10002526 	beq	r2,zero,8000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 80000bc:	20002426 	beq	r4,zero,8000150 <soft_exceptions>

080000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 80000c0:	800017c0 	call	800017c <alt_irq_handler>

080000c4 <restore_sp_from_pxCurrentTCB>:
 80000c4:	060200b4 	movhi	et,2050

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 80000c8:	c63a5504 	addi	et,et,-5804
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 80000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 80000d0:	c6c00017 	ldw	sp,0(et)

080000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 80000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 80000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 80000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 80000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 80000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 80000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 80000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 80000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 80000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 80000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 80000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 8000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 8000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 8000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 800010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 8000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 8000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 8000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 800011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 8000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 8000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 8000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 800012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 8000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 8000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 8000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 800013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 8000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 8000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 8000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 800014c:	ef80083a 	eret

08000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 8000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 8000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 8000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 800015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 8000160:	c0000226 	beq	et,zero,800016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 8000164:	003da03a 	break	0
  	br		restore_context			# its something else
 8000168:	003fda06 	br	80000d4 <restore_context>

0800016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 800016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 8000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 8000174:	8006d640 	call	8006d64 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 8000178:	003fd206 	br	80000c4 <restore_sp_from_pxCurrentTCB>

0800017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 800017c:	defff904 	addi	sp,sp,-28
 8000180:	dfc00615 	stw	ra,24(sp)
 8000184:	df000515 	stw	fp,20(sp)
 8000188:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800018c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000190:	0005313a 	rdctl	r2,ipending
 8000194:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000198:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800019c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 80001a0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 80001a4:	00800044 	movi	r2,1
 80001a8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 80001ac:	e0fffb17 	ldw	r3,-20(fp)
 80001b0:	e0bffc17 	ldw	r2,-16(fp)
 80001b4:	1884703a 	and	r2,r3,r2
 80001b8:	10001426 	beq	r2,zero,800020c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 80001bc:	008220b4 	movhi	r2,2178
 80001c0:	10bcb604 	addi	r2,r2,-3368
 80001c4:	e0fffd17 	ldw	r3,-12(fp)
 80001c8:	180690fa 	slli	r3,r3,3
 80001cc:	10c5883a 	add	r2,r2,r3
 80001d0:	10c00017 	ldw	r3,0(r2)
 80001d4:	008220b4 	movhi	r2,2178
 80001d8:	10bcb604 	addi	r2,r2,-3368
 80001dc:	e13ffd17 	ldw	r4,-12(fp)
 80001e0:	200890fa 	slli	r4,r4,3
 80001e4:	1105883a 	add	r2,r2,r4
 80001e8:	10800104 	addi	r2,r2,4
 80001ec:	10800017 	ldw	r2,0(r2)
 80001f0:	1009883a 	mov	r4,r2
 80001f4:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 80001f8:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 80001fc:	0005313a 	rdctl	r2,ipending
 8000200:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000204:	e0bfff17 	ldw	r2,-4(fp)
 8000208:	00000706 	br	8000228 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800020c:	e0bffc17 	ldw	r2,-16(fp)
 8000210:	1085883a 	add	r2,r2,r2
 8000214:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000218:	e0bffd17 	ldw	r2,-12(fp)
 800021c:	10800044 	addi	r2,r2,1
 8000220:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000224:	003fe106 	br	80001ac <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 8000228:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800022c:	e0bffb17 	ldw	r2,-20(fp)
 8000230:	103fdb1e 	bne	r2,zero,80001a0 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000234:	0001883a 	nop
}
 8000238:	0001883a 	nop
 800023c:	e037883a 	mov	sp,fp
 8000240:	dfc00117 	ldw	ra,4(sp)
 8000244:	df000017 	ldw	fp,0(sp)
 8000248:	dec00204 	addi	sp,sp,8
 800024c:	f800283a 	ret

Disassembly of section .text:

08000250 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000250:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000258:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800025c:	d691b814 	ori	gp,gp,18144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000260:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000264:	10ba0214 	ori	r2,r2,59400

    movhi r3, %hi(__bss_end)
 8000268:	00c22074 	movhi	r3,2177
    ori r3, r3, %lo(__bss_end)
 800026c:	18fcf614 	ori	r3,r3,62424

    beq r2, r3, 1f
 8000270:	10c00326 	beq	r2,r3,8000280 <_start+0x30>

0:
    stw zero, (r2)
 8000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800027c:	10fffd36 	bltu	r2,r3,8000274 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000280:	80164540 	call	8016454 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000284:	80165f00 	call	80165f0 <alt_main>

08000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000288:	003fff06 	br	8000288 <alt_after_alt_main>

0800028c <main>:

//=====================================================================================================================
// Main Function
//=====================================================================================================================
int main()
{
 800028c:	defffc04 	addi	sp,sp,-16
 8000290:	dfc00315 	stw	ra,12(sp)
 8000294:	df000215 	stw	fp,8(sp)
 8000298:	df000204 	addi	fp,sp,8
	// Configure any hardware required for this demo.
	vParTestInitialise();
 800029c:	8003ad40 	call	8003ad4 <vParTestInitialise>

	// Initialize the MAC hardware
	xNetworkInterfaceInitialise();
 80002a0:	80003dc0 	call	80003dc <xNetworkInterfaceInitialise>

	printf("Hello from Nios II!\n");
 80002a4:	010200b4 	movhi	r4,2050
 80002a8:	21280604 	addi	r4,r4,-24552
 80002ac:	8009ce00 	call	8009ce0 <puts>

	// prvPrintTask1 uses sprintf so requires more stack.
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
 80002b0:	d8000115 	stw	zero,4(sp)
 80002b4:	00800044 	movi	r2,1
 80002b8:	d8800015 	stw	r2,0(sp)
 80002bc:	000f883a 	mov	r7,zero
 80002c0:	01810004 	movi	r6,1024
 80002c4:	014200b4 	movhi	r5,2050
 80002c8:	29680b04 	addi	r5,r5,-24532
 80002cc:	01020034 	movhi	r4,2048
 80002d0:	2100cc04 	addi	r4,r4,816
 80002d4:	8005ce40 	call	8005ce4 <xTaskCreate>

	// prvPrintTask2 uses sprintf so requires more stack.
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );
 80002d8:	d8000115 	stw	zero,4(sp)
 80002dc:	00800084 	movi	r2,2
 80002e0:	d8800015 	stw	r2,0(sp)
 80002e4:	000f883a 	mov	r7,zero
 80002e8:	01810004 	movi	r6,1024
 80002ec:	014200b4 	movhi	r5,2050
 80002f0:	29680d04 	addi	r5,r5,-24524
 80002f4:	01020034 	movhi	r4,2048
 80002f8:	2100ea04 	addi	r4,r4,936
 80002fc:	8005ce40 	call	8005ce4 <xTaskCreate>

	// prvPrintTask2 uses sprintf so requires more stack.
	xTaskCreate( prvEMACHandlerTask, "interrupt", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8000300:	d8000115 	stw	zero,4(sp)
 8000304:	00800044 	movi	r2,1
 8000308:	d8800015 	stw	r2,0(sp)
 800030c:	000f883a 	mov	r7,zero
 8000310:	01810004 	movi	r6,1024
 8000314:	014200b4 	movhi	r5,2050
 8000318:	29680f04 	addi	r5,r5,-24516
 800031c:	01020034 	movhi	r4,2048
 8000320:	21019b04 	addi	r4,r4,1644
 8000324:	8005ce40 	call	8005ce4 <xTaskCreate>

    // Finally start the scheduler
	vTaskStartScheduler();
 8000328:	800687c0 	call	800687c <vTaskStartScheduler>

	// Will only reach here if there is insufficient heap available to start the scheduler.
	for( ;; );
 800032c:	003fff06 	br	800032c <main+0xa0>

08000330 <prvPrintTask1>:

//=====================================================================================================================
// Tasks Functions
//=====================================================================================================================
static void prvPrintTask1( void *pvParameters )
{
 8000330:	defffc04 	addi	sp,sp,-16
 8000334:	dfc00315 	stw	ra,12(sp)
 8000338:	df000215 	stw	fp,8(sp)
 800033c:	df000204 	addi	fp,sp,8
 8000340:	e13fff15 	stw	r4,-4(fp)
	FILE* stream_UART;
	stream_UART = fopen ("/dev/uart", "w");
 8000344:	014200b4 	movhi	r5,2050
 8000348:	29681204 	addi	r5,r5,-24504
 800034c:	010200b4 	movhi	r4,2050
 8000350:	21281304 	addi	r4,r4,-24500
 8000354:	80089180 	call	8008918 <fopen>
 8000358:	e0bffe15 	stw	r2,-8(fp)
	if (stream_UART == NULL)
 800035c:	e0bffe17 	ldw	r2,-8(fp)
 8000360:	1000031e 	bne	r2,zero,8000370 <prvPrintTask1+0x40>
	{
		printf("Nao foi criada stream UART");
 8000364:	010200b4 	movhi	r4,2050
 8000368:	21281604 	addi	r4,r4,-24488
 800036c:	8009be40 	call	8009be4 <printf>
	}
	for( ;; )
	{
		// Wait until it is time to run the tests again.
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
 8000370:	01007d04 	movi	r4,500
 8000374:	80062900 	call	8006290 <vTaskDelay>

        // Print out an message
        printf( "NIOS II Task1 from jtag\r\n" );
 8000378:	010200b4 	movhi	r4,2050
 800037c:	21281d04 	addi	r4,r4,-24460
 8000380:	8009ce00 	call	8009ce0 <puts>
        fprintf(stream_UART, "NIOS II Task1 from uart\r\n ");
 8000384:	e1fffe17 	ldw	r7,-8(fp)
 8000388:	01800684 	movi	r6,26
 800038c:	01400044 	movi	r5,1
 8000390:	010200b4 	movhi	r4,2050
 8000394:	21282404 	addi	r4,r4,-24432
 8000398:	8008ee80 	call	8008ee8 <fwrite>

        // Control LED 1 DE0-NANO
        vParTestToggleLED(1);
 800039c:	01000044 	movi	r4,1
 80003a0:	8003ba80 	call	8003ba8 <vParTestToggleLED>
	}
 80003a4:	003ff206 	br	8000370 <prvPrintTask1+0x40>

080003a8 <prvPrintTask2>:
}

static void prvPrintTask2( void *pvParameters )
{
 80003a8:	defffd04 	addi	sp,sp,-12
 80003ac:	dfc00215 	stw	ra,8(sp)
 80003b0:	df000115 	stw	fp,4(sp)
 80003b4:	df000104 	addi	fp,sp,4
 80003b8:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);
 80003bc:	0100fa04 	movi	r4,1000
 80003c0:	80062900 	call	8006290 <vTaskDelay>

        /* Print out an message */
        printf( "NIOS II Task2\r\n" );
 80003c4:	010200b4 	movhi	r4,2050
 80003c8:	21282b04 	addi	r4,r4,-24404
 80003cc:	8009ce00 	call	8009ce0 <puts>

        //Control LED 2 DE0-NANO
        vParTestToggleLED(2);
 80003d0:	01000084 	movi	r4,2
 80003d4:	8003ba80 	call	8003ba8 <vParTestToggleLED>
	}
 80003d8:	003ff806 	br	80003bc <prvPrintTask2+0x14>

080003dc <xNetworkInterfaceInitialise>:

//=====================================================================================================================
// Functions
//=====================================================================================================================
BaseType_t xNetworkInterfaceInitialise( void )
{
 80003dc:	defffc04 	addi	sp,sp,-16
 80003e0:	dfc00315 	stw	ra,12(sp)
 80003e4:	df000215 	stw	fp,8(sp)
 80003e8:	df000204 	addi	fp,sp,8

	// Configura SGDMA
	//===================================================================================================================================
	// Open the sgdma transmit device
	//----------------------------------------------------------------------------------------
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
 80003ec:	010200b4 	movhi	r4,2050
 80003f0:	21282f04 	addi	r4,r4,-24388
 80003f4:	80181bc0 	call	80181bc <alt_avalon_sgdma_open>
 80003f8:	d0a84b15 	stw	r2,-24276(gp)

	if (sgdma_tx_dev == NULL) {
 80003fc:	d0a84b17 	ldw	r2,-24276(gp)
 8000400:	1000051e 	bne	r2,zero,8000418 <xNetworkInterfaceInitialise+0x3c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
 8000404:	010200b4 	movhi	r4,2050
 8000408:	21283304 	addi	r4,r4,-24372
 800040c:	80169380 	call	8016938 <alt_printf>
		return pdFAIL;
 8000410:	0005883a 	mov	r2,zero
 8000414:	00006e06 	br	80005d0 <xNetworkInterfaceInitialise+0x1f4>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
 8000418:	010200b4 	movhi	r4,2050
 800041c:	21284204 	addi	r4,r4,-24312
 8000420:	80169380 	call	8016938 <alt_printf>

	// Open the sgdma receive device
	//----------------------------------------------------------------------------------------
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
 8000424:	010200b4 	movhi	r4,2050
 8000428:	21284d04 	addi	r4,r4,-24268
 800042c:	80181bc0 	call	80181bc <alt_avalon_sgdma_open>
 8000430:	d0a84d15 	stw	r2,-24268(gp)

	if (sgdma_rx_dev == NULL) {
 8000434:	d0a84d17 	ldw	r2,-24268(gp)
 8000438:	1000051e 	bne	r2,zero,8000450 <xNetworkInterfaceInitialise+0x74>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
 800043c:	010200b4 	movhi	r4,2050
 8000440:	21285104 	addi	r4,r4,-24252
 8000444:	80169380 	call	8016938 <alt_printf>
		return pdFAIL;
 8000448:	0005883a 	mov	r2,zero
 800044c:	00006006 	br	80005d0 <xNetworkInterfaceInitialise+0x1f4>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
 8000450:	010200b4 	movhi	r4,2050
 8000454:	21286004 	addi	r4,r4,-24192
 8000458:	80169380 	call	8016938 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
 800045c:	d0a84d17 	ldw	r2,-24268(gp)
 8000460:	000f883a 	mov	r7,zero
 8000464:	01800504 	movi	r6,20
 8000468:	01420034 	movhi	r5,2048
 800046c:	29417904 	addi	r5,r5,1508
 8000470:	1009883a 	mov	r4,r2
 8000474:	80180500 	call	8018050 <alt_avalon_sgdma_register_callback>

	// Create new receive sgdma descriptor
	//===================================================================================================================================
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
 8000478:	d8000015 	stw	zero,0(sp)
 800047c:	000f883a 	mov	r7,zero
 8000480:	018200b4 	movhi	r6,2050
 8000484:	31ba7404 	addi	r6,r6,-5680
 8000488:	01440034 	movhi	r5,4096
 800048c:	29441804 	addi	r5,r5,4192
 8000490:	01040034 	movhi	r4,4096
 8000494:	21041004 	addi	r4,r4,4160
 8000498:	8017e6c0 	call	8017e6c <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up of sgdma receive descriptor
	//===================================================================================================================================
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
 800049c:	d0a84d17 	ldw	r2,-24268(gp)
 80004a0:	01440034 	movhi	r5,4096
 80004a4:	29441004 	addi	r5,r5,4160
 80004a8:	1009883a 	mov	r4,r2
 80004ac:	8017b400 	call	8017b40 <alt_avalon_sgdma_do_async_transfer>

	// Configura Triple Speed Ethernet
	//===================================================================================================================================
	// Triple-speed Ethernet MegaCore base address
	volatile int *tse = (int *) TSE_BASE;
 80004b0:	00840034 	movhi	r2,4096
 80004b4:	10900004 	addi	r2,r2,16384
 80004b8:	e0bfff15 	stw	r2,-4(fp)

	// Initialize the MAC address
	//----------------------------------------------------------------------------------------
	*(tse + 3) = 0x116E6001;
 80004bc:	e0bfff17 	ldw	r2,-4(fp)
 80004c0:	10c00304 	addi	r3,r2,12
 80004c4:	00845bb4 	movhi	r2,4462
 80004c8:	10980044 	addi	r2,r2,24577
 80004cc:	18800015 	stw	r2,0(r3)
	*(tse + 4) = 0x00000F02;
 80004d0:	e0bfff17 	ldw	r2,-4(fp)
 80004d4:	10800404 	addi	r2,r2,16
 80004d8:	00c3c084 	movi	r3,3842
 80004dc:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	//----------------------------------------------------------------------------------------
	*(tse + 0x0F) = 0x10;
 80004e0:	e0bfff17 	ldw	r2,-4(fp)
 80004e4:	10800f04 	addi	r2,r2,60
 80004e8:	00c00404 	movi	r3,16
 80004ec:	10c00015 	stw	r3,0(r2)
	*(tse + 0x10) = 0x11;
 80004f0:	e0bfff17 	ldw	r2,-4(fp)
 80004f4:	10801004 	addi	r2,r2,64
 80004f8:	00c00444 	movi	r3,17
 80004fc:	10c00015 	stw	r3,0(r2)

	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	//----------------------------------------------------------------------------------------
	*(tse + 0x94) = 0x4000;
 8000500:	e0bfff17 	ldw	r2,-4(fp)
 8000504:	10809404 	addi	r2,r2,592
 8000508:	00d00004 	movi	r3,16384
 800050c:	10c00015 	stw	r3,0(r2)

	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	//----------------------------------------------------------------------------------------
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
 8000510:	e0bfff17 	ldw	r2,-4(fp)
 8000514:	1080b004 	addi	r2,r2,704
 8000518:	e0ffff17 	ldw	r3,-4(fp)
 800051c:	18c0b004 	addi	r3,r3,704
 8000520:	18c00017 	ldw	r3,0(r3)
 8000524:	18c01814 	ori	r3,r3,96
 8000528:	10c00015 	stw	r3,0(r2)

	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	//----------------------------------------------------------------------------------------
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
 800052c:	e0bfff17 	ldw	r2,-4(fp)
 8000530:	1080b404 	addi	r2,r2,720
 8000534:	e0ffff17 	ldw	r3,-4(fp)
 8000538:	18c0b404 	addi	r3,r3,720
 800053c:	18c00017 	ldw	r3,0(r3)
 8000540:	18c02094 	ori	r3,r3,130
 8000544:	10c00015 	stw	r3,0(r2)

	// Software reset the second PHY chip and wait
	//----------------------------------------------------------------------------------------
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
 8000548:	e0bfff17 	ldw	r2,-4(fp)
 800054c:	1080a004 	addi	r2,r2,640
 8000550:	e0ffff17 	ldw	r3,-4(fp)
 8000554:	18c0a004 	addi	r3,r3,640
 8000558:	18c00017 	ldw	r3,0(r3)
 800055c:	18e00014 	ori	r3,r3,32768
 8000560:	10c00015 	stw	r3,0(r2)
	while ( *(tse + 0xA0) & 0x8000  );
 8000564:	0001883a 	nop
 8000568:	e0bfff17 	ldw	r2,-4(fp)
 800056c:	1080a004 	addi	r2,r2,640
 8000570:	10800017 	ldw	r2,0(r2)
 8000574:	10a0000c 	andi	r2,r2,32768
 8000578:	103ffb1e 	bne	r2,zero,8000568 <xNetworkInterfaceInitialise+0x18c>

	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	//----------------------------------------------------------------------------------------
	*(tse + 2) = *(tse + 2) | 0x0000004B;
 800057c:	e0bfff17 	ldw	r2,-4(fp)
 8000580:	10800204 	addi	r2,r2,8
 8000584:	e0ffff17 	ldw	r3,-4(fp)
 8000588:	18c00204 	addi	r3,r3,8
 800058c:	18c00017 	ldw	r3,0(r3)
 8000590:	18c012d4 	ori	r3,r3,75
 8000594:	10c00015 	stw	r3,0(r2)


	vSemaphoreCreateBinary( xEMACRxEventSemaphore );
 8000598:	018000c4 	movi	r6,3
 800059c:	000b883a 	mov	r5,zero
 80005a0:	01000044 	movi	r4,1
 80005a4:	80049840 	call	8004984 <xQueueGenericCreate>
 80005a8:	d0a84a15 	stw	r2,-24280(gp)
 80005ac:	d0a84a17 	ldw	r2,-24280(gp)
 80005b0:	10000626 	beq	r2,zero,80005cc <xNetworkInterfaceInitialise+0x1f0>
 80005b4:	d0a84a17 	ldw	r2,-24280(gp)
 80005b8:	000f883a 	mov	r7,zero
 80005bc:	000d883a 	mov	r6,zero
 80005c0:	000b883a 	mov	r5,zero
 80005c4:	1009883a 	mov	r4,r2
 80005c8:	8004cf00 	call	8004cf0 <xQueueGenericSend>

	return pdPASS;
 80005cc:	00800044 	movi	r2,1
}
 80005d0:	e037883a 	mov	sp,fp
 80005d4:	dfc00117 	ldw	ra,4(sp)
 80005d8:	df000017 	ldw	fp,0(sp)
 80005dc:	dec00204 	addi	sp,sp,8
 80005e0:	f800283a 	ret

080005e4 <rx_ethernet_isr>:

//=====================================================================================================================
// Subroutine to read incoming Ethernet frames
//=====================================================================================================================
void rx_ethernet_isr (void *context)
{
 80005e4:	defffc04 	addi	sp,sp,-16
 80005e8:	dfc00315 	stw	ra,12(sp)
 80005ec:	df000215 	stw	fp,8(sp)
 80005f0:	df000204 	addi	fp,sp,8
 80005f4:	e13fff15 	stw	r4,-4(fp)
	// Wait until receive descriptor transfer is complet
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
 80005f8:	0001883a 	nop
 80005fc:	01040034 	movhi	r4,4096
 8000600:	21041004 	addi	r4,r4,4160
 8000604:	80181580 	call	8018158 <alt_avalon_sgdma_check_descriptor_status>
 8000608:	103ffc1e 	bne	r2,zero,80005fc <rx_ethernet_isr+0x18>

	xSemaphoreGiveFromISR( xEMACRxEventSemaphore, NULL );
 800060c:	d0a84a17 	ldw	r2,-24280(gp)
 8000610:	000b883a 	mov	r5,zero
 8000614:	1009883a 	mov	r4,r2
 8000618:	8004f8c0 	call	8004f8c <xQueueGiveFromISR>


	// Create new receive sgdma descriptor
	//===================================================================================================================================
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
 800061c:	d8000015 	stw	zero,0(sp)
 8000620:	000f883a 	mov	r7,zero
 8000624:	018200b4 	movhi	r6,2050
 8000628:	31ba7404 	addi	r6,r6,-5680
 800062c:	01440034 	movhi	r5,4096
 8000630:	29441804 	addi	r5,r5,4192
 8000634:	01040034 	movhi	r4,4096
 8000638:	21041004 	addi	r4,r4,4160
 800063c:	8017e6c0 	call	8017e6c <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up of sgdma receive descriptor
	//===================================================================================================================================
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
 8000640:	d0a84d17 	ldw	r2,-24268(gp)
 8000644:	01440034 	movhi	r5,4096
 8000648:	29441004 	addi	r5,r5,4160
 800064c:	1009883a 	mov	r4,r2
 8000650:	8017b400 	call	8017b40 <alt_avalon_sgdma_do_async_transfer>
}
 8000654:	0001883a 	nop
 8000658:	e037883a 	mov	sp,fp
 800065c:	dfc00117 	ldw	ra,4(sp)
 8000660:	df000017 	ldw	fp,0(sp)
 8000664:	dec00204 	addi	sp,sp,8
 8000668:	f800283a 	ret

0800066c <prvEMACHandlerTask>:

static void prvEMACHandlerTask( void *pvParameters )
{
 800066c:	defffc04 	addi	sp,sp,-16
 8000670:	dfc00315 	stw	ra,12(sp)
 8000674:	df000215 	stw	fp,8(sp)
 8000678:	df000204 	addi	fp,sp,8
 800067c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 valor = 0;
 8000680:	e03ffe0d 	sth	zero,-8(fp)
	while(1)
	{
		if (xSemaphoreTake( xEMACRxEventSemaphore, portMAX_DELAY ))
 8000684:	d0a84a17 	ldw	r2,-24280(gp)
 8000688:	017fffc4 	movi	r5,-1
 800068c:	1009883a 	mov	r4,r2
 8000690:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8000694:	103ffb26 	beq	r2,zero,8000684 <prvEMACHandlerTask+0x18>
		{
			// Teste para novo received frame
			alt_printf( "receive> %s \n", rx_frame+295 );
 8000698:	008200b4 	movhi	r2,2050
 800069c:	10babdc4 	addi	r2,r2,-5385
 80006a0:	100b883a 	mov	r5,r2
 80006a4:	010200b4 	movhi	r4,2050
 80006a8:	21286b04 	addi	r4,r4,-24148
 80006ac:	80169380 	call	8016938 <alt_printf>

			// Reprint current input line after the output
			alt_printf( "\nsend> \n");
 80006b0:	010200b4 	movhi	r4,2050
 80006b4:	21286f04 	addi	r4,r4,-24132
 80006b8:	80169380 	call	8016938 <alt_printf>
		}
	}
 80006bc:	003ff106 	br	8000684 <prvEMACHandlerTask+0x18>

080006c0 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
 80006c0:	defff104 	addi	sp,sp,-60
 80006c4:	dfc00e15 	stw	ra,56(sp)
 80006c8:	df000d15 	stw	fp,52(sp)
 80006cc:	df000d04 	addi	fp,sp,52
 80006d0:	e13fff15 	stw	r4,-4(fp)
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
 80006d4:	00800044 	movi	r2,1
 80006d8:	e0bff515 	stw	r2,-44(fp)
 80006dc:	00800144 	movi	r2,5
 80006e0:	e0bff615 	stw	r2,-40(fp)
const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 80006e4:	0080fa04 	movi	r2,1000
 80006e8:	e0bff715 	stw	r2,-36(fp)
const TickType_t xDontBlock = ( TickType_t ) 0;
 80006ec:	e03ff815 	stw	zero,-32(fp)

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80006f0:	01000304 	movi	r4,12
 80006f4:	800433c0 	call	800433c <pvPortMalloc>
 80006f8:	e0bff915 	stw	r2,-28(fp)

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 80006fc:	000d883a 	mov	r6,zero
 8000700:	01400084 	movi	r5,2
 8000704:	e13ff517 	ldw	r4,-44(fp)
 8000708:	80049840 	call	8004984 <xQueueGenericCreate>
 800070c:	1007883a 	mov	r3,r2
 8000710:	e0bff917 	ldw	r2,-28(fp)
 8000714:	10c00015 	stw	r3,0(r2)

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 8000718:	e0bff917 	ldw	r2,-28(fp)
 800071c:	e0fff717 	ldw	r3,-36(fp)
 8000720:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 8000724:	e0bff917 	ldw	r2,-28(fp)
 8000728:	d0e84e04 	addi	r3,gp,-24264
 800072c:	10c00215 	stw	r3,8(r2)

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000730:	01000304 	movi	r4,12
 8000734:	800433c0 	call	800433c <pvPortMalloc>
 8000738:	e0bffa15 	stw	r2,-24(fp)

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 800073c:	e0bff917 	ldw	r2,-28(fp)
 8000740:	10c00017 	ldw	r3,0(r2)
 8000744:	e0bffa17 	ldw	r2,-24(fp)
 8000748:	10c00015 	stw	r3,0(r2)

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 800074c:	e0bffa17 	ldw	r2,-24(fp)
 8000750:	e0fff817 	ldw	r3,-32(fp)
 8000754:	10c00115 	stw	r3,4(r2)

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 8000758:	e0bffa17 	ldw	r2,-24(fp)
 800075c:	d0e84f84 	addi	r3,gp,-24258
 8000760:	10c00215 	stw	r3,8(r2)


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 8000764:	d8000115 	stw	zero,4(sp)
 8000768:	e0bfff17 	ldw	r2,-4(fp)
 800076c:	d8800015 	stw	r2,0(sp)
 8000770:	e1fff917 	ldw	r7,-28(fp)
 8000774:	01810004 	movi	r6,1024
 8000778:	014200b4 	movhi	r5,2050
 800077c:	29687204 	addi	r5,r5,-24120
 8000780:	01020034 	movhi	r4,2048
 8000784:	21027404 	addi	r4,r4,2512
 8000788:	8005ce40 	call	8005ce4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 800078c:	d8000115 	stw	zero,4(sp)
 8000790:	d8000015 	stw	zero,0(sp)
 8000794:	e1fffa17 	ldw	r7,-24(fp)
 8000798:	01810004 	movi	r6,1024
 800079c:	014200b4 	movhi	r5,2050
 80007a0:	29687404 	addi	r5,r5,-24112
 80007a4:	01020034 	movhi	r4,2048
 80007a8:	21025104 	addi	r4,r4,2372
 80007ac:	8005ce40 	call	8005ce4 <xTaskCreate>


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80007b0:	01000304 	movi	r4,12
 80007b4:	800433c0 	call	800433c <pvPortMalloc>
 80007b8:	e0bffb15 	stw	r2,-20(fp)
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 80007bc:	000d883a 	mov	r6,zero
 80007c0:	01400084 	movi	r5,2
 80007c4:	e13ff517 	ldw	r4,-44(fp)
 80007c8:	80049840 	call	8004984 <xQueueGenericCreate>
 80007cc:	1007883a 	mov	r3,r2
 80007d0:	e0bffb17 	ldw	r2,-20(fp)
 80007d4:	10c00015 	stw	r3,0(r2)
	pxQueueParameters3->xBlockTime = xDontBlock;
 80007d8:	e0bffb17 	ldw	r2,-20(fp)
 80007dc:	e0fff817 	ldw	r3,-32(fp)
 80007e0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 80007e4:	e0bffb17 	ldw	r2,-20(fp)
 80007e8:	d0e85004 	addi	r3,gp,-24256
 80007ec:	10c00215 	stw	r3,8(r2)

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80007f0:	01000304 	movi	r4,12
 80007f4:	800433c0 	call	800433c <pvPortMalloc>
 80007f8:	e0bffc15 	stw	r2,-16(fp)
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 80007fc:	e0bffb17 	ldw	r2,-20(fp)
 8000800:	10c00017 	ldw	r3,0(r2)
 8000804:	e0bffc17 	ldw	r2,-16(fp)
 8000808:	10c00015 	stw	r3,0(r2)
	pxQueueParameters4->xBlockTime = xBlockTime;
 800080c:	e0bffc17 	ldw	r2,-16(fp)
 8000810:	e0fff717 	ldw	r3,-36(fp)
 8000814:	10c00115 	stw	r3,4(r2)
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 8000818:	e0bffc17 	ldw	r2,-16(fp)
 800081c:	d0e84e84 	addi	r3,gp,-24262
 8000820:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 8000824:	d8000115 	stw	zero,4(sp)
 8000828:	d8000015 	stw	zero,0(sp)
 800082c:	e1fffb17 	ldw	r7,-20(fp)
 8000830:	01810004 	movi	r6,1024
 8000834:	014200b4 	movhi	r5,2050
 8000838:	29687604 	addi	r5,r5,-24104
 800083c:	01020034 	movhi	r4,2048
 8000840:	21027404 	addi	r4,r4,2512
 8000844:	8005ce40 	call	8005ce4 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 8000848:	d8000115 	stw	zero,4(sp)
 800084c:	e0bfff17 	ldw	r2,-4(fp)
 8000850:	d8800015 	stw	r2,0(sp)
 8000854:	e1fffc17 	ldw	r7,-16(fp)
 8000858:	01810004 	movi	r6,1024
 800085c:	014200b4 	movhi	r5,2050
 8000860:	29687804 	addi	r5,r5,-24096
 8000864:	01020034 	movhi	r4,2048
 8000868:	21025104 	addi	r4,r4,2372
 800086c:	8005ce40 	call	8005ce4 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000870:	01000304 	movi	r4,12
 8000874:	800433c0 	call	800433c <pvPortMalloc>
 8000878:	e0bffd15 	stw	r2,-12(fp)
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 800087c:	000d883a 	mov	r6,zero
 8000880:	01400084 	movi	r5,2
 8000884:	e13ff617 	ldw	r4,-40(fp)
 8000888:	80049840 	call	8004984 <xQueueGenericCreate>
 800088c:	1007883a 	mov	r3,r2
 8000890:	e0bffd17 	ldw	r2,-12(fp)
 8000894:	10c00015 	stw	r3,0(r2)
	pxQueueParameters5->xBlockTime = xBlockTime;
 8000898:	e0bffd17 	ldw	r2,-12(fp)
 800089c:	e0fff717 	ldw	r3,-36(fp)
 80008a0:	10c00115 	stw	r3,4(r2)
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 80008a4:	e0bffd17 	ldw	r2,-12(fp)
 80008a8:	d0e85084 	addi	r3,gp,-24254
 80008ac:	10c00215 	stw	r3,8(r2)

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 80008b0:	01000304 	movi	r4,12
 80008b4:	800433c0 	call	800433c <pvPortMalloc>
 80008b8:	e0bffe15 	stw	r2,-8(fp)
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 80008bc:	e0bffd17 	ldw	r2,-12(fp)
 80008c0:	10c00017 	ldw	r3,0(r2)
 80008c4:	e0bffe17 	ldw	r2,-8(fp)
 80008c8:	10c00015 	stw	r3,0(r2)
	pxQueueParameters6->xBlockTime = xBlockTime;
 80008cc:	e0bffe17 	ldw	r2,-8(fp)
 80008d0:	e0fff717 	ldw	r3,-36(fp)
 80008d4:	10c00115 	stw	r3,4(r2)
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 80008d8:	e0bffe17 	ldw	r2,-8(fp)
 80008dc:	d0e84f04 	addi	r3,gp,-24260
 80008e0:	10c00215 	stw	r3,8(r2)

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 80008e4:	d8000115 	stw	zero,4(sp)
 80008e8:	d8000015 	stw	zero,0(sp)
 80008ec:	e1fffd17 	ldw	r7,-12(fp)
 80008f0:	01810004 	movi	r6,1024
 80008f4:	014200b4 	movhi	r5,2050
 80008f8:	29687a04 	addi	r5,r5,-24088
 80008fc:	01020034 	movhi	r4,2048
 8000900:	21025104 	addi	r4,r4,2372
 8000904:	8005ce40 	call	8005ce4 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 8000908:	d8000115 	stw	zero,4(sp)
 800090c:	d8000015 	stw	zero,0(sp)
 8000910:	e1fffe17 	ldw	r7,-8(fp)
 8000914:	01810004 	movi	r6,1024
 8000918:	014200b4 	movhi	r5,2050
 800091c:	29687c04 	addi	r5,r5,-24080
 8000920:	01020034 	movhi	r4,2048
 8000924:	21027404 	addi	r4,r4,2512
 8000928:	8005ce40 	call	8005ce4 <xTaskCreate>
}
 800092c:	0001883a 	nop
 8000930:	e037883a 	mov	sp,fp
 8000934:	dfc00117 	ldw	ra,4(sp)
 8000938:	df000017 	ldw	fp,0(sp)
 800093c:	dec00204 	addi	sp,sp,8
 8000940:	f800283a 	ret

08000944 <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
 8000944:	defffa04 	addi	sp,sp,-24
 8000948:	dfc00515 	stw	ra,20(sp)
 800094c:	df000415 	stw	fp,16(sp)
 8000950:	df000404 	addi	fp,sp,16
 8000954:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = 0;
 8000958:	e03ffe0d 	sth	zero,-8(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 800095c:	e03ffc0d 	sth	zero,-16(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 8000960:	e0bfff17 	ldw	r2,-4(fp)
 8000964:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8000968:	e0bffd17 	ldw	r2,-12(fp)
 800096c:	10c00017 	ldw	r3,0(r2)
 8000970:	e0bffd17 	ldw	r2,-12(fp)
 8000974:	11000117 	ldw	r4,4(r2)
 8000978:	e0bffe04 	addi	r2,fp,-8
 800097c:	000f883a 	mov	r7,zero
 8000980:	200d883a 	mov	r6,r4
 8000984:	100b883a 	mov	r5,r2
 8000988:	1809883a 	mov	r4,r3
 800098c:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000990:	10800060 	cmpeqi	r2,r2,1
 8000994:	1000031e 	bne	r2,zero,80009a4 <vBlockingQueueProducer+0x60>
		{
			sErrorEverOccurred = pdTRUE;
 8000998:	00800044 	movi	r2,1
 800099c:	e0bffc0d 	sth	r2,-16(fp)
 80009a0:	003ff106 	br	8000968 <vBlockingQueueProducer+0x24>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 80009a4:	e0bffc0f 	ldh	r2,-16(fp)
 80009a8:	1000051e 	bne	r2,zero,80009c0 <vBlockingQueueProducer+0x7c>
			{
				( *pxQueueParameters->psCheckVariable )++;
 80009ac:	e0bffd17 	ldw	r2,-12(fp)
 80009b0:	10800217 	ldw	r2,8(r2)
 80009b4:	10c0000b 	ldhu	r3,0(r2)
 80009b8:	18c00044 	addi	r3,r3,1
 80009bc:	10c0000d 	sth	r3,0(r2)
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 80009c0:	e0bffe0b 	ldhu	r2,-8(fp)
 80009c4:	10800044 	addi	r2,r2,1
 80009c8:	e0bffe0d 	sth	r2,-8(fp)

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
 80009cc:	003fe606 	br	8000968 <vBlockingQueueProducer+0x24>

080009d0 <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
 80009d0:	defffa04 	addi	sp,sp,-24
 80009d4:	dfc00515 	stw	ra,20(sp)
 80009d8:	df000415 	stw	fp,16(sp)
 80009dc:	df000404 	addi	fp,sp,16
 80009e0:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = 0;
 80009e4:	e03ffc0d 	sth	zero,-16(fp)
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
 80009e8:	e03ffc8d 	sth	zero,-14(fp)

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 80009ec:	e0bfff17 	ldw	r2,-4(fp)
 80009f0:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 80009f4:	e0bffd17 	ldw	r2,-12(fp)
 80009f8:	10c00017 	ldw	r3,0(r2)
 80009fc:	e0bffd17 	ldw	r2,-12(fp)
 8000a00:	11000117 	ldw	r4,4(r2)
 8000a04:	e0bffe04 	addi	r2,fp,-8
 8000a08:	200d883a 	mov	r6,r4
 8000a0c:	100b883a 	mov	r5,r2
 8000a10:	1809883a 	mov	r4,r3
 8000a14:	80050680 	call	8005068 <xQueueReceive>
 8000a18:	10800058 	cmpnei	r2,r2,1
 8000a1c:	103ff51e 	bne	r2,zero,80009f4 <vBlockingQueueConsumer+0x24>
		{
			if( usData != usExpectedValue )
 8000a20:	e0bffe0b 	ldhu	r2,-8(fp)
 8000a24:	10ffffcc 	andi	r3,r2,65535
 8000a28:	e0bffc0b 	ldhu	r2,-16(fp)
 8000a2c:	18800526 	beq	r3,r2,8000a44 <vBlockingQueueConsumer+0x74>
			{
				/* Catch-up. */
				usExpectedValue = usData;
 8000a30:	e0bffe0b 	ldhu	r2,-8(fp)
 8000a34:	e0bffc0d 	sth	r2,-16(fp)

				sErrorEverOccurred = pdTRUE;
 8000a38:	00800044 	movi	r2,1
 8000a3c:	e0bffc8d 	sth	r2,-14(fp)
 8000a40:	003fec06 	br	80009f4 <vBlockingQueueConsumer+0x24>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
 8000a44:	e0bffc8f 	ldh	r2,-14(fp)
 8000a48:	1000051e 	bne	r2,zero,8000a60 <vBlockingQueueConsumer+0x90>
				{
					( *pxQueueParameters->psCheckVariable )++;
 8000a4c:	e0bffd17 	ldw	r2,-12(fp)
 8000a50:	10800217 	ldw	r2,8(r2)
 8000a54:	10c0000b 	ldhu	r3,0(r2)
 8000a58:	18c00044 	addi	r3,r3,1
 8000a5c:	10c0000d 	sth	r3,0(r2)
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
 8000a60:	e0bffc0b 	ldhu	r2,-16(fp)
 8000a64:	10800044 	addi	r2,r2,1
 8000a68:	e0bffc0d 	sth	r2,-16(fp)
					taskYIELD();
				}
			}
			#endif
		}
	}
 8000a6c:	003fe106 	br	80009f4 <vBlockingQueueConsumer+0x24>

08000a70 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
 8000a70:	defffd04 	addi	sp,sp,-12
 8000a74:	df000215 	stw	fp,8(sp)
 8000a78:	df000204 	addi	fp,sp,8
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
 8000a7c:	00800044 	movi	r2,1
 8000a80:	e0bffe15 	stw	r2,-8(fp)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000a84:	e03fff15 	stw	zero,-4(fp)
 8000a88:	00003b06 	br	8000b78 <xAreBlockingQueuesStillRunning+0x108>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 8000a8c:	e0bfff17 	ldw	r2,-4(fp)
 8000a90:	1087883a 	add	r3,r2,r2
 8000a94:	d0a84e04 	addi	r2,gp,-24264
 8000a98:	1885883a 	add	r2,r3,r2
 8000a9c:	1100000b 	ldhu	r4,0(r2)
 8000aa0:	e0bfff17 	ldw	r2,-4(fp)
 8000aa4:	1087883a 	add	r3,r2,r2
 8000aa8:	d0a85104 	addi	r2,gp,-24252
 8000aac:	1885883a 	add	r2,r3,r2
 8000ab0:	1080000b 	ldhu	r2,0(r2)
 8000ab4:	20ffffcc 	andi	r3,r4,65535
 8000ab8:	18e0001c 	xori	r3,r3,32768
 8000abc:	18e00004 	addi	r3,r3,-32768
 8000ac0:	10bfffcc 	andi	r2,r2,65535
 8000ac4:	10a0001c 	xori	r2,r2,32768
 8000ac8:	10a00004 	addi	r2,r2,-32768
 8000acc:	1880011e 	bne	r3,r2,8000ad4 <xAreBlockingQueuesStillRunning+0x64>
		{
			xReturn = pdFALSE;
 8000ad0:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 8000ad4:	e0bfff17 	ldw	r2,-4(fp)
 8000ad8:	1087883a 	add	r3,r2,r2
 8000adc:	d0a84e04 	addi	r2,gp,-24264
 8000ae0:	1885883a 	add	r2,r3,r2
 8000ae4:	10c0000b 	ldhu	r3,0(r2)
 8000ae8:	e0bfff17 	ldw	r2,-4(fp)
 8000aec:	1089883a 	add	r4,r2,r2
 8000af0:	d0a85104 	addi	r2,gp,-24252
 8000af4:	2085883a 	add	r2,r4,r2
 8000af8:	10c0000d 	sth	r3,0(r2)


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 8000afc:	e0bfff17 	ldw	r2,-4(fp)
 8000b00:	1087883a 	add	r3,r2,r2
 8000b04:	d0a84f84 	addi	r2,gp,-24258
 8000b08:	1885883a 	add	r2,r3,r2
 8000b0c:	1100000b 	ldhu	r4,0(r2)
 8000b10:	e0bfff17 	ldw	r2,-4(fp)
 8000b14:	1087883a 	add	r3,r2,r2
 8000b18:	d0a85284 	addi	r2,gp,-24246
 8000b1c:	1885883a 	add	r2,r3,r2
 8000b20:	1080000b 	ldhu	r2,0(r2)
 8000b24:	20ffffcc 	andi	r3,r4,65535
 8000b28:	18e0001c 	xori	r3,r3,32768
 8000b2c:	18e00004 	addi	r3,r3,-32768
 8000b30:	10bfffcc 	andi	r2,r2,65535
 8000b34:	10a0001c 	xori	r2,r2,32768
 8000b38:	10a00004 	addi	r2,r2,-32768
 8000b3c:	1880011e 	bne	r3,r2,8000b44 <xAreBlockingQueuesStillRunning+0xd4>
		{
			xReturn = pdFALSE;
 8000b40:	e03ffe15 	stw	zero,-8(fp)
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 8000b44:	e0bfff17 	ldw	r2,-4(fp)
 8000b48:	1087883a 	add	r3,r2,r2
 8000b4c:	d0a84f84 	addi	r2,gp,-24258
 8000b50:	1885883a 	add	r2,r3,r2
 8000b54:	10c0000b 	ldhu	r3,0(r2)
 8000b58:	e0bfff17 	ldw	r2,-4(fp)
 8000b5c:	1089883a 	add	r4,r2,r2
 8000b60:	d0a85284 	addi	r2,gp,-24246
 8000b64:	2085883a 	add	r2,r4,r2
 8000b68:	10c0000d 	sth	r3,0(r2)
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000b6c:	e0bfff17 	ldw	r2,-4(fp)
 8000b70:	10800044 	addi	r2,r2,1
 8000b74:	e0bfff15 	stw	r2,-4(fp)
 8000b78:	e0bfff17 	ldw	r2,-4(fp)
 8000b7c:	108000d0 	cmplti	r2,r2,3
 8000b80:	103fc21e 	bne	r2,zero,8000a8c <xAreBlockingQueuesStillRunning+0x1c>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
 8000b84:	e0bffe17 	ldw	r2,-8(fp)
}
 8000b88:	e037883a 	mov	sp,fp
 8000b8c:	df000017 	ldw	fp,0(sp)
 8000b90:	dec00104 	addi	sp,sp,4
 8000b94:	f800283a 	ret

08000b98 <vStartGenericQueueTasks>:
static volatile BaseType_t xBlockWasAborted = pdFALSE;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 8000b98:	defff904 	addi	sp,sp,-28
 8000b9c:	dfc00615 	stw	ra,24(sp)
 8000ba0:	df000515 	stw	fp,20(sp)
 8000ba4:	df000504 	addi	fp,sp,20
 8000ba8:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 8000bac:	000d883a 	mov	r6,zero
 8000bb0:	01400104 	movi	r5,4
 8000bb4:	01000144 	movi	r4,5
 8000bb8:	80049840 	call	8004984 <xQueueGenericCreate>
 8000bbc:	e0bffd15 	stw	r2,-12(fp)

	if( xQueue != NULL )
 8000bc0:	e0bffd17 	ldw	r2,-12(fp)
 8000bc4:	10000a26 	beq	r2,zero,8000bf0 <vStartGenericQueueTasks+0x58>
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", genqGENERIC_QUEUE_TEST_TASK_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 8000bc8:	d8000115 	stw	zero,4(sp)
 8000bcc:	e0bfff17 	ldw	r2,-4(fp)
 8000bd0:	d8800015 	stw	r2,0(sp)
 8000bd4:	e1fffd17 	ldw	r7,-12(fp)
 8000bd8:	01810004 	movi	r6,1024
 8000bdc:	014200b4 	movhi	r5,2050
 8000be0:	29687e04 	addi	r5,r5,-24072
 8000be4:	01020034 	movhi	r4,2048
 8000be8:	21032604 	addi	r4,r4,3224
 8000bec:	8005ce40 	call	8005ce4 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 8000bf0:	01000044 	movi	r4,1
 8000bf4:	8004b100 	call	8004b10 <xQueueCreateMutex>
 8000bf8:	e0bffe15 	stw	r2,-8(fp)

	if( xMutex != NULL )
 8000bfc:	e0bffe17 	ldw	r2,-8(fp)
 8000c00:	10001f26 	beq	r2,zero,8000c80 <vStartGenericQueueTasks+0xe8>
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 8000c04:	d8000115 	stw	zero,4(sp)
 8000c08:	d8000015 	stw	zero,0(sp)
 8000c0c:	e1fffe17 	ldw	r7,-8(fp)
 8000c10:	01810004 	movi	r6,1024
 8000c14:	014200b4 	movhi	r5,2050
 8000c18:	29688004 	addi	r5,r5,-24064
 8000c1c:	01020034 	movhi	r4,2048
 8000c20:	2104f904 	addi	r4,r4,5092
 8000c24:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 8000c28:	d0a85904 	addi	r2,gp,-24220
 8000c2c:	d8800115 	stw	r2,4(sp)
 8000c30:	00800084 	movi	r2,2
 8000c34:	d8800015 	stw	r2,0(sp)
 8000c38:	000f883a 	mov	r7,zero
 8000c3c:	01810004 	movi	r6,1024
 8000c40:	014200b4 	movhi	r5,2050
 8000c44:	29688204 	addi	r5,r5,-24056
 8000c48:	01020034 	movhi	r4,2048
 8000c4c:	21051004 	addi	r4,r4,5184
 8000c50:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", genqMUTEX_TEST_TASK_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 8000c54:	d0a85804 	addi	r2,gp,-24224
 8000c58:	d8800115 	stw	r2,4(sp)
 8000c5c:	008000c4 	movi	r2,3
 8000c60:	d8800015 	stw	r2,0(sp)
 8000c64:	e1fffe17 	ldw	r7,-8(fp)
 8000c68:	01810004 	movi	r6,1024
 8000c6c:	014200b4 	movhi	r5,2050
 8000c70:	29688404 	addi	r5,r5,-24048
 8000c74:	01020034 	movhi	r4,2048
 8000c78:	21051b04 	addi	r4,r4,5228
 8000c7c:	8005ce40 	call	8005ce4 <xTaskCreate>
		{
			xTaskCreate( prvHighPriorityMutexTask, "MuHigh2", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_MEDIUM_PRIORITY, &xSecondMediumPriorityMutexTask );
		}
		#endif /* INCLUDE_xTaskAbortDelay */
	}
}
 8000c80:	0001883a 	nop
 8000c84:	e037883a 	mov	sp,fp
 8000c88:	dfc00117 	ldw	ra,4(sp)
 8000c8c:	df000017 	ldw	fp,0(sp)
 8000c90:	dec00204 	addi	sp,sp,8
 8000c94:	f800283a 	ret

08000c98 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 8000c98:	defff904 	addi	sp,sp,-28
 8000c9c:	dfc00615 	stw	ra,24(sp)
 8000ca0:	df000515 	stw	fp,20(sp)
 8000ca4:	df000504 	addi	fp,sp,20
 8000ca8:	e13fff15 	stw	r4,-4(fp)

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 8000cac:	e0bfff17 	ldw	r2,-4(fp)
 8000cb0:	e0bffb15 	stw	r2,-20(fp)
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		ulLoopCounterSnapshot = ulLoopCounter;
 8000cb4:	d0a85517 	ldw	r2,-24236(gp)
 8000cb8:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 8000cbc:	e0bffe04 	addi	r2,fp,-8
 8000cc0:	01c00044 	movi	r7,1
 8000cc4:	000d883a 	mov	r6,zero
 8000cc8:	100b883a 	mov	r5,r2
 8000ccc:	e13ffb17 	ldw	r4,-20(fp)
 8000cd0:	8004cf00 	call	8004cf0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000cd4:	e13ffb17 	ldw	r4,-20(fp)
 8000cd8:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000cdc:	10800060 	cmpeqi	r2,r2,1
 8000ce0:	1000021e 	bne	r2,zero,8000cec <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 8000ce4:	00800044 	movi	r2,1
 8000ce8:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000cec:	e0bffc04 	addi	r2,fp,-16
 8000cf0:	000d883a 	mov	r6,zero
 8000cf4:	100b883a 	mov	r5,r2
 8000cf8:	e13ffb17 	ldw	r4,-20(fp)
 8000cfc:	80050680 	call	8005068 <xQueueReceive>
 8000d00:	10800060 	cmpeqi	r2,r2,1
 8000d04:	1000021e 	bne	r2,zero,8000d10 <prvSendFrontAndBackTest+0x78>
		{
			xErrorDetected = pdTRUE;
 8000d08:	00800044 	movi	r2,1
 8000d0c:	d0a85415 	stw	r2,-24240(gp)
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 8000d10:	d0e85517 	ldw	r3,-24236(gp)
 8000d14:	e0bffc17 	ldw	r2,-16(fp)
 8000d18:	18800226 	beq	r3,r2,8000d24 <prvSendFrontAndBackTest+0x8c>
		{
			xErrorDetected = pdTRUE;
 8000d1c:	00800044 	movi	r2,1
 8000d20:	d0a85415 	stw	r2,-24240(gp)
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000d24:	e13ffb17 	ldw	r4,-20(fp)
 8000d28:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000d2c:	10000226 	beq	r2,zero,8000d38 <prvSendFrontAndBackTest+0xa0>
		{
			xErrorDetected = pdTRUE;
 8000d30:	00800044 	movi	r2,1
 8000d34:	d0a85415 	stw	r2,-24240(gp)
		}

		ulLoopCounterSnapshot = ulLoopCounter;
 8000d38:	d0a85517 	ldw	r2,-24236(gp)
 8000d3c:	e0bffe15 	stw	r2,-8(fp)
		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounterSnapshot, intsemNO_BLOCK );
 8000d40:	e0bffe04 	addi	r2,fp,-8
 8000d44:	000f883a 	mov	r7,zero
 8000d48:	000d883a 	mov	r6,zero
 8000d4c:	100b883a 	mov	r5,r2
 8000d50:	e13ffb17 	ldw	r4,-20(fp)
 8000d54:	8004cf00 	call	8004cf0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000d58:	e13ffb17 	ldw	r4,-20(fp)
 8000d5c:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000d60:	10800060 	cmpeqi	r2,r2,1
 8000d64:	1000021e 	bne	r2,zero,8000d70 <prvSendFrontAndBackTest+0xd8>
		{
			xErrorDetected = pdTRUE;
 8000d68:	00800044 	movi	r2,1
 8000d6c:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000d70:	e0bffc04 	addi	r2,fp,-16
 8000d74:	000d883a 	mov	r6,zero
 8000d78:	100b883a 	mov	r5,r2
 8000d7c:	e13ffb17 	ldw	r4,-20(fp)
 8000d80:	80050680 	call	8005068 <xQueueReceive>
 8000d84:	10800060 	cmpeqi	r2,r2,1
 8000d88:	1000021e 	bne	r2,zero,8000d94 <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
 8000d8c:	00800044 	movi	r2,1
 8000d90:	d0a85415 	stw	r2,-24240(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000d94:	e13ffb17 	ldw	r4,-20(fp)
 8000d98:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000d9c:	10000226 	beq	r2,zero,8000da8 <prvSendFrontAndBackTest+0x110>
		{
			xErrorDetected = pdTRUE;
 8000da0:	00800044 	movi	r2,1
 8000da4:	d0a85415 	stw	r2,-24240(gp)
		}

		/* The data sent to the queue should equal the data just received from
		the queue. */
		if( ulLoopCounter != ulData )
 8000da8:	d0e85517 	ldw	r3,-24236(gp)
 8000dac:	e0bffc17 	ldw	r2,-16(fp)
 8000db0:	18800226 	beq	r3,r2,8000dbc <prvSendFrontAndBackTest+0x124>
		{
			xErrorDetected = pdTRUE;
 8000db4:	00800044 	movi	r2,1
 8000db8:	d0a85415 	stw	r2,-24240(gp)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8000dbc:	00800084 	movi	r2,2
 8000dc0:	e0bffc15 	stw	r2,-16(fp)
 8000dc4:	00000906 	br	8000dec <prvSendFrontAndBackTest+0x154>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000dc8:	e0bffc04 	addi	r2,fp,-16
 8000dcc:	000f883a 	mov	r7,zero
 8000dd0:	000d883a 	mov	r6,zero
 8000dd4:	100b883a 	mov	r5,r2
 8000dd8:	e13ffb17 	ldw	r4,-20(fp)
 8000ddc:	8004cf00 	call	8004cf0 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8000de0:	e0bffc17 	ldw	r2,-16(fp)
 8000de4:	10800044 	addi	r2,r2,1
 8000de8:	e0bffc15 	stw	r2,-16(fp)
 8000dec:	e0bffc17 	ldw	r2,-16(fp)
 8000df0:	10800170 	cmpltui	r2,r2,5
 8000df4:	103ff41e 	bne	r2,zero,8000dc8 <prvSendFrontAndBackTest+0x130>
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 8000df8:	e13ffb17 	ldw	r4,-20(fp)
 8000dfc:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000e00:	108000e0 	cmpeqi	r2,r2,3
 8000e04:	1000021e 	bne	r2,zero,8000e10 <prvSendFrontAndBackTest+0x178>
		{
			xErrorDetected = pdTRUE;
 8000e08:	00800044 	movi	r2,1
 8000e0c:	d0a85415 	stw	r2,-24240(gp)
		}
		ulData = 1;
 8000e10:	00800044 	movi	r2,1
 8000e14:	e0bffc15 	stw	r2,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000e18:	e0bffc04 	addi	r2,fp,-16
 8000e1c:	01c00044 	movi	r7,1
 8000e20:	000d883a 	mov	r6,zero
 8000e24:	100b883a 	mov	r5,r2
 8000e28:	e13ffb17 	ldw	r4,-20(fp)
 8000e2c:	8004cf00 	call	8004cf0 <xQueueGenericSend>
		ulData = 0;
 8000e30:	e03ffc15 	stw	zero,-16(fp)
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000e34:	e0bffc04 	addi	r2,fp,-16
 8000e38:	01c00044 	movi	r7,1
 8000e3c:	000d883a 	mov	r6,zero
 8000e40:	100b883a 	mov	r5,r2
 8000e44:	e13ffb17 	ldw	r4,-20(fp)
 8000e48:	8004cf00 	call	8004cf0 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000e4c:	e13ffb17 	ldw	r4,-20(fp)
 8000e50:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000e54:	10800160 	cmpeqi	r2,r2,5
 8000e58:	1000021e 	bne	r2,zero,8000e64 <prvSendFrontAndBackTest+0x1cc>
		{
			xErrorDetected = pdTRUE;
 8000e5c:	00800044 	movi	r2,1
 8000e60:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000e64:	e0bffc04 	addi	r2,fp,-16
 8000e68:	01c00044 	movi	r7,1
 8000e6c:	000d883a 	mov	r6,zero
 8000e70:	100b883a 	mov	r5,r2
 8000e74:	e13ffb17 	ldw	r4,-20(fp)
 8000e78:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000e7c:	10000226 	beq	r2,zero,8000e88 <prvSendFrontAndBackTest+0x1f0>
		{
			xErrorDetected = pdTRUE;
 8000e80:	00800044 	movi	r2,1
 8000e84:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000e88:	e0bffc04 	addi	r2,fp,-16
 8000e8c:	000f883a 	mov	r7,zero
 8000e90:	000d883a 	mov	r6,zero
 8000e94:	100b883a 	mov	r5,r2
 8000e98:	e13ffb17 	ldw	r4,-20(fp)
 8000e9c:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000ea0:	10000226 	beq	r2,zero,8000eac <prvSendFrontAndBackTest+0x214>
		{
			xErrorDetected = pdTRUE;
 8000ea4:	00800044 	movi	r2,1
 8000ea8:	d0a85415 	stw	r2,-24240(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000eac:	e03ffc15 	stw	zero,-16(fp)
 8000eb0:	00002206 	br	8000f3c <prvSendFrontAndBackTest+0x2a4>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000eb4:	e0bffd04 	addi	r2,fp,-12
 8000eb8:	000d883a 	mov	r6,zero
 8000ebc:	100b883a 	mov	r5,r2
 8000ec0:	e13ffb17 	ldw	r4,-20(fp)
 8000ec4:	80054200 	call	8005420 <xQueuePeek>
 8000ec8:	10800060 	cmpeqi	r2,r2,1
 8000ecc:	1000021e 	bne	r2,zero,8000ed8 <prvSendFrontAndBackTest+0x240>
			{
				xErrorDetected = pdTRUE;
 8000ed0:	00800044 	movi	r2,1
 8000ed4:	d0a85415 	stw	r2,-24240(gp)
			}

			if( ulData != ulData2 )
 8000ed8:	e0fffc17 	ldw	r3,-16(fp)
 8000edc:	e0bffd17 	ldw	r2,-12(fp)
 8000ee0:	18800226 	beq	r3,r2,8000eec <prvSendFrontAndBackTest+0x254>
			{
				xErrorDetected = pdTRUE;
 8000ee4:	00800044 	movi	r2,1
 8000ee8:	d0a85415 	stw	r2,-24240(gp)
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 8000eec:	e0bffd17 	ldw	r2,-12(fp)
 8000ef0:	0084303a 	nor	r2,zero,r2
 8000ef4:	e0bffd15 	stw	r2,-12(fp)
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000ef8:	e0bffd04 	addi	r2,fp,-12
 8000efc:	000d883a 	mov	r6,zero
 8000f00:	100b883a 	mov	r5,r2
 8000f04:	e13ffb17 	ldw	r4,-20(fp)
 8000f08:	80050680 	call	8005068 <xQueueReceive>
 8000f0c:	10800060 	cmpeqi	r2,r2,1
 8000f10:	1000021e 	bne	r2,zero,8000f1c <prvSendFrontAndBackTest+0x284>
			{
				xErrorDetected = pdTRUE;
 8000f14:	00800044 	movi	r2,1
 8000f18:	d0a85415 	stw	r2,-24240(gp)
			}

			if( ulData != ulData2 )
 8000f1c:	e0fffc17 	ldw	r3,-16(fp)
 8000f20:	e0bffd17 	ldw	r2,-12(fp)
 8000f24:	18800226 	beq	r3,r2,8000f30 <prvSendFrontAndBackTest+0x298>
			{
				xErrorDetected = pdTRUE;
 8000f28:	00800044 	movi	r2,1
 8000f2c:	d0a85415 	stw	r2,-24240(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000f30:	e0bffc17 	ldw	r2,-16(fp)
 8000f34:	10800044 	addi	r2,r2,1
 8000f38:	e0bffc15 	stw	r2,-16(fp)
 8000f3c:	e0bffc17 	ldw	r2,-16(fp)
 8000f40:	10800170 	cmpltui	r2,r2,5
 8000f44:	103fdb1e 	bne	r2,zero,8000eb4 <prvSendFrontAndBackTest+0x21c>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000f48:	e13ffb17 	ldw	r4,-20(fp)
 8000f4c:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000f50:	10000226 	beq	r2,zero,8000f5c <prvSendFrontAndBackTest+0x2c4>
		{
			xErrorDetected = pdTRUE;
 8000f54:	00800044 	movi	r2,1
 8000f58:	d0a85415 	stw	r2,-24240(gp)
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 8000f5c:	00800284 	movi	r2,10
 8000f60:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000f64:	e0bffc04 	addi	r2,fp,-16
 8000f68:	000f883a 	mov	r7,zero
 8000f6c:	000d883a 	mov	r6,zero
 8000f70:	100b883a 	mov	r5,r2
 8000f74:	e13ffb17 	ldw	r4,-20(fp)
 8000f78:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000f7c:	10800060 	cmpeqi	r2,r2,1
 8000f80:	1000021e 	bne	r2,zero,8000f8c <prvSendFrontAndBackTest+0x2f4>
		{
			xErrorDetected = pdTRUE;
 8000f84:	00800044 	movi	r2,1
 8000f88:	d0a85415 	stw	r2,-24240(gp)
		}
		ulData = 11;
 8000f8c:	008002c4 	movi	r2,11
 8000f90:	e0bffc15 	stw	r2,-16(fp)
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8000f94:	e0bffc04 	addi	r2,fp,-16
 8000f98:	000f883a 	mov	r7,zero
 8000f9c:	000d883a 	mov	r6,zero
 8000fa0:	100b883a 	mov	r5,r2
 8000fa4:	e13ffb17 	ldw	r4,-20(fp)
 8000fa8:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000fac:	10800060 	cmpeqi	r2,r2,1
 8000fb0:	1000021e 	bne	r2,zero,8000fbc <prvSendFrontAndBackTest+0x324>
		{
			xErrorDetected = pdTRUE;
 8000fb4:	00800044 	movi	r2,1
 8000fb8:	d0a85415 	stw	r2,-24240(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 8000fbc:	e13ffb17 	ldw	r4,-20(fp)
 8000fc0:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8000fc4:	108000a0 	cmpeqi	r2,r2,2
 8000fc8:	1000021e 	bne	r2,zero,8000fd4 <prvSendFrontAndBackTest+0x33c>
		{
			xErrorDetected = pdTRUE;
 8000fcc:	00800044 	movi	r2,1
 8000fd0:	d0a85415 	stw	r2,-24240(gp)
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8000fd4:	00800244 	movi	r2,9
 8000fd8:	e0bffc15 	stw	r2,-16(fp)
 8000fdc:	00000d06 	br	8001014 <prvSendFrontAndBackTest+0x37c>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000fe0:	e0bffc04 	addi	r2,fp,-16
 8000fe4:	01c00044 	movi	r7,1
 8000fe8:	000d883a 	mov	r6,zero
 8000fec:	100b883a 	mov	r5,r2
 8000ff0:	e13ffb17 	ldw	r4,-20(fp)
 8000ff4:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8000ff8:	10800060 	cmpeqi	r2,r2,1
 8000ffc:	1000021e 	bne	r2,zero,8001008 <prvSendFrontAndBackTest+0x370>
			{
				xErrorDetected = pdTRUE;
 8001000:	00800044 	movi	r2,1
 8001004:	d0a85415 	stw	r2,-24240(gp)
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8001008:	e0bffc17 	ldw	r2,-16(fp)
 800100c:	10bfffc4 	addi	r2,r2,-1
 8001010:	e0bffc15 	stw	r2,-16(fp)
 8001014:	e0bffc17 	ldw	r2,-16(fp)
 8001018:	108001e8 	cmpgeui	r2,r2,7
 800101c:	103ff01e 	bne	r2,zero,8000fe0 <prvSendFrontAndBackTest+0x348>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8001020:	e13ffb17 	ldw	r4,-20(fp)
 8001024:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8001028:	10800160 	cmpeqi	r2,r2,5
 800102c:	1000021e 	bne	r2,zero,8001038 <prvSendFrontAndBackTest+0x3a0>
		{
			xErrorDetected = pdTRUE;
 8001030:	00800044 	movi	r2,1
 8001034:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8001038:	e0bffc04 	addi	r2,fp,-16
 800103c:	01c00044 	movi	r7,1
 8001040:	000d883a 	mov	r6,zero
 8001044:	100b883a 	mov	r5,r2
 8001048:	e13ffb17 	ldw	r4,-20(fp)
 800104c:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001050:	10000226 	beq	r2,zero,800105c <prvSendFrontAndBackTest+0x3c4>
		{
			xErrorDetected = pdTRUE;
 8001054:	00800044 	movi	r2,1
 8001058:	d0a85415 	stw	r2,-24240(gp)
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 800105c:	e0bffc04 	addi	r2,fp,-16
 8001060:	000f883a 	mov	r7,zero
 8001064:	000d883a 	mov	r6,zero
 8001068:	100b883a 	mov	r5,r2
 800106c:	e13ffb17 	ldw	r4,-20(fp)
 8001070:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001074:	10000226 	beq	r2,zero,8001080 <prvSendFrontAndBackTest+0x3e8>
		{
			xErrorDetected = pdTRUE;
 8001078:	00800044 	movi	r2,1
 800107c:	d0a85415 	stw	r2,-24240(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8001080:	008001c4 	movi	r2,7
 8001084:	e0bffc15 	stw	r2,-16(fp)
 8001088:	00001106 	br	80010d0 <prvSendFrontAndBackTest+0x438>
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 800108c:	e0bffd04 	addi	r2,fp,-12
 8001090:	000d883a 	mov	r6,zero
 8001094:	100b883a 	mov	r5,r2
 8001098:	e13ffb17 	ldw	r4,-20(fp)
 800109c:	80050680 	call	8005068 <xQueueReceive>
 80010a0:	10800060 	cmpeqi	r2,r2,1
 80010a4:	1000021e 	bne	r2,zero,80010b0 <prvSendFrontAndBackTest+0x418>
			{
				xErrorDetected = pdTRUE;
 80010a8:	00800044 	movi	r2,1
 80010ac:	d0a85415 	stw	r2,-24240(gp)
			}

			if( ulData != ulData2 )
 80010b0:	e0fffc17 	ldw	r3,-16(fp)
 80010b4:	e0bffd17 	ldw	r2,-12(fp)
 80010b8:	18800226 	beq	r3,r2,80010c4 <prvSendFrontAndBackTest+0x42c>
			{
				xErrorDetected = pdTRUE;
 80010bc:	00800044 	movi	r2,1
 80010c0:	d0a85415 	stw	r2,-24240(gp)
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 80010c4:	e0bffc17 	ldw	r2,-16(fp)
 80010c8:	10800044 	addi	r2,r2,1
 80010cc:	e0bffc15 	stw	r2,-16(fp)
 80010d0:	e0bffc17 	ldw	r2,-16(fp)
 80010d4:	10800330 	cmpltui	r2,r2,12
 80010d8:	103fec1e 	bne	r2,zero,800108c <prvSendFrontAndBackTest+0x3f4>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 80010dc:	e13ffb17 	ldw	r4,-20(fp)
 80010e0:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 80010e4:	10000226 	beq	r2,zero,80010f0 <prvSendFrontAndBackTest+0x458>
		{
			xErrorDetected = pdTRUE;
 80010e8:	00800044 	movi	r2,1
 80010ec:	d0a85415 	stw	r2,-24240(gp)
		}

		/* Increment the loop counter to indicate these tasks are still
		executing. */
		ulLoopCounter++;
 80010f0:	d0a85517 	ldw	r2,-24236(gp)
 80010f4:	10800044 	addi	r2,r2,1
 80010f8:	d0a85515 	stw	r2,-24236(gp)
	}
 80010fc:	003eed06 	br	8000cb4 <prvSendFrontAndBackTest+0x1c>

08001100 <prvTakeTwoMutexesReturnInDifferentOrder>:

#endif /* INCLUDE_xTaskAbortDelay == 1 */
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 8001100:	defffc04 	addi	sp,sp,-16
 8001104:	dfc00315 	stw	ra,12(sp)
 8001108:	df000215 	stw	fp,8(sp)
 800110c:	df000204 	addi	fp,sp,8
 8001110:	e13ffe15 	stw	r4,-8(fp)
 8001114:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8001118:	000b883a 	mov	r5,zero
 800111c:	e13ffe17 	ldw	r4,-8(fp)
 8001120:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8001124:	10800060 	cmpeqi	r2,r2,1
 8001128:	1000021e 	bne	r2,zero,8001134 <prvTakeTwoMutexesReturnInDifferentOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 800112c:	00800044 	movi	r2,1
 8001130:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 8001134:	d0285715 	stw	zero,-24228(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8001138:	0009883a 	mov	r4,zero
 800113c:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001140:	10000226 	beq	r2,zero,800114c <prvTakeTwoMutexesReturnInDifferentOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 8001144:	00800044 	movi	r2,1
 8001148:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 800114c:	d0a85817 	ldw	r2,-24224(gp)
 8001150:	1009883a 	mov	r4,r2
 8001154:	80066b80 	call	80066b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8001158:	0009883a 	mov	r4,zero
 800115c:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001160:	108000e0 	cmpeqi	r2,r2,3
 8001164:	1000021e 	bne	r2,zero,8001170 <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 8001168:	00800044 	movi	r2,1
 800116c:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Attempt to set the priority of this task to the test priority -
	between the idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 8001170:	01400044 	movi	r5,1
 8001174:	0009883a 	mov	r4,zero
 8001178:	80063900 	call	8006390 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 800117c:	0009883a 	mov	r4,zero
 8001180:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001184:	108000e0 	cmpeqi	r2,r2,3
 8001188:	1000021e 	bne	r2,zero,8001194 <prvTakeTwoMutexesReturnInDifferentOrder+0x94>
	{
		xErrorDetected = pdTRUE;
 800118c:	00800044 	movi	r2,1
 8001190:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 8001194:	d0a85917 	ldw	r2,-24220(gp)
 8001198:	1009883a 	mov	r4,r2
 800119c:	80066b80 	call	80066b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 80011a0:	d0a85717 	ldw	r2,-24228(gp)
 80011a4:	10000226 	beq	r2,zero,80011b0 <prvTakeTwoMutexesReturnInDifferentOrder+0xb0>
	{
		xErrorDetected = pdTRUE;
 80011a8:	00800044 	movi	r2,1
 80011ac:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 80011b0:	000b883a 	mov	r5,zero
 80011b4:	e13fff17 	ldw	r4,-4(fp)
 80011b8:	80052100 	call	8005210 <xQueueSemaphoreTake>
 80011bc:	10800060 	cmpeqi	r2,r2,1
 80011c0:	1000021e 	bne	r2,zero,80011cc <prvTakeTwoMutexesReturnInDifferentOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 80011c4:	00800044 	movi	r2,1
 80011c8:	d0a85415 	stw	r2,-24240(gp)
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 80011cc:	000f883a 	mov	r7,zero
 80011d0:	000d883a 	mov	r6,zero
 80011d4:	000b883a 	mov	r5,zero
 80011d8:	e13ffe17 	ldw	r4,-8(fp)
 80011dc:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80011e0:	10800060 	cmpeqi	r2,r2,1
 80011e4:	1000021e 	bne	r2,zero,80011f0 <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 80011e8:	00800044 	movi	r2,1
 80011ec:	d0a85415 	stw	r2,-24240(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 80011f0:	d0a85717 	ldw	r2,-24228(gp)
 80011f4:	10000226 	beq	r2,zero,8001200 <prvTakeTwoMutexesReturnInDifferentOrder+0x100>
	{
		xErrorDetected = pdTRUE;
 80011f8:	00800044 	movi	r2,1
 80011fc:	d0a85415 	stw	r2,-24240(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8001200:	0009883a 	mov	r4,zero
 8001204:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001208:	108000e0 	cmpeqi	r2,r2,3
 800120c:	1000021e 	bne	r2,zero,8001218 <prvTakeTwoMutexesReturnInDifferentOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 8001210:	00800044 	movi	r2,1
 8001214:	d0a85415 	stw	r2,-24240(gp)
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8001218:	000f883a 	mov	r7,zero
 800121c:	000d883a 	mov	r6,zero
 8001220:	000b883a 	mov	r5,zero
 8001224:	e13fff17 	ldw	r4,-4(fp)
 8001228:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 800122c:	10800060 	cmpeqi	r2,r2,1
 8001230:	1000021e 	bne	r2,zero,800123c <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>
	{
		xErrorDetected = pdTRUE;
 8001234:	00800044 	movi	r2,1
 8001238:	d0a85415 	stw	r2,-24240(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 800123c:	d0a85717 	ldw	r2,-24228(gp)
 8001240:	10800060 	cmpeqi	r2,r2,1
 8001244:	1000021e 	bne	r2,zero,8001250 <prvTakeTwoMutexesReturnInDifferentOrder+0x150>
	{
		xErrorDetected = pdTRUE;
 8001248:	00800044 	movi	r2,1
 800124c:	d0a85415 	stw	r2,-24240(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 8001250:	0009883a 	mov	r4,zero
 8001254:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001258:	10800060 	cmpeqi	r2,r2,1
 800125c:	1000021e 	bne	r2,zero,8001268 <prvTakeTwoMutexesReturnInDifferentOrder+0x168>
	{
		xErrorDetected = pdTRUE;
 8001260:	00800044 	movi	r2,1
 8001264:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 8001268:	000b883a 	mov	r5,zero
 800126c:	0009883a 	mov	r4,zero
 8001270:	80063900 	call	8006390 <vTaskPrioritySet>
}
 8001274:	0001883a 	nop
 8001278:	e037883a 	mov	sp,fp
 800127c:	dfc00117 	ldw	ra,4(sp)
 8001280:	df000017 	ldw	fp,0(sp)
 8001284:	dec00204 	addi	sp,sp,8
 8001288:	f800283a 	ret

0800128c <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 800128c:	defffc04 	addi	sp,sp,-16
 8001290:	dfc00315 	stw	ra,12(sp)
 8001294:	df000215 	stw	fp,8(sp)
 8001298:	df000204 	addi	fp,sp,8
 800129c:	e13ffe15 	stw	r4,-8(fp)
 80012a0:	e17fff15 	stw	r5,-4(fp)
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 80012a4:	000b883a 	mov	r5,zero
 80012a8:	e13ffe17 	ldw	r4,-8(fp)
 80012ac:	80052100 	call	8005210 <xQueueSemaphoreTake>
 80012b0:	10800060 	cmpeqi	r2,r2,1
 80012b4:	1000021e 	bne	r2,zero,80012c0 <prvTakeTwoMutexesReturnInSameOrder+0x34>
	{
		xErrorDetected = pdTRUE;
 80012b8:	00800044 	movi	r2,1
 80012bc:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 80012c0:	d0285715 	stw	zero,-24228(gp)

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 80012c4:	0009883a 	mov	r4,zero
 80012c8:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 80012cc:	10000226 	beq	r2,zero,80012d8 <prvTakeTwoMutexesReturnInSameOrder+0x4c>
	{
		xErrorDetected = pdTRUE;
 80012d0:	00800044 	movi	r2,1
 80012d4:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 80012d8:	d0a85817 	ldw	r2,-24224(gp)
 80012dc:	1009883a 	mov	r4,r2
 80012e0:	80066b80 	call	80066b8 <vTaskResume>
	#endif /* INCLUDE_eTaskGetState */

	/* This task should now have inherited the priority of the high priority
	task as by now the high priority task will have attempted to obtain the
	mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 80012e4:	0009883a 	mov	r4,zero
 80012e8:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 80012ec:	108000e0 	cmpeqi	r2,r2,3
 80012f0:	1000021e 	bne	r2,zero,80012fc <prvTakeTwoMutexesReturnInSameOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 80012f4:	00800044 	movi	r2,1
 80012f8:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 80012fc:	d0a85917 	ldw	r2,-24220(gp)
 8001300:	1009883a 	mov	r4,r2
 8001304:	80066b80 	call	80066b8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 8001308:	d0a85717 	ldw	r2,-24228(gp)
 800130c:	10000226 	beq	r2,zero,8001318 <prvTakeTwoMutexesReturnInSameOrder+0x8c>
	{
		xErrorDetected = pdTRUE;
 8001310:	00800044 	movi	r2,1
 8001314:	d0a85415 	stw	r2,-24240(gp)
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 8001318:	000b883a 	mov	r5,zero
 800131c:	e13fff17 	ldw	r4,-4(fp)
 8001320:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8001324:	10800060 	cmpeqi	r2,r2,1
 8001328:	1000021e 	bne	r2,zero,8001334 <prvTakeTwoMutexesReturnInSameOrder+0xa8>
	{
		xErrorDetected = pdTRUE;
 800132c:	00800044 	movi	r2,1
 8001330:	d0a85415 	stw	r2,-24240(gp)
	not yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8001334:	000f883a 	mov	r7,zero
 8001338:	000d883a 	mov	r6,zero
 800133c:	000b883a 	mov	r5,zero
 8001340:	e13fff17 	ldw	r4,-4(fp)
 8001344:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001348:	10800060 	cmpeqi	r2,r2,1
 800134c:	1000021e 	bne	r2,zero,8001358 <prvTakeTwoMutexesReturnInSameOrder+0xcc>
	{
		xErrorDetected = pdTRUE;
 8001350:	00800044 	movi	r2,1
 8001354:	d0a85415 	stw	r2,-24240(gp)
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8001358:	d0a85717 	ldw	r2,-24228(gp)
 800135c:	10000226 	beq	r2,zero,8001368 <prvTakeTwoMutexesReturnInSameOrder+0xdc>
	{
		xErrorDetected = pdTRUE;
 8001360:	00800044 	movi	r2,1
 8001364:	d0a85415 	stw	r2,-24240(gp)
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8001368:	0009883a 	mov	r4,zero
 800136c:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8001370:	108000e0 	cmpeqi	r2,r2,3
 8001374:	1000021e 	bne	r2,zero,8001380 <prvTakeTwoMutexesReturnInSameOrder+0xf4>
	{
		xErrorDetected = pdTRUE;
 8001378:	00800044 	movi	r2,1
 800137c:	d0a85415 	stw	r2,-24240(gp)
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 8001380:	000f883a 	mov	r7,zero
 8001384:	000d883a 	mov	r6,zero
 8001388:	000b883a 	mov	r5,zero
 800138c:	e13ffe17 	ldw	r4,-8(fp)
 8001390:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001394:	10800060 	cmpeqi	r2,r2,1
 8001398:	1000021e 	bne	r2,zero,80013a4 <prvTakeTwoMutexesReturnInSameOrder+0x118>
	{
		xErrorDetected = pdTRUE;
 800139c:	00800044 	movi	r2,1
 80013a0:	d0a85415 	stw	r2,-24240(gp)
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 80013a4:	d0a85717 	ldw	r2,-24228(gp)
 80013a8:	10800060 	cmpeqi	r2,r2,1
 80013ac:	1000021e 	bne	r2,zero,80013b8 <prvTakeTwoMutexesReturnInSameOrder+0x12c>
	{
		xErrorDetected = pdTRUE;
 80013b0:	00800044 	movi	r2,1
 80013b4:	d0a85415 	stw	r2,-24240(gp)
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 80013b8:	0009883a 	mov	r4,zero
 80013bc:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 80013c0:	10000226 	beq	r2,zero,80013cc <prvTakeTwoMutexesReturnInSameOrder+0x140>
	{
		xErrorDetected = pdTRUE;
 80013c4:	00800044 	movi	r2,1
 80013c8:	d0a85415 	stw	r2,-24240(gp)
	}
}
 80013cc:	0001883a 	nop
 80013d0:	e037883a 	mov	sp,fp
 80013d4:	dfc00117 	ldw	ra,4(sp)
 80013d8:	df000017 	ldw	fp,0(sp)
 80013dc:	dec00204 	addi	sp,sp,8
 80013e0:	f800283a 	ret

080013e4 <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 80013e4:	defffb04 	addi	sp,sp,-20
 80013e8:	dfc00415 	stw	ra,16(sp)
 80013ec:	df000315 	stw	fp,12(sp)
 80013f0:	df000304 	addi	fp,sp,12
 80013f4:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 80013f8:	e0bfff17 	ldw	r2,-4(fp)
 80013fc:	e0bffd15 	stw	r2,-12(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 8001400:	01000044 	movi	r4,1
 8001404:	8004b100 	call	8004b10 <xQueueCreateMutex>
 8001408:	e0bffe15 	stw	r2,-8(fp)
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 800140c:	e17ffe17 	ldw	r5,-8(fp)
 8001410:	e13ffd17 	ldw	r4,-12(fp)
 8001414:	80011000 	call	8001100 <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8001418:	d0a85617 	ldw	r2,-24232(gp)
 800141c:	10800044 	addi	r2,r2,1
 8001420:	d0a85615 	stw	r2,-24232(gp)
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 8001424:	e17ffe17 	ldw	r5,-8(fp)
 8001428:	e13ffd17 	ldw	r4,-12(fp)
 800142c:	800128c0 	call	800128c <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 8001430:	d0a85617 	ldw	r2,-24232(gp)
 8001434:	10800044 	addi	r2,r2,1
 8001438:	d0a85615 	stw	r2,-24232(gp)
			priority of a high priority task only for the high priority task to
			timeout before obtaining the mutex. */
			prvHighPriorityTimeout( xMutex );
		}
		#endif
	}
 800143c:	003ff306 	br	800140c <prvLowPriorityMutexTask+0x28>

08001440 <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 8001440:	defffd04 	addi	sp,sp,-12
 8001444:	dfc00215 	stw	ra,8(sp)
 8001448:	df000115 	stw	fp,4(sp)
 800144c:	df000104 	addi	fp,sp,4
 8001450:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001454:	0009883a 	mov	r4,zero
 8001458:	80065500 	call	8006550 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 800145c:	d0a85717 	ldw	r2,-24228(gp)
 8001460:	10800044 	addi	r2,r2,1
 8001464:	d0a85715 	stw	r2,-24228(gp)
	}
 8001468:	003ffa06 	br	8001454 <prvMediumPriorityMutexTask+0x14>

0800146c <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 800146c:	defffc04 	addi	sp,sp,-16
 8001470:	dfc00315 	stw	ra,12(sp)
 8001474:	df000215 	stw	fp,8(sp)
 8001478:	df000204 	addi	fp,sp,8
 800147c:	e13fff15 	stw	r4,-4(fp)
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 8001480:	e0bfff17 	ldw	r2,-4(fp)
 8001484:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001488:	0009883a 	mov	r4,zero
 800148c:	80065500 	call	8006550 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain the
		mutex.  It should find the mutex is not available so a block time is
		specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 8001490:	017fffc4 	movi	r5,-1
 8001494:	e13ffe17 	ldw	r4,-8(fp)
 8001498:	80052100 	call	8005210 <xQueueSemaphoreTake>
 800149c:	10800060 	cmpeqi	r2,r2,1
 80014a0:	1000071e 	bne	r2,zero,80014c0 <prvHighPriorityMutexTask+0x54>
		{
			/* This task would expect to obtain the mutex unless its wait for
			the mutex was aborted. */
			if( xBlockWasAborted == pdFALSE )
 80014a4:	d0a85a17 	ldw	r2,-24216(gp)
 80014a8:	1000031e 	bne	r2,zero,80014b8 <prvHighPriorityMutexTask+0x4c>
			{
				xErrorDetected = pdTRUE;
 80014ac:	00800044 	movi	r2,1
 80014b0:	d0a85415 	stw	r2,-24240(gp)
 80014b4:	003ff406 	br	8001488 <prvHighPriorityMutexTask+0x1c>
			}
			else
			{
				xBlockWasAborted = pdFALSE;
 80014b8:	d0285a15 	stw	zero,-24216(gp)
 80014bc:	003ff206 	br	8001488 <prvHighPriorityMutexTask+0x1c>
		}
		else
		{
			/* When the mutex is eventually obtained it is just given back before
			returning to suspend ready for the next cycle. */
			if( xSemaphoreGive( xMutex ) != pdPASS )
 80014c0:	000f883a 	mov	r7,zero
 80014c4:	000d883a 	mov	r6,zero
 80014c8:	000b883a 	mov	r5,zero
 80014cc:	e13ffe17 	ldw	r4,-8(fp)
 80014d0:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80014d4:	10800060 	cmpeqi	r2,r2,1
 80014d8:	103feb1e 	bne	r2,zero,8001488 <prvHighPriorityMutexTask+0x1c>
			{
				xErrorDetected = pdTRUE;
 80014dc:	00800044 	movi	r2,1
 80014e0:	d0a85415 	stw	r2,-24240(gp)
			}
		}
	}
 80014e4:	003fe806 	br	8001488 <prvHighPriorityMutexTask+0x1c>

080014e8 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 80014e8:	deffff04 	addi	sp,sp,-4
 80014ec:	df000015 	stw	fp,0(sp)
 80014f0:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 80014f4:	d0e85b17 	ldw	r3,-24212(gp)
 80014f8:	d0a85517 	ldw	r2,-24236(gp)
 80014fc:	1880021e 	bne	r3,r2,8001508 <xAreGenericQueueTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 8001500:	00800044 	movi	r2,1
 8001504:	d0a85415 	stw	r2,-24240(gp)
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 8001508:	d0e85c17 	ldw	r3,-24208(gp)
 800150c:	d0a85617 	ldw	r2,-24232(gp)
 8001510:	1880021e 	bne	r3,r2,800151c <xAreGenericQueueTasksStillRunning+0x34>
	{
		xErrorDetected = pdTRUE;
 8001514:	00800044 	movi	r2,1
 8001518:	d0a85415 	stw	r2,-24240(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 800151c:	d0a85517 	ldw	r2,-24236(gp)
 8001520:	d0a85b15 	stw	r2,-24212(gp)
	ulLastLoopCounter2 = ulLoopCounter2;
 8001524:	d0a85617 	ldw	r2,-24232(gp)
 8001528:	d0a85c15 	stw	r2,-24208(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 800152c:	d0a85417 	ldw	r2,-24240(gp)
 8001530:	1005003a 	cmpeq	r2,r2,zero
 8001534:	10803fcc 	andi	r2,r2,255
}
 8001538:	e037883a 	mov	sp,fp
 800153c:	df000017 	ldw	fp,0(sp)
 8001540:	dec00104 	addi	sp,sp,4
 8001544:	f800283a 	ret

08001548 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
 8001548:	defffb04 	addi	sp,sp,-20
 800154c:	dfc00415 	stw	ra,16(sp)
 8001550:	df000315 	stw	fp,12(sp)
 8001554:	df000304 	addi	fp,sp,12
 8001558:	e13fff15 	stw	r4,-4(fp)
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
 800155c:	000d883a 	mov	r6,zero
 8001560:	01400084 	movi	r5,2
 8001564:	01000284 	movi	r4,10
 8001568:	80049840 	call	8004984 <xQueueGenericCreate>
 800156c:	d0a85f15 	stw	r2,-24196(gp)

	if( xPolledQueue != NULL )
 8001570:	d0a85f17 	ldw	r2,-24196(gp)
 8001574:	10001426 	beq	r2,zero,80015c8 <vStartPolledQueueTasks+0x80>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 8001578:	d8000115 	stw	zero,4(sp)
 800157c:	e0bfff17 	ldw	r2,-4(fp)
 8001580:	d8800015 	stw	r2,0(sp)
 8001584:	d1e85f04 	addi	r7,gp,-24196
 8001588:	01810004 	movi	r6,1024
 800158c:	014200b4 	movhi	r5,2050
 8001590:	29688604 	addi	r5,r5,-24040
 8001594:	01020034 	movhi	r4,2048
 8001598:	2105a104 	addi	r4,r4,5764
 800159c:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
 80015a0:	d8000115 	stw	zero,4(sp)
 80015a4:	e0bfff17 	ldw	r2,-4(fp)
 80015a8:	d8800015 	stw	r2,0(sp)
 80015ac:	d1e85f04 	addi	r7,gp,-24196
 80015b0:	01810004 	movi	r6,1024
 80015b4:	014200b4 	movhi	r5,2050
 80015b8:	29688804 	addi	r5,r5,-24032
 80015bc:	01020034 	movhi	r4,2048
 80015c0:	21057804 	addi	r4,r4,5600
 80015c4:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 80015c8:	0001883a 	nop
 80015cc:	e037883a 	mov	sp,fp
 80015d0:	dfc00117 	ldw	ra,4(sp)
 80015d4:	df000017 	ldw	fp,0(sp)
 80015d8:	dec00204 	addi	sp,sp,8
 80015dc:	f800283a 	ret

080015e0 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
 80015e0:	defffa04 	addi	sp,sp,-24
 80015e4:	dfc00515 	stw	ra,20(sp)
 80015e8:	df000415 	stw	fp,16(sp)
 80015ec:	df000404 	addi	fp,sp,16
 80015f0:	e13fff15 	stw	r4,-4(fp)
uint16_t usValue = ( uint16_t ) 0;
 80015f4:	e03ffe0d 	sth	zero,-8(fp)
BaseType_t xError = pdFALSE, xLoop;
 80015f8:	e03ffc15 	stw	zero,-16(fp)

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 80015fc:	e03ffd15 	stw	zero,-12(fp)
 8001600:	00001a06 	br	800166c <vPolledQueueProducer+0x8c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
 8001604:	e0bfff17 	ldw	r2,-4(fp)
 8001608:	10800017 	ldw	r2,0(r2)
 800160c:	e0fffe04 	addi	r3,fp,-8
 8001610:	000f883a 	mov	r7,zero
 8001614:	000d883a 	mov	r6,zero
 8001618:	180b883a 	mov	r5,r3
 800161c:	1009883a 	mov	r4,r2
 8001620:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001624:	10800060 	cmpeqi	r2,r2,1
 8001628:	1000031e 	bne	r2,zero,8001638 <vPolledQueueProducer+0x58>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
 800162c:	00800044 	movi	r2,1
 8001630:	e0bffc15 	stw	r2,-16(fp)
 8001634:	00000a06 	br	8001660 <vPolledQueueProducer+0x80>
			}
			else
			{
				if( xError == pdFALSE )
 8001638:	e0bffc17 	ldw	r2,-16(fp)
 800163c:	1000051e 	bne	r2,zero,8001654 <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
 8001640:	80079180 	call	8007918 <vTaskEnterCritical>
						xPollingProducerCount++;
 8001644:	d0a85e17 	ldw	r2,-24200(gp)
 8001648:	10800044 	addi	r2,r2,1
 800164c:	d0a85e15 	stw	r2,-24200(gp)
					portEXIT_CRITICAL();
 8001650:	800796c0 	call	800796c <vTaskExitCritical>
				}

				/* Update the value we are going to post next time around. */
				usValue++;
 8001654:	e0bffe0b 	ldhu	r2,-8(fp)
 8001658:	10800044 	addi	r2,r2,1
 800165c:	e0bffe0d 	sth	r2,-8(fp)
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 8001660:	e0bffd17 	ldw	r2,-12(fp)
 8001664:	10800044 	addi	r2,r2,1
 8001668:	e0bffd15 	stw	r2,-12(fp)
 800166c:	e0bffd17 	ldw	r2,-12(fp)
 8001670:	108000d0 	cmplti	r2,r2,3
 8001674:	103fe31e 	bne	r2,zero,8001604 <vPolledQueueProducer+0x24>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
 8001678:	01003204 	movi	r4,200
 800167c:	80062900 	call	8006290 <vTaskDelay>
	}
 8001680:	003fde06 	br	80015fc <vPolledQueueProducer+0x1c>

08001684 <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
 8001684:	defffa04 	addi	sp,sp,-24
 8001688:	dfc00515 	stw	ra,20(sp)
 800168c:	df000415 	stw	fp,16(sp)
 8001690:	df000404 	addi	fp,sp,16
 8001694:	e13fff15 	stw	r4,-4(fp)
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 8001698:	e03ffc0d 	sth	zero,-16(fp)
BaseType_t xError = pdFALSE;
 800169c:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 80016a0:	00001c06 	br	8001714 <vPolledQueueConsumer+0x90>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 80016a4:	e0bfff17 	ldw	r2,-4(fp)
 80016a8:	10800017 	ldw	r2,0(r2)
 80016ac:	e0fffe04 	addi	r3,fp,-8
 80016b0:	000d883a 	mov	r6,zero
 80016b4:	180b883a 	mov	r5,r3
 80016b8:	1009883a 	mov	r4,r2
 80016bc:	80050680 	call	8005068 <xQueueReceive>
 80016c0:	10800058 	cmpnei	r2,r2,1
 80016c4:	1000131e 	bne	r2,zero,8001714 <vPolledQueueConsumer+0x90>
			{
				if( usData != usExpectedValue )
 80016c8:	e0bffe0b 	ldhu	r2,-8(fp)
 80016cc:	10ffffcc 	andi	r3,r2,65535
 80016d0:	e0bffc0b 	ldhu	r2,-16(fp)
 80016d4:	18800526 	beq	r3,r2,80016ec <vPolledQueueConsumer+0x68>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
 80016d8:	00800044 	movi	r2,1
 80016dc:	e0bffd15 	stw	r2,-12(fp)

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
 80016e0:	e0bffe0b 	ldhu	r2,-8(fp)
 80016e4:	e0bffc0d 	sth	r2,-16(fp)
 80016e8:	00000706 	br	8001708 <vPolledQueueConsumer+0x84>
				}
				else
				{
					if( xError == pdFALSE )
 80016ec:	e0bffd17 	ldw	r2,-12(fp)
 80016f0:	1000051e 	bne	r2,zero,8001708 <vPolledQueueConsumer+0x84>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
 80016f4:	80079180 	call	8007918 <vTaskEnterCritical>
							xPollingConsumerCount++;
 80016f8:	d0a85d17 	ldw	r2,-24204(gp)
 80016fc:	10800044 	addi	r2,r2,1
 8001700:	d0a85d15 	stw	r2,-24204(gp)
						portEXIT_CRITICAL();
 8001704:	800796c0 	call	800796c <vTaskExitCritical>
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
 8001708:	e0bffc0b 	ldhu	r2,-16(fp)
 800170c:	10800044 	addi	r2,r2,1
 8001710:	e0bffc0d 	sth	r2,-16(fp)
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 8001714:	e0bfff17 	ldw	r2,-4(fp)
 8001718:	10800017 	ldw	r2,0(r2)
 800171c:	1009883a 	mov	r4,r2
 8001720:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8001724:	103fdf1e 	bne	r2,zero,80016a4 <vPolledQueueConsumer+0x20>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
 8001728:	01002d04 	movi	r4,180
 800172c:	80062900 	call	8006290 <vTaskDelay>
	}
 8001730:	003fdb06 	br	80016a0 <vPolledQueueConsumer+0x1c>

08001734 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
 8001734:	defffe04 	addi	sp,sp,-8
 8001738:	df000115 	stw	fp,4(sp)
 800173c:	df000104 	addi	fp,sp,4

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 8001740:	d0a85d17 	ldw	r2,-24204(gp)
 8001744:	10000226 	beq	r2,zero,8001750 <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
 8001748:	d0a85e17 	ldw	r2,-24200(gp)

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 800174c:	1000021e 	bne	r2,zero,8001758 <xArePollingQueuesStillRunning+0x24>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
 8001750:	e03fff15 	stw	zero,-4(fp)
 8001754:	00000206 	br	8001760 <xArePollingQueuesStillRunning+0x2c>
	}
	else
	{
		xReturn = pdTRUE;
 8001758:	00800044 	movi	r2,1
 800175c:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
 8001760:	d0285d15 	stw	zero,-24204(gp)
	xPollingProducerCount = pollqINITIAL_VALUE;
 8001764:	d0285e15 	stw	zero,-24200(gp)

	return xReturn;
 8001768:	e0bfff17 	ldw	r2,-4(fp)
}
 800176c:	e037883a 	mov	sp,fp
 8001770:	df000017 	ldw	fp,0(sp)
 8001774:	dec00104 	addi	sp,sp,4
 8001778:	f800283a 	ret

0800177c <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
 800177c:	defffb04 	addi	sp,sp,-20
 8001780:	dfc00415 	stw	ra,16(sp)
 8001784:	df000315 	stw	fp,12(sp)
 8001788:	df000304 	addi	fp,sp,12
QueueHandle_t xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
 800178c:	000d883a 	mov	r6,zero
 8001790:	01400104 	movi	r5,4
 8001794:	01000144 	movi	r4,5
 8001798:	80049840 	call	8004984 <xQueueGenericCreate>
 800179c:	e0bfff15 	stw	r2,-4(fp)

	if( xQueue != NULL )
 80017a0:	e0bfff17 	ldw	r2,-4(fp)
 80017a4:	10002a26 	beq	r2,zero,8001850 <vStartQueuePeekTasks+0xd4>
		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );

		/* Create the demo tasks and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is declared
		on the stack here. */
		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
 80017a8:	d8000115 	stw	zero,4(sp)
 80017ac:	d8000015 	stw	zero,0(sp)
 80017b0:	e1ffff17 	ldw	r7,-4(fp)
 80017b4:	01810004 	movi	r6,1024
 80017b8:	014200b4 	movhi	r5,2050
 80017bc:	29688a04 	addi	r5,r5,-24024
 80017c0:	01020034 	movhi	r4,2048
 80017c4:	2106c104 	addi	r4,r4,6916
 80017c8:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
 80017cc:	d0a86404 	addi	r2,gp,-24176
 80017d0:	d8800115 	stw	r2,4(sp)
 80017d4:	00800044 	movi	r2,1
 80017d8:	d8800015 	stw	r2,0(sp)
 80017dc:	e1ffff17 	ldw	r7,-4(fp)
 80017e0:	01810004 	movi	r6,1024
 80017e4:	014200b4 	movhi	r5,2050
 80017e8:	29688c04 	addi	r5,r5,-24016
 80017ec:	01020034 	movhi	r4,2048
 80017f0:	21069f04 	addi	r4,r4,6780
 80017f4:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
 80017f8:	d0a86304 	addi	r2,gp,-24180
 80017fc:	d8800115 	stw	r2,4(sp)
 8001800:	00800084 	movi	r2,2
 8001804:	d8800015 	stw	r2,0(sp)
 8001808:	e1ffff17 	ldw	r7,-4(fp)
 800180c:	01810004 	movi	r6,1024
 8001810:	014200b4 	movhi	r5,2050
 8001814:	29688e04 	addi	r5,r5,-24008
 8001818:	01020034 	movhi	r4,2048
 800181c:	21066f04 	addi	r4,r4,6588
 8001820:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
 8001824:	d0a86504 	addi	r2,gp,-24172
 8001828:	d8800115 	stw	r2,4(sp)
 800182c:	008000c4 	movi	r2,3
 8001830:	d8800015 	stw	r2,0(sp)
 8001834:	e1ffff17 	ldw	r7,-4(fp)
 8001838:	01810004 	movi	r6,1024
 800183c:	014200b4 	movhi	r5,2050
 8001840:	29689004 	addi	r5,r5,-24000
 8001844:	01020034 	movhi	r4,2048
 8001848:	21061a04 	addi	r4,r4,6248
 800184c:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 8001850:	0001883a 	nop
 8001854:	e037883a 	mov	sp,fp
 8001858:	dfc00117 	ldw	ra,4(sp)
 800185c:	df000017 	ldw	fp,0(sp)
 8001860:	dec00204 	addi	sp,sp,8
 8001864:	f800283a 	ret

08001868 <prvHighestPriorityPeekTask>:
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
 8001868:	defffb04 	addi	sp,sp,-20
 800186c:	dfc00415 	stw	ra,16(sp)
 8001870:	df000315 	stw	fp,12(sp)
 8001874:	df000304 	addi	fp,sp,12
 8001878:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 800187c:	e0bfff17 	ldw	r2,-4(fp)
 8001880:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001884:	e0bffe04 	addi	r2,fp,-8
 8001888:	01bfffc4 	movi	r6,-1
 800188c:	100b883a 	mov	r5,r2
 8001890:	e13ffd17 	ldw	r4,-12(fp)
 8001894:	80054200 	call	8005420 <xQueuePeek>
 8001898:	10800060 	cmpeqi	r2,r2,1
 800189c:	1000021e 	bne	r2,zero,80018a8 <prvHighestPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 80018a0:	00800044 	movi	r2,1
 80018a4:	d0a86015 	stw	r2,-24192(gp)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
 80018a8:	e0fffe17 	ldw	r3,-8(fp)
 80018ac:	008448b4 	movhi	r2,4386
 80018b0:	108cd104 	addi	r2,r2,13124
 80018b4:	18800226 	beq	r3,r2,80018c0 <prvHighestPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 80018b8:	00800044 	movi	r2,1
 80018bc:	d0a86015 	stw	r2,-24192(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 80018c0:	e13ffd17 	ldw	r4,-12(fp)
 80018c4:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 80018c8:	10800060 	cmpeqi	r2,r2,1
 80018cc:	1000021e 	bne	r2,zero,80018d8 <prvHighestPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 80018d0:	00800044 	movi	r2,1
 80018d4:	d0a86015 	stw	r2,-24192(gp)
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
 80018d8:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 80018dc:	e0bffe04 	addi	r2,fp,-8
 80018e0:	000d883a 	mov	r6,zero
 80018e4:	100b883a 	mov	r5,r2
 80018e8:	e13ffd17 	ldw	r4,-12(fp)
 80018ec:	80050680 	call	8005068 <xQueueReceive>
 80018f0:	10800060 	cmpeqi	r2,r2,1
 80018f4:	1000021e 	bne	r2,zero,8001900 <prvHighestPriorityPeekTask+0x98>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
 80018f8:	00800044 	movi	r2,1
 80018fc:	d0a86015 	stw	r2,-24192(gp)
		}

		if( ulValue != 0x11223344 )
 8001900:	e0fffe17 	ldw	r3,-8(fp)
 8001904:	008448b4 	movhi	r2,4386
 8001908:	108cd104 	addi	r2,r2,13124
 800190c:	18800226 	beq	r3,r2,8001918 <prvHighestPriorityPeekTask+0xb0>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
 8001910:	00800044 	movi	r2,1
 8001914:	d0a86015 	stw	r2,-24192(gp)
		}

		/* Now we will block again as the queue is once more empty.  The low
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001918:	e0bffe04 	addi	r2,fp,-8
 800191c:	01bfffc4 	movi	r6,-1
 8001920:	100b883a 	mov	r5,r2
 8001924:	e13ffd17 	ldw	r4,-12(fp)
 8001928:	80054200 	call	8005420 <xQueuePeek>
 800192c:	10800060 	cmpeqi	r2,r2,1
 8001930:	1000021e 	bne	r2,zero,800193c <prvHighestPriorityPeekTask+0xd4>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001934:	00800044 	movi	r2,1
 8001938:	d0a86015 	stw	r2,-24192(gp)
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
 800193c:	e0fffe17 	ldw	r3,-8(fp)
 8001940:	008048f4 	movhi	r2,291
 8001944:	109159c4 	addi	r2,r2,17767
 8001948:	18800226 	beq	r3,r2,8001954 <prvHighestPriorityPeekTask+0xec>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 800194c:	00800044 	movi	r2,1
 8001950:	d0a86015 	stw	r2,-24192(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8001954:	e13ffd17 	ldw	r4,-12(fp)
 8001958:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 800195c:	10800060 	cmpeqi	r2,r2,1
 8001960:	1000021e 	bne	r2,zero,800196c <prvHighestPriorityPeekTask+0x104>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 8001964:	00800044 	movi	r2,1
 8001968:	d0a86015 	stw	r2,-24192(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 800196c:	0009883a 	mov	r4,zero
 8001970:	80065500 	call	8006550 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001974:	e0bffe04 	addi	r2,fp,-8
 8001978:	01bfffc4 	movi	r6,-1
 800197c:	100b883a 	mov	r5,r2
 8001980:	e13ffd17 	ldw	r4,-12(fp)
 8001984:	80054200 	call	8005420 <xQueuePeek>
 8001988:	10800060 	cmpeqi	r2,r2,1
 800198c:	1000021e 	bne	r2,zero,8001998 <prvHighestPriorityPeekTask+0x130>
		{
			xErrorDetected = pdTRUE;
 8001990:	00800044 	movi	r2,1
 8001994:	d0a86015 	stw	r2,-24192(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001998:	e0fffe17 	ldw	r3,-8(fp)
 800199c:	00aaaf34 	movhi	r2,43708
 80019a0:	10aaaec4 	addi	r2,r2,-21829
 80019a4:	18800226 	beq	r3,r2,80019b0 <prvHighestPriorityPeekTask+0x148>
		{
			xErrorDetected = pdTRUE;
 80019a8:	00800044 	movi	r2,1
 80019ac:	d0a86015 	stw	r2,-24192(gp)
		}

		vTaskSuspend( NULL );
 80019b0:	0009883a 	mov	r4,zero
 80019b4:	80065500 	call	8006550 <vTaskSuspend>
	}
 80019b8:	003fb206 	br	8001884 <prvHighestPriorityPeekTask+0x1c>

080019bc <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
 80019bc:	defffb04 	addi	sp,sp,-20
 80019c0:	dfc00415 	stw	ra,16(sp)
 80019c4:	df000315 	stw	fp,12(sp)
 80019c8:	df000304 	addi	fp,sp,12
 80019cc:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 80019d0:	e0bfff17 	ldw	r2,-4(fp)
 80019d4:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 80019d8:	e0bffe04 	addi	r2,fp,-8
 80019dc:	01bfffc4 	movi	r6,-1
 80019e0:	100b883a 	mov	r5,r2
 80019e4:	e13ffd17 	ldw	r4,-12(fp)
 80019e8:	80054200 	call	8005420 <xQueuePeek>
 80019ec:	10800060 	cmpeqi	r2,r2,1
 80019f0:	1000021e 	bne	r2,zero,80019fc <prvHighPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 80019f4:	00800044 	movi	r2,1
 80019f8:	d0a86015 	stw	r2,-24192(gp)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 80019fc:	e0fffe17 	ldw	r3,-8(fp)
 8001a00:	008048f4 	movhi	r2,291
 8001a04:	109159c4 	addi	r2,r2,17767
 8001a08:	18800226 	beq	r3,r2,8001a14 <prvHighPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001a0c:	00800044 	movi	r2,1
 8001a10:	d0a86015 	stw	r2,-24192(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8001a14:	e13ffd17 	ldw	r4,-12(fp)
 8001a18:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8001a1c:	10800060 	cmpeqi	r2,r2,1
 8001a20:	1000021e 	bne	r2,zero,8001a2c <prvHighPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 8001a24:	00800044 	movi	r2,1
 8001a28:	d0a86015 	stw	r2,-24192(gp)

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
 8001a2c:	0009883a 	mov	r4,zero
 8001a30:	80065500 	call	8006550 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001a34:	e0bffe04 	addi	r2,fp,-8
 8001a38:	01bfffc4 	movi	r6,-1
 8001a3c:	100b883a 	mov	r5,r2
 8001a40:	e13ffd17 	ldw	r4,-12(fp)
 8001a44:	80050680 	call	8005068 <xQueueReceive>
 8001a48:	10800060 	cmpeqi	r2,r2,1
 8001a4c:	1000021e 	bne	r2,zero,8001a58 <prvHighPriorityPeekTask+0x9c>
		{
			xErrorDetected = pdTRUE;
 8001a50:	00800044 	movi	r2,1
 8001a54:	d0a86015 	stw	r2,-24192(gp)
		}

		if( ulValue != 0xaabbaabb )
 8001a58:	e0fffe17 	ldw	r3,-8(fp)
 8001a5c:	00aaaf34 	movhi	r2,43708
 8001a60:	10aaaec4 	addi	r2,r2,-21829
 8001a64:	18800226 	beq	r3,r2,8001a70 <prvHighPriorityPeekTask+0xb4>
		{
			xErrorDetected = pdTRUE;
 8001a68:	00800044 	movi	r2,1
 8001a6c:	d0a86015 	stw	r2,-24192(gp)
		}

		vTaskSuspend( NULL );
 8001a70:	0009883a 	mov	r4,zero
 8001a74:	80065500 	call	8006550 <vTaskSuspend>
	}
 8001a78:	003fd706 	br	80019d8 <prvHighPriorityPeekTask+0x1c>

08001a7c <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
 8001a7c:	defffb04 	addi	sp,sp,-20
 8001a80:	dfc00415 	stw	ra,16(sp)
 8001a84:	df000315 	stw	fp,12(sp)
 8001a88:	df000304 	addi	fp,sp,12
 8001a8c:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 8001a90:	e0bfff17 	ldw	r2,-4(fp)
 8001a94:	e0bffd15 	stw	r2,-12(fp)
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 8001a98:	e0bffe04 	addi	r2,fp,-8
 8001a9c:	01bfffc4 	movi	r6,-1
 8001aa0:	100b883a 	mov	r5,r2
 8001aa4:	e13ffd17 	ldw	r4,-12(fp)
 8001aa8:	80054200 	call	8005420 <xQueuePeek>
 8001aac:	10800060 	cmpeqi	r2,r2,1
 8001ab0:	1000021e 	bne	r2,zero,8001abc <prvMediumPriorityPeekTask+0x40>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
 8001ab4:	00800044 	movi	r2,1
 8001ab8:	d0a86015 	stw	r2,-24192(gp)
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
 8001abc:	e0fffe17 	ldw	r3,-8(fp)
 8001ac0:	008048f4 	movhi	r2,291
 8001ac4:	109159c4 	addi	r2,r2,17767
 8001ac8:	18800226 	beq	r3,r2,8001ad4 <prvMediumPriorityPeekTask+0x58>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
 8001acc:	00800044 	movi	r2,1
 8001ad0:	d0a86015 	stw	r2,-24192(gp)
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8001ad4:	e13ffd17 	ldw	r4,-12(fp)
 8001ad8:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8001adc:	10800060 	cmpeqi	r2,r2,1
 8001ae0:	1000021e 	bne	r2,zero,8001aec <prvMediumPriorityPeekTask+0x70>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
 8001ae4:	00800044 	movi	r2,1
 8001ae8:	d0a86015 	stw	r2,-24192(gp)
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
 8001aec:	d0a86117 	ldw	r2,-24188(gp)
 8001af0:	10800044 	addi	r2,r2,1
 8001af4:	d0a86115 	stw	r2,-24188(gp)

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
 8001af8:	0009883a 	mov	r4,zero
 8001afc:	80065500 	call	8006550 <vTaskSuspend>
	}
 8001b00:	003fe506 	br	8001a98 <prvMediumPriorityPeekTask+0x1c>

08001b04 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
 8001b04:	defffb04 	addi	sp,sp,-20
 8001b08:	dfc00415 	stw	ra,16(sp)
 8001b0c:	df000315 	stw	fp,12(sp)
 8001b10:	df000304 	addi	fp,sp,12
 8001b14:	e13fff15 	stw	r4,-4(fp)
QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 8001b18:	e0bfff17 	ldw	r2,-4(fp)
 8001b1c:	e0bffd15 	stw	r2,-12(fp)

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
 8001b20:	008448b4 	movhi	r2,4386
 8001b24:	108cd104 	addi	r2,r2,13124
 8001b28:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001b2c:	e0bffe04 	addi	r2,fp,-8
 8001b30:	000f883a 	mov	r7,zero
 8001b34:	000d883a 	mov	r6,zero
 8001b38:	100b883a 	mov	r5,r2
 8001b3c:	e13ffd17 	ldw	r4,-12(fp)
 8001b40:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001b44:	10800060 	cmpeqi	r2,r2,1
 8001b48:	1000021e 	bne	r2,zero,8001b54 <prvLowPriorityPeekTask+0x50>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001b4c:	00800044 	movi	r2,1
 8001b50:	d0a86015 	stw	r2,-24192(gp)
			taskYIELD();
		#endif

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8001b54:	e13ffd17 	ldw	r4,-12(fp)
 8001b58:	80057300 	call	8005730 <uxQueueMessagesWaiting>
 8001b5c:	10000226 	beq	r2,zero,8001b68 <prvLowPriorityPeekTask+0x64>
		{
			xErrorDetected = pdTRUE;
 8001b60:	00800044 	movi	r2,1
 8001b64:	d0a86015 	stw	r2,-24192(gp)
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
 8001b68:	008048f4 	movhi	r2,291
 8001b6c:	109159c4 	addi	r2,r2,17767
 8001b70:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001b74:	e0bffe04 	addi	r2,fp,-8
 8001b78:	000f883a 	mov	r7,zero
 8001b7c:	000d883a 	mov	r6,zero
 8001b80:	100b883a 	mov	r5,r2
 8001b84:	e13ffd17 	ldw	r4,-12(fp)
 8001b88:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001b8c:	10800060 	cmpeqi	r2,r2,1
 8001b90:	1000021e 	bne	r2,zero,8001b9c <prvLowPriorityPeekTask+0x98>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001b94:	00800044 	movi	r2,1
 8001b98:	d0a86015 	stw	r2,-24192(gp)
			taskYIELD();
		#endif

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
 8001b9c:	e03ffe15 	stw	zero,-8(fp)
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001ba0:	e0bffe04 	addi	r2,fp,-8
 8001ba4:	000d883a 	mov	r6,zero
 8001ba8:	100b883a 	mov	r5,r2
 8001bac:	e13ffd17 	ldw	r4,-12(fp)
 8001bb0:	80050680 	call	8005068 <xQueueReceive>
 8001bb4:	10800060 	cmpeqi	r2,r2,1
 8001bb8:	1000021e 	bne	r2,zero,8001bc4 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001bbc:	00800044 	movi	r2,1
 8001bc0:	d0a86015 	stw	r2,-24192(gp)
			/* We did not receive the expected value. */
		}

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001bc4:	01000284 	movi	r4,10
 8001bc8:	80062900 	call	8006290 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
 8001bcc:	d0a86417 	ldw	r2,-24176(gp)
 8001bd0:	1009883a 	mov	r4,r2
 8001bd4:	80066b80 	call	80066b8 <vTaskResume>
		vTaskResume( xHighPriorityTask );
 8001bd8:	d0a86317 	ldw	r2,-24180(gp)
 8001bdc:	1009883a 	mov	r4,r2
 8001be0:	80066b80 	call	80066b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 8001be4:	d0a86517 	ldw	r2,-24172(gp)
 8001be8:	1009883a 	mov	r4,r2
 8001bec:	80066b80 	call	80066b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		ulValue = 0xaabbaabb;
 8001bf0:	00aaaf34 	movhi	r2,43708
 8001bf4:	10aaaec4 	addi	r2,r2,-21829
 8001bf8:	e0bffe15 	stw	r2,-8(fp)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 8001bfc:	e0bffe04 	addi	r2,fp,-8
 8001c00:	01c00044 	movi	r7,1
 8001c04:	000d883a 	mov	r6,zero
 8001c08:	100b883a 	mov	r5,r2
 8001c0c:	e13ffd17 	ldw	r4,-12(fp)
 8001c10:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001c14:	10800060 	cmpeqi	r2,r2,1
 8001c18:	1000021e 	bne	r2,zero,8001c24 <prvLowPriorityPeekTask+0x120>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
 8001c1c:	00800044 	movi	r2,1
 8001c20:	d0a86015 	stw	r2,-24192(gp)
			taskYIELD();
		#endif

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 8001c24:	e0bffe04 	addi	r2,fp,-8
 8001c28:	000d883a 	mov	r6,zero
 8001c2c:	100b883a 	mov	r5,r2
 8001c30:	e13ffd17 	ldw	r4,-12(fp)
 8001c34:	80054200 	call	8005420 <xQueuePeek>
 8001c38:	10000226 	beq	r2,zero,8001c44 <prvLowPriorityPeekTask+0x140>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
 8001c3c:	00800044 	movi	r2,1
 8001c40:	d0a86015 	stw	r2,-24192(gp)
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
 8001c44:	d0a86317 	ldw	r2,-24180(gp)
 8001c48:	1009883a 	mov	r4,r2
 8001c4c:	80066b80 	call	80066b8 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
 8001c50:	d0a86517 	ldw	r2,-24172(gp)
 8001c54:	1009883a 	mov	r4,r2
 8001c58:	80066b80 	call	80066b8 <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
 8001c5c:	01000284 	movi	r4,10
 8001c60:	80062900 	call	8006290 <vTaskDelay>
	}
 8001c64:	003fae06 	br	8001b20 <prvLowPriorityPeekTask+0x1c>

08001c68 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreQueuePeekTasksStillRunning( void )
{
 8001c68:	deffff04 	addi	sp,sp,-4
 8001c6c:	df000015 	stw	fp,0(sp)
 8001c70:	d839883a 	mov	fp,sp
static uint32_t ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 8001c74:	d0e86217 	ldw	r3,-24184(gp)
 8001c78:	d0a86117 	ldw	r2,-24188(gp)
 8001c7c:	1880021e 	bne	r3,r2,8001c88 <xAreQueuePeekTasksStillRunning+0x20>
	{
		xErrorDetected = pdTRUE;
 8001c80:	00800044 	movi	r2,1
 8001c84:	d0a86015 	stw	r2,-24192(gp)
	}

	ulLastLoopCounter = ulLoopCounter;
 8001c88:	d0a86117 	ldw	r2,-24188(gp)
 8001c8c:	d0a86215 	stw	r2,-24184(gp)

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 8001c90:	d0a86017 	ldw	r2,-24192(gp)
 8001c94:	1005003a 	cmpeq	r2,r2,zero
 8001c98:	10803fcc 	andi	r2,r2,255
}
 8001c9c:	e037883a 	mov	sp,fp
 8001ca0:	df000017 	ldw	fp,0(sp)
 8001ca4:	dec00104 	addi	sp,sp,4
 8001ca8:	f800283a 	ret

08001cac <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 8001cac:	defffc04 	addi	sp,sp,-16
 8001cb0:	dfc00315 	stw	ra,12(sp)
 8001cb4:	df000215 	stw	fp,8(sp)
 8001cb8:	df000204 	addi	fp,sp,8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 8001cbc:	000d883a 	mov	r6,zero
 8001cc0:	01400104 	movi	r5,4
 8001cc4:	01000144 	movi	r4,5
 8001cc8:	80049840 	call	8004984 <xQueueGenericCreate>
 8001ccc:	d0a86615 	stw	r2,-24168(gp)

	if( xTestQueue != NULL )
 8001cd0:	d0a86617 	ldw	r2,-24168(gp)
 8001cd4:	10001526 	beq	r2,zero,8001d2c <vCreateBlockTimeTasks+0x80>
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 8001cd8:	d8000115 	stw	zero,4(sp)
 8001cdc:	00800084 	movi	r2,2
 8001ce0:	d8800015 	stw	r2,0(sp)
 8001ce4:	000f883a 	mov	r7,zero
 8001ce8:	01810004 	movi	r6,1024
 8001cec:	014200b4 	movhi	r5,2050
 8001cf0:	29689204 	addi	r5,r5,-23992
 8001cf4:	01020034 	movhi	r4,2048
 8001cf8:	21075104 	addi	r4,r4,7492
 8001cfc:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", bktBLOCK_TIME_TASK_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 8001d00:	d0a86704 	addi	r2,gp,-24164
 8001d04:	d8800115 	stw	r2,4(sp)
 8001d08:	00800044 	movi	r2,1
 8001d0c:	d8800015 	stw	r2,0(sp)
 8001d10:	000f883a 	mov	r7,zero
 8001d14:	01810004 	movi	r6,1024
 8001d18:	014200b4 	movhi	r5,2050
 8001d1c:	29689404 	addi	r5,r5,-23984
 8001d20:	01020034 	movhi	r4,2048
 8001d24:	21085704 	addi	r4,r4,8540
 8001d28:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 8001d2c:	0001883a 	nop
 8001d30:	e037883a 	mov	sp,fp
 8001d34:	dfc00117 	ldw	ra,4(sp)
 8001d38:	df000017 	ldw	fp,0(sp)
 8001d3c:	dec00204 	addi	sp,sp,8
 8001d40:	f800283a 	ret

08001d44 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 8001d44:	defff804 	addi	sp,sp,-32
 8001d48:	dfc00715 	stw	ra,28(sp)
 8001d4c:	df000615 	stw	fp,24(sp)
 8001d50:	df000604 	addi	fp,sp,24
 8001d54:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 8001d58:	80022880 	call	8002288 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001d5c:	e03ffd15 	stw	zero,-12(fp)
 8001d60:	00002206 	br	8001dec <vPrimaryBlockTimeTestTask+0xa8>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001d64:	e0bffd17 	ldw	r2,-12(fp)
 8001d68:	00c00284 	movi	r3,10
 8001d6c:	1884983a 	sll	r2,r3,r2
 8001d70:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001d74:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8001d78:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 8001d7c:	d0a86617 	ldw	r2,-24168(gp)
 8001d80:	e0fffe04 	addi	r3,fp,-8
 8001d84:	e1bffa17 	ldw	r6,-24(fp)
 8001d88:	180b883a 	mov	r5,r3
 8001d8c:	1009883a 	mov	r4,r2
 8001d90:	80050680 	call	8005068 <xQueueReceive>
 8001d94:	10000226 	beq	r2,zero,8001da0 <vPrimaryBlockTimeTestTask+0x5c>
			{
				xErrorOccurred = pdTRUE;
 8001d98:	00800044 	movi	r2,1
 8001d9c:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001da0:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8001da4:	1007883a 	mov	r3,r2
 8001da8:	e0bffb17 	ldw	r2,-20(fp)
 8001dac:	1885c83a 	sub	r2,r3,r2
 8001db0:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001db4:	e0fffc17 	ldw	r3,-16(fp)
 8001db8:	e0bffa17 	ldw	r2,-24(fp)
 8001dbc:	1880022e 	bgeu	r3,r2,8001dc8 <vPrimaryBlockTimeTestTask+0x84>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8001dc0:	00800044 	movi	r2,1
 8001dc4:	d0a86a15 	stw	r2,-24152(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001dc8:	e0bffa17 	ldw	r2,-24(fp)
 8001dcc:	10c003c4 	addi	r3,r2,15
 8001dd0:	e0bffc17 	ldw	r2,-16(fp)
 8001dd4:	1880022e 	bgeu	r3,r2,8001de0 <vPrimaryBlockTimeTestTask+0x9c>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 8001dd8:	00800044 	movi	r2,1
 8001ddc:	d0a86a15 	stw	r2,-24152(gp)

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001de0:	e0bffd17 	ldw	r2,-12(fp)
 8001de4:	10800044 	addi	r2,r2,1
 8001de8:	e0bffd15 	stw	r2,-12(fp)
 8001dec:	e0bffd17 	ldw	r2,-12(fp)
 8001df0:	10800150 	cmplti	r2,r2,5
 8001df4:	103fdb1e 	bne	r2,zero,8001d64 <vPrimaryBlockTimeTestTask+0x20>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001df8:	e03ffd15 	stw	zero,-12(fp)
 8001dfc:	00000e06 	br	8001e38 <vPrimaryBlockTimeTestTask+0xf4>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001e00:	d0a86617 	ldw	r2,-24168(gp)
 8001e04:	e0fffd04 	addi	r3,fp,-12
 8001e08:	000f883a 	mov	r7,zero
 8001e0c:	000d883a 	mov	r6,zero
 8001e10:	180b883a 	mov	r5,r3
 8001e14:	1009883a 	mov	r4,r2
 8001e18:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001e1c:	10800060 	cmpeqi	r2,r2,1
 8001e20:	1000021e 	bne	r2,zero,8001e2c <vPrimaryBlockTimeTestTask+0xe8>
			{
				xErrorOccurred = pdTRUE;
 8001e24:	00800044 	movi	r2,1
 8001e28:	d0a86a15 	stw	r2,-24152(gp)
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001e2c:	e0bffd17 	ldw	r2,-12(fp)
 8001e30:	10800044 	addi	r2,r2,1
 8001e34:	e0bffd15 	stw	r2,-12(fp)
 8001e38:	e0bffd17 	ldw	r2,-12(fp)
 8001e3c:	10800150 	cmplti	r2,r2,5
 8001e40:	103fef1e 	bne	r2,zero,8001e00 <vPrimaryBlockTimeTestTask+0xbc>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001e44:	e03ffd15 	stw	zero,-12(fp)
 8001e48:	00002306 	br	8001ed8 <vPrimaryBlockTimeTestTask+0x194>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001e4c:	e0bffd17 	ldw	r2,-12(fp)
 8001e50:	00c00284 	movi	r3,10
 8001e54:	1884983a 	sll	r2,r3,r2
 8001e58:	e0bffa15 	stw	r2,-24(fp)

			xTimeWhenBlocking = xTaskGetTickCount();
 8001e5c:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8001e60:	e0bffb15 	stw	r2,-20(fp)

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 8001e64:	d0a86617 	ldw	r2,-24168(gp)
 8001e68:	e0fffd04 	addi	r3,fp,-12
 8001e6c:	000f883a 	mov	r7,zero
 8001e70:	e1bffa17 	ldw	r6,-24(fp)
 8001e74:	180b883a 	mov	r5,r3
 8001e78:	1009883a 	mov	r4,r2
 8001e7c:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001e80:	10000226 	beq	r2,zero,8001e8c <vPrimaryBlockTimeTestTask+0x148>
			{
				xErrorOccurred = pdTRUE;
 8001e84:	00800044 	movi	r2,1
 8001e88:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001e8c:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8001e90:	1007883a 	mov	r3,r2
 8001e94:	e0bffb17 	ldw	r2,-20(fp)
 8001e98:	1885c83a 	sub	r2,r3,r2
 8001e9c:	e0bffc15 	stw	r2,-16(fp)

			if( xBlockedTime < xTimeToBlock )
 8001ea0:	e0fffc17 	ldw	r3,-16(fp)
 8001ea4:	e0bffa17 	ldw	r2,-24(fp)
 8001ea8:	1880022e 	bgeu	r3,r2,8001eb4 <vPrimaryBlockTimeTestTask+0x170>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8001eac:	00800044 	movi	r2,1
 8001eb0:	d0a86a15 	stw	r2,-24152(gp)
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001eb4:	e0bffa17 	ldw	r2,-24(fp)
 8001eb8:	10c003c4 	addi	r3,r2,15
 8001ebc:	e0bffc17 	ldw	r2,-16(fp)
 8001ec0:	1880022e 	bgeu	r3,r2,8001ecc <vPrimaryBlockTimeTestTask+0x188>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 8001ec4:	00800044 	movi	r2,1
 8001ec8:	d0a86a15 	stw	r2,-24152(gp)
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ecc:	e0bffd17 	ldw	r2,-12(fp)
 8001ed0:	10800044 	addi	r2,r2,1
 8001ed4:	e0bffd15 	stw	r2,-12(fp)
 8001ed8:	e0bffd17 	ldw	r2,-12(fp)
 8001edc:	10800150 	cmplti	r2,r2,5
 8001ee0:	103fda1e 	bne	r2,zero,8001e4c <vPrimaryBlockTimeTestTask+0x108>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 8001ee4:	d0286b15 	stw	zero,-24148(gp)
		vTaskResume( xSecondary );
 8001ee8:	d0a86717 	ldw	r2,-24164(gp)
 8001eec:	1009883a 	mov	r4,r2
 8001ef0:	80066b80 	call	80066b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001ef4:	00000206 	br	8001f00 <vPrimaryBlockTimeTestTask+0x1bc>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 8001ef8:	01000504 	movi	r4,20
 8001efc:	80062900 	call	8006290 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001f00:	d0a86b17 	ldw	r2,-24148(gp)
 8001f04:	10801558 	cmpnei	r2,r2,85
 8001f08:	103ffb1e 	bne	r2,zero,8001ef8 <vPrimaryBlockTimeTestTask+0x1b4>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 8001f0c:	01000504 	movi	r4,20
 8001f10:	80062900 	call	8006290 <vTaskDelay>
		xRunIndicator = 0;
 8001f14:	d0286b15 	stw	zero,-24148(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001f18:	e03ffd15 	stw	zero,-12(fp)
 8001f1c:	00002a06 	br	8001fc8 <vPrimaryBlockTimeTestTask+0x284>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001f20:	d0a86617 	ldw	r2,-24168(gp)
 8001f24:	e0fffe04 	addi	r3,fp,-8
 8001f28:	000d883a 	mov	r6,zero
 8001f2c:	180b883a 	mov	r5,r3
 8001f30:	1009883a 	mov	r4,r2
 8001f34:	80050680 	call	8005068 <xQueueReceive>
 8001f38:	10800060 	cmpeqi	r2,r2,1
 8001f3c:	1000021e 	bne	r2,zero,8001f48 <vPrimaryBlockTimeTestTask+0x204>
			{
				xErrorOccurred = pdTRUE;
 8001f40:	00800044 	movi	r2,1
 8001f44:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8001f48:	d0a86617 	ldw	r2,-24168(gp)
 8001f4c:	e0fffd04 	addi	r3,fp,-12
 8001f50:	000f883a 	mov	r7,zero
 8001f54:	000d883a 	mov	r6,zero
 8001f58:	180b883a 	mov	r5,r3
 8001f5c:	1009883a 	mov	r4,r2
 8001f60:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8001f64:	10800060 	cmpeqi	r2,r2,1
 8001f68:	1000021e 	bne	r2,zero,8001f74 <vPrimaryBlockTimeTestTask+0x230>
			{
				xErrorOccurred = pdTRUE;
 8001f6c:	00800044 	movi	r2,1
 8001f70:	d0a86a15 	stw	r2,-24152(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 8001f74:	d0a86b17 	ldw	r2,-24148(gp)
 8001f78:	10801558 	cmpnei	r2,r2,85
 8001f7c:	1000021e 	bne	r2,zero,8001f88 <vPrimaryBlockTimeTestTask+0x244>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 8001f80:	00800044 	movi	r2,1
 8001f84:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 8001f88:	d0a86717 	ldw	r2,-24164(gp)
 8001f8c:	01400104 	movi	r5,4
 8001f90:	1009883a 	mov	r4,r2
 8001f94:	80063900 	call	8006390 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 8001f98:	d0a86b17 	ldw	r2,-24148(gp)
 8001f9c:	10801558 	cmpnei	r2,r2,85
 8001fa0:	1000021e 	bne	r2,zero,8001fac <vPrimaryBlockTimeTestTask+0x268>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 8001fa4:	00800044 	movi	r2,1
 8001fa8:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8001fac:	d0a86717 	ldw	r2,-24164(gp)
 8001fb0:	01400044 	movi	r5,1
 8001fb4:	1009883a 	mov	r4,r2
 8001fb8:	80063900 	call	8006390 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001fbc:	e0bffd17 	ldw	r2,-12(fp)
 8001fc0:	10800044 	addi	r2,r2,1
 8001fc4:	e0bffd15 	stw	r2,-12(fp)
 8001fc8:	e0bffd17 	ldw	r2,-12(fp)
 8001fcc:	10800150 	cmplti	r2,r2,5
 8001fd0:	103fd31e 	bne	r2,zero,8001f20 <vPrimaryBlockTimeTestTask+0x1dc>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001fd4:	00000206 	br	8001fe0 <vPrimaryBlockTimeTestTask+0x29c>
		{
			vTaskDelay( bktSHORT_WAIT );
 8001fd8:	01000504 	movi	r4,20
 8001fdc:	80062900 	call	8006290 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8001fe0:	d0a86b17 	ldw	r2,-24148(gp)
 8001fe4:	10801558 	cmpnei	r2,r2,85
 8001fe8:	103ffb1e 	bne	r2,zero,8001fd8 <vPrimaryBlockTimeTestTask+0x294>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8001fec:	01000504 	movi	r4,20
 8001ff0:	80062900 	call	8006290 <vTaskDelay>
		xRunIndicator = 0;
 8001ff4:	d0286b15 	stw	zero,-24148(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001ff8:	e03ffd15 	stw	zero,-12(fp)
 8001ffc:	00000d06 	br	8002034 <vPrimaryBlockTimeTestTask+0x2f0>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8002000:	d0a86617 	ldw	r2,-24168(gp)
 8002004:	e0fffe04 	addi	r3,fp,-8
 8002008:	000d883a 	mov	r6,zero
 800200c:	180b883a 	mov	r5,r3
 8002010:	1009883a 	mov	r4,r2
 8002014:	80050680 	call	8005068 <xQueueReceive>
 8002018:	10800060 	cmpeqi	r2,r2,1
 800201c:	1000021e 	bne	r2,zero,8002028 <vPrimaryBlockTimeTestTask+0x2e4>
			{
				xErrorOccurred = pdTRUE;
 8002020:	00800044 	movi	r2,1
 8002024:	d0a86a15 	stw	r2,-24152(gp)

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8002028:	e0bffd17 	ldw	r2,-12(fp)
 800202c:	10800044 	addi	r2,r2,1
 8002030:	e0bffd15 	stw	r2,-12(fp)
 8002034:	e0bffd17 	ldw	r2,-12(fp)
 8002038:	10800150 	cmplti	r2,r2,5
 800203c:	103ff01e 	bne	r2,zero,8002000 <vPrimaryBlockTimeTestTask+0x2bc>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 8002040:	d0a86717 	ldw	r2,-24164(gp)
 8002044:	1009883a 	mov	r4,r2
 8002048:	80066b80 	call	80066b8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800204c:	00000206 	br	8002058 <vPrimaryBlockTimeTestTask+0x314>
		{
			vTaskDelay( bktSHORT_WAIT );
 8002050:	01000504 	movi	r4,20
 8002054:	80062900 	call	8006290 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8002058:	d0a86b17 	ldw	r2,-24148(gp)
 800205c:	10801558 	cmpnei	r2,r2,85
 8002060:	103ffb1e 	bne	r2,zero,8002050 <vPrimaryBlockTimeTestTask+0x30c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8002064:	01000504 	movi	r4,20
 8002068:	80062900 	call	8006290 <vTaskDelay>
		xRunIndicator = 0;
 800206c:	d0286b15 	stw	zero,-24148(gp)

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8002070:	e03ffd15 	stw	zero,-12(fp)
 8002074:	00002a06 	br	8002120 <vPrimaryBlockTimeTestTask+0x3dc>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 8002078:	d0a86617 	ldw	r2,-24168(gp)
 800207c:	e0fffd04 	addi	r3,fp,-12
 8002080:	000f883a 	mov	r7,zero
 8002084:	000d883a 	mov	r6,zero
 8002088:	180b883a 	mov	r5,r3
 800208c:	1009883a 	mov	r4,r2
 8002090:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8002094:	10800060 	cmpeqi	r2,r2,1
 8002098:	1000021e 	bne	r2,zero,80020a4 <vPrimaryBlockTimeTestTask+0x360>
			{
				xErrorOccurred = pdTRUE;
 800209c:	00800044 	movi	r2,1
 80020a0:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 80020a4:	d0a86617 	ldw	r2,-24168(gp)
 80020a8:	e0fffe04 	addi	r3,fp,-8
 80020ac:	000d883a 	mov	r6,zero
 80020b0:	180b883a 	mov	r5,r3
 80020b4:	1009883a 	mov	r4,r2
 80020b8:	80050680 	call	8005068 <xQueueReceive>
 80020bc:	10800060 	cmpeqi	r2,r2,1
 80020c0:	1000021e 	bne	r2,zero,80020cc <vPrimaryBlockTimeTestTask+0x388>
			{
				xErrorOccurred = pdTRUE;
 80020c4:	00800044 	movi	r2,1
 80020c8:	d0a86a15 	stw	r2,-24152(gp)
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 80020cc:	d0a86b17 	ldw	r2,-24148(gp)
 80020d0:	10801558 	cmpnei	r2,r2,85
 80020d4:	1000021e 	bne	r2,zero,80020e0 <vPrimaryBlockTimeTestTask+0x39c>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 80020d8:	00800044 	movi	r2,1
 80020dc:	d0a86a15 	stw	r2,-24152(gp)
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 80020e0:	d0a86717 	ldw	r2,-24164(gp)
 80020e4:	01400104 	movi	r5,4
 80020e8:	1009883a 	mov	r4,r2
 80020ec:	80063900 	call	8006390 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 80020f0:	d0a86b17 	ldw	r2,-24148(gp)
 80020f4:	10801558 	cmpnei	r2,r2,85
 80020f8:	1000021e 	bne	r2,zero,8002104 <vPrimaryBlockTimeTestTask+0x3c0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 80020fc:	00800044 	movi	r2,1
 8002100:	d0a86a15 	stw	r2,-24152(gp)
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 8002104:	d0a86717 	ldw	r2,-24164(gp)
 8002108:	01400044 	movi	r5,1
 800210c:	1009883a 	mov	r4,r2
 8002110:	80063900 	call	8006390 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8002114:	e0bffd17 	ldw	r2,-12(fp)
 8002118:	10800044 	addi	r2,r2,1
 800211c:	e0bffd15 	stw	r2,-12(fp)
 8002120:	e0bffd17 	ldw	r2,-12(fp)
 8002124:	10800150 	cmplti	r2,r2,5
 8002128:	103fd31e 	bne	r2,zero,8002078 <vPrimaryBlockTimeTestTask+0x334>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800212c:	00000206 	br	8002138 <vPrimaryBlockTimeTestTask+0x3f4>
		{
			vTaskDelay( bktSHORT_WAIT );
 8002130:	01000504 	movi	r4,20
 8002134:	80062900 	call	8006290 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 8002138:	d0a86b17 	ldw	r2,-24148(gp)
 800213c:	10801558 	cmpnei	r2,r2,85
 8002140:	103ffb1e 	bne	r2,zero,8002130 <vPrimaryBlockTimeTestTask+0x3ec>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
 8002144:	01000504 	movi	r4,20
 8002148:	80062900 	call	8006290 <vTaskDelay>

		xPrimaryCycles++;
 800214c:	d0a86817 	ldw	r2,-24160(gp)
 8002150:	10800044 	addi	r2,r2,1
 8002154:	d0a86815 	stw	r2,-24160(gp)
	}
 8002158:	003eff06 	br	8001d58 <vPrimaryBlockTimeTestTask+0x14>

0800215c <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 800215c:	defffa04 	addi	sp,sp,-24
 8002160:	dfc00515 	stw	ra,20(sp)
 8002164:	df000415 	stw	fp,16(sp)
 8002168:	df000404 	addi	fp,sp,16
 800216c:	e13fff15 	stw	r4,-4(fp)
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 8002170:	0009883a 	mov	r4,zero
 8002174:	80065500 	call	8006550 <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8002178:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 800217c:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 8002180:	e03ffe15 	stw	zero,-8(fp)
		xRunIndicator = bktRUN_INDICATOR;
 8002184:	00801544 	movi	r2,85
 8002188:	d0a86b15 	stw	r2,-24148(gp)
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 800218c:	d0a86617 	ldw	r2,-24168(gp)
 8002190:	e0fffe04 	addi	r3,fp,-8
 8002194:	000f883a 	mov	r7,zero
 8002198:	01802bc4 	movi	r6,175
 800219c:	180b883a 	mov	r5,r3
 80021a0:	1009883a 	mov	r4,r2
 80021a4:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80021a8:	10000226 	beq	r2,zero,80021b4 <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
 80021ac:	00800044 	movi	r2,1
 80021b0:	d0a86a15 	stw	r2,-24152(gp)
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 80021b4:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 80021b8:	1007883a 	mov	r3,r2
 80021bc:	e0bffc17 	ldw	r2,-16(fp)
 80021c0:	1885c83a 	sub	r2,r3,r2
 80021c4:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 80021c8:	e0bffd17 	ldw	r2,-12(fp)
 80021cc:	10802be8 	cmpgeui	r2,r2,175
 80021d0:	1000021e 	bne	r2,zero,80021dc <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
 80021d4:	00800044 	movi	r2,1
 80021d8:	d0a86a15 	stw	r2,-24152(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 80021dc:	e0bffd17 	ldw	r2,-12(fp)
 80021e0:	10802ff0 	cmpltui	r2,r2,191
 80021e4:	1000021e 	bne	r2,zero,80021f0 <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
 80021e8:	00800044 	movi	r2,1
 80021ec:	d0a86a15 	stw	r2,-24152(gp)
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 80021f0:	00801544 	movi	r2,85
 80021f4:	d0a86b15 	stw	r2,-24148(gp)
		vTaskSuspend( NULL );
 80021f8:	0009883a 	mov	r4,zero
 80021fc:	80065500 	call	8006550 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8002200:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8002204:	e0bffc15 	stw	r2,-16(fp)

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 8002208:	00801544 	movi	r2,85
 800220c:	d0a86b15 	stw	r2,-24148(gp)
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 8002210:	d0a86617 	ldw	r2,-24168(gp)
 8002214:	e0fffe04 	addi	r3,fp,-8
 8002218:	01802bc4 	movi	r6,175
 800221c:	180b883a 	mov	r5,r3
 8002220:	1009883a 	mov	r4,r2
 8002224:	80050680 	call	8005068 <xQueueReceive>
 8002228:	10000226 	beq	r2,zero,8002234 <vSecondaryBlockTimeTestTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 800222c:	00800044 	movi	r2,1
 8002230:	d0a86a15 	stw	r2,-24152(gp)
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8002234:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8002238:	1007883a 	mov	r3,r2
 800223c:	e0bffc17 	ldw	r2,-16(fp)
 8002240:	1885c83a 	sub	r2,r3,r2
 8002244:	e0bffd15 	stw	r2,-12(fp)

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8002248:	e0bffd17 	ldw	r2,-12(fp)
 800224c:	10802be8 	cmpgeui	r2,r2,175
 8002250:	1000021e 	bne	r2,zero,800225c <vSecondaryBlockTimeTestTask+0x100>
		{
			xErrorOccurred = pdTRUE;
 8002254:	00800044 	movi	r2,1
 8002258:	d0a86a15 	stw	r2,-24152(gp)
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 800225c:	e0bffd17 	ldw	r2,-12(fp)
 8002260:	10802ff0 	cmpltui	r2,r2,191
 8002264:	1000021e 	bne	r2,zero,8002270 <vSecondaryBlockTimeTestTask+0x114>
		{
			xErrorOccurred = pdTRUE;
 8002268:	00800044 	movi	r2,1
 800226c:	d0a86a15 	stw	r2,-24152(gp)
		}

		xRunIndicator = bktRUN_INDICATOR;
 8002270:	00801544 	movi	r2,85
 8002274:	d0a86b15 	stw	r2,-24148(gp)

		xSecondaryCycles++;
 8002278:	d0a86917 	ldw	r2,-24156(gp)
 800227c:	10800044 	addi	r2,r2,1
 8002280:	d0a86915 	stw	r2,-24156(gp)
	}
 8002284:	003fba06 	br	8002170 <vSecondaryBlockTimeTestTask+0x14>

08002288 <prvBasicDelayTests>:
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 8002288:	defff604 	addi	sp,sp,-40
 800228c:	dfc00915 	stw	ra,36(sp)
 8002290:	df000815 	stw	fp,32(sp)
 8002294:	df000804 	addi	fp,sp,32
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 8002298:	008012c4 	movi	r2,75
 800229c:	e0bff915 	stw	r2,-28(fp)
 80022a0:	00800144 	movi	r2,5
 80022a4:	e0bffa15 	stw	r2,-24(fp)
 80022a8:	008001c4 	movi	r2,7
 80022ac:	e0bffb15 	stw	r2,-20(fp)

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 80022b0:	014000c4 	movi	r5,3
 80022b4:	0009883a 	mov	r4,zero
 80022b8:	80063900 	call	8006390 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 80022bc:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 80022c0:	e0bffc15 	stw	r2,-16(fp)
	vTaskDelay( bktTIME_TO_BLOCK );
 80022c4:	01002bc4 	movi	r4,175
 80022c8:	80062900 	call	8006290 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 80022cc:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 80022d0:	e0bffd15 	stw	r2,-12(fp)

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 80022d4:	e0fffd17 	ldw	r3,-12(fp)
 80022d8:	e0bffc17 	ldw	r2,-16(fp)
 80022dc:	1885c83a 	sub	r2,r3,r2
 80022e0:	e0fffb17 	ldw	r3,-20(fp)
 80022e4:	18c02bc4 	addi	r3,r3,175
 80022e8:	1880022e 	bgeu	r3,r2,80022f4 <prvBasicDelayTests+0x6c>
	{
		xErrorOccurred = pdTRUE;
 80022ec:	00800044 	movi	r2,1
 80022f0:	d0a86a15 	stw	r2,-24152(gp)
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 80022f4:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 80022f8:	e0bffd15 	stw	r2,-12(fp)
	xLastUnblockTime = xPostTime;
 80022fc:	e0bffd17 	ldw	r2,-12(fp)
 8002300:	e0bfff15 	stw	r2,-4(fp)

	for( x = 0; x < xCycles; x++ )
 8002304:	e03ff815 	stw	zero,-32(fp)
 8002308:	00001a06 	br	8002374 <prvBasicDelayTests+0xec>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 800230c:	e17ff917 	ldw	r5,-28(fp)
 8002310:	e13ff817 	ldw	r4,-32(fp)
 8002314:	80087fc0 	call	80087fc <__mulsi3>
 8002318:	1007883a 	mov	r3,r2
 800231c:	e0bffd17 	ldw	r2,-12(fp)
 8002320:	1885883a 	add	r2,r3,r2
 8002324:	e0bffe15 	stw	r2,-8(fp)

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 8002328:	e0bfff04 	addi	r2,fp,-4
 800232c:	e17ff917 	ldw	r5,-28(fp)
 8002330:	1009883a 	mov	r4,r2
 8002334:	80061a00 	call	80061a0 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8002338:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 800233c:	1007883a 	mov	r3,r2
 8002340:	e0bffe17 	ldw	r2,-8(fp)
 8002344:	1885c83a 	sub	r2,r3,r2
 8002348:	e0fffb17 	ldw	r3,-20(fp)
 800234c:	18c02bc4 	addi	r3,r3,175
 8002350:	1880022e 	bgeu	r3,r2,800235c <prvBasicDelayTests+0xd4>
		{
			xErrorOccurred = pdTRUE;
 8002354:	00800044 	movi	r2,1
 8002358:	d0a86a15 	stw	r2,-24152(gp)
		}

		xPrimaryCycles++;
 800235c:	d0a86817 	ldw	r2,-24160(gp)
 8002360:	10800044 	addi	r2,r2,1
 8002364:	d0a86815 	stw	r2,-24160(gp)

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
	xLastUnblockTime = xPostTime;

	for( x = 0; x < xCycles; x++ )
 8002368:	e0bff817 	ldw	r2,-32(fp)
 800236c:	10800044 	addi	r2,r2,1
 8002370:	e0bff815 	stw	r2,-32(fp)
 8002374:	e0fff817 	ldw	r3,-32(fp)
 8002378:	e0bffa17 	ldw	r2,-24(fp)
 800237c:	18bfe336 	bltu	r3,r2,800230c <prvBasicDelayTests+0x84>

		xPrimaryCycles++;
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 8002380:	01400084 	movi	r5,2
 8002384:	0009883a 	mov	r4,zero
 8002388:	80063900 	call	8006390 <vTaskPrioritySet>
}
 800238c:	0001883a 	nop
 8002390:	e037883a 	mov	sp,fp
 8002394:	dfc00117 	ldw	ra,4(sp)
 8002398:	df000017 	ldw	fp,0(sp)
 800239c:	dec00204 	addi	sp,sp,8
 80023a0:	f800283a 	ret

080023a4 <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 80023a4:	defffe04 	addi	sp,sp,-8
 80023a8:	df000115 	stw	fp,4(sp)
 80023ac:	df000104 	addi	fp,sp,4
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 80023b0:	00800044 	movi	r2,1
 80023b4:	e0bfff15 	stw	r2,-4(fp)

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 80023b8:	d0e86817 	ldw	r3,-24160(gp)
 80023bc:	d0a86c17 	ldw	r2,-24144(gp)
 80023c0:	1880011e 	bne	r3,r2,80023c8 <xAreBlockTimeTestTasksStillRunning+0x24>
	{
		xReturn = pdFAIL;
 80023c4:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 80023c8:	d0e86917 	ldw	r3,-24156(gp)
 80023cc:	d0a86d17 	ldw	r2,-24140(gp)
 80023d0:	1880011e 	bne	r3,r2,80023d8 <xAreBlockTimeTestTasksStillRunning+0x34>
	{
		xReturn = pdFAIL;
 80023d4:	e03fff15 	stw	zero,-4(fp)
	}

	if( xErrorOccurred == pdTRUE )
 80023d8:	d0a86a17 	ldw	r2,-24152(gp)
 80023dc:	10800058 	cmpnei	r2,r2,1
 80023e0:	1000011e 	bne	r2,zero,80023e8 <xAreBlockTimeTestTasksStillRunning+0x44>
	{
		xReturn = pdFAIL;
 80023e4:	e03fff15 	stw	zero,-4(fp)
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 80023e8:	d0a86917 	ldw	r2,-24156(gp)
 80023ec:	d0a86d15 	stw	r2,-24140(gp)
	xLastPrimaryCycleCount = xPrimaryCycles;
 80023f0:	d0a86817 	ldw	r2,-24160(gp)
 80023f4:	d0a86c15 	stw	r2,-24144(gp)

	return xReturn;
 80023f8:	e0bfff17 	ldw	r2,-4(fp)
}
 80023fc:	e037883a 	mov	sp,fp
 8002400:	df000017 	ldw	fp,0(sp)
 8002404:	dec00104 	addi	sp,sp,4
 8002408:	f800283a 	ret

0800240c <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
 800240c:	defff904 	addi	sp,sp,-28
 8002410:	dfc00615 	stw	ra,24(sp)
 8002414:	df000515 	stw	fp,20(sp)
 8002418:	df000504 	addi	fp,sp,20
 800241c:	e13ffd15 	stw	r4,-12(fp)
 8002420:	e17ffe15 	stw	r5,-8(fp)
 8002424:	e1bfff15 	stw	r6,-4(fp)
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
 8002428:	e0bfff17 	ldw	r2,-4(fp)
 800242c:	d0a86f15 	stw	r2,-24132(gp)
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
 8002430:	01400604 	movi	r5,24
 8002434:	e13ffe17 	ldw	r4,-8(fp)
 8002438:	80082200 	call	8008220 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
 800243c:	e0bffd17 	ldw	r2,-12(fp)
 8002440:	10bfffc4 	addi	r2,r2,-1
 8002444:	d8000115 	stw	zero,4(sp)
 8002448:	d8800015 	stw	r2,0(sp)
 800244c:	000f883a 	mov	r7,zero
 8002450:	01810004 	movi	r6,1024
 8002454:	014200b4 	movhi	r5,2050
 8002458:	29689604 	addi	r5,r5,-23976
 800245c:	01020034 	movhi	r4,2048
 8002460:	21092a04 	addi	r4,r4,9384
 8002464:	8005ce40 	call	8005ce4 <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8002468:	d8000115 	stw	zero,4(sp)
 800246c:	e0bffd17 	ldw	r2,-12(fp)
 8002470:	d8800015 	stw	r2,0(sp)
 8002474:	000f883a 	mov	r7,zero
 8002478:	01810004 	movi	r6,1024
 800247c:	014200b4 	movhi	r5,2050
 8002480:	29689804 	addi	r5,r5,-23968
 8002484:	01020034 	movhi	r4,2048
 8002488:	21095704 	addi	r4,r4,9564
 800248c:	8005ce40 	call	8005ce4 <xTaskCreate>
}
 8002490:	0001883a 	nop
 8002494:	e037883a 	mov	sp,fp
 8002498:	dfc00117 	ldw	ra,4(sp)
 800249c:	df000017 	ldw	fp,0(sp)
 80024a0:	dec00204 	addi	sp,sp,8
 80024a4:	f800283a 	ret

080024a8 <vComTxTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
 80024a8:	defffb04 	addi	sp,sp,-20
 80024ac:	dfc00415 	stw	ra,16(sp)
 80024b0:	df000315 	stw	fp,12(sp)
 80024b4:	df000304 	addi	fp,sp,12
 80024b8:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 80024bc:	00801044 	movi	r2,65
 80024c0:	e0bffd05 	stb	r2,-12(fp)
 80024c4:	00000e06 	br	8002500 <vComTxTask+0x58>
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
 80024c8:	d0a86e17 	ldw	r2,-24136(gp)
 80024cc:	e0fffd07 	ldb	r3,-12(fp)
 80024d0:	000d883a 	mov	r6,zero
 80024d4:	180b883a 	mov	r5,r3
 80024d8:	1009883a 	mov	r4,r2
 80024dc:	80083700 	call	8008370 <xSerialPutChar>
 80024e0:	10800058 	cmpnei	r2,r2,1
 80024e4:	1000031e 	bne	r2,zero,80024f4 <vComTxTask+0x4c>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
 80024e8:	d0a86f17 	ldw	r2,-24132(gp)
 80024ec:	1009883a 	mov	r4,r2
 80024f0:	8003ba80 	call	8003ba8 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
 80024f4:	e0bffd03 	ldbu	r2,-12(fp)
 80024f8:	10800044 	addi	r2,r2,1
 80024fc:	e0bffd05 	stb	r2,-12(fp)
 8002500:	e0bffd07 	ldb	r2,-12(fp)
 8002504:	10801650 	cmplti	r2,r2,89
 8002508:	103fef1e 	bne	r2,zero,80024c8 <vComTxTask+0x20>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
 800250c:	d0a86f17 	ldw	r2,-24132(gp)
 8002510:	000b883a 	mov	r5,zero
 8002514:	1009883a 	mov	r4,r2
 8002518:	8003b080 	call	8003b08 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
 800251c:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8002520:	108000c4 	addi	r2,r2,3
 8002524:	e0bffe15 	stw	r2,-8(fp)

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
 8002528:	e0bffe17 	ldw	r2,-8(fp)
 800252c:	01402584 	movi	r5,150
 8002530:	1009883a 	mov	r4,r2
 8002534:	80087a40 	call	80087a4 <__umodsi3>
 8002538:	e0bffe15 	stw	r2,-8(fp)

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
 800253c:	e0bffe17 	ldw	r2,-8(fp)
 8002540:	10800ca8 	cmpgeui	r2,r2,50
 8002544:	1000021e 	bne	r2,zero,8002550 <vComTxTask+0xa8>
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
 8002548:	00800c84 	movi	r2,50
 800254c:	e0bffe15 	stw	r2,-8(fp)
		}

		vTaskDelay( xTimeToWait );
 8002550:	e13ffe17 	ldw	r4,-8(fp)
 8002554:	80062900 	call	8006290 <vTaskDelay>
	}
 8002558:	003fd806 	br	80024bc <vComTxTask+0x14>

0800255c <vComRxTask>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
 800255c:	defff904 	addi	sp,sp,-28
 8002560:	dfc00615 	stw	ra,24(sp)
 8002564:	df000515 	stw	fp,20(sp)
 8002568:	df000504 	addi	fp,sp,20
 800256c:	e13fff15 	stw	r4,-4(fp)
signed char cExpectedByte, cByteRxed;
BaseType_t xResyncRequired = pdFALSE, xErrorOccurred = pdFALSE;
 8002570:	e03ffc15 	stw	zero,-16(fp)
 8002574:	e03ffd15 	stw	zero,-12(fp)

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 8002578:	00801044 	movi	r2,65
 800257c:	e0bffb05 	stb	r2,-20(fp)
 8002580:	00001806 	br	80025e4 <vComRxTask+0x88>
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
 8002584:	d0a86e17 	ldw	r2,-24136(gp)
 8002588:	e0fffe04 	addi	r3,fp,-8
 800258c:	01bfffd4 	movui	r6,65535
 8002590:	180b883a 	mov	r5,r3
 8002594:	1009883a 	mov	r4,r2
 8002598:	80082fc0 	call	80082fc <xSerialGetChar>
 800259c:	10000e26 	beq	r2,zero,80025d8 <vComRxTask+0x7c>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
 80025a0:	e0bffe03 	ldbu	r2,-8(fp)
 80025a4:	10c03fcc 	andi	r3,r2,255
 80025a8:	18c0201c 	xori	r3,r3,128
 80025ac:	18ffe004 	addi	r3,r3,-128
 80025b0:	e0bffb07 	ldb	r2,-20(fp)
 80025b4:	1880051e 	bne	r3,r2,80025cc <vComRxTask+0x70>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
 80025b8:	d0a86f17 	ldw	r2,-24132(gp)
 80025bc:	10800044 	addi	r2,r2,1
 80025c0:	1009883a 	mov	r4,r2
 80025c4:	8003ba80 	call	8003ba8 <vParTestToggleLED>
 80025c8:	00000306 	br	80025d8 <vComRxTask+0x7c>
				}
				else
				{
					xResyncRequired = pdTRUE;
 80025cc:	00800044 	movi	r2,1
 80025d0:	e0bffc15 	stw	r2,-16(fp)
					break; /*lint !e960 Non-switch break allowed. */
 80025d4:	00000606 	br	80025f0 <vComRxTask+0x94>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
 80025d8:	e0bffb03 	ldbu	r2,-20(fp)
 80025dc:	10800044 	addi	r2,r2,1
 80025e0:	e0bffb05 	stb	r2,-20(fp)
 80025e4:	e0bffb07 	ldb	r2,-20(fp)
 80025e8:	10801650 	cmplti	r2,r2,89
 80025ec:	103fe51e 	bne	r2,zero,8002584 <vComRxTask+0x28>
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
 80025f0:	d0a86f17 	ldw	r2,-24132(gp)
 80025f4:	10800044 	addi	r2,r2,1
 80025f8:	000b883a 	mov	r5,zero
 80025fc:	1009883a 	mov	r4,r2
 8002600:	8003b080 	call	8003b08 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
 8002604:	e0bffc17 	ldw	r2,-16(fp)
 8002608:	10800058 	cmpnei	r2,r2,1
 800260c:	1000121e 	bne	r2,zero,8002658 <vComRxTask+0xfc>
		{
			while( cByteRxed != comLAST_BYTE )
 8002610:	00000606 	br	800262c <vComRxTask+0xd0>
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
 8002614:	d0a86e17 	ldw	r2,-24136(gp)
 8002618:	e0fffe04 	addi	r3,fp,-8
 800261c:	01bfffd4 	movui	r6,65535
 8002620:	180b883a 	mov	r5,r3
 8002624:	1009883a 	mov	r4,r2
 8002628:	80082fc0 	call	80082fc <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
 800262c:	e0bffe03 	ldbu	r2,-8(fp)
 8002630:	10803fcc 	andi	r2,r2,255
 8002634:	1080201c 	xori	r2,r2,128
 8002638:	10bfe004 	addi	r2,r2,-128
 800263c:	10801618 	cmpnei	r2,r2,88
 8002640:	103ff41e 	bne	r2,zero,8002614 <vComRxTask+0xb8>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
 8002644:	e0bffd17 	ldw	r2,-12(fp)
 8002648:	10800044 	addi	r2,r2,1
 800264c:	e0bffd15 	stw	r2,-12(fp)

			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
 8002650:	e03ffc15 	stw	zero,-16(fp)
 8002654:	003fc806 	br	8002578 <vComRxTask+0x1c>
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
 8002658:	e0bffd17 	ldw	r2,-12(fp)
 800265c:	10800088 	cmpgei	r2,r2,2
 8002660:	103fc51e 	bne	r2,zero,8002578 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
 8002664:	d0a87017 	ldw	r2,-24128(gp)
 8002668:	10800044 	addi	r2,r2,1
 800266c:	d0a87015 	stw	r2,-24128(gp)
			}
		}
	}
 8002670:	003fc106 	br	8002578 <vComRxTask+0x1c>

08002674 <xAreComTestTasksStillRunning>:
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

BaseType_t xAreComTestTasksStillRunning( void )
{
 8002674:	defffe04 	addi	sp,sp,-8
 8002678:	df000115 	stw	fp,4(sp)
 800267c:	df000104 	addi	fp,sp,4
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
 8002680:	d0a87017 	ldw	r2,-24128(gp)
 8002684:	1000021e 	bne	r2,zero,8002690 <xAreComTestTasksStillRunning+0x1c>
	{
		xReturn = pdFALSE;
 8002688:	e03fff15 	stw	zero,-4(fp)
 800268c:	00000206 	br	8002698 <xAreComTestTasksStillRunning+0x24>
	}
	else
	{
		xReturn = pdTRUE;
 8002690:	00800044 	movi	r2,1
 8002694:	e0bfff15 	stw	r2,-4(fp)
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
 8002698:	d0287015 	stw	zero,-24128(gp)

	return xReturn;
 800269c:	e0bfff17 	ldw	r2,-4(fp)
}
 80026a0:	e037883a 	mov	sp,fp
 80026a4:	df000017 	ldw	fp,0(sp)
 80026a8:	dec00104 	addi	sp,sp,4
 80026ac:	f800283a 	ret

080026b0 <vStartCountingSemaphoreTasks>:
static xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 80026b0:	defffc04 	addi	sp,sp,-16
 80026b4:	dfc00315 	stw	ra,12(sp)
 80026b8:	df000215 	stw	fp,8(sp)
 80026bc:	df000204 	addi	fp,sp,8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 80026c0:	01403204 	movi	r5,200
 80026c4:	01003204 	movi	r4,200
 80026c8:	8004c980 	call	8004c98 <xQueueCreateCountingSemaphore>
 80026cc:	1007883a 	mov	r3,r2
 80026d0:	008200b4 	movhi	r2,2050
 80026d4:	10bc7404 	addi	r2,r2,-3632
 80026d8:	10c00015 	stw	r3,0(r2)
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 80026dc:	008200b4 	movhi	r2,2050
 80026e0:	10bc7404 	addi	r2,r2,-3632
 80026e4:	00c02a84 	movi	r3,170
 80026e8:	10c00115 	stw	r3,4(r2)
	xParameters[ 0 ].uxLoopCounter = 0;
 80026ec:	008200b4 	movhi	r2,2050
 80026f0:	10bc7404 	addi	r2,r2,-3632
 80026f4:	10000215 	stw	zero,8(r2)

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 80026f8:	000b883a 	mov	r5,zero
 80026fc:	01003204 	movi	r4,200
 8002700:	8004c980 	call	8004c98 <xQueueCreateCountingSemaphore>
 8002704:	1007883a 	mov	r3,r2
 8002708:	008200b4 	movhi	r2,2050
 800270c:	10bc7404 	addi	r2,r2,-3632
 8002710:	10c00315 	stw	r3,12(r2)
	xParameters[ 1 ].uxExpectedStartCount = 0;
 8002714:	008200b4 	movhi	r2,2050
 8002718:	10bc7404 	addi	r2,r2,-3632
 800271c:	10000415 	stw	zero,16(r2)
	xParameters[ 1 ].uxLoopCounter = 0;
 8002720:	008200b4 	movhi	r2,2050
 8002724:	10bc7404 	addi	r2,r2,-3632
 8002728:	10000515 	stw	zero,20(r2)

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 800272c:	008200b4 	movhi	r2,2050
 8002730:	10bc7404 	addi	r2,r2,-3632
 8002734:	10800017 	ldw	r2,0(r2)
 8002738:	1000041e 	bne	r2,zero,800274c <vStartCountingSemaphoreTasks+0x9c>
 800273c:	008200b4 	movhi	r2,2050
 8002740:	10bc7404 	addi	r2,r2,-3632
 8002744:	10800317 	ldw	r2,12(r2)
 8002748:	10001426 	beq	r2,zero,800279c <vStartCountingSemaphoreTasks+0xec>
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 800274c:	d8000115 	stw	zero,4(sp)
 8002750:	d8000015 	stw	zero,0(sp)
 8002754:	01c200b4 	movhi	r7,2050
 8002758:	39fc7404 	addi	r7,r7,-3632
 800275c:	01810004 	movi	r6,1024
 8002760:	014200b4 	movhi	r5,2050
 8002764:	29689a04 	addi	r5,r5,-23960
 8002768:	01020034 	movhi	r4,2048
 800276c:	210a4f04 	addi	r4,r4,10556
 8002770:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 8002774:	d8000115 	stw	zero,4(sp)
 8002778:	d8000015 	stw	zero,0(sp)
 800277c:	01c200b4 	movhi	r7,2050
 8002780:	39fc7704 	addi	r7,r7,-3620
 8002784:	01810004 	movi	r6,1024
 8002788:	014200b4 	movhi	r5,2050
 800278c:	29689c04 	addi	r5,r5,-23952
 8002790:	01020034 	movhi	r4,2048
 8002794:	210a4f04 	addi	r4,r4,10556
 8002798:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 800279c:	0001883a 	nop
 80027a0:	e037883a 	mov	sp,fp
 80027a4:	dfc00117 	ldw	ra,4(sp)
 80027a8:	df000017 	ldw	fp,0(sp)
 80027ac:	dec00204 	addi	sp,sp,8
 80027b0:	f800283a 	ret

080027b4 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 80027b4:	defffb04 	addi	sp,sp,-20
 80027b8:	dfc00415 	stw	ra,16(sp)
 80027bc:	df000315 	stw	fp,12(sp)
 80027c0:	df000304 	addi	fp,sp,12
 80027c4:	e13ffe15 	stw	r4,-8(fp)
 80027c8:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 80027cc:	000f883a 	mov	r7,zero
 80027d0:	000d883a 	mov	r6,zero
 80027d4:	000b883a 	mov	r5,zero
 80027d8:	e13ffe17 	ldw	r4,-8(fp)
 80027dc:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80027e0:	10800058 	cmpnei	r2,r2,1
 80027e4:	1000021e 	bne	r2,zero,80027f0 <prvDecrementSemaphoreCount+0x3c>
	{
		xErrorDetected = pdTRUE;
 80027e8:	00800044 	movi	r2,1
 80027ec:	d0a87115 	stw	r2,-24124(gp)
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80027f0:	e03ffd15 	stw	zero,-12(fp)
 80027f4:	00000f06 	br	8002834 <prvDecrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 80027f8:	000b883a 	mov	r5,zero
 80027fc:	e13ffe17 	ldw	r4,-8(fp)
 8002800:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8002804:	10800060 	cmpeqi	r2,r2,1
 8002808:	1000021e 	bne	r2,zero,8002814 <prvDecrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 800280c:	00800044 	movi	r2,1
 8002810:	d0a87115 	stw	r2,-24124(gp)
		}

		( *puxLoopCounter )++;
 8002814:	e0bfff17 	ldw	r2,-4(fp)
 8002818:	10800017 	ldw	r2,0(r2)
 800281c:	10c00044 	addi	r3,r2,1
 8002820:	e0bfff17 	ldw	r2,-4(fp)
 8002824:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8002828:	e0bffd17 	ldw	r2,-12(fp)
 800282c:	10800044 	addi	r2,r2,1
 8002830:	e0bffd15 	stw	r2,-12(fp)
 8002834:	e0bffd17 	ldw	r2,-12(fp)
 8002838:	10803230 	cmpltui	r2,r2,200
 800283c:	103fee1e 	bne	r2,zero,80027f8 <prvDecrementSemaphoreCount+0x44>
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8002840:	000b883a 	mov	r5,zero
 8002844:	e13ffe17 	ldw	r4,-8(fp)
 8002848:	80052100 	call	8005210 <xQueueSemaphoreTake>
 800284c:	10800058 	cmpnei	r2,r2,1
 8002850:	1000021e 	bne	r2,zero,800285c <prvDecrementSemaphoreCount+0xa8>
	{
		xErrorDetected = pdTRUE;
 8002854:	00800044 	movi	r2,1
 8002858:	d0a87115 	stw	r2,-24124(gp)
	}
}
 800285c:	0001883a 	nop
 8002860:	e037883a 	mov	sp,fp
 8002864:	dfc00117 	ldw	ra,4(sp)
 8002868:	df000017 	ldw	fp,0(sp)
 800286c:	dec00204 	addi	sp,sp,8
 8002870:	f800283a 	ret

08002874 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, volatile UBaseType_t *puxLoopCounter )
{
 8002874:	defffb04 	addi	sp,sp,-20
 8002878:	dfc00415 	stw	ra,16(sp)
 800287c:	df000315 	stw	fp,12(sp)
 8002880:	df000304 	addi	fp,sp,12
 8002884:	e13ffe15 	stw	r4,-8(fp)
 8002888:	e17fff15 	stw	r5,-4(fp)
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 800288c:	000b883a 	mov	r5,zero
 8002890:	e13ffe17 	ldw	r4,-8(fp)
 8002894:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8002898:	10800058 	cmpnei	r2,r2,1
 800289c:	1000021e 	bne	r2,zero,80028a8 <prvIncrementSemaphoreCount+0x34>
	{
		xErrorDetected = pdTRUE;
 80028a0:	00800044 	movi	r2,1
 80028a4:	d0a87115 	stw	r2,-24124(gp)
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80028a8:	e03ffd15 	stw	zero,-12(fp)
 80028ac:	00001106 	br	80028f4 <prvIncrementSemaphoreCount+0x80>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 80028b0:	000f883a 	mov	r7,zero
 80028b4:	000d883a 	mov	r6,zero
 80028b8:	000b883a 	mov	r5,zero
 80028bc:	e13ffe17 	ldw	r4,-8(fp)
 80028c0:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80028c4:	10800060 	cmpeqi	r2,r2,1
 80028c8:	1000021e 	bne	r2,zero,80028d4 <prvIncrementSemaphoreCount+0x60>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 80028cc:	00800044 	movi	r2,1
 80028d0:	d0a87115 	stw	r2,-24124(gp)
		}

		( *puxLoopCounter )++;
 80028d4:	e0bfff17 	ldw	r2,-4(fp)
 80028d8:	10800017 	ldw	r2,0(r2)
 80028dc:	10c00044 	addi	r3,r2,1
 80028e0:	e0bfff17 	ldw	r2,-4(fp)
 80028e4:	10c00015 	stw	r3,0(r2)
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 80028e8:	e0bffd17 	ldw	r2,-12(fp)
 80028ec:	10800044 	addi	r2,r2,1
 80028f0:	e0bffd15 	stw	r2,-12(fp)
 80028f4:	e0bffd17 	ldw	r2,-12(fp)
 80028f8:	10803230 	cmpltui	r2,r2,200
 80028fc:	103fec1e 	bne	r2,zero,80028b0 <prvIncrementSemaphoreCount+0x3c>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8002900:	000f883a 	mov	r7,zero
 8002904:	000d883a 	mov	r6,zero
 8002908:	000b883a 	mov	r5,zero
 800290c:	e13ffe17 	ldw	r4,-8(fp)
 8002910:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8002914:	10800058 	cmpnei	r2,r2,1
 8002918:	1000021e 	bne	r2,zero,8002924 <prvIncrementSemaphoreCount+0xb0>
	{
		xErrorDetected = pdTRUE;
 800291c:	00800044 	movi	r2,1
 8002920:	d0a87115 	stw	r2,-24124(gp)
	}
}
 8002924:	0001883a 	nop
 8002928:	e037883a 	mov	sp,fp
 800292c:	dfc00117 	ldw	ra,4(sp)
 8002930:	df000017 	ldw	fp,0(sp)
 8002934:	dec00204 	addi	sp,sp,8
 8002938:	f800283a 	ret

0800293c <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 800293c:	defffc04 	addi	sp,sp,-16
 8002940:	dfc00315 	stw	ra,12(sp)
 8002944:	df000215 	stw	fp,8(sp)
 8002948:	df000204 	addi	fp,sp,8
 800294c:	e13fff15 	stw	r4,-4(fp)
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 8002950:	e0bfff17 	ldw	r2,-4(fp)
 8002954:	e0bffe15 	stw	r2,-8(fp)

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 8002958:	e0bffe17 	ldw	r2,-8(fp)
 800295c:	10800117 	ldw	r2,4(r2)
 8002960:	10802a98 	cmpnei	r2,r2,170
 8002964:	1000071e 	bne	r2,zero,8002984 <prvCountingSemaphoreTask+0x48>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8002968:	e0bffe17 	ldw	r2,-8(fp)
 800296c:	10c00017 	ldw	r3,0(r2)
 8002970:	e0bffe17 	ldw	r2,-8(fp)
 8002974:	10800204 	addi	r2,r2,8
 8002978:	100b883a 	mov	r5,r2
 800297c:	1809883a 	mov	r4,r3
 8002980:	80027b40 	call	80027b4 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 8002984:	e0bffe17 	ldw	r2,-8(fp)
 8002988:	10800017 	ldw	r2,0(r2)
 800298c:	000b883a 	mov	r5,zero
 8002990:	1009883a 	mov	r4,r2
 8002994:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8002998:	10800058 	cmpnei	r2,r2,1
 800299c:	1000021e 	bne	r2,zero,80029a8 <prvCountingSemaphoreTask+0x6c>
	{
		xErrorDetected = pdTRUE;
 80029a0:	00800044 	movi	r2,1
 80029a4:	d0a87115 	stw	r2,-24124(gp)
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 80029a8:	e0bffe17 	ldw	r2,-8(fp)
 80029ac:	10c00017 	ldw	r3,0(r2)
 80029b0:	e0bffe17 	ldw	r2,-8(fp)
 80029b4:	10800204 	addi	r2,r2,8
 80029b8:	100b883a 	mov	r5,r2
 80029bc:	1809883a 	mov	r4,r3
 80029c0:	80028740 	call	8002874 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 80029c4:	e0bffe17 	ldw	r2,-8(fp)
 80029c8:	10c00017 	ldw	r3,0(r2)
 80029cc:	e0bffe17 	ldw	r2,-8(fp)
 80029d0:	10800204 	addi	r2,r2,8
 80029d4:	100b883a 	mov	r5,r2
 80029d8:	1809883a 	mov	r4,r3
 80029dc:	80027b40 	call	80027b4 <prvDecrementSemaphoreCount>
	}
 80029e0:	003ff106 	br	80029a8 <prvCountingSemaphoreTask+0x6c>

080029e4 <xAreCountingSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
{
 80029e4:	defffe04 	addi	sp,sp,-8
 80029e8:	df000115 	stw	fp,4(sp)
 80029ec:	df000104 	addi	fp,sp,4
static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
BaseType_t xReturn = pdPASS;
 80029f0:	00800044 	movi	r2,1
 80029f4:	e0bfff15 	stw	r2,-4(fp)

	/* Return fail if any 'give' or 'take' did not result in the expected
	behaviour. */
	if( xErrorDetected != pdFALSE )
 80029f8:	d0a87117 	ldw	r2,-24124(gp)
 80029fc:	10000126 	beq	r2,zero,8002a04 <xAreCountingSemaphoreTasksStillRunning+0x20>
	{
		xReturn = pdFAIL;
 8002a00:	e03fff15 	stw	zero,-4(fp)
	}

	/* Return fail if either task is not still incrementing its loop counter. */
	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 8002a04:	008200b4 	movhi	r2,2050
 8002a08:	10bc7404 	addi	r2,r2,-3632
 8002a0c:	10c00217 	ldw	r3,8(r2)
 8002a10:	d0a87217 	ldw	r2,-24120(gp)
 8002a14:	1880021e 	bne	r3,r2,8002a20 <xAreCountingSemaphoreTasksStillRunning+0x3c>
	{
		xReturn = pdFAIL;
 8002a18:	e03fff15 	stw	zero,-4(fp)
 8002a1c:	00000406 	br	8002a30 <xAreCountingSemaphoreTasksStillRunning+0x4c>
	}
	else
	{
		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 8002a20:	008200b4 	movhi	r2,2050
 8002a24:	10bc7404 	addi	r2,r2,-3632
 8002a28:	10800217 	ldw	r2,8(r2)
 8002a2c:	d0a87215 	stw	r2,-24120(gp)
	}

	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 8002a30:	008200b4 	movhi	r2,2050
 8002a34:	10bc7404 	addi	r2,r2,-3632
 8002a38:	10c00517 	ldw	r3,20(r2)
 8002a3c:	d0a87317 	ldw	r2,-24116(gp)
 8002a40:	1880021e 	bne	r3,r2,8002a4c <xAreCountingSemaphoreTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 8002a44:	e03fff15 	stw	zero,-4(fp)
 8002a48:	00000406 	br	8002a5c <xAreCountingSemaphoreTasksStillRunning+0x78>
	}
	else
	{
		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 8002a4c:	008200b4 	movhi	r2,2050
 8002a50:	10bc7404 	addi	r2,r2,-3632
 8002a54:	10800517 	ldw	r2,20(r2)
 8002a58:	d0a87315 	stw	r2,-24116(gp)
	}

	return xReturn;
 8002a5c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002a60:	e037883a 	mov	sp,fp
 8002a64:	df000017 	ldw	fp,0(sp)
 8002a68:	dec00104 	addi	sp,sp,4
 8002a6c:	f800283a 	ret

08002a70 <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
 8002a70:	defffb04 	addi	sp,sp,-20
 8002a74:	dfc00415 	stw	ra,16(sp)
 8002a78:	df000315 	stw	fp,12(sp)
 8002a7c:	df000304 	addi	fp,sp,12
 8002a80:	e13fff15 	stw	r4,-4(fp)
	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
 8002a84:	d8000115 	stw	zero,4(sp)
 8002a88:	e0bfff17 	ldw	r2,-4(fp)
 8002a8c:	d8800015 	stw	r2,0(sp)
 8002a90:	000f883a 	mov	r7,zero
 8002a94:	01810f04 	movi	r6,1084
 8002a98:	014200b4 	movhi	r5,2050
 8002a9c:	29689e04 	addi	r5,r5,-23944
 8002aa0:	01020034 	movhi	r4,2048
 8002aa4:	210ad404 	addi	r4,r4,11088
 8002aa8:	8005ce40 	call	8005ce4 <xTaskCreate>
}
 8002aac:	0001883a 	nop
 8002ab0:	e037883a 	mov	sp,fp
 8002ab4:	dfc00117 	ldw	ra,4(sp)
 8002ab8:	df000017 	ldw	fp,0(sp)
 8002abc:	dec00204 	addi	sp,sp,8
 8002ac0:	f800283a 	ret

08002ac4 <vSuicidalTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
 8002ac4:	defff904 	addi	sp,sp,-28
 8002ac8:	dfc00615 	stw	ra,24(sp)
 8002acc:	df000515 	stw	fp,20(sp)
 8002ad0:	df000504 	addi	fp,sp,20
 8002ad4:	e13fff15 	stw	r4,-4(fp)
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 8002ad8:	00803204 	movi	r2,200
 8002adc:	e0bffc15 	stw	r2,-16(fp)

	/* Test deletion of a task's secure context, if any. */
	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );

	if( pvParameters != NULL )
 8002ae0:	e0bfff17 	ldw	r2,-4(fp)
 8002ae4:	10000426 	beq	r2,zero,8002af8 <vSuicidalTask+0x34>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 8002ae8:	e0bfff17 	ldw	r2,-4(fp)
 8002aec:	10800017 	ldw	r2,0(r2)
 8002af0:	e0bffb15 	stw	r2,-20(fp)
 8002af4:	00000106 	br	8002afc <vSuicidalTask+0x38>
	}
	else
	{
		xTaskToKill = NULL;
 8002af8:	e03ffb15 	stw	zero,-20(fp)
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
 8002afc:	00800084 	movi	r2,2
 8002b00:	e0bffd15 	stw	r2,-12(fp)
		l2 = 89;
 8002b04:	00801644 	movi	r2,89
 8002b08:	e0bffe15 	stw	r2,-8(fp)
		l2 *= l1;
 8002b0c:	e0bffd17 	ldw	r2,-12(fp)
 8002b10:	e0fffe17 	ldw	r3,-8(fp)
 8002b14:	180b883a 	mov	r5,r3
 8002b18:	1009883a 	mov	r4,r2
 8002b1c:	80087fc0 	call	80087fc <__mulsi3>
 8002b20:	e0bffe15 	stw	r2,-8(fp)
		vTaskDelay( xDelay );
 8002b24:	e13ffc17 	ldw	r4,-16(fp)
 8002b28:	80062900 	call	8006290 <vTaskDelay>

		if( xTaskToKill != NULL )
 8002b2c:	e0bffb17 	ldw	r2,-20(fp)
 8002b30:	103ff226 	beq	r2,zero,8002afc <vSuicidalTask+0x38>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 8002b34:	0009883a 	mov	r4,zero
 8002b38:	80062900 	call	8006290 <vTaskDelay>

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 8002b3c:	e13ffb17 	ldw	r4,-20(fp)
 8002b40:	80060b80 	call	80060b8 <vTaskDelete>

			/* Kill ourselves. */
			vTaskDelete( NULL );
 8002b44:	0009883a 	mov	r4,zero
 8002b48:	80060b80 	call	80060b8 <vTaskDelete>
		}
	}
 8002b4c:	003feb06 	br	8002afc <vSuicidalTask+0x38>

08002b50 <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
 8002b50:	defff904 	addi	sp,sp,-28
 8002b54:	dfc00615 	stw	ra,24(sp)
 8002b58:	df000515 	stw	fp,20(sp)
 8002b5c:	df000504 	addi	fp,sp,20
 8002b60:	e13fff15 	stw	r4,-4(fp)
const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 8002b64:	0080fa04 	movi	r2,1000
 8002b68:	e0bffd15 	stw	r2,-12(fp)
	/* Remove compiler warning about unused parameter. */
	( void ) pvParameters;

	/* Delay at the start to ensure tasks created by other demos have been
	created before storing the current number of tasks. */
	vTaskDelay( xDelay );
 8002b6c:	e13ffd17 	ldw	r4,-12(fp)
 8002b70:	80062900 	call	8006290 <vTaskDelay>
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002b74:	8006b380 	call	8006b38 <uxTaskGetNumberOfTasks>
 8002b78:	d0a87515 	stw	r2,-24108(gp)

	uxPriority = uxTaskPriorityGet( NULL );
 8002b7c:	0009883a 	mov	r4,zero
 8002b80:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8002b84:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 8002b88:	e13ffd17 	ldw	r4,-12(fp)
 8002b8c:	80062900 	call	8006290 <vTaskDelay>

		xCreatedTask = NULL;
 8002b90:	d0287715 	stw	zero,-24100(gp)

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
 8002b94:	d0a87704 	addi	r2,gp,-24100
 8002b98:	d8800115 	stw	r2,4(sp)
 8002b9c:	e0bffe17 	ldw	r2,-8(fp)
 8002ba0:	d8800015 	stw	r2,0(sp)
 8002ba4:	000f883a 	mov	r7,zero
 8002ba8:	01810004 	movi	r6,1024
 8002bac:	014200b4 	movhi	r5,2050
 8002bb0:	2968a004 	addi	r5,r5,-23936
 8002bb4:	01020034 	movhi	r4,2048
 8002bb8:	210ab104 	addi	r4,r4,10948
 8002bbc:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
 8002bc0:	d8000115 	stw	zero,4(sp)
 8002bc4:	e0bffe17 	ldw	r2,-8(fp)
 8002bc8:	d8800015 	stw	r2,0(sp)
 8002bcc:	d1e87704 	addi	r7,gp,-24100
 8002bd0:	01810004 	movi	r6,1024
 8002bd4:	014200b4 	movhi	r5,2050
 8002bd8:	2968a204 	addi	r5,r5,-23928
 8002bdc:	01020034 	movhi	r4,2048
 8002be0:	210ab104 	addi	r4,r4,10948
 8002be4:	8005ce40 	call	8005ce4 <xTaskCreate>

		++usCreationCount;
 8002be8:	d0a8740b 	ldhu	r2,-24112(gp)
 8002bec:	10800044 	addi	r2,r2,1
 8002bf0:	d0a8740d 	sth	r2,-24112(gp)
	}
 8002bf4:	003fe406 	br	8002b88 <vCreateTasks+0x38>

08002bf8 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
 8002bf8:	defffd04 	addi	sp,sp,-12
 8002bfc:	dfc00215 	stw	ra,8(sp)
 8002c00:	df000115 	stw	fp,4(sp)
 8002c04:	df000104 	addi	fp,sp,4
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
 8002c08:	00800044 	movi	r2,1
 8002c0c:	e0bfff15 	stw	r2,-4(fp)
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
 8002c10:	d0e0010b 	ldhu	r3,-32764(gp)
 8002c14:	d0a8740b 	ldhu	r2,-24112(gp)
 8002c18:	18ffffcc 	andi	r3,r3,65535
 8002c1c:	10bfffcc 	andi	r2,r2,65535
 8002c20:	1880021e 	bne	r3,r2,8002c2c <xIsCreateTaskStillRunning+0x34>
	{
		xReturn = pdFALSE;
 8002c24:	e03fff15 	stw	zero,-4(fp)
 8002c28:	00000206 	br	8002c34 <xIsCreateTaskStillRunning+0x3c>
	}
	else
	{
		usLastCreationCount = usCreationCount;
 8002c2c:	d0a8740b 	ldhu	r2,-24112(gp)
 8002c30:	d0a0010d 	sth	r2,-32764(gp)
	}

	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 8002c34:	8006b380 	call	8006b38 <uxTaskGetNumberOfTasks>
 8002c38:	d0a87615 	stw	r2,-24104(gp)

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 8002c3c:	d0e87617 	ldw	r3,-24104(gp)
 8002c40:	d0a87517 	ldw	r2,-24108(gp)
 8002c44:	1880022e 	bgeu	r3,r2,8002c50 <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
 8002c48:	e03fff15 	stw	zero,-4(fp)
 8002c4c:	00000606 	br	8002c68 <xIsCreateTaskStillRunning+0x70>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 8002c50:	d0e87617 	ldw	r3,-24104(gp)
 8002c54:	d0a87517 	ldw	r2,-24108(gp)
 8002c58:	1885c83a 	sub	r2,r3,r2
 8002c5c:	00c000c4 	movi	r3,3
 8002c60:	1880012e 	bgeu	r3,r2,8002c68 <xIsCreateTaskStillRunning+0x70>
	{
		xReturn = pdFALSE;
 8002c64:	e03fff15 	stw	zero,-4(fp)
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
 8002c68:	e0bfff17 	ldw	r2,-4(fp)
}
 8002c6c:	e037883a 	mov	sp,fp
 8002c70:	dfc00117 	ldw	ra,4(sp)
 8002c74:	df000017 	ldw	fp,0(sp)
 8002c78:	dec00204 	addi	sp,sp,8
 8002c7c:	f800283a 	ret

08002c80 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 8002c80:	defffc04 	addi	sp,sp,-16
 8002c84:	dfc00315 	stw	ra,12(sp)
 8002c88:	df000215 	stw	fp,8(sp)
 8002c8c:	df000204 	addi	fp,sp,8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
 8002c90:	000d883a 	mov	r6,zero
 8002c94:	01400104 	movi	r5,4
 8002c98:	01000044 	movi	r4,1
 8002c9c:	80049840 	call	8004984 <xQueueGenericCreate>
 8002ca0:	d0a88215 	stw	r2,-24056(gp)

	if( xSuspendedTestQueue != NULL )
 8002ca4:	d0a88217 	ldw	r2,-24056(gp)
 8002ca8:	10003026 	beq	r2,zero,8002d6c <vStartDynamicPriorityTasks+0xec>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 8002cac:	d0a87804 	addi	r2,gp,-24096
 8002cb0:	d8800115 	stw	r2,4(sp)
 8002cb4:	d8000015 	stw	zero,0(sp)
 8002cb8:	d1e87a04 	addi	r7,gp,-24088
 8002cbc:	01810004 	movi	r6,1024
 8002cc0:	014200b4 	movhi	r5,2050
 8002cc4:	2968a404 	addi	r5,r5,-23920
 8002cc8:	01020034 	movhi	r4,2048
 8002ccc:	210b7604 	addi	r4,r4,11736
 8002cd0:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 8002cd4:	d0a87904 	addi	r2,gp,-24092
 8002cd8:	d8800115 	stw	r2,4(sp)
 8002cdc:	00800044 	movi	r2,1
 8002ce0:	d8800015 	stw	r2,0(sp)
 8002ce4:	d1e87a04 	addi	r7,gp,-24088
 8002ce8:	01810004 	movi	r6,1024
 8002cec:	014200b4 	movhi	r5,2050
 8002cf0:	2968a604 	addi	r5,r5,-23912
 8002cf4:	01020034 	movhi	r4,2048
 8002cf8:	210b6104 	addi	r4,r4,11652
 8002cfc:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vCounterControlTask, "C_CTRL", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002d00:	d8000115 	stw	zero,4(sp)
 8002d04:	d8000015 	stw	zero,0(sp)
 8002d08:	000f883a 	mov	r7,zero
 8002d0c:	01810004 	movi	r6,1024
 8002d10:	014200b4 	movhi	r5,2050
 8002d14:	2968a804 	addi	r5,r5,-23904
 8002d18:	01020034 	movhi	r4,2048
 8002d1c:	210b8e04 	addi	r4,r4,11832
 8002d20:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002d24:	d8000115 	stw	zero,4(sp)
 8002d28:	d8000015 	stw	zero,0(sp)
 8002d2c:	000f883a 	mov	r7,zero
 8002d30:	01810004 	movi	r6,1024
 8002d34:	014200b4 	movhi	r5,2050
 8002d38:	2968aa04 	addi	r5,r5,-23896
 8002d3c:	01020034 	movhi	r4,2048
 8002d40:	210bc504 	addi	r4,r4,12052
 8002d44:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSUSPENDED_RX_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002d48:	d8000115 	stw	zero,4(sp)
 8002d4c:	d8000015 	stw	zero,0(sp)
 8002d50:	000f883a 	mov	r7,zero
 8002d54:	01810004 	movi	r6,1024
 8002d58:	014200b4 	movhi	r5,2050
 8002d5c:	2968ac04 	addi	r5,r5,-23888
 8002d60:	01020034 	movhi	r4,2048
 8002d64:	210bdc04 	addi	r4,r4,12144
 8002d68:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 8002d6c:	0001883a 	nop
 8002d70:	e037883a 	mov	sp,fp
 8002d74:	dfc00117 	ldw	ra,4(sp)
 8002d78:	df000017 	ldw	fp,0(sp)
 8002d7c:	dec00204 	addi	sp,sp,8
 8002d80:	f800283a 	ret

08002d84 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
 8002d84:	defffc04 	addi	sp,sp,-16
 8002d88:	dfc00315 	stw	ra,12(sp)
 8002d8c:	df000215 	stw	fp,8(sp)
 8002d90:	df000204 	addi	fp,sp,8
 8002d94:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 8002d98:	e0bfff17 	ldw	r2,-4(fp)
 8002d9c:	e0bffe15 	stw	r2,-8(fp)

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 8002da0:	0009883a 	mov	r4,zero
 8002da4:	80065500 	call	8006550 <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
 8002da8:	e0bffe17 	ldw	r2,-8(fp)
 8002dac:	10800017 	ldw	r2,0(r2)
 8002db0:	10c00044 	addi	r3,r2,1
 8002db4:	e0bffe17 	ldw	r2,-8(fp)
 8002db8:	10c00015 	stw	r3,0(r2)

		if( *pulCounter >= priMAX_COUNT )
 8002dbc:	e0bffe17 	ldw	r2,-8(fp)
 8002dc0:	10800017 	ldw	r2,0(r2)
 8002dc4:	10803ff0 	cmpltui	r2,r2,255
 8002dc8:	103ff71e 	bne	r2,zero,8002da8 <vLimitedIncrementTask+0x24>
		{
			vTaskSuspend( NULL );
 8002dcc:	0009883a 	mov	r4,zero
 8002dd0:	80065500 	call	8006550 <vTaskSuspend>
		}
	}
 8002dd4:	003ff406 	br	8002da8 <vLimitedIncrementTask+0x24>

08002dd8 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
 8002dd8:	defffb04 	addi	sp,sp,-20
 8002ddc:	dfc00415 	stw	ra,16(sp)
 8002de0:	df000315 	stw	fp,12(sp)
 8002de4:	df000304 	addi	fp,sp,12
 8002de8:	e13fff15 	stw	r4,-4(fp)
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( volatile uint32_t * ) pvParameters;
 8002dec:	e0bfff17 	ldw	r2,-4(fp)
 8002df0:	e0bffd15 	stw	r2,-12(fp)

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 8002df4:	0009883a 	mov	r4,zero
 8002df8:	80062ec0 	call	80062ec <uxTaskPriorityGet>
 8002dfc:	e0bffe15 	stw	r2,-8(fp)

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 8002e00:	e0bffe17 	ldw	r2,-8(fp)
 8002e04:	10800044 	addi	r2,r2,1
 8002e08:	100b883a 	mov	r5,r2
 8002e0c:	0009883a 	mov	r4,zero
 8002e10:	80063900 	call	8006390 <vTaskPrioritySet>
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
			( *pulCounter )++;
 8002e14:	e0bffd17 	ldw	r2,-12(fp)
 8002e18:	10800017 	ldw	r2,0(r2)
 8002e1c:	10c00044 	addi	r3,r2,1
 8002e20:	e0bffd17 	ldw	r2,-12(fp)
 8002e24:	10c00015 	stw	r3,0(r2)
		}
		vTaskPrioritySet( NULL, uxOurPriority );
 8002e28:	e17ffe17 	ldw	r5,-8(fp)
 8002e2c:	0009883a 	mov	r4,zero
 8002e30:	80063900 	call	8006390 <vTaskPrioritySet>
		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
	}
 8002e34:	003ff206 	br	8002e00 <vContinuousIncrementTask+0x28>

08002e38 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
 8002e38:	defffb04 	addi	sp,sp,-20
 8002e3c:	dfc00415 	stw	ra,16(sp)
 8002e40:	df000315 	stw	fp,12(sp)
 8002e44:	df000304 	addi	fp,sp,12
 8002e48:	e13fff15 	stw	r4,-4(fp)
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
 8002e4c:	e03ffd8d 	sth	zero,-10(fp)
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
 8002e50:	d0287a15 	stw	zero,-24088(gp)

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002e54:	e03ffd0d 	sth	zero,-12(fp)
 8002e58:	00001406 	br	8002eac <vCounterControlTask+0x74>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
 8002e5c:	d0a87817 	ldw	r2,-24096(gp)
 8002e60:	1009883a 	mov	r4,r2
 8002e64:	80065500 	call	8006550 <vTaskSuspend>
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
 8002e68:	d0a87a17 	ldw	r2,-24088(gp)
 8002e6c:	e0bffe15 	stw	r2,-8(fp)
			}
			vTaskResume( xContinuousIncrementHandle );
 8002e70:	d0a87817 	ldw	r2,-24096(gp)
 8002e74:	1009883a 	mov	r4,r2
 8002e78:	80066b80 	call	80066b8 <vTaskResume>
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 8002e7c:	01002004 	movi	r4,128
 8002e80:	80062900 	call	8006290 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 8002e84:	80069540 	call	8006954 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 8002e88:	d0a87a17 	ldw	r2,-24088(gp)
 8002e8c:	e0fffe17 	ldw	r3,-8(fp)
 8002e90:	1880021e 	bne	r3,r2,8002e9c <vCounterControlTask+0x64>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 8002e94:	00800044 	movi	r2,1
 8002e98:	e0bffd8d 	sth	r2,-10(fp)
				}
			}
			xTaskResumeAll();
 8002e9c:	80069800 	call	8006980 <xTaskResumeAll>
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 8002ea0:	e0bffd0b 	ldhu	r2,-12(fp)
 8002ea4:	10800044 	addi	r2,r2,1
 8002ea8:	e0bffd0d 	sth	r2,-12(fp)
 8002eac:	e0bffd0f 	ldh	r2,-12(fp)
 8002eb0:	10800150 	cmplti	r2,r2,5
 8002eb4:	103fe91e 	bne	r2,zero,8002e5c <vCounterControlTask+0x24>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 8002eb8:	d0a87817 	ldw	r2,-24096(gp)
 8002ebc:	1009883a 	mov	r4,r2
 8002ec0:	80065500 	call	8006550 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
 8002ec4:	d0287a15 	stw	zero,-24088(gp)
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
 8002ec8:	d0a87917 	ldw	r2,-24092(gp)
 8002ecc:	1009883a 	mov	r4,r2
 8002ed0:	80066b80 	call	80066b8 <vTaskResume>
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 8002ed4:	d0a87a17 	ldw	r2,-24088(gp)
 8002ed8:	10803fe0 	cmpeqi	r2,r2,255
 8002edc:	1000021e 	bne	r2,zero,8002ee8 <vCounterControlTask+0xb0>
		{
			sError = pdTRUE;
 8002ee0:	00800044 	movi	r2,1
 8002ee4:	e0bffd8d 	sth	r2,-10(fp)
		}

		if( sError == pdFALSE )
 8002ee8:	e0bffd8f 	ldh	r2,-10(fp)
 8002eec:	1000051e 	bne	r2,zero,8002f04 <vCounterControlTask+0xcc>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 8002ef0:	80079180 	call	8007918 <vTaskEnterCritical>
				usCheckVariable++;
 8002ef4:	d0a87b0b 	ldhu	r2,-24084(gp)
 8002ef8:	10800044 	addi	r2,r2,1
 8002efc:	d0a87b0d 	sth	r2,-24084(gp)
			portEXIT_CRITICAL();
 8002f00:	800796c0 	call	800796c <vTaskExitCritical>
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 8002f04:	d0a87817 	ldw	r2,-24096(gp)
 8002f08:	1009883a 	mov	r4,r2
 8002f0c:	80066b80 	call	80066b8 <vTaskResume>

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
 8002f10:	003fcf06 	br	8002e50 <vCounterControlTask+0x18>

08002f14 <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
 8002f14:	defffd04 	addi	sp,sp,-12
 8002f18:	dfc00215 	stw	ra,8(sp)
 8002f1c:	df000115 	stw	fp,4(sp)
 8002f20:	df000104 	addi	fp,sp,4
 8002f24:	e13fff15 	stw	r4,-4(fp)
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
 8002f28:	80069540 	call	8006954 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 8002f2c:	d0a88217 	ldw	r2,-24056(gp)
 8002f30:	000f883a 	mov	r7,zero
 8002f34:	000d883a 	mov	r6,zero
 8002f38:	d1687f04 	addi	r5,gp,-24068
 8002f3c:	1009883a 	mov	r4,r2
 8002f40:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 8002f44:	10800060 	cmpeqi	r2,r2,1
 8002f48:	1000021e 	bne	r2,zero,8002f54 <vQueueSendWhenSuspendedTask+0x40>
			{
				xSuspendedQueueSendError = pdTRUE;
 8002f4c:	00800044 	movi	r2,1
 8002f50:	d0a87c15 	stw	r2,-24080(gp)
			}
		}
		xTaskResumeAll();
 8002f54:	80069800 	call	8006980 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 8002f58:	01002004 	movi	r4,128
 8002f5c:	80062900 	call	8006290 <vTaskDelay>

		++ulValueToSend;
 8002f60:	d0a87f17 	ldw	r2,-24068(gp)
 8002f64:	10800044 	addi	r2,r2,1
 8002f68:	d0a87f15 	stw	r2,-24068(gp)
	}
 8002f6c:	003fee06 	br	8002f28 <vQueueSendWhenSuspendedTask+0x14>

08002f70 <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
 8002f70:	defffb04 	addi	sp,sp,-20
 8002f74:	dfc00415 	stw	ra,16(sp)
 8002f78:	df000315 	stw	fp,12(sp)
 8002f7c:	df000304 	addi	fp,sp,12
 8002f80:	e13fff15 	stw	r4,-4(fp)
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 8002f84:	80069540 	call	8006954 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 8002f88:	80069540 	call	8006954 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 8002f8c:	d0a88217 	ldw	r2,-24056(gp)
 8002f90:	e0fffe04 	addi	r3,fp,-8
 8002f94:	000d883a 	mov	r6,zero
 8002f98:	180b883a 	mov	r5,r3
 8002f9c:	1009883a 	mov	r4,r2
 8002fa0:	80050680 	call	8005068 <xQueueReceive>
 8002fa4:	e0bffd15 	stw	r2,-12(fp)
				}
				if( xTaskResumeAll() != pdFALSE )
 8002fa8:	80069800 	call	8006980 <xTaskResumeAll>
 8002fac:	10000226 	beq	r2,zero,8002fb8 <vQueueReceiveWhenSuspendedTask+0x48>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 8002fb0:	00800044 	movi	r2,1
 8002fb4:	d0a87d15 	stw	r2,-24076(gp)
				}
			}
			xTaskResumeAll();
 8002fb8:	80069800 	call	8006980 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
 8002fbc:	e0bffd17 	ldw	r2,-12(fp)
 8002fc0:	103ff026 	beq	r2,zero,8002f84 <vQueueReceiveWhenSuspendedTask+0x14>

		if( ulReceivedValue != ulExpectedValue )
 8002fc4:	e0fffe17 	ldw	r3,-8(fp)
 8002fc8:	d0a87e17 	ldw	r2,-24072(gp)
 8002fcc:	18800226 	beq	r3,r2,8002fd8 <vQueueReceiveWhenSuspendedTask+0x68>
		{
			xSuspendedQueueReceiveError = pdTRUE;
 8002fd0:	00800044 	movi	r2,1
 8002fd4:	d0a87d15 	stw	r2,-24076(gp)
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
 8002fd8:	d0a87d17 	ldw	r2,-24076(gp)
 8002fdc:	10800060 	cmpeqi	r2,r2,1
 8002fe0:	103fe81e 	bne	r2,zero,8002f84 <vQueueReceiveWhenSuspendedTask+0x14>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
 8002fe4:	d0a87e17 	ldw	r2,-24072(gp)
 8002fe8:	10800044 	addi	r2,r2,1
 8002fec:	d0a87e15 	stw	r2,-24072(gp)
		}
	}
 8002ff0:	003fe406 	br	8002f84 <vQueueReceiveWhenSuspendedTask+0x14>

08002ff4 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
 8002ff4:	defffe04 	addi	sp,sp,-8
 8002ff8:	df000115 	stw	fp,4(sp)
 8002ffc:	df000104 	addi	fp,sp,4
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
 8003000:	00800044 	movi	r2,1
 8003004:	e0bfff15 	stw	r2,-4(fp)

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 8003008:	d0e87b0b 	ldhu	r3,-24084(gp)
 800300c:	d0a8800b 	ldhu	r2,-24064(gp)
 8003010:	18ffffcc 	andi	r3,r3,65535
 8003014:	10bfffcc 	andi	r2,r2,65535
 8003018:	1880011e 	bne	r3,r2,8003020 <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 800301c:	e03fff15 	stw	zero,-4(fp)
	}

	if( ulExpectedValue == ulLastExpectedValue )
 8003020:	d0e87e17 	ldw	r3,-24072(gp)
 8003024:	d0a88117 	ldw	r2,-24060(gp)
 8003028:	1880011e 	bne	r3,r2,8003030 <xAreDynamicPriorityTasksStillRunning+0x3c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
 800302c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueSendError == pdTRUE )
 8003030:	d0a87c17 	ldw	r2,-24080(gp)
 8003034:	10800058 	cmpnei	r2,r2,1
 8003038:	1000011e 	bne	r2,zero,8003040 <xAreDynamicPriorityTasksStillRunning+0x4c>
	{
		xReturn = pdFALSE;
 800303c:	e03fff15 	stw	zero,-4(fp)
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 8003040:	d0a87d17 	ldw	r2,-24076(gp)
 8003044:	10800058 	cmpnei	r2,r2,1
 8003048:	1000011e 	bne	r2,zero,8003050 <xAreDynamicPriorityTasksStillRunning+0x5c>
	{
		xReturn = pdFALSE;
 800304c:	e03fff15 	stw	zero,-4(fp)
	}

	usLastTaskCheck = usCheckVariable;
 8003050:	d0a87b0b 	ldhu	r2,-24084(gp)
 8003054:	d0a8800d 	sth	r2,-24064(gp)
	ulLastExpectedValue = ulExpectedValue;
 8003058:	d0a87e17 	ldw	r2,-24072(gp)
 800305c:	d0a88115 	stw	r2,-24060(gp)

	return xReturn;
 8003060:	e0bfff17 	ldw	r2,-4(fp)
}
 8003064:	e037883a 	mov	sp,fp
 8003068:	df000017 	ldw	fp,0(sp)
 800306c:	dec00104 	addi	sp,sp,4
 8003070:	f800283a 	ret

08003074 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
 8003074:	defffa04 	addi	sp,sp,-24
 8003078:	dfc00515 	stw	ra,20(sp)
 800307c:	df000415 	stw	fp,16(sp)
 8003080:	df000404 	addi	fp,sp,16
 8003084:	e13fff15 	stw	r4,-4(fp)
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 8003088:	e03ffe15 	stw	zero,-8(fp)
 800308c:	00000d06 	br	80030c4 <vStartLEDFlashTasks+0x50>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
 8003090:	d8000115 	stw	zero,4(sp)
 8003094:	e0bfff17 	ldw	r2,-4(fp)
 8003098:	d8800015 	stw	r2,0(sp)
 800309c:	000f883a 	mov	r7,zero
 80030a0:	01810004 	movi	r6,1024
 80030a4:	014200b4 	movhi	r5,2050
 80030a8:	2968ae04 	addi	r5,r5,-23880
 80030ac:	01020034 	movhi	r4,2048
 80030b0:	210c3a04 	addi	r4,r4,12520
 80030b4:	8005ce40 	call	8005ce4 <xTaskCreate>
void vStartLEDFlashTasks( UBaseType_t uxPriority )
{
BaseType_t xLEDTask;

	/* Create the three tasks. */
	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
 80030b8:	e0bffe17 	ldw	r2,-8(fp)
 80030bc:	10800044 	addi	r2,r2,1
 80030c0:	e0bffe15 	stw	r2,-8(fp)
 80030c4:	e0bffe17 	ldw	r2,-8(fp)
 80030c8:	108000d0 	cmplti	r2,r2,3
 80030cc:	103ff01e 	bne	r2,zero,8003090 <vStartLEDFlashTasks+0x1c>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 80030d0:	0001883a 	nop
 80030d4:	e037883a 	mov	sp,fp
 80030d8:	dfc00117 	ldw	ra,4(sp)
 80030dc:	df000017 	ldw	fp,0(sp)
 80030e0:	dec00204 	addi	sp,sp,8
 80030e4:	f800283a 	ret

080030e8 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 80030e8:	defffa04 	addi	sp,sp,-24
 80030ec:	dfc00515 	stw	ra,20(sp)
 80030f0:	df000415 	stw	fp,16(sp)
 80030f4:	df000404 	addi	fp,sp,16
 80030f8:	e13fff15 	stw	r4,-4(fp)

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 80030fc:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8003100:	d0a88317 	ldw	r2,-24052(gp)
 8003104:	e0bffc15 	stw	r2,-16(fp)

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8003108:	d0a88317 	ldw	r2,-24052(gp)
 800310c:	10800044 	addi	r2,r2,1
 8003110:	d0a88315 	stw	r2,-24052(gp)
	}
	portEXIT_CRITICAL();
 8003114:	800796c0 	call	800796c <vTaskExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( TickType_t ) uxLED );
 8003118:	e0bffc17 	ldw	r2,-16(fp)
 800311c:	10800044 	addi	r2,r2,1
 8003120:	01405344 	movi	r5,333
 8003124:	1009883a 	mov	r4,r2
 8003128:	80087fc0 	call	80087fc <__mulsi3>
 800312c:	e0bffd15 	stw	r2,-12(fp)
	xFlashRate /= portTICK_PERIOD_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( TickType_t ) 2;
 8003130:	e0bffd17 	ldw	r2,-12(fp)
 8003134:	1004d07a 	srli	r2,r2,1
 8003138:	e0bffd15 	stw	r2,-12(fp)

	/* We need to initialise xLastFlashTime prior to the first call to
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 800313c:	8006ae40 	call	8006ae4 <xTaskGetTickCount>
 8003140:	e0bffe15 	stw	r2,-8(fp)

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8003144:	e0bffe04 	addi	r2,fp,-8
 8003148:	e17ffd17 	ldw	r5,-12(fp)
 800314c:	1009883a 	mov	r4,r2
 8003150:	80061a00 	call	80061a0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8003154:	e13ffc17 	ldw	r4,-16(fp)
 8003158:	8003ba80 	call	8003ba8 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 800315c:	e0bffe04 	addi	r2,fp,-8
 8003160:	e17ffd17 	ldw	r5,-12(fp)
 8003164:	1009883a 	mov	r4,r2
 8003168:	80061a00 	call	80061a0 <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 800316c:	e13ffc17 	ldw	r4,-16(fp)
 8003170:	8003ba80 	call	8003ba8 <vParTestToggleLED>
	}
 8003174:	003ff306 	br	8003144 <vLEDFlashTask+0x5c>

08003178 <vStartIntegerMathTasks>:
static BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
 8003178:	defffa04 	addi	sp,sp,-24
 800317c:	dfc00515 	stw	ra,20(sp)
 8003180:	df000415 	stw	fp,16(sp)
 8003184:	df000404 	addi	fp,sp,16
 8003188:	e13fff15 	stw	r4,-4(fp)
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 800318c:	e03ffe0d 	sth	zero,-8(fp)
 8003190:	00001206 	br	80031dc <vStartIntegerMathTasks+0x64>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
 8003194:	e0bffe0f 	ldh	r2,-8(fp)
 8003198:	1085883a 	add	r2,r2,r2
 800319c:	1087883a 	add	r3,r2,r2
 80031a0:	d0a88404 	addi	r2,gp,-24048
 80031a4:	1887883a 	add	r3,r3,r2
 80031a8:	d8000115 	stw	zero,4(sp)
 80031ac:	e0bfff17 	ldw	r2,-4(fp)
 80031b0:	d8800015 	stw	r2,0(sp)
 80031b4:	180f883a 	mov	r7,r3
 80031b8:	01810004 	movi	r6,1024
 80031bc:	014200b4 	movhi	r5,2050
 80031c0:	2968b004 	addi	r5,r5,-23872
 80031c4:	01020034 	movhi	r4,2048
 80031c8:	210c7f04 	addi	r4,r4,12796
 80031cc:	8005ce40 	call	8005ce4 <xTaskCreate>

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 80031d0:	e0bffe0b 	ldhu	r2,-8(fp)
 80031d4:	10800044 	addi	r2,r2,1
 80031d8:	e0bffe0d 	sth	r2,-8(fp)
 80031dc:	e0bffe0f 	ldh	r2,-8(fp)
 80031e0:	00bfec0e 	bge	zero,r2,8003194 <vStartIntegerMathTasks+0x1c>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
 80031e4:	0001883a 	nop
 80031e8:	e037883a 	mov	sp,fp
 80031ec:	dfc00117 	ldw	ra,4(sp)
 80031f0:	df000017 	ldw	fp,0(sp)
 80031f4:	dec00204 	addi	sp,sp,8
 80031f8:	f800283a 	ret

080031fc <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
 80031fc:	defffa04 	addi	sp,sp,-24
 8003200:	dfc00515 	stw	ra,20(sp)
 8003204:	df000415 	stw	fp,16(sp)
 8003208:	df000404 	addi	fp,sp,16
 800320c:	e13fff15 	stw	r4,-4(fp)
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
 8003210:	e03ffc0d 	sth	zero,-16(fp)
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 8003214:	e0bfff17 	ldw	r2,-4(fp)
 8003218:	e0bffd15 	stw	r2,-12(fp)
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
 800321c:	00801ec4 	movi	r2,123
 8003220:	e0bffe15 	stw	r2,-8(fp)
		lValue += intgCONST2;
 8003224:	e0fffe17 	ldw	r3,-8(fp)
 8003228:	00800134 	movhi	r2,4
 800322c:	10a511c4 	addi	r2,r2,-27577
 8003230:	1885883a 	add	r2,r3,r2
 8003234:	e0bffe15 	stw	r2,-8(fp)
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
 8003238:	e0bffe17 	ldw	r2,-8(fp)
 800323c:	017fff44 	movi	r5,-3
 8003240:	1009883a 	mov	r4,r2
 8003244:	80087fc0 	call	80087fc <__mulsi3>
 8003248:	e0bffe15 	stw	r2,-8(fp)
		lValue /= intgCONST4;
 800324c:	e0bffe17 	ldw	r2,-8(fp)
 8003250:	014001c4 	movi	r5,7
 8003254:	1009883a 	mov	r4,r2
 8003258:	80086480 	call	8008648 <__divsi3>
 800325c:	e0bffe15 	stw	r2,-8(fp)

		/* If the calculation is found to be incorrect we stop setting the
		TaskHasExecuted variable so the check task can see an error has
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
 8003260:	e0fffe17 	ldw	r3,-8(fp)
 8003264:	00bfffb4 	movhi	r2,65534
 8003268:	109dc6c4 	addi	r2,r2,30491
 800326c:	18800226 	beq	r3,r2,8003278 <vCompeteingIntMathTask+0x7c>
		{
			sError = pdTRUE;
 8003270:	00800044 	movi	r2,1
 8003274:	e0bffc0d 	sth	r2,-16(fp)
		}

		if( sError == pdFALSE )
 8003278:	e0bffc0f 	ldh	r2,-16(fp)
 800327c:	103fe71e 	bne	r2,zero,800321c <vCompeteingIntMathTask+0x20>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
 8003280:	80079180 	call	8007918 <vTaskEnterCritical>
				*pxTaskHasExecuted = pdTRUE;
 8003284:	e0bffd17 	ldw	r2,-12(fp)
 8003288:	00c00044 	movi	r3,1
 800328c:	10c00015 	stw	r3,0(r2)
			portEXIT_CRITICAL();
 8003290:	800796c0 	call	800796c <vTaskExitCritical>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 8003294:	003fe106 	br	800321c <vCompeteingIntMathTask+0x20>

08003298 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
 8003298:	defffd04 	addi	sp,sp,-12
 800329c:	df000215 	stw	fp,8(sp)
 80032a0:	df000204 	addi	fp,sp,8
BaseType_t xReturn = pdTRUE;
 80032a4:	00800044 	movi	r2,1
 80032a8:	e0bffe15 	stw	r2,-8(fp)
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 80032ac:	e03fff0d 	sth	zero,-4(fp)
 80032b0:	00001106 	br	80032f8 <xAreIntegerMathsTaskStillRunning+0x60>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
 80032b4:	e0bfff0f 	ldh	r2,-4(fp)
 80032b8:	1085883a 	add	r2,r2,r2
 80032bc:	1087883a 	add	r3,r2,r2
 80032c0:	d0a88404 	addi	r2,gp,-24048
 80032c4:	1885883a 	add	r2,r3,r2
 80032c8:	10800017 	ldw	r2,0(r2)
 80032cc:	1000011e 	bne	r2,zero,80032d4 <xAreIntegerMathsTaskStillRunning+0x3c>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 80032d0:	e03ffe15 	stw	zero,-8(fp)
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
 80032d4:	e0bfff0f 	ldh	r2,-4(fp)
 80032d8:	1085883a 	add	r2,r2,r2
 80032dc:	1087883a 	add	r3,r2,r2
 80032e0:	d0a88404 	addi	r2,gp,-24048
 80032e4:	1885883a 	add	r2,r3,r2
 80032e8:	10000015 	stw	zero,0(r2)
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 80032ec:	e0bfff0b 	ldhu	r2,-4(fp)
 80032f0:	10800044 	addi	r2,r2,1
 80032f4:	e0bfff0d 	sth	r2,-4(fp)
 80032f8:	e0bfff0f 	ldh	r2,-4(fp)
 80032fc:	00bfed0e 	bge	zero,r2,80032b4 <xAreIntegerMathsTaskStillRunning+0x1c>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
 8003300:	e0bffe17 	ldw	r2,-8(fp)
}
 8003304:	e037883a 	mov	sp,fp
 8003308:	df000017 	ldw	fp,0(sp)
 800330c:	dec00104 	addi	sp,sp,4
 8003310:	f800283a 	ret

08003314 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 8003314:	defffc04 	addi	sp,sp,-16
 8003318:	dfc00315 	stw	ra,12(sp)
 800331c:	df000215 	stw	fp,8(sp)
 8003320:	df000204 	addi	fp,sp,8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 8003324:	01000104 	movi	r4,4
 8003328:	8004b100 	call	8004b10 <xQueueCreateMutex>
 800332c:	d0a88515 	stw	r2,-24044(gp)

	if( xMutex != NULL )
 8003330:	d0a88517 	ldw	r2,-24044(gp)
 8003334:	10001f26 	beq	r2,zero,80033b4 <vStartRecursiveMutexTasks+0xa0>
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 8003338:	d0a88c04 	addi	r2,gp,-24016
 800333c:	d8800115 	stw	r2,4(sp)
 8003340:	00800084 	movi	r2,2
 8003344:	d8800015 	stw	r2,0(sp)
 8003348:	000f883a 	mov	r7,zero
 800334c:	01810004 	movi	r6,1024
 8003350:	014200b4 	movhi	r5,2050
 8003354:	2968b204 	addi	r5,r5,-23864
 8003358:	01020034 	movhi	r4,2048
 800335c:	210cf304 	addi	r4,r4,13260
 8003360:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 8003364:	d0a88d04 	addi	r2,gp,-24012
 8003368:	d8800115 	stw	r2,4(sp)
 800336c:	00800044 	movi	r2,1
 8003370:	d8800015 	stw	r2,0(sp)
 8003374:	000f883a 	mov	r7,zero
 8003378:	01810004 	movi	r6,1024
 800337c:	014200b4 	movhi	r5,2050
 8003380:	2968b404 	addi	r5,r5,-23856
 8003384:	01020034 	movhi	r4,2048
 8003388:	210d3204 	addi	r4,r4,13512
 800338c:	8005ce40 	call	8005ce4 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", recmuRECURSIVE_MUTEX_TEST_TASK_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 8003390:	d8000115 	stw	zero,4(sp)
 8003394:	d8000015 	stw	zero,0(sp)
 8003398:	000f883a 	mov	r7,zero
 800339c:	01810004 	movi	r6,1024
 80033a0:	014200b4 	movhi	r5,2050
 80033a4:	2968b604 	addi	r5,r5,-23848
 80033a8:	01020034 	movhi	r4,2048
 80033ac:	210d5c04 	addi	r4,r4,13680
 80033b0:	8005ce40 	call	8005ce4 <xTaskCreate>
	}
}
 80033b4:	0001883a 	nop
 80033b8:	e037883a 	mov	sp,fp
 80033bc:	dfc00117 	ldw	ra,4(sp)
 80033c0:	df000017 	ldw	fp,0(sp)
 80033c4:	dec00204 	addi	sp,sp,8
 80033c8:	f800283a 	ret

080033cc <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 80033cc:	defffc04 	addi	sp,sp,-16
 80033d0:	dfc00315 	stw	ra,12(sp)
 80033d4:	df000215 	stw	fp,8(sp)
 80033d8:	df000204 	addi	fp,sp,8
 80033dc:	e13fff15 	stw	r4,-4(fp)
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 80033e0:	d0a88517 	ldw	r2,-24044(gp)
 80033e4:	1009883a 	mov	r4,r2
 80033e8:	8004b6c0 	call	8004b6c <xQueueGiveMutexRecursive>
 80033ec:	10800058 	cmpnei	r2,r2,1
 80033f0:	1000021e 	bne	r2,zero,80033fc <prvRecursiveMutexControllingTask+0x30>
		{
			xErrorOccurred = pdTRUE;
 80033f4:	00800044 	movi	r2,1
 80033f8:	d0a88615 	stw	r2,-24040(gp)
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 80033fc:	e03ffe15 	stw	zero,-8(fp)
 8003400:	00000d06 	br	8003438 <prvRecursiveMutexControllingTask+0x6c>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 8003404:	d0a88517 	ldw	r2,-24044(gp)
 8003408:	014003c4 	movi	r5,15
 800340c:	1009883a 	mov	r4,r2
 8003410:	8004bfc0 	call	8004bfc <xQueueTakeMutexRecursive>
 8003414:	10800060 	cmpeqi	r2,r2,1
 8003418:	1000021e 	bne	r2,zero,8003424 <prvRecursiveMutexControllingTask+0x58>
			{
				xErrorOccurred = pdTRUE;
 800341c:	00800044 	movi	r2,1
 8003420:	d0a88615 	stw	r2,-24040(gp)

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 8003424:	01000504 	movi	r4,20
 8003428:	80062900 	call	8006290 <vTaskDelay>
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 800342c:	e0bffe17 	ldw	r2,-8(fp)
 8003430:	10800044 	addi	r2,r2,1
 8003434:	e0bffe15 	stw	r2,-8(fp)
 8003438:	e0bffe17 	ldw	r2,-8(fp)
 800343c:	108002b0 	cmpltui	r2,r2,10
 8003440:	103ff01e 	bne	r2,zero,8003404 <prvRecursiveMutexControllingTask+0x38>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8003444:	e03ffe15 	stw	zero,-8(fp)
 8003448:	00000c06 	br	800347c <prvRecursiveMutexControllingTask+0xb0>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 800344c:	01000504 	movi	r4,20
 8003450:	80062900 	call	8006290 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003454:	d0a88517 	ldw	r2,-24044(gp)
 8003458:	1009883a 	mov	r4,r2
 800345c:	8004b6c0 	call	8004b6c <xQueueGiveMutexRecursive>
 8003460:	10800060 	cmpeqi	r2,r2,1
 8003464:	1000021e 	bne	r2,zero,8003470 <prvRecursiveMutexControllingTask+0xa4>
			{
				xErrorOccurred = pdTRUE;
 8003468:	00800044 	movi	r2,1
 800346c:	d0a88615 	stw	r2,-24040(gp)
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8003470:	e0bffe17 	ldw	r2,-8(fp)
 8003474:	10800044 	addi	r2,r2,1
 8003478:	e0bffe15 	stw	r2,-8(fp)
 800347c:	e0bffe17 	ldw	r2,-8(fp)
 8003480:	108002b0 	cmpltui	r2,r2,10
 8003484:	103ff11e 	bne	r2,zero,800344c <prvRecursiveMutexControllingTask+0x80>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8003488:	d0a88517 	ldw	r2,-24044(gp)
 800348c:	1009883a 	mov	r4,r2
 8003490:	8004b6c0 	call	8004b6c <xQueueGiveMutexRecursive>
 8003494:	10800058 	cmpnei	r2,r2,1
 8003498:	1000021e 	bne	r2,zero,80034a4 <prvRecursiveMutexControllingTask+0xd8>
		{
			xErrorOccurred = pdTRUE;
 800349c:	00800044 	movi	r2,1
 80034a0:	d0a88615 	stw	r2,-24040(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 80034a4:	d0a88917 	ldw	r2,-24028(gp)
 80034a8:	10800044 	addi	r2,r2,1
 80034ac:	d0a88915 	stw	r2,-24028(gp)

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 80034b0:	00800044 	movi	r2,1
 80034b4:	d0a88715 	stw	r2,-24036(gp)
		vTaskSuspend( NULL );
 80034b8:	0009883a 	mov	r4,zero
 80034bc:	80065500 	call	8006550 <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 80034c0:	d0288715 	stw	zero,-24036(gp)
	}
 80034c4:	003fc606 	br	80033e0 <prvRecursiveMutexControllingTask+0x14>

080034c8 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 80034c8:	defffd04 	addi	sp,sp,-12
 80034cc:	dfc00215 	stw	ra,8(sp)
 80034d0:	df000115 	stw	fp,4(sp)
 80034d4:	df000104 	addi	fp,sp,4
 80034d8:	e13fff15 	stw	r4,-4(fp)
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 80034dc:	d0a88517 	ldw	r2,-24044(gp)
 80034e0:	017fff84 	movi	r5,-2
 80034e4:	1009883a 	mov	r4,r2
 80034e8:	8004bfc0 	call	8004bfc <xQueueTakeMutexRecursive>
 80034ec:	10800058 	cmpnei	r2,r2,1
 80034f0:	1000131e 	bne	r2,zero,8003540 <prvRecursiveMutexBlockingTask+0x78>
		{
			if( xControllingIsSuspended != pdTRUE )
 80034f4:	d0a88717 	ldw	r2,-24036(gp)
 80034f8:	10800060 	cmpeqi	r2,r2,1
 80034fc:	1000031e 	bne	r2,zero,800350c <prvRecursiveMutexBlockingTask+0x44>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 8003500:	00800044 	movi	r2,1
 8003504:	d0a88615 	stw	r2,-24040(gp)
 8003508:	00000f06 	br	8003548 <prvRecursiveMutexBlockingTask+0x80>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 800350c:	d0a88517 	ldw	r2,-24044(gp)
 8003510:	1009883a 	mov	r4,r2
 8003514:	8004b6c0 	call	8004b6c <xQueueGiveMutexRecursive>
 8003518:	10800060 	cmpeqi	r2,r2,1
 800351c:	1000021e 	bne	r2,zero,8003528 <prvRecursiveMutexBlockingTask+0x60>
				{
					xErrorOccurred = pdTRUE;
 8003520:	00800044 	movi	r2,1
 8003524:	d0a88615 	stw	r2,-24040(gp)
				}

				xBlockingIsSuspended = pdTRUE;
 8003528:	00800044 	movi	r2,1
 800352c:	d0a88815 	stw	r2,-24032(gp)
				vTaskSuspend( NULL );
 8003530:	0009883a 	mov	r4,zero
 8003534:	80065500 	call	8006550 <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 8003538:	d0288815 	stw	zero,-24032(gp)
 800353c:	00000206 	br	8003548 <prvRecursiveMutexBlockingTask+0x80>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 8003540:	00800044 	movi	r2,1
 8003544:	d0a88615 	stw	r2,-24040(gp)
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 8003548:	d0a88a17 	ldw	r2,-24024(gp)
 800354c:	10c00044 	addi	r3,r2,1
 8003550:	d0a88917 	ldw	r2,-24028(gp)
 8003554:	18800226 	beq	r3,r2,8003560 <prvRecursiveMutexBlockingTask+0x98>
		{
			xErrorOccurred = pdTRUE;
 8003558:	00800044 	movi	r2,1
 800355c:	d0a88615 	stw	r2,-24040(gp)
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 8003560:	d0a88a17 	ldw	r2,-24024(gp)
 8003564:	10800044 	addi	r2,r2,1
 8003568:	d0a88a15 	stw	r2,-24024(gp)
	}
 800356c:	003fdb06 	br	80034dc <prvRecursiveMutexBlockingTask+0x14>

08003570 <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 8003570:	defffd04 	addi	sp,sp,-12
 8003574:	dfc00215 	stw	ra,8(sp)
 8003578:	df000115 	stw	fp,4(sp)
 800357c:	df000104 	addi	fp,sp,4
 8003580:	e13fff15 	stw	r4,-4(fp)
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  It should only be obtained when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 8003584:	d0a88517 	ldw	r2,-24044(gp)
 8003588:	000b883a 	mov	r5,zero
 800358c:	1009883a 	mov	r4,r2
 8003590:	8004bfc0 	call	8004bfc <xQueueTakeMutexRecursive>
 8003594:	10800058 	cmpnei	r2,r2,1
 8003598:	103ffa1e 	bne	r2,zero,8003584 <prvRecursiveMutexPollingTask+0x14>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 800359c:	d0a88817 	ldw	r2,-24032(gp)
 80035a0:	10800058 	cmpnei	r2,r2,1
 80035a4:	1000031e 	bne	r2,zero,80035b4 <prvRecursiveMutexPollingTask+0x44>
 80035a8:	d0a88717 	ldw	r2,-24036(gp)
 80035ac:	10800060 	cmpeqi	r2,r2,1
 80035b0:	1000031e 	bne	r2,zero,80035c0 <prvRecursiveMutexPollingTask+0x50>
			{
				xErrorOccurred = pdTRUE;
 80035b4:	00800044 	movi	r2,1
 80035b8:	d0a88615 	stw	r2,-24040(gp)
 80035bc:	00001806 	br	8003620 <prvRecursiveMutexPollingTask+0xb0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 80035c0:	d0a88b17 	ldw	r2,-24020(gp)
 80035c4:	10800044 	addi	r2,r2,1
 80035c8:	d0a88b15 	stw	r2,-24020(gp)
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 80035cc:	d0a88d17 	ldw	r2,-24012(gp)
 80035d0:	1009883a 	mov	r4,r2
 80035d4:	80066b80 	call	80066b8 <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 80035d8:	d0a88c17 	ldw	r2,-24016(gp)
 80035dc:	1009883a 	mov	r4,r2
 80035e0:	80066b80 	call	80066b8 <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 80035e4:	d0a88817 	ldw	r2,-24032(gp)
 80035e8:	10800060 	cmpeqi	r2,r2,1
 80035ec:	1000031e 	bne	r2,zero,80035fc <prvRecursiveMutexPollingTask+0x8c>
 80035f0:	d0a88717 	ldw	r2,-24036(gp)
 80035f4:	10800058 	cmpnei	r2,r2,1
 80035f8:	1000021e 	bne	r2,zero,8003604 <prvRecursiveMutexPollingTask+0x94>
				{
					xErrorOccurred = pdTRUE;
 80035fc:	00800044 	movi	r2,1
 8003600:	d0a88615 	stw	r2,-24040(gp)
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003604:	d0a88517 	ldw	r2,-24044(gp)
 8003608:	1009883a 	mov	r4,r2
 800360c:	8004b6c0 	call	8004b6c <xQueueGiveMutexRecursive>
 8003610:	10800060 	cmpeqi	r2,r2,1
 8003614:	103fdb1e 	bne	r2,zero,8003584 <prvRecursiveMutexPollingTask+0x14>
				{
					xErrorOccurred = pdTRUE;
 8003618:	00800044 	movi	r2,1
 800361c:	d0a88615 	stw	r2,-24040(gp)
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
 8003620:	003fd806 	br	8003584 <prvRecursiveMutexPollingTask+0x14>

08003624 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 8003624:	defffe04 	addi	sp,sp,-8
 8003628:	df000115 	stw	fp,4(sp)
 800362c:	df000104 	addi	fp,sp,4
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 8003630:	d0e88e17 	ldw	r3,-24008(gp)
 8003634:	d0a88917 	ldw	r2,-24028(gp)
 8003638:	1880031e 	bne	r3,r2,8003648 <xAreRecursiveMutexTasksStillRunning+0x24>
	{
		xErrorOccurred = pdTRUE;
 800363c:	00800044 	movi	r2,1
 8003640:	d0a88615 	stw	r2,-24040(gp)
 8003644:	00000206 	br	8003650 <xAreRecursiveMutexTasksStillRunning+0x2c>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 8003648:	d0a88917 	ldw	r2,-24028(gp)
 800364c:	d0a88e15 	stw	r2,-24008(gp)
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 8003650:	d0e88f17 	ldw	r3,-24004(gp)
 8003654:	d0a88a17 	ldw	r2,-24024(gp)
 8003658:	1880031e 	bne	r3,r2,8003668 <xAreRecursiveMutexTasksStillRunning+0x44>
	{
		xErrorOccurred = pdTRUE;
 800365c:	00800044 	movi	r2,1
 8003660:	d0a88615 	stw	r2,-24040(gp)
 8003664:	00000206 	br	8003670 <xAreRecursiveMutexTasksStillRunning+0x4c>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 8003668:	d0a88a17 	ldw	r2,-24024(gp)
 800366c:	d0a88f15 	stw	r2,-24004(gp)
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 8003670:	d0e89017 	ldw	r3,-24000(gp)
 8003674:	d0a88b17 	ldw	r2,-24020(gp)
 8003678:	1880031e 	bne	r3,r2,8003688 <xAreRecursiveMutexTasksStillRunning+0x64>
	{
		xErrorOccurred = pdTRUE;
 800367c:	00800044 	movi	r2,1
 8003680:	d0a88615 	stw	r2,-24040(gp)
 8003684:	00000206 	br	8003690 <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 8003688:	d0a88b17 	ldw	r2,-24020(gp)
 800368c:	d0a89015 	stw	r2,-24000(gp)
	}

	if( xErrorOccurred == pdTRUE )
 8003690:	d0a88617 	ldw	r2,-24040(gp)
 8003694:	10800058 	cmpnei	r2,r2,1
 8003698:	1000021e 	bne	r2,zero,80036a4 <xAreRecursiveMutexTasksStillRunning+0x80>
	{
		xReturn = pdFAIL;
 800369c:	e03fff15 	stw	zero,-4(fp)
 80036a0:	00000206 	br	80036ac <xAreRecursiveMutexTasksStillRunning+0x88>
	}
	else
	{
		xReturn = pdPASS;
 80036a4:	00800044 	movi	r2,1
 80036a8:	e0bfff15 	stw	r2,-4(fp)
	}

	return xReturn;
 80036ac:	e0bfff17 	ldw	r2,-4(fp)
}
 80036b0:	e037883a 	mov	sp,fp
 80036b4:	df000017 	ldw	fp,0(sp)
 80036b8:	dec00104 	addi	sp,sp,4
 80036bc:	f800283a 	ret

080036c0 <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
 80036c0:	defff804 	addi	sp,sp,-32
 80036c4:	dfc00715 	stw	ra,28(sp)
 80036c8:	df000615 	stw	fp,24(sp)
 80036cc:	df000604 	addi	fp,sp,24
 80036d0:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 80036d4:	00801904 	movi	r2,100
 80036d8:	e0bffc15 	stw	r2,-16(fp)

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80036dc:	01000304 	movi	r4,12
 80036e0:	800433c0 	call	800433c <pvPortMalloc>
 80036e4:	e0bffd15 	stw	r2,-12(fp)

	if( pxFirstSemaphoreParameters != NULL )
 80036e8:	e0bffd17 	ldw	r2,-12(fp)
 80036ec:	10002e26 	beq	r2,zero,80037a8 <vStartSemaphoreTasks+0xe8>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 80036f0:	018000c4 	movi	r6,3
 80036f4:	000b883a 	mov	r5,zero
 80036f8:	01000044 	movi	r4,1
 80036fc:	80049840 	call	8004984 <xQueueGenericCreate>
 8003700:	1007883a 	mov	r3,r2
 8003704:	e0bffd17 	ldw	r2,-12(fp)
 8003708:	10c00015 	stw	r3,0(r2)

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 800370c:	e0bffd17 	ldw	r2,-12(fp)
 8003710:	10800017 	ldw	r2,0(r2)
 8003714:	10002426 	beq	r2,zero,80037a8 <vStartSemaphoreTasks+0xe8>
		{
			xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
 8003718:	e0bffd17 	ldw	r2,-12(fp)
 800371c:	10800017 	ldw	r2,0(r2)
 8003720:	000f883a 	mov	r7,zero
 8003724:	000d883a 	mov	r6,zero
 8003728:	000b883a 	mov	r5,zero
 800372c:	1009883a 	mov	r4,r2
 8003730:	8004cf00 	call	8004cf0 <xQueueGenericSend>

			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 8003734:	01000104 	movi	r4,4
 8003738:	800433c0 	call	800433c <pvPortMalloc>
 800373c:	1007883a 	mov	r3,r2
 8003740:	e0bffd17 	ldw	r2,-12(fp)
 8003744:	10c00115 	stw	r3,4(r2)

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 8003748:	e0bffd17 	ldw	r2,-12(fp)
 800374c:	10800117 	ldw	r2,4(r2)
 8003750:	00c03fc4 	movi	r3,255
 8003754:	10c00015 	stw	r3,0(r2)

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 8003758:	e0bffd17 	ldw	r2,-12(fp)
 800375c:	10000215 	stw	zero,8(r2)

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003760:	d8000115 	stw	zero,4(sp)
 8003764:	d8000015 	stw	zero,0(sp)
 8003768:	e1fffd17 	ldw	r7,-12(fp)
 800376c:	01810004 	movi	r6,1024
 8003770:	014200b4 	movhi	r5,2050
 8003774:	2968b804 	addi	r5,r5,-23840
 8003778:	01020034 	movhi	r4,2048
 800377c:	210e2604 	addi	r4,r4,14488
 8003780:	8005ce40 	call	8005ce4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003784:	d8000115 	stw	zero,4(sp)
 8003788:	d8000015 	stw	zero,0(sp)
 800378c:	e1fffd17 	ldw	r7,-12(fp)
 8003790:	01810004 	movi	r6,1024
 8003794:	014200b4 	movhi	r5,2050
 8003798:	2968ba04 	addi	r5,r5,-23832
 800379c:	01020034 	movhi	r4,2048
 80037a0:	210e2604 	addi	r4,r4,14488
 80037a4:	8005ce40 	call	8005ce4 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80037a8:	01000304 	movi	r4,12
 80037ac:	800433c0 	call	800433c <pvPortMalloc>
 80037b0:	e0bffe15 	stw	r2,-8(fp)
	if( pxSecondSemaphoreParameters != NULL )
 80037b4:	e0bffe17 	ldw	r2,-8(fp)
 80037b8:	10003126 	beq	r2,zero,8003880 <vStartSemaphoreTasks+0x1c0>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
 80037bc:	018000c4 	movi	r6,3
 80037c0:	000b883a 	mov	r5,zero
 80037c4:	01000044 	movi	r4,1
 80037c8:	80049840 	call	8004984 <xQueueGenericCreate>
 80037cc:	1007883a 	mov	r3,r2
 80037d0:	e0bffe17 	ldw	r2,-8(fp)
 80037d4:	10c00015 	stw	r3,0(r2)

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 80037d8:	e0bffe17 	ldw	r2,-8(fp)
 80037dc:	10800017 	ldw	r2,0(r2)
 80037e0:	10002726 	beq	r2,zero,8003880 <vStartSemaphoreTasks+0x1c0>
		{
			xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
 80037e4:	e0bffe17 	ldw	r2,-8(fp)
 80037e8:	10800017 	ldw	r2,0(r2)
 80037ec:	000f883a 	mov	r7,zero
 80037f0:	000d883a 	mov	r6,zero
 80037f4:	000b883a 	mov	r5,zero
 80037f8:	1009883a 	mov	r4,r2
 80037fc:	8004cf00 	call	8004cf0 <xQueueGenericSend>

			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
 8003800:	01000104 	movi	r4,4
 8003804:	800433c0 	call	800433c <pvPortMalloc>
 8003808:	1007883a 	mov	r3,r2
 800380c:	e0bffe17 	ldw	r2,-8(fp)
 8003810:	10c00115 	stw	r3,4(r2)
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 8003814:	e0bffe17 	ldw	r2,-8(fp)
 8003818:	10800117 	ldw	r2,4(r2)
 800381c:	00c3ffc4 	movi	r3,4095
 8003820:	10c00015 	stw	r3,0(r2)
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 8003824:	e0bffe17 	ldw	r2,-8(fp)
 8003828:	e0fffc17 	ldw	r3,-16(fp)
 800382c:	10c00215 	stw	r3,8(r2)

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003830:	d8000115 	stw	zero,4(sp)
 8003834:	e0bfff17 	ldw	r2,-4(fp)
 8003838:	d8800015 	stw	r2,0(sp)
 800383c:	e1fffe17 	ldw	r7,-8(fp)
 8003840:	01810004 	movi	r6,1024
 8003844:	014200b4 	movhi	r5,2050
 8003848:	2968bc04 	addi	r5,r5,-23824
 800384c:	01020034 	movhi	r4,2048
 8003850:	210e2604 	addi	r4,r4,14488
 8003854:	8005ce40 	call	8005ce4 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003858:	d8000115 	stw	zero,4(sp)
 800385c:	e0bfff17 	ldw	r2,-4(fp)
 8003860:	d8800015 	stw	r2,0(sp)
 8003864:	e1fffe17 	ldw	r7,-8(fp)
 8003868:	01810004 	movi	r6,1024
 800386c:	014200b4 	movhi	r5,2050
 8003870:	2968be04 	addi	r5,r5,-23816
 8003874:	01020034 	movhi	r4,2048
 8003878:	210e2604 	addi	r4,r4,14488
 800387c:	8005ce40 	call	8005ce4 <xTaskCreate>
			be removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
			defined or is defined to be less than 1. */
			vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
		}
	}
}
 8003880:	0001883a 	nop
 8003884:	e037883a 	mov	sp,fp
 8003888:	dfc00117 	ldw	ra,4(sp)
 800388c:	df000017 	ldw	fp,0(sp)
 8003890:	dec00204 	addi	sp,sp,8
 8003894:	f800283a 	ret

08003898 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
 8003898:	defff804 	addi	sp,sp,-32
 800389c:	dfc00715 	stw	ra,28(sp)
 80038a0:	df000615 	stw	fp,24(sp)
 80038a4:	df000604 	addi	fp,sp,24
 80038a8:	e13fff15 	stw	r4,-4(fp)
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 80038ac:	e03ffb0d 	sth	zero,-20(fp)

	/* See which check variable to use.  sNextCheckVariable is not semaphore
	protected! */
	portENTER_CRITICAL();
 80038b0:	80079180 	call	8007918 <vTaskEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 80038b4:	d0a8930b 	ldhu	r2,-23988(gp)
 80038b8:	e0bffb8d 	sth	r2,-18(fp)
		sNextCheckVariable++;
 80038bc:	d0a8930b 	ldhu	r2,-23988(gp)
 80038c0:	10800044 	addi	r2,r2,1
 80038c4:	d0a8930d 	sth	r2,-23988(gp)
	portEXIT_CRITICAL();
 80038c8:	800796c0 	call	800796c <vTaskExitCritical>

	/* A structure is passed in as the parameter.  This contains the shared
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 80038cc:	e0bfff17 	ldw	r2,-4(fp)
 80038d0:	e0bffc15 	stw	r2,-16(fp)
	pulSharedVariable = pxParameters->pulSharedVariable;
 80038d4:	e0bffc17 	ldw	r2,-16(fp)
 80038d8:	10800117 	ldw	r2,4(r2)
 80038dc:	e0bffd15 	stw	r2,-12(fp)

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 80038e0:	e0bffc17 	ldw	r2,-16(fp)
 80038e4:	10800217 	ldw	r2,8(r2)
 80038e8:	10000326 	beq	r2,zero,80038f8 <prvSemaphoreTest+0x60>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 80038ec:	0083ffc4 	movi	r2,4095
 80038f0:	e0bffe15 	stw	r2,-8(fp)
 80038f4:	00000206 	br	8003900 <prvSemaphoreTest+0x68>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 80038f8:	00803fc4 	movi	r2,255
 80038fc:	e0bffe15 	stw	r2,-8(fp)
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 8003900:	e0bffc17 	ldw	r2,-16(fp)
 8003904:	10c00017 	ldw	r3,0(r2)
 8003908:	e0bffc17 	ldw	r2,-16(fp)
 800390c:	10800217 	ldw	r2,8(r2)
 8003910:	100b883a 	mov	r5,r2
 8003914:	1809883a 	mov	r4,r3
 8003918:	80052100 	call	8005210 <xQueueSemaphoreTake>
 800391c:	10800058 	cmpnei	r2,r2,1
 8003920:	1000391e 	bne	r2,zero,8003a08 <prvSemaphoreTest+0x170>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 8003924:	e0bffd17 	ldw	r2,-12(fp)
 8003928:	10c00017 	ldw	r3,0(r2)
 800392c:	e0bffe17 	ldw	r2,-8(fp)
 8003930:	18800226 	beq	r3,r2,800393c <prvSemaphoreTest+0xa4>
			{
				sError = pdTRUE;
 8003934:	00800044 	movi	r2,1
 8003938:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 800393c:	e03ffa15 	stw	zero,-24(fp)
 8003940:	00000c06 	br	8003974 <prvSemaphoreTest+0xdc>
			{
				*pulSharedVariable = ulCounter;
 8003944:	e0bffd17 	ldw	r2,-12(fp)
 8003948:	e0fffa17 	ldw	r3,-24(fp)
 800394c:	10c00015 	stw	r3,0(r2)
				if( *pulSharedVariable != ulCounter )
 8003950:	e0bffd17 	ldw	r2,-12(fp)
 8003954:	10c00017 	ldw	r3,0(r2)
 8003958:	e0bffa17 	ldw	r2,-24(fp)
 800395c:	18800226 	beq	r3,r2,8003968 <prvSemaphoreTest+0xd0>
				{
					sError = pdTRUE;
 8003960:	00800044 	movi	r2,1
 8003964:	e0bffb0d 	sth	r2,-20(fp)
			}

			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 8003968:	e0bffa17 	ldw	r2,-24(fp)
 800396c:	10800044 	addi	r2,r2,1
 8003970:	e0bffa15 	stw	r2,-24(fp)
 8003974:	e0fffe17 	ldw	r3,-8(fp)
 8003978:	e0bffa17 	ldw	r2,-24(fp)
 800397c:	18bff12e 	bgeu	r3,r2,8003944 <prvSemaphoreTest+0xac>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 8003980:	e0bffc17 	ldw	r2,-16(fp)
 8003984:	10800017 	ldw	r2,0(r2)
 8003988:	000f883a 	mov	r7,zero
 800398c:	000d883a 	mov	r6,zero
 8003990:	000b883a 	mov	r5,zero
 8003994:	1009883a 	mov	r4,r2
 8003998:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 800399c:	1000021e 	bne	r2,zero,80039a8 <prvSemaphoreTest+0x110>
			{
				sError = pdTRUE;
 80039a0:	00800044 	movi	r2,1
 80039a4:	e0bffb0d 	sth	r2,-20(fp)
			}

			if( sError == pdFALSE )
 80039a8:	e0bffb0f 	ldh	r2,-20(fp)
 80039ac:	10000e1e 	bne	r2,zero,80039e8 <prvSemaphoreTest+0x150>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 80039b0:	e0bffb8f 	ldh	r2,-18(fp)
 80039b4:	10800108 	cmpgei	r2,r2,4
 80039b8:	10000b1e 	bne	r2,zero,80039e8 <prvSemaphoreTest+0x150>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 80039bc:	e0bffb8f 	ldh	r2,-18(fp)
 80039c0:	1089883a 	add	r4,r2,r2
 80039c4:	d0e89104 	addi	r3,gp,-23996
 80039c8:	20c7883a 	add	r3,r4,r3
 80039cc:	18c0000b 	ldhu	r3,0(r3)
 80039d0:	18c00044 	addi	r3,r3,1
 80039d4:	1809883a 	mov	r4,r3
 80039d8:	1087883a 	add	r3,r2,r2
 80039dc:	d0a89104 	addi	r2,gp,-23996
 80039e0:	1885883a 	add	r2,r3,r2
 80039e4:	1100000d 	sth	r4,0(r2)
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 80039e8:	e0bffc17 	ldw	r2,-16(fp)
 80039ec:	10800217 	ldw	r2,8(r2)
 80039f0:	01400284 	movi	r5,10
 80039f4:	1009883a 	mov	r4,r2
 80039f8:	80087fc0 	call	80087fc <__mulsi3>
 80039fc:	1009883a 	mov	r4,r2
 8003a00:	80062900 	call	8006290 <vTaskDelay>
 8003a04:	003fbe06 	br	8003900 <prvSemaphoreTest+0x68>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 8003a08:	e0bffc17 	ldw	r2,-16(fp)
 8003a0c:	10800217 	ldw	r2,8(r2)
 8003a10:	103fbb1e 	bne	r2,zero,8003900 <prvSemaphoreTest+0x68>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 8003a14:	003b683a 	trap	0
			}
		}
	}
 8003a18:	003fb906 	br	8003900 <prvSemaphoreTest+0x68>

08003a1c <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
 8003a1c:	defffd04 	addi	sp,sp,-12
 8003a20:	df000215 	stw	fp,8(sp)
 8003a24:	df000204 	addi	fp,sp,8
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
 8003a28:	00800044 	movi	r2,1
 8003a2c:	e0bfff15 	stw	r2,-4(fp)

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8003a30:	e03ffe15 	stw	zero,-8(fp)
 8003a34:	00001f06 	br	8003ab4 <xAreSemaphoreTasksStillRunning+0x98>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 8003a38:	e0bffe17 	ldw	r2,-8(fp)
 8003a3c:	1087883a 	add	r3,r2,r2
 8003a40:	d0a89384 	addi	r2,gp,-23986
 8003a44:	1885883a 	add	r2,r3,r2
 8003a48:	1100000b 	ldhu	r4,0(r2)
 8003a4c:	e0bffe17 	ldw	r2,-8(fp)
 8003a50:	1087883a 	add	r3,r2,r2
 8003a54:	d0a89104 	addi	r2,gp,-23996
 8003a58:	1885883a 	add	r2,r3,r2
 8003a5c:	1080000b 	ldhu	r2,0(r2)
 8003a60:	20ffffcc 	andi	r3,r4,65535
 8003a64:	18e0001c 	xori	r3,r3,32768
 8003a68:	18e00004 	addi	r3,r3,-32768
 8003a6c:	10bfffcc 	andi	r2,r2,65535
 8003a70:	10a0001c 	xori	r2,r2,32768
 8003a74:	10a00004 	addi	r2,r2,-32768
 8003a78:	1880011e 	bne	r3,r2,8003a80 <xAreSemaphoreTasksStillRunning+0x64>
		{
			xReturn = pdFALSE;
 8003a7c:	e03fff15 	stw	zero,-4(fp)
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 8003a80:	e0bffe17 	ldw	r2,-8(fp)
 8003a84:	1087883a 	add	r3,r2,r2
 8003a88:	d0a89104 	addi	r2,gp,-23996
 8003a8c:	1885883a 	add	r2,r3,r2
 8003a90:	10c0000b 	ldhu	r3,0(r2)
 8003a94:	e0bffe17 	ldw	r2,-8(fp)
 8003a98:	1089883a 	add	r4,r2,r2
 8003a9c:	d0a89384 	addi	r2,gp,-23986
 8003aa0:	2085883a 	add	r2,r4,r2
 8003aa4:	10c0000d 	sth	r3,0(r2)
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 8003aa8:	e0bffe17 	ldw	r2,-8(fp)
 8003aac:	10800044 	addi	r2,r2,1
 8003ab0:	e0bffe15 	stw	r2,-8(fp)
 8003ab4:	e0bffe17 	ldw	r2,-8(fp)
 8003ab8:	10800110 	cmplti	r2,r2,4
 8003abc:	103fde1e 	bne	r2,zero,8003a38 <xAreSemaphoreTasksStillRunning+0x1c>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
 8003ac0:	e0bfff17 	ldw	r2,-4(fp)
}
 8003ac4:	e037883a 	mov	sp,fp
 8003ac8:	df000017 	ldw	fp,0(sp)
 8003acc:	dec00104 	addi	sp,sp,4
 8003ad0:	f800283a 	ret

08003ad4 <vParTestInitialise>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestInitialise(void) {
 8003ad4:	deffff04 	addi	sp,sp,-4
 8003ad8:	df000015 	stw	fp,0(sp)
 8003adc:	d839883a 	mov	fp,sp
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(LED_PIO_BASE, 0xFFFFFFFF);
 8003ae0:	00ffffc4 	movi	r3,-1
 8003ae4:	00840034 	movhi	r2,4096
 8003ae8:	10914104 	addi	r2,r2,17668
 8003aec:	10c00035 	stwio	r3,0(r2)
	ulLedStates = 0;
 8003af0:	d0289615 	stw	zero,-23976(gp)
}
 8003af4:	0001883a 	nop
 8003af8:	e037883a 	mov	sp,fp
 8003afc:	df000017 	ldw	fp,0(sp)
 8003b00:	dec00104 	addi	sp,sp,4
 8003b04:	f800283a 	ret

08003b08 <vParTestSetLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestSetLED(unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue) {
 8003b08:	defffc04 	addi	sp,sp,-16
 8003b0c:	dfc00315 	stw	ra,12(sp)
 8003b10:	df000215 	stw	fp,8(sp)
 8003b14:	df000204 	addi	fp,sp,8
 8003b18:	e13ffe15 	stw	r4,-8(fp)
 8003b1c:	e17fff15 	stw	r5,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 8003b20:	e0bffe17 	ldw	r2,-8(fp)
 8003b24:	10800228 	cmpgeui	r2,r2,8
 8003b28:	1000191e 	bne	r2,zero,8003b90 <vParTestSetLED+0x88>
		taskENTER_CRITICAL();
 8003b2c:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			if (xValue > 0) {
 8003b30:	e0bfff17 	ldw	r2,-4(fp)
 8003b34:	0080080e 	bge	zero,r2,8003b58 <vParTestSetLED+0x50>
				ulLedStates |= 1 << uxLED;
 8003b38:	00c00044 	movi	r3,1
 8003b3c:	e0bffe17 	ldw	r2,-8(fp)
 8003b40:	1884983a 	sll	r2,r3,r2
 8003b44:	1007883a 	mov	r3,r2
 8003b48:	d0a89617 	ldw	r2,-23976(gp)
 8003b4c:	1884b03a 	or	r2,r3,r2
 8003b50:	d0a89615 	stw	r2,-23976(gp)
 8003b54:	00000806 	br	8003b78 <vParTestSetLED+0x70>
			} else {
				ulLedStates &= ~(1 << uxLED);
 8003b58:	00c00044 	movi	r3,1
 8003b5c:	e0bffe17 	ldw	r2,-8(fp)
 8003b60:	1884983a 	sll	r2,r3,r2
 8003b64:	0084303a 	nor	r2,zero,r2
 8003b68:	1007883a 	mov	r3,r2
 8003b6c:	d0a89617 	ldw	r2,-23976(gp)
 8003b70:	1884703a 	and	r2,r3,r2
 8003b74:	d0a89615 	stw	r2,-23976(gp)
			}
			IOWR_ALT_UP_PARALLEL_PORT_DATA(LED_PIO_BASE, ulLedStates);
 8003b78:	d0a89617 	ldw	r2,-23976(gp)
 8003b7c:	1007883a 	mov	r3,r2
 8003b80:	00840034 	movhi	r2,4096
 8003b84:	10914004 	addi	r2,r2,17664
 8003b88:	10c00035 	stwio	r3,0(r2)
		}
		taskEXIT_CRITICAL();
 8003b8c:	800796c0 	call	800796c <vTaskExitCritical>
	}
}
 8003b90:	0001883a 	nop
 8003b94:	e037883a 	mov	sp,fp
 8003b98:	dfc00117 	ldw	ra,4(sp)
 8003b9c:	df000017 	ldw	fp,0(sp)
 8003ba0:	dec00204 	addi	sp,sp,8
 8003ba4:	f800283a 	ret

08003ba8 <vParTestToggleLED>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vParTestToggleLED(unsigned portBASE_TYPE uxLED) {
 8003ba8:	defffd04 	addi	sp,sp,-12
 8003bac:	dfc00215 	stw	ra,8(sp)
 8003bb0:	df000115 	stw	fp,4(sp)
 8003bb4:	df000104 	addi	fp,sp,4
 8003bb8:	e13fff15 	stw	r4,-4(fp)
	if (uxLED < partstNUM_LEDS) {
 8003bbc:	e0bfff17 	ldw	r2,-4(fp)
 8003bc0:	10800228 	cmpgeui	r2,r2,8
 8003bc4:	10000d1e 	bne	r2,zero,8003bfc <vParTestToggleLED+0x54>
		taskENTER_CRITICAL();
 8003bc8:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			vParTestSetLED(uxLED, !(ulLedStates & (1 << uxLED)));
 8003bcc:	00c00044 	movi	r3,1
 8003bd0:	e0bfff17 	ldw	r2,-4(fp)
 8003bd4:	1884983a 	sll	r2,r3,r2
 8003bd8:	1007883a 	mov	r3,r2
 8003bdc:	d0a89617 	ldw	r2,-23976(gp)
 8003be0:	1884703a 	and	r2,r3,r2
 8003be4:	1005003a 	cmpeq	r2,r2,zero
 8003be8:	10803fcc 	andi	r2,r2,255
 8003bec:	100b883a 	mov	r5,r2
 8003bf0:	e13fff17 	ldw	r4,-4(fp)
 8003bf4:	8003b080 	call	8003b08 <vParTestSetLED>
		}
		taskEXIT_CRITICAL();
 8003bf8:	800796c0 	call	800796c <vTaskExitCritical>
	}
}
 8003bfc:	0001883a 	nop
 8003c00:	e037883a 	mov	sp,fp
 8003c04:	dfc00117 	ldw	ra,4(sp)
 8003c08:	df000017 	ldw	fp,0(sp)
 8003c0c:	dec00204 	addi	sp,sp,8
 8003c10:	f800283a 	ret

08003c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c14:	defffe04 	addi	sp,sp,-8
 8003c18:	df000115 	stw	fp,4(sp)
 8003c1c:	df000104 	addi	fp,sp,4
 8003c20:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c24:	e0bfff17 	ldw	r2,-4(fp)
 8003c28:	10c00204 	addi	r3,r2,8
 8003c2c:	e0bfff17 	ldw	r2,-4(fp)
 8003c30:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c34:	e0bfff17 	ldw	r2,-4(fp)
 8003c38:	00ffffc4 	movi	r3,-1
 8003c3c:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c40:	e0bfff17 	ldw	r2,-4(fp)
 8003c44:	10c00204 	addi	r3,r2,8
 8003c48:	e0bfff17 	ldw	r2,-4(fp)
 8003c4c:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c50:	e0bfff17 	ldw	r2,-4(fp)
 8003c54:	10c00204 	addi	r3,r2,8
 8003c58:	e0bfff17 	ldw	r2,-4(fp)
 8003c5c:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c60:	e0bfff17 	ldw	r2,-4(fp)
 8003c64:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c68:	0001883a 	nop
 8003c6c:	e037883a 	mov	sp,fp
 8003c70:	df000017 	ldw	fp,0(sp)
 8003c74:	dec00104 	addi	sp,sp,4
 8003c78:	f800283a 	ret

08003c7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c7c:	defffe04 	addi	sp,sp,-8
 8003c80:	df000115 	stw	fp,4(sp)
 8003c84:	df000104 	addi	fp,sp,4
 8003c88:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c8c:	e0bfff17 	ldw	r2,-4(fp)
 8003c90:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c94:	0001883a 	nop
 8003c98:	e037883a 	mov	sp,fp
 8003c9c:	df000017 	ldw	fp,0(sp)
 8003ca0:	dec00104 	addi	sp,sp,4
 8003ca4:	f800283a 	ret

08003ca8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca8:	defffc04 	addi	sp,sp,-16
 8003cac:	df000315 	stw	fp,12(sp)
 8003cb0:	df000304 	addi	fp,sp,12
 8003cb4:	e13ffe15 	stw	r4,-8(fp)
 8003cb8:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cbc:	e0bffe17 	ldw	r2,-8(fp)
 8003cc0:	10800117 	ldw	r2,4(r2)
 8003cc4:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc8:	e0bfff17 	ldw	r2,-4(fp)
 8003ccc:	e0fffd17 	ldw	r3,-12(fp)
 8003cd0:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cd4:	e0bffd17 	ldw	r2,-12(fp)
 8003cd8:	10c00217 	ldw	r3,8(r2)
 8003cdc:	e0bfff17 	ldw	r2,-4(fp)
 8003ce0:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ce4:	e0bffd17 	ldw	r2,-12(fp)
 8003ce8:	10800217 	ldw	r2,8(r2)
 8003cec:	e0ffff17 	ldw	r3,-4(fp)
 8003cf0:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 8003cf4:	e0bffd17 	ldw	r2,-12(fp)
 8003cf8:	e0ffff17 	ldw	r3,-4(fp)
 8003cfc:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d00:	e0bfff17 	ldw	r2,-4(fp)
 8003d04:	e0fffe17 	ldw	r3,-8(fp)
 8003d08:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 8003d0c:	e0bffe17 	ldw	r2,-8(fp)
 8003d10:	10800017 	ldw	r2,0(r2)
 8003d14:	10c00044 	addi	r3,r2,1
 8003d18:	e0bffe17 	ldw	r2,-8(fp)
 8003d1c:	10c00015 	stw	r3,0(r2)
}
 8003d20:	0001883a 	nop
 8003d24:	e037883a 	mov	sp,fp
 8003d28:	df000017 	ldw	fp,0(sp)
 8003d2c:	dec00104 	addi	sp,sp,4
 8003d30:	f800283a 	ret

08003d34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d34:	defffb04 	addi	sp,sp,-20
 8003d38:	df000415 	stw	fp,16(sp)
 8003d3c:	df000404 	addi	fp,sp,16
 8003d40:	e13ffe15 	stw	r4,-8(fp)
 8003d44:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d48:	e0bfff17 	ldw	r2,-4(fp)
 8003d4c:	10800017 	ldw	r2,0(r2)
 8003d50:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d54:	e0bffd17 	ldw	r2,-12(fp)
 8003d58:	10bfffd8 	cmpnei	r2,r2,-1
 8003d5c:	1000041e 	bne	r2,zero,8003d70 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d60:	e0bffe17 	ldw	r2,-8(fp)
 8003d64:	10800417 	ldw	r2,16(r2)
 8003d68:	e0bffc15 	stw	r2,-16(fp)
 8003d6c:	00000c06 	br	8003da0 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d70:	e0bffe17 	ldw	r2,-8(fp)
 8003d74:	10800204 	addi	r2,r2,8
 8003d78:	e0bffc15 	stw	r2,-16(fp)
 8003d7c:	00000306 	br	8003d8c <vListInsert+0x58>
 8003d80:	e0bffc17 	ldw	r2,-16(fp)
 8003d84:	10800117 	ldw	r2,4(r2)
 8003d88:	e0bffc15 	stw	r2,-16(fp)
 8003d8c:	e0bffc17 	ldw	r2,-16(fp)
 8003d90:	10800117 	ldw	r2,4(r2)
 8003d94:	10800017 	ldw	r2,0(r2)
 8003d98:	e0fffd17 	ldw	r3,-12(fp)
 8003d9c:	18bff82e 	bgeu	r3,r2,8003d80 <vListInsert+0x4c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003da0:	e0bffc17 	ldw	r2,-16(fp)
 8003da4:	10c00117 	ldw	r3,4(r2)
 8003da8:	e0bfff17 	ldw	r2,-4(fp)
 8003dac:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003db0:	e0bfff17 	ldw	r2,-4(fp)
 8003db4:	10800117 	ldw	r2,4(r2)
 8003db8:	e0ffff17 	ldw	r3,-4(fp)
 8003dbc:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 8003dc0:	e0bfff17 	ldw	r2,-4(fp)
 8003dc4:	e0fffc17 	ldw	r3,-16(fp)
 8003dc8:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 8003dcc:	e0bffc17 	ldw	r2,-16(fp)
 8003dd0:	e0ffff17 	ldw	r3,-4(fp)
 8003dd4:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dd8:	e0bfff17 	ldw	r2,-4(fp)
 8003ddc:	e0fffe17 	ldw	r3,-8(fp)
 8003de0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 8003de4:	e0bffe17 	ldw	r2,-8(fp)
 8003de8:	10800017 	ldw	r2,0(r2)
 8003dec:	10c00044 	addi	r3,r2,1
 8003df0:	e0bffe17 	ldw	r2,-8(fp)
 8003df4:	10c00015 	stw	r3,0(r2)
}
 8003df8:	0001883a 	nop
 8003dfc:	e037883a 	mov	sp,fp
 8003e00:	df000017 	ldw	fp,0(sp)
 8003e04:	dec00104 	addi	sp,sp,4
 8003e08:	f800283a 	ret

08003e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e0c:	defffd04 	addi	sp,sp,-12
 8003e10:	df000215 	stw	fp,8(sp)
 8003e14:	df000204 	addi	fp,sp,8
 8003e18:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e1c:	e0bfff17 	ldw	r2,-4(fp)
 8003e20:	10800417 	ldw	r2,16(r2)
 8003e24:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e28:	e0bfff17 	ldw	r2,-4(fp)
 8003e2c:	10800117 	ldw	r2,4(r2)
 8003e30:	e0ffff17 	ldw	r3,-4(fp)
 8003e34:	18c00217 	ldw	r3,8(r3)
 8003e38:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e3c:	e0bfff17 	ldw	r2,-4(fp)
 8003e40:	10800217 	ldw	r2,8(r2)
 8003e44:	e0ffff17 	ldw	r3,-4(fp)
 8003e48:	18c00117 	ldw	r3,4(r3)
 8003e4c:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e50:	e0bffe17 	ldw	r2,-8(fp)
 8003e54:	10c00117 	ldw	r3,4(r2)
 8003e58:	e0bfff17 	ldw	r2,-4(fp)
 8003e5c:	1880041e 	bne	r3,r2,8003e70 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e60:	e0bfff17 	ldw	r2,-4(fp)
 8003e64:	10c00217 	ldw	r3,8(r2)
 8003e68:	e0bffe17 	ldw	r2,-8(fp)
 8003e6c:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e70:	e0bfff17 	ldw	r2,-4(fp)
 8003e74:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 8003e78:	e0bffe17 	ldw	r2,-8(fp)
 8003e7c:	10800017 	ldw	r2,0(r2)
 8003e80:	10ffffc4 	addi	r3,r2,-1
 8003e84:	e0bffe17 	ldw	r2,-8(fp)
 8003e88:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 8003e8c:	e0bffe17 	ldw	r2,-8(fp)
 8003e90:	10800017 	ldw	r2,0(r2)
}
 8003e94:	e037883a 	mov	sp,fp
 8003e98:	df000017 	ldw	fp,0(sp)
 8003e9c:	dec00104 	addi	sp,sp,4
 8003ea0:	f800283a 	ret

08003ea4 <prvReadGp>:
#else
void vPortSysTickHandler( void * context, alt_u32 id );
#endif
/*-----------------------------------------------------------*/

void prvReadGp(unsigned long *ulValue) {
 8003ea4:	defffe04 	addi	sp,sp,-8
 8003ea8:	df000115 	stw	fp,4(sp)
 8003eac:	df000104 	addi	fp,sp,4
 8003eb0:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (r4) " );
 8003eb4:	26800015 	stw	gp,0(r4)
}
 8003eb8:	0001883a 	nop
 8003ebc:	e037883a 	mov	sp,fp
 8003ec0:	df000017 	ldw	fp,0(sp)
 8003ec4:	dec00104 	addi	sp,sp,4
 8003ec8:	f800283a 	ret

08003ecc <pxPortInitialiseStack>:
 **     @param
 **
 */
/* ===================================================================*/
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
pdTASK_CODE pxCode, void *pvParameters) {
 8003ecc:	defff904 	addi	sp,sp,-28
 8003ed0:	dfc00615 	stw	ra,24(sp)
 8003ed4:	df000515 	stw	fp,20(sp)
 8003ed8:	df000504 	addi	fp,sp,20
 8003edc:	e13ffd15 	stw	r4,-12(fp)
 8003ee0:	e17ffe15 	stw	r5,-8(fp)
 8003ee4:	e1bfff15 	stw	r6,-4(fp)
	portSTACK_TYPE *pxFramePointer = pxTopOfStack - 1;
 8003ee8:	e0bffd17 	ldw	r2,-12(fp)
 8003eec:	10bfff04 	addi	r2,r2,-4
 8003ef0:	e0bffb15 	stw	r2,-20(fp)
	portSTACK_TYPE xGlobalPointer;

	prvReadGp(&xGlobalPointer);
 8003ef4:	e0bffc04 	addi	r2,fp,-16
 8003ef8:	1009883a 	mov	r4,r2
 8003efc:	8003ea40 	call	8003ea4 <prvReadGp>

	/* End of stack marker. */
	*pxTopOfStack = 0xdeadbeef;
 8003f00:	e0fffd17 	ldw	r3,-12(fp)
 8003f04:	00b7abb4 	movhi	r2,57006
 8003f08:	10afbbc4 	addi	r2,r2,-16657
 8003f0c:	18800015 	stw	r2,0(r3)
	pxTopOfStack--;
 8003f10:	e0bffd17 	ldw	r2,-12(fp)
 8003f14:	10bfff04 	addi	r2,r2,-4
 8003f18:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxFramePointer;
 8003f1c:	e0fffb17 	ldw	r3,-20(fp)
 8003f20:	e0bffd17 	ldw	r2,-12(fp)
 8003f24:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003f28:	e0bffd17 	ldw	r2,-12(fp)
 8003f2c:	10bfff04 	addi	r2,r2,-4
 8003f30:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = xGlobalPointer;
 8003f34:	e0fffc17 	ldw	r3,-16(fp)
 8003f38:	e0bffd17 	ldw	r2,-12(fp)
 8003f3c:	10c00015 	stw	r3,0(r2)

	/* Space for R23 to R16. */
	pxTopOfStack -= 9;
 8003f40:	e0bffd17 	ldw	r2,-12(fp)
 8003f44:	10bff704 	addi	r2,r2,-36
 8003f48:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;
 8003f4c:	e0fffe17 	ldw	r3,-8(fp)
 8003f50:	e0bffd17 	ldw	r2,-12(fp)
 8003f54:	10c00015 	stw	r3,0(r2)
	pxTopOfStack--;
 8003f58:	e0bffd17 	ldw	r2,-12(fp)
 8003f5c:	10bfff04 	addi	r2,r2,-4
 8003f60:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = portINITIAL_ESTATUS;
 8003f64:	e0bffd17 	ldw	r2,-12(fp)
 8003f68:	00c00044 	movi	r3,1
 8003f6c:	10c00015 	stw	r3,0(r2)

	/* Space for R15 to R5. */
	pxTopOfStack -= 12;
 8003f70:	e0bffd17 	ldw	r2,-12(fp)
 8003f74:	10bff404 	addi	r2,r2,-48
 8003f78:	e0bffd15 	stw	r2,-12(fp)

	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;
 8003f7c:	e0ffff17 	ldw	r3,-4(fp)
 8003f80:	e0bffd17 	ldw	r2,-12(fp)
 8003f84:	10c00015 	stw	r3,0(r2)

	/* Space for R3 to R1, muldiv and RA. */
	pxTopOfStack -= 5;
 8003f88:	e0bffd17 	ldw	r2,-12(fp)
 8003f8c:	10bffb04 	addi	r2,r2,-20
 8003f90:	e0bffd15 	stw	r2,-12(fp)

	return pxTopOfStack;
 8003f94:	e0bffd17 	ldw	r2,-12(fp)
}
 8003f98:	e037883a 	mov	sp,fp
 8003f9c:	dfc00117 	ldw	ra,4(sp)
 8003fa0:	df000017 	ldw	fp,0(sp)
 8003fa4:	dec00204 	addi	sp,sp,8
 8003fa8:	f800283a 	ret

08003fac <xPortStartScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
portBASE_TYPE xPortStartScheduler(void) {
 8003fac:	defffe04 	addi	sp,sp,-8
 8003fb0:	dfc00115 	stw	ra,4(sp)
 8003fb4:	df000015 	stw	fp,0(sp)
 8003fb8:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	prvSetupTimerInterrupt();
 8003fbc:	80040040 	call	8004004 <prvSetupTimerInterrupt>
 8003fc0:	00820034 	movhi	r2,2048

	/* Start the first task. */
	asm volatile ( " movia r2, restore_sp_from_pxCurrentTCB        \n"
 8003fc4:	10803104 	addi	r2,r2,196
 8003fc8:	1000683a 	jmp	r2
			" jmp r2                                          " );

	/* Should not get here! */
	return 0;
 8003fcc:	0005883a 	mov	r2,zero
}
 8003fd0:	e037883a 	mov	sp,fp
 8003fd4:	dfc00117 	ldw	ra,4(sp)
 8003fd8:	df000017 	ldw	fp,0(sp)
 8003fdc:	dec00204 	addi	sp,sp,8
 8003fe0:	f800283a 	ret

08003fe4 <vPortEndScheduler>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void vPortEndScheduler(void) {
 8003fe4:	deffff04 	addi	sp,sp,-4
 8003fe8:	df000015 	stw	fp,0(sp)
 8003fec:	d839883a 	mov	fp,sp

}
 8003ff0:	0001883a 	nop
 8003ff4:	e037883a 	mov	sp,fp
 8003ff8:	df000017 	ldw	fp,0(sp)
 8003ffc:	dec00104 	addi	sp,sp,4
 8004000:	f800283a 	ret

08004004 <prvSetupTimerInterrupt>:
 **
 **     @param
 **
 */
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
 8004004:	defffd04 	addi	sp,sp,-12
 8004008:	dfc00215 	stw	ra,8(sp)
 800400c:	df000115 	stw	fp,4(sp)
 8004010:	df000104 	addi	fp,sp,4
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
			== alt_ic_isr_register(SYS_CLK_IRQ_INTERRUPT_CONTROLLER_ID,
 8004014:	d8000015 	stw	zero,0(sp)
 8004018:	000f883a 	mov	r7,zero
 800401c:	01820034 	movhi	r6,2048
 8004020:	31902a04 	addi	r6,r6,16552
 8004024:	01400044 	movi	r5,1
 8004028:	0009883a 	mov	r4,zero
 800402c:	80161540 	call	8016154 <alt_ic_isr_register>
/* ===================================================================*/
void prvSetupTimerInterrupt(void) {
	/* Try to register the interrupt handler. */
	//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	if (-EINVAL
 8004030:	10bffa98 	cmpnei	r2,r2,-22
 8004034:	1000021e 	bne	r2,zero,8004040 <prvSetupTimerInterrupt+0x3c>
#else
					if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
#endif
					{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 8004038:	003da03a 	break	0
 800403c:	00001006 	br	8004080 <prvSetupTimerInterrupt+0x7c>
	} else {
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8004040:	00c00204 	movi	r3,8
 8004044:	00840034 	movhi	r2,4096
 8004048:	10912904 	addi	r2,r2,17572
 800404c:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
		IOWR_ALTERA_AVALON_TIMER_PERIODL(SYS_CLK_BASE,
 8004050:	00e1a814 	movui	r3,34464
 8004054:	00840034 	movhi	r2,4096
 8004058:	10912a04 	addi	r2,r2,17576
 800405c:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF);
		IOWR_ALTERA_AVALON_TIMER_PERIODH(SYS_CLK_BASE,
 8004060:	00c00044 	movi	r3,1
 8004064:	00840034 	movhi	r2,4096
 8004068:	10912b04 	addi	r2,r2,17580
 800406c:	10c00035 	stwio	r3,0(r2)
				( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_CLK_BASE,
 8004070:	00c001c4 	movi	r3,7
 8004074:	00840034 	movhi	r2,4096
 8004078:	10912904 	addi	r2,r2,17572
 800407c:	10c00035 	stwio	r3,0(r2)
				ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 8004080:	00ffff84 	movi	r3,-2
 8004084:	00840034 	movhi	r2,4096
 8004088:	10912804 	addi	r2,r2,17568
 800408c:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 8004090:	0001883a 	nop
 8004094:	e037883a 	mov	sp,fp
 8004098:	dfc00117 	ldw	ra,4(sp)
 800409c:	df000017 	ldw	fp,0(sp)
 80040a0:	dec00204 	addi	sp,sp,8
 80040a4:	f800283a 	ret

080040a8 <vPortSysTickHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void vPortSysTickHandler(void * context)
#else
void vPortSysTickHandler( void * context, alt_u32 id )
#endif
{
 80040a8:	defffd04 	addi	sp,sp,-12
 80040ac:	dfc00215 	stw	ra,8(sp)
 80040b0:	df000115 	stw	fp,4(sp)
 80040b4:	df000104 	addi	fp,sp,4
 80040b8:	e13fff15 	stw	r4,-4(fp)
	/* Increment the Kernel Tick. */
	//vTaskIncrementTick();
	(void) xTaskIncrementTick();
 80040bc:	8006b980 	call	8006b98 <xTaskIncrementTick>

	/* If using preemption, also force a context switch. */
#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
 80040c0:	8006d640 	call	8006d64 <vTaskSwitchContext>
#endif

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_CLK_BASE,
 80040c4:	00ffff84 	movi	r3,-2
 80040c8:	00840034 	movhi	r2,4096
 80040cc:	10912804 	addi	r2,r2,17568
 80040d0:	10c00035 	stwio	r3,0(r2)
			~ALTERA_AVALON_TIMER_STATUS_TO_MSK);
}
 80040d4:	0001883a 	nop
 80040d8:	e037883a 	mov	sp,fp
 80040dc:	dfc00117 	ldw	ra,4(sp)
 80040e0:	df000017 	ldw	fp,0(sp)
 80040e4:	dec00204 	addi	sp,sp,8
 80040e8:	f800283a 	ret

080040ec <alt_irq_register>:
#ifndef ALT_ENHANCED_INTERRUPT_API_PRESENT
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
#else
int alt_irq_register(alt_u32 id, void* context, alt_isr_func handler)
#endif
{
 80040ec:	defff104 	addi	sp,sp,-60
 80040f0:	df000e15 	stw	fp,56(sp)
 80040f4:	df000e04 	addi	fp,sp,56
 80040f8:	e13ffd15 	stw	r4,-12(fp)
 80040fc:	e17ffe15 	stw	r5,-8(fp)
 8004100:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;
 8004104:	00bffa84 	movi	r2,-22
 8004108:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 800410c:	e0bffd17 	ldw	r2,-12(fp)
 8004110:	10800828 	cmpgeui	r2,r2,32
 8004114:	10004c1e 	bne	r2,zero,8004248 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004118:	0005303a 	rdctl	r2,status
 800411c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004120:	e0fff617 	ldw	r3,-40(fp)
 8004124:	00bfff84 	movi	r2,-2
 8004128:	1884703a 	and	r2,r3,r2
 800412c:	1001703a 	wrctl	status,r2
  
  return context;
 8004130:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */

		status = alt_irq_disable_all();
 8004134:	e0bff415 	stw	r2,-48(fp)

		alt_irq[id].handler = handler;
 8004138:	008220b4 	movhi	r2,2178
 800413c:	10bcb604 	addi	r2,r2,-3368
 8004140:	e0fffd17 	ldw	r3,-12(fp)
 8004144:	180690fa 	slli	r3,r3,3
 8004148:	10c5883a 	add	r2,r2,r3
 800414c:	e0ffff17 	ldw	r3,-4(fp)
 8004150:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 8004154:	008220b4 	movhi	r2,2178
 8004158:	10bcb604 	addi	r2,r2,-3368
 800415c:	e0fffd17 	ldw	r3,-12(fp)
 8004160:	180690fa 	slli	r3,r3,3
 8004164:	10c5883a 	add	r2,r2,r3
 8004168:	10800104 	addi	r2,r2,4
 800416c:	e0fffe17 	ldw	r3,-8(fp)
 8004170:	10c00015 	stw	r3,0(r2)

		rc = (handler) ? alt_irq_enable(id) : alt_irq_disable(id);
 8004174:	e0bfff17 	ldw	r2,-4(fp)
 8004178:	10001926 	beq	r2,zero,80041e0 <alt_irq_register+0xf4>
 800417c:	e0bffd17 	ldw	r2,-12(fp)
 8004180:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004184:	0005303a 	rdctl	r2,status
 8004188:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800418c:	e0fff717 	ldw	r3,-36(fp)
 8004190:	00bfff84 	movi	r2,-2
 8004194:	1884703a 	and	r2,r3,r2
 8004198:	1001703a 	wrctl	status,r2
  
  return context;
 800419c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80041a0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 80041a4:	00c00044 	movi	r3,1
 80041a8:	e0bff317 	ldw	r2,-52(fp)
 80041ac:	1884983a 	sll	r2,r3,r2
 80041b0:	1007883a 	mov	r3,r2
 80041b4:	d0a8b617 	ldw	r2,-23848(gp)
 80041b8:	1884b03a 	or	r2,r3,r2
 80041bc:	d0a8b615 	stw	r2,-23848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80041c0:	d0a8b617 	ldw	r2,-23848(gp)
 80041c4:	100170fa 	wrctl	ienable,r2
 80041c8:	e0bff817 	ldw	r2,-32(fp)
 80041cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80041d0:	e0bff917 	ldw	r2,-28(fp)
 80041d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80041d8:	0005883a 	mov	r2,zero
 80041dc:	00001906 	br	8004244 <alt_irq_register+0x158>
 80041e0:	e0bffd17 	ldw	r2,-12(fp)
 80041e4:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80041e8:	0005303a 	rdctl	r2,status
 80041ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80041f0:	e0fffa17 	ldw	r3,-24(fp)
 80041f4:	00bfff84 	movi	r2,-2
 80041f8:	1884703a 	and	r2,r3,r2
 80041fc:	1001703a 	wrctl	status,r2
  
  return context;
 8004200:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004204:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8004208:	00c00044 	movi	r3,1
 800420c:	e0bff517 	ldw	r2,-44(fp)
 8004210:	1884983a 	sll	r2,r3,r2
 8004214:	0084303a 	nor	r2,zero,r2
 8004218:	1007883a 	mov	r3,r2
 800421c:	d0a8b617 	ldw	r2,-23848(gp)
 8004220:	1884703a 	and	r2,r3,r2
 8004224:	d0a8b615 	stw	r2,-23848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004228:	d0a8b617 	ldw	r2,-23848(gp)
 800422c:	100170fa 	wrctl	ienable,r2
 8004230:	e0bffb17 	ldw	r2,-20(fp)
 8004234:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004238:	e0bffc17 	ldw	r2,-16(fp)
 800423c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004240:	0005883a 	mov	r2,zero
 8004244:	e0bff215 	stw	r2,-56(fp)

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
 8004248:	e0bff217 	ldw	r2,-56(fp)
}
 800424c:	e037883a 	mov	sp,fp
 8004250:	df000017 	ldw	fp,0(sp)
 8004254:	dec00104 	addi	sp,sp,4
 8004258:	f800283a 	ret

0800425c <alt_iic_isr_register>:
 * @param isr_context      Opaque pointer passed to ISR
 * @param flags
 * @return                 0 if successful, else error (-1)
 */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr,
		void *isr_context, void *flags) {
 800425c:	defff604 	addi	sp,sp,-40
 8004260:	dfc00915 	stw	ra,36(sp)
 8004264:	df000815 	stw	fp,32(sp)
 8004268:	df000804 	addi	fp,sp,32
 800426c:	e13ffc15 	stw	r4,-16(fp)
 8004270:	e17ffd15 	stw	r5,-12(fp)
 8004274:	e1bffe15 	stw	r6,-8(fp)
 8004278:	e1ffff15 	stw	r7,-4(fp)
	int rc = -EINVAL;
 800427c:	00bffa84 	movi	r2,-22
 8004280:	e0bff815 	stw	r2,-32(fp)
	int id = irq; /* IRQ interpreted as the interrupt ID. */
 8004284:	e0bffd17 	ldw	r2,-12(fp)
 8004288:	e0bff915 	stw	r2,-28(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ) {
 800428c:	e0bff917 	ldw	r2,-28(fp)
 8004290:	10800808 	cmpgei	r2,r2,32
 8004294:	1000231e 	bne	r2,zero,8004324 <alt_iic_isr_register+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004298:	0005303a 	rdctl	r2,status
 800429c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80042a0:	e0fffb17 	ldw	r3,-20(fp)
 80042a4:	00bfff84 	movi	r2,-2
 80042a8:	1884703a 	and	r2,r3,r2
 80042ac:	1001703a 	wrctl	status,r2
  
  return context;
 80042b0:	e0bffb17 	ldw	r2,-20(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistant
		 * state.
		 */

		status = alt_irq_disable_all();
 80042b4:	e0bffa15 	stw	r2,-24(fp)

		alt_irq[id].handler = isr;
 80042b8:	008220b4 	movhi	r2,2178
 80042bc:	10bcb604 	addi	r2,r2,-3368
 80042c0:	e0fff917 	ldw	r3,-28(fp)
 80042c4:	180690fa 	slli	r3,r3,3
 80042c8:	10c5883a 	add	r2,r2,r3
 80042cc:	e0fffe17 	ldw	r3,-8(fp)
 80042d0:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = isr_context;
 80042d4:	008220b4 	movhi	r2,2178
 80042d8:	10bcb604 	addi	r2,r2,-3368
 80042dc:	e0fff917 	ldw	r3,-28(fp)
 80042e0:	180690fa 	slli	r3,r3,3
 80042e4:	10c5883a 	add	r2,r2,r3
 80042e8:	10800104 	addi	r2,r2,4
 80042ec:	e0ffff17 	ldw	r3,-4(fp)
 80042f0:	10c00015 	stw	r3,0(r2)

		rc = (isr) ?
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80042f4:	e0bffe17 	ldw	r2,-8(fp)
 80042f8:	10000526 	beq	r2,zero,8004310 <alt_iic_isr_register+0xb4>
 80042fc:	e0bff917 	ldw	r2,-28(fp)
 8004300:	100b883a 	mov	r5,r2
 8004304:	e13ffc17 	ldw	r4,-16(fp)
 8004308:	80161a40 	call	80161a4 <alt_ic_irq_enable>
 800430c:	00000406 	br	8004320 <alt_iic_isr_register+0xc4>
 8004310:	e0bff917 	ldw	r2,-28(fp)
 8004314:	100b883a 	mov	r5,r2
 8004318:	e13ffc17 	ldw	r4,-16(fp)
 800431c:	801622c0 	call	801622c <alt_ic_irq_disable>
		status = alt_irq_disable_all();

		alt_irq[id].handler = isr;
		alt_irq[id].context = isr_context;

		rc = (isr) ?
 8004320:	e0bff815 	stw	r2,-32(fp)
				alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);

		//  alt_irq_enable_all(status);
	}

	return rc;
 8004324:	e0bff817 	ldw	r2,-32(fp)
}
 8004328:	e037883a 	mov	sp,fp
 800432c:	dfc00117 	ldw	ra,4(sp)
 8004330:	df000017 	ldw	fp,0(sp)
 8004334:	dec00204 	addi	sp,sp,8
 8004338:	f800283a 	ret

0800433c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800433c:	defff904 	addi	sp,sp,-28
 8004340:	dfc00615 	stw	ra,24(sp)
 8004344:	df000515 	stw	fp,20(sp)
 8004348:	df000504 	addi	fp,sp,20
 800434c:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004350:	e03ffd15 	stw	zero,-12(fp)

	vTaskSuspendAll();
 8004354:	80069540 	call	8006954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004358:	d0a89917 	ldw	r2,-23964(gp)
 800435c:	1000011e 	bne	r2,zero,8004364 <pvPortMalloc+0x28>
		{
			prvHeapInit();
 8004360:	80046080 	call	8004608 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004364:	d0e89c17 	ldw	r3,-23952(gp)
 8004368:	e0bfff17 	ldw	r2,-4(fp)
 800436c:	1884703a 	and	r2,r3,r2
 8004370:	1000581e 	bne	r2,zero,80044d4 <pvPortMalloc+0x198>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004374:	e0bfff17 	ldw	r2,-4(fp)
 8004378:	10000c26 	beq	r2,zero,80043ac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800437c:	00800204 	movi	r2,8
 8004380:	e0ffff17 	ldw	r3,-4(fp)
 8004384:	1885883a 	add	r2,r3,r2
 8004388:	e0bfff15 	stw	r2,-4(fp)

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800438c:	e0bfff17 	ldw	r2,-4(fp)
 8004390:	108000cc 	andi	r2,r2,3
 8004394:	10000526 	beq	r2,zero,80043ac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004398:	e0ffff17 	ldw	r3,-4(fp)
 800439c:	00bfff04 	movi	r2,-4
 80043a0:	1884703a 	and	r2,r3,r2
 80043a4:	10800104 	addi	r2,r2,4
 80043a8:	e0bfff15 	stw	r2,-4(fp)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ac:	e0bfff17 	ldw	r2,-4(fp)
 80043b0:	10004826 	beq	r2,zero,80044d4 <pvPortMalloc+0x198>
 80043b4:	d0e89a17 	ldw	r3,-23960(gp)
 80043b8:	e0bfff17 	ldw	r2,-4(fp)
 80043bc:	18804536 	bltu	r3,r2,80044d4 <pvPortMalloc+0x198>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043c0:	d0a89704 	addi	r2,gp,-23972
 80043c4:	e0bffc15 	stw	r2,-16(fp)
				pxBlock = xStart.pxNextFreeBlock;
 80043c8:	d0a89717 	ldw	r2,-23972(gp)
 80043cc:	e0bffb15 	stw	r2,-20(fp)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d0:	00000506 	br	80043e8 <pvPortMalloc+0xac>
				{
					pxPreviousBlock = pxBlock;
 80043d4:	e0bffb17 	ldw	r2,-20(fp)
 80043d8:	e0bffc15 	stw	r2,-16(fp)
					pxBlock = pxBlock->pxNextFreeBlock;
 80043dc:	e0bffb17 	ldw	r2,-20(fp)
 80043e0:	10800017 	ldw	r2,0(r2)
 80043e4:	e0bffb15 	stw	r2,-20(fp)
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043e8:	e0bffb17 	ldw	r2,-20(fp)
 80043ec:	10c00117 	ldw	r3,4(r2)
 80043f0:	e0bfff17 	ldw	r2,-4(fp)
 80043f4:	1880032e 	bgeu	r3,r2,8004404 <pvPortMalloc+0xc8>
 80043f8:	e0bffb17 	ldw	r2,-20(fp)
 80043fc:	10800017 	ldw	r2,0(r2)
 8004400:	103ff41e 	bne	r2,zero,80043d4 <pvPortMalloc+0x98>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004404:	d0a89917 	ldw	r2,-23964(gp)
 8004408:	e0fffb17 	ldw	r3,-20(fp)
 800440c:	18803126 	beq	r3,r2,80044d4 <pvPortMalloc+0x198>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004410:	e0bffc17 	ldw	r2,-16(fp)
 8004414:	10c00017 	ldw	r3,0(r2)
 8004418:	00800204 	movi	r2,8
 800441c:	1885883a 	add	r2,r3,r2
 8004420:	e0bffd15 	stw	r2,-12(fp)

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004424:	e0bffb17 	ldw	r2,-20(fp)
 8004428:	10c00017 	ldw	r3,0(r2)
 800442c:	e0bffc17 	ldw	r2,-16(fp)
 8004430:	10c00015 	stw	r3,0(r2)

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004434:	e0bffb17 	ldw	r2,-20(fp)
 8004438:	10c00117 	ldw	r3,4(r2)
 800443c:	e0bfff17 	ldw	r2,-4(fp)
 8004440:	1887c83a 	sub	r3,r3,r2
 8004444:	00800204 	movi	r2,8
 8004448:	1085883a 	add	r2,r2,r2
 800444c:	10c00f2e 	bgeu	r2,r3,800448c <pvPortMalloc+0x150>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004450:	e0fffb17 	ldw	r3,-20(fp)
 8004454:	e0bfff17 	ldw	r2,-4(fp)
 8004458:	1885883a 	add	r2,r3,r2
 800445c:	e0bffe15 	stw	r2,-8(fp)
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004460:	e0bffb17 	ldw	r2,-20(fp)
 8004464:	10c00117 	ldw	r3,4(r2)
 8004468:	e0bfff17 	ldw	r2,-4(fp)
 800446c:	1887c83a 	sub	r3,r3,r2
 8004470:	e0bffe17 	ldw	r2,-8(fp)
 8004474:	10c00115 	stw	r3,4(r2)
						pxBlock->xBlockSize = xWantedSize;
 8004478:	e0bffb17 	ldw	r2,-20(fp)
 800447c:	e0ffff17 	ldw	r3,-4(fp)
 8004480:	10c00115 	stw	r3,4(r2)

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004484:	e13ffe17 	ldw	r4,-8(fp)
 8004488:	80047240 	call	8004724 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800448c:	d0e89a17 	ldw	r3,-23960(gp)
 8004490:	e0bffb17 	ldw	r2,-20(fp)
 8004494:	10800117 	ldw	r2,4(r2)
 8004498:	1885c83a 	sub	r2,r3,r2
 800449c:	d0a89a15 	stw	r2,-23960(gp)

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80044a0:	d0e89a17 	ldw	r3,-23960(gp)
 80044a4:	d0a89b17 	ldw	r2,-23956(gp)
 80044a8:	1880022e 	bgeu	r3,r2,80044b4 <pvPortMalloc+0x178>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044ac:	d0a89a17 	ldw	r2,-23960(gp)
 80044b0:	d0a89b15 	stw	r2,-23956(gp)
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044b4:	e0bffb17 	ldw	r2,-20(fp)
 80044b8:	10c00117 	ldw	r3,4(r2)
 80044bc:	d0a89c17 	ldw	r2,-23952(gp)
 80044c0:	1886b03a 	or	r3,r3,r2
 80044c4:	e0bffb17 	ldw	r2,-20(fp)
 80044c8:	10c00115 	stw	r3,4(r2)
					pxBlock->pxNextFreeBlock = NULL;
 80044cc:	e0bffb17 	ldw	r2,-20(fp)
 80044d0:	10000015 	stw	zero,0(r2)
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044d4:	80069800 	call	8006980 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 80044d8:	e0bffd17 	ldw	r2,-12(fp)
}
 80044dc:	e037883a 	mov	sp,fp
 80044e0:	dfc00117 	ldw	ra,4(sp)
 80044e4:	df000017 	ldw	fp,0(sp)
 80044e8:	dec00204 	addi	sp,sp,8
 80044ec:	f800283a 	ret

080044f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044f0:	defffb04 	addi	sp,sp,-20
 80044f4:	dfc00415 	stw	ra,16(sp)
 80044f8:	df000315 	stw	fp,12(sp)
 80044fc:	df000304 	addi	fp,sp,12
 8004500:	e13fff15 	stw	r4,-4(fp)
uint8_t *puc = ( uint8_t * ) pv;
 8004504:	e0bfff17 	ldw	r2,-4(fp)
 8004508:	e0bffd15 	stw	r2,-12(fp)
BlockLink_t *pxLink;

	if( pv != NULL )
 800450c:	e0bfff17 	ldw	r2,-4(fp)
 8004510:	10001f26 	beq	r2,zero,8004590 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004514:	00800204 	movi	r2,8
 8004518:	0085c83a 	sub	r2,zero,r2
 800451c:	e0fffd17 	ldw	r3,-12(fp)
 8004520:	1885883a 	add	r2,r3,r2
 8004524:	e0bffd15 	stw	r2,-12(fp)

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004528:	e0bffd17 	ldw	r2,-12(fp)
 800452c:	e0bffe15 	stw	r2,-8(fp)

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004530:	e0bffe17 	ldw	r2,-8(fp)
 8004534:	10c00117 	ldw	r3,4(r2)
 8004538:	d0a89c17 	ldw	r2,-23952(gp)
 800453c:	1884703a 	and	r2,r3,r2
 8004540:	10001326 	beq	r2,zero,8004590 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004544:	e0bffe17 	ldw	r2,-8(fp)
 8004548:	10800017 	ldw	r2,0(r2)
 800454c:	1000101e 	bne	r2,zero,8004590 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004550:	e0bffe17 	ldw	r2,-8(fp)
 8004554:	10c00117 	ldw	r3,4(r2)
 8004558:	d0a89c17 	ldw	r2,-23952(gp)
 800455c:	0084303a 	nor	r2,zero,r2
 8004560:	1886703a 	and	r3,r3,r2
 8004564:	e0bffe17 	ldw	r2,-8(fp)
 8004568:	10c00115 	stw	r3,4(r2)

				vTaskSuspendAll();
 800456c:	80069540 	call	8006954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004570:	e0bffe17 	ldw	r2,-8(fp)
 8004574:	10c00117 	ldw	r3,4(r2)
 8004578:	d0a89a17 	ldw	r2,-23960(gp)
 800457c:	1885883a 	add	r2,r3,r2
 8004580:	d0a89a15 	stw	r2,-23960(gp)
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004584:	e13ffe17 	ldw	r4,-8(fp)
 8004588:	80047240 	call	8004724 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800458c:	80069800 	call	8006980 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004590:	0001883a 	nop
 8004594:	e037883a 	mov	sp,fp
 8004598:	dfc00117 	ldw	ra,4(sp)
 800459c:	df000017 	ldw	fp,0(sp)
 80045a0:	dec00204 	addi	sp,sp,8
 80045a4:	f800283a 	ret

080045a8 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80045a8:	deffff04 	addi	sp,sp,-4
 80045ac:	df000015 	stw	fp,0(sp)
 80045b0:	d839883a 	mov	fp,sp
	return xFreeBytesRemaining;
 80045b4:	d0a89a17 	ldw	r2,-23960(gp)
}
 80045b8:	e037883a 	mov	sp,fp
 80045bc:	df000017 	ldw	fp,0(sp)
 80045c0:	dec00104 	addi	sp,sp,4
 80045c4:	f800283a 	ret

080045c8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80045c8:	deffff04 	addi	sp,sp,-4
 80045cc:	df000015 	stw	fp,0(sp)
 80045d0:	d839883a 	mov	fp,sp
	return xMinimumEverFreeBytesRemaining;
 80045d4:	d0a89b17 	ldw	r2,-23956(gp)
}
 80045d8:	e037883a 	mov	sp,fp
 80045dc:	df000017 	ldw	fp,0(sp)
 80045e0:	dec00104 	addi	sp,sp,4
 80045e4:	f800283a 	ret

080045e8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 80045e8:	deffff04 	addi	sp,sp,-4
 80045ec:	df000015 	stw	fp,0(sp)
 80045f0:	d839883a 	mov	fp,sp
	/* This just exists to keep the linker quiet. */
}
 80045f4:	0001883a 	nop
 80045f8:	e037883a 	mov	sp,fp
 80045fc:	df000017 	ldw	fp,0(sp)
 8004600:	dec00104 	addi	sp,sp,4
 8004604:	f800283a 	ret

08004608 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004608:	defffb04 	addi	sp,sp,-20
 800460c:	df000415 	stw	fp,16(sp)
 8004610:	df000404 	addi	fp,sp,16
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004614:	00802034 	movhi	r2,128
 8004618:	e0bffd15 	stw	r2,-12(fp)

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800461c:	008200b4 	movhi	r2,2050
 8004620:	10bc7a04 	addi	r2,r2,-3608
 8004624:	e0bffc15 	stw	r2,-16(fp)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004628:	e0bffc17 	ldw	r2,-16(fp)
 800462c:	108000cc 	andi	r2,r2,3
 8004630:	10000e26 	beq	r2,zero,800466c <prvHeapInit+0x64>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004634:	e0bffc17 	ldw	r2,-16(fp)
 8004638:	108000c4 	addi	r2,r2,3
 800463c:	e0bffc15 	stw	r2,-16(fp)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004640:	e0fffc17 	ldw	r3,-16(fp)
 8004644:	00bfff04 	movi	r2,-4
 8004648:	1884703a 	and	r2,r3,r2
 800464c:	e0bffc15 	stw	r2,-16(fp)
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004650:	e0fffd17 	ldw	r3,-12(fp)
 8004654:	e0bffc17 	ldw	r2,-16(fp)
 8004658:	1887c83a 	sub	r3,r3,r2
 800465c:	008200b4 	movhi	r2,2050
 8004660:	10bc7a04 	addi	r2,r2,-3608
 8004664:	1885883a 	add	r2,r3,r2
 8004668:	e0bffd15 	stw	r2,-12(fp)
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800466c:	e0bffc17 	ldw	r2,-16(fp)
 8004670:	e0bffe15 	stw	r2,-8(fp)

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004674:	e0bffe17 	ldw	r2,-8(fp)
 8004678:	d0a89715 	stw	r2,-23972(gp)
	xStart.xBlockSize = ( size_t ) 0;
 800467c:	d0289815 	stw	zero,-23968(gp)

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004680:	e0fffe17 	ldw	r3,-8(fp)
 8004684:	e0bffd17 	ldw	r2,-12(fp)
 8004688:	1885883a 	add	r2,r3,r2
 800468c:	e0bffc15 	stw	r2,-16(fp)
	uxAddress -= xHeapStructSize;
 8004690:	00800204 	movi	r2,8
 8004694:	e0fffc17 	ldw	r3,-16(fp)
 8004698:	1885c83a 	sub	r2,r3,r2
 800469c:	e0bffc15 	stw	r2,-16(fp)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a0:	e0fffc17 	ldw	r3,-16(fp)
 80046a4:	00bfff04 	movi	r2,-4
 80046a8:	1884703a 	and	r2,r3,r2
 80046ac:	e0bffc15 	stw	r2,-16(fp)
	pxEnd = ( void * ) uxAddress;
 80046b0:	e0bffc17 	ldw	r2,-16(fp)
 80046b4:	d0a89915 	stw	r2,-23964(gp)
	pxEnd->xBlockSize = 0;
 80046b8:	d0a89917 	ldw	r2,-23964(gp)
 80046bc:	10000115 	stw	zero,4(r2)
	pxEnd->pxNextFreeBlock = NULL;
 80046c0:	d0a89917 	ldw	r2,-23964(gp)
 80046c4:	10000015 	stw	zero,0(r2)

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046c8:	e0bffe17 	ldw	r2,-8(fp)
 80046cc:	e0bfff15 	stw	r2,-4(fp)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046d0:	e0bfff17 	ldw	r2,-4(fp)
 80046d4:	e0fffc17 	ldw	r3,-16(fp)
 80046d8:	1887c83a 	sub	r3,r3,r2
 80046dc:	e0bfff17 	ldw	r2,-4(fp)
 80046e0:	10c00115 	stw	r3,4(r2)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046e4:	d0e89917 	ldw	r3,-23964(gp)
 80046e8:	e0bfff17 	ldw	r2,-4(fp)
 80046ec:	10c00015 	stw	r3,0(r2)

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f0:	e0bfff17 	ldw	r2,-4(fp)
 80046f4:	10800117 	ldw	r2,4(r2)
 80046f8:	d0a89b15 	stw	r2,-23956(gp)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046fc:	e0bfff17 	ldw	r2,-4(fp)
 8004700:	10800117 	ldw	r2,4(r2)
 8004704:	d0a89a15 	stw	r2,-23960(gp)

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004708:	00a00034 	movhi	r2,32768
 800470c:	d0a89c15 	stw	r2,-23952(gp)
}
 8004710:	0001883a 	nop
 8004714:	e037883a 	mov	sp,fp
 8004718:	df000017 	ldw	fp,0(sp)
 800471c:	dec00104 	addi	sp,sp,4
 8004720:	f800283a 	ret

08004724 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004724:	defffc04 	addi	sp,sp,-16
 8004728:	df000315 	stw	fp,12(sp)
 800472c:	df000304 	addi	fp,sp,12
 8004730:	e13fff15 	stw	r4,-4(fp)
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004734:	d0a89704 	addi	r2,gp,-23972
 8004738:	e0bffd15 	stw	r2,-12(fp)
 800473c:	00000306 	br	800474c <prvInsertBlockIntoFreeList+0x28>
 8004740:	e0bffd17 	ldw	r2,-12(fp)
 8004744:	10800017 	ldw	r2,0(r2)
 8004748:	e0bffd15 	stw	r2,-12(fp)
 800474c:	e0bffd17 	ldw	r2,-12(fp)
 8004750:	10c00017 	ldw	r3,0(r2)
 8004754:	e0bfff17 	ldw	r2,-4(fp)
 8004758:	18bff936 	bltu	r3,r2,8004740 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800475c:	e0bffd17 	ldw	r2,-12(fp)
 8004760:	e0bffe15 	stw	r2,-8(fp)
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004764:	e0bffd17 	ldw	r2,-12(fp)
 8004768:	10800117 	ldw	r2,4(r2)
 800476c:	e0fffe17 	ldw	r3,-8(fp)
 8004770:	1887883a 	add	r3,r3,r2
 8004774:	e0bfff17 	ldw	r2,-4(fp)
 8004778:	1880091e 	bne	r3,r2,80047a0 <prvInsertBlockIntoFreeList+0x7c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800477c:	e0bffd17 	ldw	r2,-12(fp)
 8004780:	10c00117 	ldw	r3,4(r2)
 8004784:	e0bfff17 	ldw	r2,-4(fp)
 8004788:	10800117 	ldw	r2,4(r2)
 800478c:	1887883a 	add	r3,r3,r2
 8004790:	e0bffd17 	ldw	r2,-12(fp)
 8004794:	10c00115 	stw	r3,4(r2)
		pxBlockToInsert = pxIterator;
 8004798:	e0bffd17 	ldw	r2,-12(fp)
 800479c:	e0bfff15 	stw	r2,-4(fp)
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047a0:	e0bfff17 	ldw	r2,-4(fp)
 80047a4:	e0bffe15 	stw	r2,-8(fp)
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047a8:	e0bfff17 	ldw	r2,-4(fp)
 80047ac:	10800117 	ldw	r2,4(r2)
 80047b0:	e0fffe17 	ldw	r3,-8(fp)
 80047b4:	1887883a 	add	r3,r3,r2
 80047b8:	e0bffd17 	ldw	r2,-12(fp)
 80047bc:	10800017 	ldw	r2,0(r2)
 80047c0:	1880161e 	bne	r3,r2,800481c <prvInsertBlockIntoFreeList+0xf8>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047c4:	e0bffd17 	ldw	r2,-12(fp)
 80047c8:	10c00017 	ldw	r3,0(r2)
 80047cc:	d0a89917 	ldw	r2,-23964(gp)
 80047d0:	18800e26 	beq	r3,r2,800480c <prvInsertBlockIntoFreeList+0xe8>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047d4:	e0bfff17 	ldw	r2,-4(fp)
 80047d8:	10c00117 	ldw	r3,4(r2)
 80047dc:	e0bffd17 	ldw	r2,-12(fp)
 80047e0:	10800017 	ldw	r2,0(r2)
 80047e4:	10800117 	ldw	r2,4(r2)
 80047e8:	1887883a 	add	r3,r3,r2
 80047ec:	e0bfff17 	ldw	r2,-4(fp)
 80047f0:	10c00115 	stw	r3,4(r2)
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047f4:	e0bffd17 	ldw	r2,-12(fp)
 80047f8:	10800017 	ldw	r2,0(r2)
 80047fc:	10c00017 	ldw	r3,0(r2)
 8004800:	e0bfff17 	ldw	r2,-4(fp)
 8004804:	10c00015 	stw	r3,0(r2)
 8004808:	00000806 	br	800482c <prvInsertBlockIntoFreeList+0x108>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800480c:	d0e89917 	ldw	r3,-23964(gp)
 8004810:	e0bfff17 	ldw	r2,-4(fp)
 8004814:	10c00015 	stw	r3,0(r2)
 8004818:	00000406 	br	800482c <prvInsertBlockIntoFreeList+0x108>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800481c:	e0bffd17 	ldw	r2,-12(fp)
 8004820:	10c00017 	ldw	r3,0(r2)
 8004824:	e0bfff17 	ldw	r2,-4(fp)
 8004828:	10c00015 	stw	r3,0(r2)

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800482c:	e0fffd17 	ldw	r3,-12(fp)
 8004830:	e0bfff17 	ldw	r2,-4(fp)
 8004834:	18800326 	beq	r3,r2,8004844 <prvInsertBlockIntoFreeList+0x120>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004838:	e0bffd17 	ldw	r2,-12(fp)
 800483c:	e0ffff17 	ldw	r3,-4(fp)
 8004840:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004844:	0001883a 	nop
 8004848:	e037883a 	mov	sp,fp
 800484c:	df000017 	ldw	fp,0(sp)
 8004850:	dec00104 	addi	sp,sp,4
 8004854:	f800283a 	ret

08004858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004858:	defffa04 	addi	sp,sp,-24
 800485c:	dfc00515 	stw	ra,20(sp)
 8004860:	df000415 	stw	fp,16(sp)
 8004864:	dc000315 	stw	r16,12(sp)
 8004868:	df000404 	addi	fp,sp,16
 800486c:	e13ffd15 	stw	r4,-12(fp)
 8004870:	e17ffe15 	stw	r5,-8(fp)
Queue_t * const pxQueue = xQueue;
 8004874:	e0bffd17 	ldw	r2,-12(fp)
 8004878:	e0bffc15 	stw	r2,-16(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800487c:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	e0bffc17 	ldw	r2,-16(fp)
 8004884:	14000017 	ldw	r16,0(r2)
 8004888:	e0bffc17 	ldw	r2,-16(fp)
 800488c:	10c00f17 	ldw	r3,60(r2)
 8004890:	e0bffc17 	ldw	r2,-16(fp)
 8004894:	10801017 	ldw	r2,64(r2)
 8004898:	100b883a 	mov	r5,r2
 800489c:	1809883a 	mov	r4,r3
 80048a0:	80087fc0 	call	80087fc <__mulsi3>
 80048a4:	8087883a 	add	r3,r16,r2
 80048a8:	e0bffc17 	ldw	r2,-16(fp)
 80048ac:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048b0:	e0bffc17 	ldw	r2,-16(fp)
 80048b4:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b8:	e0bffc17 	ldw	r2,-16(fp)
 80048bc:	10c00017 	ldw	r3,0(r2)
 80048c0:	e0bffc17 	ldw	r2,-16(fp)
 80048c4:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048c8:	e0bffc17 	ldw	r2,-16(fp)
 80048cc:	14000017 	ldw	r16,0(r2)
 80048d0:	e0bffc17 	ldw	r2,-16(fp)
 80048d4:	10800f17 	ldw	r2,60(r2)
 80048d8:	10ffffc4 	addi	r3,r2,-1
 80048dc:	e0bffc17 	ldw	r2,-16(fp)
 80048e0:	10801017 	ldw	r2,64(r2)
 80048e4:	100b883a 	mov	r5,r2
 80048e8:	1809883a 	mov	r4,r3
 80048ec:	80087fc0 	call	80087fc <__mulsi3>
 80048f0:	8087883a 	add	r3,r16,r2
 80048f4:	e0bffc17 	ldw	r2,-16(fp)
 80048f8:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 80048fc:	e0bffc17 	ldw	r2,-16(fp)
 8004900:	00ffffc4 	movi	r3,-1
 8004904:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 8004908:	e0bffc17 	ldw	r2,-16(fp)
 800490c:	00ffffc4 	movi	r3,-1
 8004910:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 8004914:	e0bffe17 	ldw	r2,-8(fp)
 8004918:	10000a1e 	bne	r2,zero,8004944 <xQueueGenericReset+0xec>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800491c:	e0bffc17 	ldw	r2,-16(fp)
 8004920:	10800417 	ldw	r2,16(r2)
 8004924:	10000f26 	beq	r2,zero,8004964 <xQueueGenericReset+0x10c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004928:	e0bffc17 	ldw	r2,-16(fp)
 800492c:	10800404 	addi	r2,r2,16
 8004930:	1009883a 	mov	r4,r2
 8004934:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8004938:	10000a26 	beq	r2,zero,8004964 <xQueueGenericReset+0x10c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800493c:	003b683a 	trap	0
 8004940:	00000806 	br	8004964 <xQueueGenericReset+0x10c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004944:	e0bffc17 	ldw	r2,-16(fp)
 8004948:	10800404 	addi	r2,r2,16
 800494c:	1009883a 	mov	r4,r2
 8004950:	8003c140 	call	8003c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004954:	e0bffc17 	ldw	r2,-16(fp)
 8004958:	10800904 	addi	r2,r2,36
 800495c:	1009883a 	mov	r4,r2
 8004960:	8003c140 	call	8003c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004964:	800796c0 	call	800796c <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004968:	00800044 	movi	r2,1
}
 800496c:	e6ffff04 	addi	sp,fp,-4
 8004970:	dfc00217 	ldw	ra,8(sp)
 8004974:	df000117 	ldw	fp,4(sp)
 8004978:	dc000017 	ldw	r16,0(sp)
 800497c:	dec00304 	addi	sp,sp,12
 8004980:	f800283a 	ret

08004984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004984:	defff704 	addi	sp,sp,-36
 8004988:	dfc00815 	stw	ra,32(sp)
 800498c:	df000715 	stw	fp,28(sp)
 8004990:	df000704 	addi	fp,sp,28
 8004994:	e13ffd15 	stw	r4,-12(fp)
 8004998:	e17ffe15 	stw	r5,-8(fp)
 800499c:	3005883a 	mov	r2,r6
 80049a0:	e0bfff05 	stb	r2,-4(fp)
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80049a4:	e0bffe17 	ldw	r2,-8(fp)
 80049a8:	1000021e 	bne	r2,zero,80049b4 <xQueueGenericCreate+0x30>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80049ac:	e03ffa15 	stw	zero,-24(fp)
 80049b0:	00000406 	br	80049c4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	e17ffe17 	ldw	r5,-8(fp)
 80049b8:	e13ffd17 	ldw	r4,-12(fp)
 80049bc:	80087fc0 	call	80087fc <__mulsi3>
 80049c0:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049c4:	e0bffa17 	ldw	r2,-24(fp)
 80049c8:	10801204 	addi	r2,r2,72
 80049cc:	1009883a 	mov	r4,r2
 80049d0:	800433c0 	call	800433c <pvPortMalloc>
 80049d4:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 80049d8:	e0bffb17 	ldw	r2,-20(fp)
 80049dc:	10000d26 	beq	r2,zero,8004a14 <xQueueGenericCreate+0x90>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049e0:	e0bffb17 	ldw	r2,-20(fp)
 80049e4:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049e8:	e0bffc17 	ldw	r2,-16(fp)
 80049ec:	10801204 	addi	r2,r2,72
 80049f0:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049f4:	e0ffff03 	ldbu	r3,-4(fp)
 80049f8:	e0bffb17 	ldw	r2,-20(fp)
 80049fc:	d8800015 	stw	r2,0(sp)
 8004a00:	180f883a 	mov	r7,r3
 8004a04:	e1bffc17 	ldw	r6,-16(fp)
 8004a08:	e17ffe17 	ldw	r5,-8(fp)
 8004a0c:	e13ffd17 	ldw	r4,-12(fp)
 8004a10:	8004a2c0 	call	8004a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a14:	e0bffb17 	ldw	r2,-20(fp)
	}
 8004a18:	e037883a 	mov	sp,fp
 8004a1c:	dfc00117 	ldw	ra,4(sp)
 8004a20:	df000017 	ldw	fp,0(sp)
 8004a24:	dec00204 	addi	sp,sp,8
 8004a28:	f800283a 	ret

08004a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a2c:	defffa04 	addi	sp,sp,-24
 8004a30:	dfc00515 	stw	ra,20(sp)
 8004a34:	df000415 	stw	fp,16(sp)
 8004a38:	df000404 	addi	fp,sp,16
 8004a3c:	e13ffc15 	stw	r4,-16(fp)
 8004a40:	e17ffd15 	stw	r5,-12(fp)
 8004a44:	e1bffe15 	stw	r6,-8(fp)
 8004a48:	3805883a 	mov	r2,r7
 8004a4c:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a50:	e0bffd17 	ldw	r2,-12(fp)
 8004a54:	1000041e 	bne	r2,zero,8004a68 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a58:	e0800217 	ldw	r2,8(fp)
 8004a5c:	e0c00217 	ldw	r3,8(fp)
 8004a60:	10c00015 	stw	r3,0(r2)
 8004a64:	00000306 	br	8004a74 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a68:	e0800217 	ldw	r2,8(fp)
 8004a6c:	e0fffe17 	ldw	r3,-8(fp)
 8004a70:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a74:	e0800217 	ldw	r2,8(fp)
 8004a78:	e0fffc17 	ldw	r3,-16(fp)
 8004a7c:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 8004a80:	e0800217 	ldw	r2,8(fp)
 8004a84:	e0fffd17 	ldw	r3,-12(fp)
 8004a88:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a8c:	01400044 	movi	r5,1
 8004a90:	e1000217 	ldw	r4,8(fp)
 8004a94:	80048580 	call	8004858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a98:	0001883a 	nop
 8004a9c:	e037883a 	mov	sp,fp
 8004aa0:	dfc00117 	ldw	ra,4(sp)
 8004aa4:	df000017 	ldw	fp,0(sp)
 8004aa8:	dec00204 	addi	sp,sp,8
 8004aac:	f800283a 	ret

08004ab0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ab0:	defffd04 	addi	sp,sp,-12
 8004ab4:	dfc00215 	stw	ra,8(sp)
 8004ab8:	df000115 	stw	fp,4(sp)
 8004abc:	df000104 	addi	fp,sp,4
 8004ac0:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 8004ac4:	e0bfff17 	ldw	r2,-4(fp)
 8004ac8:	10000b26 	beq	r2,zero,8004af8 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004acc:	e0bfff17 	ldw	r2,-4(fp)
 8004ad0:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ad4:	e0bfff17 	ldw	r2,-4(fp)
 8004ad8:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004adc:	e0bfff17 	ldw	r2,-4(fp)
 8004ae0:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ae4:	000f883a 	mov	r7,zero
 8004ae8:	000d883a 	mov	r6,zero
 8004aec:	000b883a 	mov	r5,zero
 8004af0:	e13fff17 	ldw	r4,-4(fp)
 8004af4:	8004cf00 	call	8004cf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004af8:	0001883a 	nop
 8004afc:	e037883a 	mov	sp,fp
 8004b00:	dfc00117 	ldw	ra,4(sp)
 8004b04:	df000017 	ldw	fp,0(sp)
 8004b08:	dec00204 	addi	sp,sp,8
 8004b0c:	f800283a 	ret

08004b10 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b10:	defffa04 	addi	sp,sp,-24
 8004b14:	dfc00515 	stw	ra,20(sp)
 8004b18:	df000415 	stw	fp,16(sp)
 8004b1c:	df000404 	addi	fp,sp,16
 8004b20:	2005883a 	mov	r2,r4
 8004b24:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b28:	00800044 	movi	r2,1
 8004b2c:	e0bffc15 	stw	r2,-16(fp)
 8004b30:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b34:	e0bfff03 	ldbu	r2,-4(fp)
 8004b38:	100d883a 	mov	r6,r2
 8004b3c:	e17ffd17 	ldw	r5,-12(fp)
 8004b40:	e13ffc17 	ldw	r4,-16(fp)
 8004b44:	80049840 	call	8004984 <xQueueGenericCreate>
 8004b48:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b4c:	e13ffe17 	ldw	r4,-8(fp)
 8004b50:	8004ab00 	call	8004ab0 <prvInitialiseMutex>

		return xNewQueue;
 8004b54:	e0bffe17 	ldw	r2,-8(fp)
	}
 8004b58:	e037883a 	mov	sp,fp
 8004b5c:	dfc00117 	ldw	ra,4(sp)
 8004b60:	df000017 	ldw	fp,0(sp)
 8004b64:	dec00204 	addi	sp,sp,8
 8004b68:	f800283a 	ret

08004b6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004b6c:	defffa04 	addi	sp,sp,-24
 8004b70:	dfc00515 	stw	ra,20(sp)
 8004b74:	df000415 	stw	fp,16(sp)
 8004b78:	dc000315 	stw	r16,12(sp)
 8004b7c:	df000404 	addi	fp,sp,16
 8004b80:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004b84:	e0bffe17 	ldw	r2,-8(fp)
 8004b88:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004b8c:	e0bffd17 	ldw	r2,-12(fp)
 8004b90:	14000217 	ldw	r16,8(r2)
 8004b94:	800752c0 	call	800752c <xTaskGetCurrentTaskHandle>
 8004b98:	8080101e 	bne	r16,r2,8004bdc <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004b9c:	e0bffd17 	ldw	r2,-12(fp)
 8004ba0:	10800317 	ldw	r2,12(r2)
 8004ba4:	10ffffc4 	addi	r3,r2,-1
 8004ba8:	e0bffd17 	ldw	r2,-12(fp)
 8004bac:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004bb0:	e0bffd17 	ldw	r2,-12(fp)
 8004bb4:	10800317 	ldw	r2,12(r2)
 8004bb8:	1000051e 	bne	r2,zero,8004bd0 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004bbc:	000f883a 	mov	r7,zero
 8004bc0:	000d883a 	mov	r6,zero
 8004bc4:	000b883a 	mov	r5,zero
 8004bc8:	e13ffd17 	ldw	r4,-12(fp)
 8004bcc:	8004cf00 	call	8004cf0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004bd0:	00800044 	movi	r2,1
 8004bd4:	e0bffc15 	stw	r2,-16(fp)
 8004bd8:	00000106 	br	8004be0 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004bdc:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004be0:	e0bffc17 	ldw	r2,-16(fp)
	}
 8004be4:	e6ffff04 	addi	sp,fp,-4
 8004be8:	dfc00217 	ldw	ra,8(sp)
 8004bec:	df000117 	ldw	fp,4(sp)
 8004bf0:	dc000017 	ldw	r16,0(sp)
 8004bf4:	dec00304 	addi	sp,sp,12
 8004bf8:	f800283a 	ret

08004bfc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004bfc:	defff904 	addi	sp,sp,-28
 8004c00:	dfc00615 	stw	ra,24(sp)
 8004c04:	df000515 	stw	fp,20(sp)
 8004c08:	dc000415 	stw	r16,16(sp)
 8004c0c:	df000504 	addi	fp,sp,20
 8004c10:	e13ffd15 	stw	r4,-12(fp)
 8004c14:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c18:	e0bffd17 	ldw	r2,-12(fp)
 8004c1c:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c20:	e0bffc17 	ldw	r2,-16(fp)
 8004c24:	14000217 	ldw	r16,8(r2)
 8004c28:	800752c0 	call	800752c <xTaskGetCurrentTaskHandle>
 8004c2c:	8080081e 	bne	r16,r2,8004c50 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c30:	e0bffc17 	ldw	r2,-16(fp)
 8004c34:	10800317 	ldw	r2,12(r2)
 8004c38:	10c00044 	addi	r3,r2,1
 8004c3c:	e0bffc17 	ldw	r2,-16(fp)
 8004c40:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 8004c44:	00800044 	movi	r2,1
 8004c48:	e0bffb15 	stw	r2,-20(fp)
 8004c4c:	00000b06 	br	8004c7c <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004c50:	e17ffe17 	ldw	r5,-8(fp)
 8004c54:	e13ffc17 	ldw	r4,-16(fp)
 8004c58:	80052100 	call	8005210 <xQueueSemaphoreTake>
 8004c5c:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004c60:	e0bffb17 	ldw	r2,-20(fp)
 8004c64:	10000526 	beq	r2,zero,8004c7c <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c68:	e0bffc17 	ldw	r2,-16(fp)
 8004c6c:	10800317 	ldw	r2,12(r2)
 8004c70:	10c00044 	addi	r3,r2,1
 8004c74:	e0bffc17 	ldw	r2,-16(fp)
 8004c78:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004c7c:	e0bffb17 	ldw	r2,-20(fp)
	}
 8004c80:	e6ffff04 	addi	sp,fp,-4
 8004c84:	dfc00217 	ldw	ra,8(sp)
 8004c88:	df000117 	ldw	fp,4(sp)
 8004c8c:	dc000017 	ldw	r16,0(sp)
 8004c90:	dec00304 	addi	sp,sp,12
 8004c94:	f800283a 	ret

08004c98 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004c98:	defffb04 	addi	sp,sp,-20
 8004c9c:	dfc00415 	stw	ra,16(sp)
 8004ca0:	df000315 	stw	fp,12(sp)
 8004ca4:	df000304 	addi	fp,sp,12
 8004ca8:	e13ffe15 	stw	r4,-8(fp)
 8004cac:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004cb0:	01800084 	movi	r6,2
 8004cb4:	000b883a 	mov	r5,zero
 8004cb8:	e13ffe17 	ldw	r4,-8(fp)
 8004cbc:	80049840 	call	8004984 <xQueueGenericCreate>
 8004cc0:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 8004cc4:	e0bffd17 	ldw	r2,-12(fp)
 8004cc8:	10000326 	beq	r2,zero,8004cd8 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004ccc:	e0bffd17 	ldw	r2,-12(fp)
 8004cd0:	e0ffff17 	ldw	r3,-4(fp)
 8004cd4:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004cd8:	e0bffd17 	ldw	r2,-12(fp)
	}
 8004cdc:	e037883a 	mov	sp,fp
 8004ce0:	dfc00117 	ldw	ra,4(sp)
 8004ce4:	df000017 	ldw	fp,0(sp)
 8004ce8:	dec00204 	addi	sp,sp,8
 8004cec:	f800283a 	ret

08004cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf0:	defff504 	addi	sp,sp,-44
 8004cf4:	dfc00a15 	stw	ra,40(sp)
 8004cf8:	df000915 	stw	fp,36(sp)
 8004cfc:	df000904 	addi	fp,sp,36
 8004d00:	e13ffc15 	stw	r4,-16(fp)
 8004d04:	e17ffd15 	stw	r5,-12(fp)
 8004d08:	e1bffe15 	stw	r6,-8(fp)
 8004d0c:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d10:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d14:	e0bffc17 	ldw	r2,-16(fp)
 8004d18:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d1c:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d20:	e0bff817 	ldw	r2,-32(fp)
 8004d24:	10c00e17 	ldw	r3,56(r2)
 8004d28:	e0bff817 	ldw	r2,-32(fp)
 8004d2c:	10800f17 	ldw	r2,60(r2)
 8004d30:	18800336 	bltu	r3,r2,8004d40 <xQueueGenericSend+0x50>
 8004d34:	e0bfff17 	ldw	r2,-4(fp)
 8004d38:	10800098 	cmpnei	r2,r2,2
 8004d3c:	1000151e 	bne	r2,zero,8004d94 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d40:	e1bfff17 	ldw	r6,-4(fp)
 8004d44:	e17ffd17 	ldw	r5,-12(fp)
 8004d48:	e13ff817 	ldw	r4,-32(fp)
 8004d4c:	80058880 	call	8005888 <prvCopyDataToQueue>
 8004d50:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d54:	e0bff817 	ldw	r2,-32(fp)
 8004d58:	10800917 	ldw	r2,36(r2)
 8004d5c:	10000726 	beq	r2,zero,8004d7c <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d60:	e0bff817 	ldw	r2,-32(fp)
 8004d64:	10800904 	addi	r2,r2,36
 8004d68:	1009883a 	mov	r4,r2
 8004d6c:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8004d70:	10000526 	beq	r2,zero,8004d88 <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d74:	003b683a 	trap	0
 8004d78:	00000306 	br	8004d88 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d7c:	e0bff917 	ldw	r2,-28(fp)
 8004d80:	10000126 	beq	r2,zero,8004d88 <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d84:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d88:	800796c0 	call	800796c <vTaskExitCritical>
				return pdPASS;
 8004d8c:	00800044 	movi	r2,1
 8004d90:	00003f06 	br	8004e90 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d94:	e0bffe17 	ldw	r2,-8(fp)
 8004d98:	1000031e 	bne	r2,zero,8004da8 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d9c:	800796c0 	call	800796c <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004da0:	0005883a 	mov	r2,zero
 8004da4:	00003a06 	br	8004e90 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004da8:	e0bff717 	ldw	r2,-36(fp)
 8004dac:	1000051e 	bne	r2,zero,8004dc4 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db0:	e0bffa04 	addi	r2,fp,-24
 8004db4:	1009883a 	mov	r4,r2
 8004db8:	80071300 	call	8007130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dbc:	00800044 	movi	r2,1
 8004dc0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dc4:	800796c0 	call	800796c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dc8:	80069540 	call	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dcc:	80079180 	call	8007918 <vTaskEnterCritical>
 8004dd0:	e0bff817 	ldw	r2,-32(fp)
 8004dd4:	10801103 	ldbu	r2,68(r2)
 8004dd8:	10803fcc 	andi	r2,r2,255
 8004ddc:	1080201c 	xori	r2,r2,128
 8004de0:	10bfe004 	addi	r2,r2,-128
 8004de4:	10bfffd8 	cmpnei	r2,r2,-1
 8004de8:	1000021e 	bne	r2,zero,8004df4 <xQueueGenericSend+0x104>
 8004dec:	e0bff817 	ldw	r2,-32(fp)
 8004df0:	10001105 	stb	zero,68(r2)
 8004df4:	e0bff817 	ldw	r2,-32(fp)
 8004df8:	10801143 	ldbu	r2,69(r2)
 8004dfc:	10803fcc 	andi	r2,r2,255
 8004e00:	1080201c 	xori	r2,r2,128
 8004e04:	10bfe004 	addi	r2,r2,-128
 8004e08:	10bfffd8 	cmpnei	r2,r2,-1
 8004e0c:	1000021e 	bne	r2,zero,8004e18 <xQueueGenericSend+0x128>
 8004e10:	e0bff817 	ldw	r2,-32(fp)
 8004e14:	10001145 	stb	zero,69(r2)
 8004e18:	800796c0 	call	800796c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1c:	e0fffe04 	addi	r3,fp,-8
 8004e20:	e0bffa04 	addi	r2,fp,-24
 8004e24:	180b883a 	mov	r5,r3
 8004e28:	1009883a 	mov	r4,r2
 8004e2c:	800716c0 	call	800716c <xTaskCheckForTimeOut>
 8004e30:	1000131e 	bne	r2,zero,8004e80 <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e34:	e13ff817 	ldw	r4,-32(fp)
 8004e38:	8005c3c0 	call	8005c3c <prvIsQueueFull>
 8004e3c:	10000c26 	beq	r2,zero,8004e70 <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e40:	e0bff817 	ldw	r2,-32(fp)
 8004e44:	10800404 	addi	r2,r2,16
 8004e48:	e0fffe17 	ldw	r3,-8(fp)
 8004e4c:	180b883a 	mov	r5,r3
 8004e50:	1009883a 	mov	r4,r2
 8004e54:	8006e5c0 	call	8006e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e58:	e13ff817 	ldw	r4,-32(fp)
 8004e5c:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e60:	80069800 	call	8006980 <xTaskResumeAll>
 8004e64:	103fad1e 	bne	r2,zero,8004d1c <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
 8004e68:	003b683a 	trap	0
 8004e6c:	003fab06 	br	8004d1c <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e70:	e13ff817 	ldw	r4,-32(fp)
 8004e74:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e78:	80069800 	call	8006980 <xTaskResumeAll>
 8004e7c:	003fa706 	br	8004d1c <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e80:	e13ff817 	ldw	r4,-32(fp)
 8004e84:	8005ab00 	call	8005ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e88:	80069800 	call	8006980 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e8c:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 8004e90:	e037883a 	mov	sp,fp
 8004e94:	dfc00117 	ldw	ra,4(sp)
 8004e98:	df000017 	ldw	fp,0(sp)
 8004e9c:	dec00204 	addi	sp,sp,8
 8004ea0:	f800283a 	ret

08004ea4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ea4:	defff604 	addi	sp,sp,-40
 8004ea8:	dfc00915 	stw	ra,36(sp)
 8004eac:	df000815 	stw	fp,32(sp)
 8004eb0:	df000804 	addi	fp,sp,32
 8004eb4:	e13ffc15 	stw	r4,-16(fp)
 8004eb8:	e17ffd15 	stw	r5,-12(fp)
 8004ebc:	e1bffe15 	stw	r6,-8(fp)
 8004ec0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ec4:	e0bffc17 	ldw	r2,-16(fp)
 8004ec8:	e0bff915 	stw	r2,-28(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ecc:	e03ffa15 	stw	zero,-24(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ed0:	e0bff917 	ldw	r2,-28(fp)
 8004ed4:	10c00e17 	ldw	r3,56(r2)
 8004ed8:	e0bff917 	ldw	r2,-28(fp)
 8004edc:	10800f17 	ldw	r2,60(r2)
 8004ee0:	18800336 	bltu	r3,r2,8004ef0 <xQueueGenericSendFromISR+0x4c>
 8004ee4:	e0bfff17 	ldw	r2,-4(fp)
 8004ee8:	10800098 	cmpnei	r2,r2,2
 8004eec:	1000201e 	bne	r2,zero,8004f70 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ef0:	e0bff917 	ldw	r2,-28(fp)
 8004ef4:	10801143 	ldbu	r2,69(r2)
 8004ef8:	e0bffb05 	stb	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efc:	e1bfff17 	ldw	r6,-4(fp)
 8004f00:	e17ffd17 	ldw	r5,-12(fp)
 8004f04:	e13ff917 	ldw	r4,-28(fp)
 8004f08:	80058880 	call	8005888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f0c:	e0bffb07 	ldb	r2,-20(fp)
 8004f10:	10bfffd8 	cmpnei	r2,r2,-1
 8004f14:	10000e1e 	bne	r2,zero,8004f50 <xQueueGenericSendFromISR+0xac>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f18:	e0bff917 	ldw	r2,-28(fp)
 8004f1c:	10800917 	ldw	r2,36(r2)
 8004f20:	10001026 	beq	r2,zero,8004f64 <xQueueGenericSendFromISR+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f24:	e0bff917 	ldw	r2,-28(fp)
 8004f28:	10800904 	addi	r2,r2,36
 8004f2c:	1009883a 	mov	r4,r2
 8004f30:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8004f34:	10000b26 	beq	r2,zero,8004f64 <xQueueGenericSendFromISR+0xc0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f38:	e0bffe17 	ldw	r2,-8(fp)
 8004f3c:	10000926 	beq	r2,zero,8004f64 <xQueueGenericSendFromISR+0xc0>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f40:	e0bffe17 	ldw	r2,-8(fp)
 8004f44:	00c00044 	movi	r3,1
 8004f48:	10c00015 	stw	r3,0(r2)
 8004f4c:	00000506 	br	8004f64 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f50:	e0bffb03 	ldbu	r2,-20(fp)
 8004f54:	10800044 	addi	r2,r2,1
 8004f58:	1007883a 	mov	r3,r2
 8004f5c:	e0bff917 	ldw	r2,-28(fp)
 8004f60:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8004f64:	00800044 	movi	r2,1
 8004f68:	e0bff815 	stw	r2,-32(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 8004f6c:	00000106 	br	8004f74 <xQueueGenericSendFromISR+0xd0>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f70:	e03ff815 	stw	zero,-32(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f74:	e0bff817 	ldw	r2,-32(fp)
}
 8004f78:	e037883a 	mov	sp,fp
 8004f7c:	dfc00117 	ldw	ra,4(sp)
 8004f80:	df000017 	ldw	fp,0(sp)
 8004f84:	dec00204 	addi	sp,sp,8
 8004f88:	f800283a 	ret

08004f8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f8c:	defff704 	addi	sp,sp,-36
 8004f90:	dfc00815 	stw	ra,32(sp)
 8004f94:	df000715 	stw	fp,28(sp)
 8004f98:	df000704 	addi	fp,sp,28
 8004f9c:	e13ffe15 	stw	r4,-8(fp)
 8004fa0:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fa4:	e0bffe17 	ldw	r2,-8(fp)
 8004fa8:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fac:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fb0:	e0bffa17 	ldw	r2,-24(fp)
 8004fb4:	10800e17 	ldw	r2,56(r2)
 8004fb8:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004fbc:	e0bffa17 	ldw	r2,-24(fp)
 8004fc0:	10800f17 	ldw	r2,60(r2)
 8004fc4:	e0fffc17 	ldw	r3,-16(fp)
 8004fc8:	1880202e 	bgeu	r3,r2,800504c <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fcc:	e0bffa17 	ldw	r2,-24(fp)
 8004fd0:	10801143 	ldbu	r2,69(r2)
 8004fd4:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fd8:	e0bffc17 	ldw	r2,-16(fp)
 8004fdc:	10c00044 	addi	r3,r2,1
 8004fe0:	e0bffa17 	ldw	r2,-24(fp)
 8004fe4:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fe8:	e0bffd07 	ldb	r2,-12(fp)
 8004fec:	10bfffd8 	cmpnei	r2,r2,-1
 8004ff0:	10000e1e 	bne	r2,zero,800502c <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff4:	e0bffa17 	ldw	r2,-24(fp)
 8004ff8:	10800917 	ldw	r2,36(r2)
 8004ffc:	10001026 	beq	r2,zero,8005040 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005000:	e0bffa17 	ldw	r2,-24(fp)
 8005004:	10800904 	addi	r2,r2,36
 8005008:	1009883a 	mov	r4,r2
 800500c:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8005010:	10000b26 	beq	r2,zero,8005040 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005014:	e0bfff17 	ldw	r2,-4(fp)
 8005018:	10000926 	beq	r2,zero,8005040 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800501c:	e0bfff17 	ldw	r2,-4(fp)
 8005020:	00c00044 	movi	r3,1
 8005024:	10c00015 	stw	r3,0(r2)
 8005028:	00000506 	br	8005040 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800502c:	e0bffd03 	ldbu	r2,-12(fp)
 8005030:	10800044 	addi	r2,r2,1
 8005034:	1007883a 	mov	r3,r2
 8005038:	e0bffa17 	ldw	r2,-24(fp)
 800503c:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 8005040:	00800044 	movi	r2,1
 8005044:	e0bff915 	stw	r2,-28(fp)
 8005048:	00000106 	br	8005050 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800504c:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005050:	e0bff917 	ldw	r2,-28(fp)
}
 8005054:	e037883a 	mov	sp,fp
 8005058:	dfc00117 	ldw	ra,4(sp)
 800505c:	df000017 	ldw	fp,0(sp)
 8005060:	dec00204 	addi	sp,sp,8
 8005064:	f800283a 	ret

08005068 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005068:	defff604 	addi	sp,sp,-40
 800506c:	dfc00915 	stw	ra,36(sp)
 8005070:	df000815 	stw	fp,32(sp)
 8005074:	df000804 	addi	fp,sp,32
 8005078:	e13ffd15 	stw	r4,-12(fp)
 800507c:	e17ffe15 	stw	r5,-8(fp)
 8005080:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8005084:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005088:	e0bffd17 	ldw	r2,-12(fp)
 800508c:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005090:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005094:	e0bff917 	ldw	r2,-28(fp)
 8005098:	10800e17 	ldw	r2,56(r2)
 800509c:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a0:	e0bffa17 	ldw	r2,-24(fp)
 80050a4:	10001326 	beq	r2,zero,80050f4 <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050a8:	e17ffe17 	ldw	r5,-8(fp)
 80050ac:	e13ff917 	ldw	r4,-28(fp)
 80050b0:	8005a140 	call	8005a14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050b4:	e0bffa17 	ldw	r2,-24(fp)
 80050b8:	10ffffc4 	addi	r3,r2,-1
 80050bc:	e0bff917 	ldw	r2,-28(fp)
 80050c0:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c4:	e0bff917 	ldw	r2,-28(fp)
 80050c8:	10800417 	ldw	r2,16(r2)
 80050cc:	10000626 	beq	r2,zero,80050e8 <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d0:	e0bff917 	ldw	r2,-28(fp)
 80050d4:	10800404 	addi	r2,r2,16
 80050d8:	1009883a 	mov	r4,r2
 80050dc:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 80050e0:	10000126 	beq	r2,zero,80050e8 <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050e4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050e8:	800796c0 	call	800796c <vTaskExitCritical>
				return pdPASS;
 80050ec:	00800044 	movi	r2,1
 80050f0:	00004206 	br	80051fc <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f4:	e0bfff17 	ldw	r2,-4(fp)
 80050f8:	1000031e 	bne	r2,zero,8005108 <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050fc:	800796c0 	call	800796c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005100:	0005883a 	mov	r2,zero
 8005104:	00003d06 	br	80051fc <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005108:	e0bff817 	ldw	r2,-32(fp)
 800510c:	1000051e 	bne	r2,zero,8005124 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005110:	e0bffb04 	addi	r2,fp,-20
 8005114:	1009883a 	mov	r4,r2
 8005118:	80071300 	call	8007130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800511c:	00800044 	movi	r2,1
 8005120:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005124:	800796c0 	call	800796c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005128:	80069540 	call	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800512c:	80079180 	call	8007918 <vTaskEnterCritical>
 8005130:	e0bff917 	ldw	r2,-28(fp)
 8005134:	10801103 	ldbu	r2,68(r2)
 8005138:	10803fcc 	andi	r2,r2,255
 800513c:	1080201c 	xori	r2,r2,128
 8005140:	10bfe004 	addi	r2,r2,-128
 8005144:	10bfffd8 	cmpnei	r2,r2,-1
 8005148:	1000021e 	bne	r2,zero,8005154 <xQueueReceive+0xec>
 800514c:	e0bff917 	ldw	r2,-28(fp)
 8005150:	10001105 	stb	zero,68(r2)
 8005154:	e0bff917 	ldw	r2,-28(fp)
 8005158:	10801143 	ldbu	r2,69(r2)
 800515c:	10803fcc 	andi	r2,r2,255
 8005160:	1080201c 	xori	r2,r2,128
 8005164:	10bfe004 	addi	r2,r2,-128
 8005168:	10bfffd8 	cmpnei	r2,r2,-1
 800516c:	1000021e 	bne	r2,zero,8005178 <xQueueReceive+0x110>
 8005170:	e0bff917 	ldw	r2,-28(fp)
 8005174:	10001145 	stb	zero,69(r2)
 8005178:	800796c0 	call	800796c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800517c:	e0ffff04 	addi	r3,fp,-4
 8005180:	e0bffb04 	addi	r2,fp,-20
 8005184:	180b883a 	mov	r5,r3
 8005188:	1009883a 	mov	r4,r2
 800518c:	800716c0 	call	800716c <xTaskCheckForTimeOut>
 8005190:	1000131e 	bne	r2,zero,80051e0 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005194:	e13ff917 	ldw	r4,-28(fp)
 8005198:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 800519c:	10000c26 	beq	r2,zero,80051d0 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051a0:	e0bff917 	ldw	r2,-28(fp)
 80051a4:	10800904 	addi	r2,r2,36
 80051a8:	e0ffff17 	ldw	r3,-4(fp)
 80051ac:	180b883a 	mov	r5,r3
 80051b0:	1009883a 	mov	r4,r2
 80051b4:	8006e5c0 	call	8006e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051b8:	e13ff917 	ldw	r4,-28(fp)
 80051bc:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051c0:	80069800 	call	8006980 <xTaskResumeAll>
 80051c4:	103fb21e 	bne	r2,zero,8005090 <xQueueReceive+0x28>
				{
					portYIELD_WITHIN_API();
 80051c8:	003b683a 	trap	0
 80051cc:	003fb006 	br	8005090 <xQueueReceive+0x28>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051d0:	e13ff917 	ldw	r4,-28(fp)
 80051d4:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051d8:	80069800 	call	8006980 <xTaskResumeAll>
 80051dc:	003fac06 	br	8005090 <xQueueReceive+0x28>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051e0:	e13ff917 	ldw	r4,-28(fp)
 80051e4:	8005ab00 	call	8005ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051e8:	80069800 	call	8006980 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051ec:	e13ff917 	ldw	r4,-28(fp)
 80051f0:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 80051f4:	103fa626 	beq	r2,zero,8005090 <xQueueReceive+0x28>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051f8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051fc:	e037883a 	mov	sp,fp
 8005200:	dfc00117 	ldw	ra,4(sp)
 8005204:	df000017 	ldw	fp,0(sp)
 8005208:	dec00204 	addi	sp,sp,8
 800520c:	f800283a 	ret

08005210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005210:	defff504 	addi	sp,sp,-44
 8005214:	dfc00a15 	stw	ra,40(sp)
 8005218:	df000915 	stw	fp,36(sp)
 800521c:	df000904 	addi	fp,sp,36
 8005220:	e13ffe15 	stw	r4,-8(fp)
 8005224:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 8005228:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800522c:	e0bffe17 	ldw	r2,-8(fp)
 8005230:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005234:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005238:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800523c:	e0bff917 	ldw	r2,-28(fp)
 8005240:	10800e17 	ldw	r2,56(r2)
 8005244:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005248:	e0bffa17 	ldw	r2,-24(fp)
 800524c:	10001726 	beq	r2,zero,80052ac <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005250:	e0bffa17 	ldw	r2,-24(fp)
 8005254:	10ffffc4 	addi	r3,r2,-1
 8005258:	e0bff917 	ldw	r2,-28(fp)
 800525c:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005260:	e0bff917 	ldw	r2,-28(fp)
 8005264:	10800017 	ldw	r2,0(r2)
 8005268:	1000041e 	bne	r2,zero,800527c <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800526c:	8007a100 	call	8007a10 <pvTaskIncrementMutexHeldCount>
 8005270:	1007883a 	mov	r3,r2
 8005274:	e0bff917 	ldw	r2,-28(fp)
 8005278:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800527c:	e0bff917 	ldw	r2,-28(fp)
 8005280:	10800417 	ldw	r2,16(r2)
 8005284:	10000626 	beq	r2,zero,80052a0 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005288:	e0bff917 	ldw	r2,-28(fp)
 800528c:	10800404 	addi	r2,r2,16
 8005290:	1009883a 	mov	r4,r2
 8005294:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8005298:	10000126 	beq	r2,zero,80052a0 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800529c:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052a0:	800796c0 	call	800796c <vTaskExitCritical>
				return pdPASS;
 80052a4:	00800044 	movi	r2,1
 80052a8:	00005806 	br	800540c <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052ac:	e0bfff17 	ldw	r2,-4(fp)
 80052b0:	1000031e 	bne	r2,zero,80052c0 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80052b4:	800796c0 	call	800796c <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052b8:	0005883a 	mov	r2,zero
 80052bc:	00005306 	br	800540c <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052c0:	e0bff717 	ldw	r2,-36(fp)
 80052c4:	1000051e 	bne	r2,zero,80052dc <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052c8:	e0bffc04 	addi	r2,fp,-16
 80052cc:	1009883a 	mov	r4,r2
 80052d0:	80071300 	call	8007130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052d4:	00800044 	movi	r2,1
 80052d8:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052dc:	800796c0 	call	800796c <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e0:	80069540 	call	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e4:	80079180 	call	8007918 <vTaskEnterCritical>
 80052e8:	e0bff917 	ldw	r2,-28(fp)
 80052ec:	10801103 	ldbu	r2,68(r2)
 80052f0:	10803fcc 	andi	r2,r2,255
 80052f4:	1080201c 	xori	r2,r2,128
 80052f8:	10bfe004 	addi	r2,r2,-128
 80052fc:	10bfffd8 	cmpnei	r2,r2,-1
 8005300:	1000021e 	bne	r2,zero,800530c <xQueueSemaphoreTake+0xfc>
 8005304:	e0bff917 	ldw	r2,-28(fp)
 8005308:	10001105 	stb	zero,68(r2)
 800530c:	e0bff917 	ldw	r2,-28(fp)
 8005310:	10801143 	ldbu	r2,69(r2)
 8005314:	10803fcc 	andi	r2,r2,255
 8005318:	1080201c 	xori	r2,r2,128
 800531c:	10bfe004 	addi	r2,r2,-128
 8005320:	10bfffd8 	cmpnei	r2,r2,-1
 8005324:	1000021e 	bne	r2,zero,8005330 <xQueueSemaphoreTake+0x120>
 8005328:	e0bff917 	ldw	r2,-28(fp)
 800532c:	10001145 	stb	zero,69(r2)
 8005330:	800796c0 	call	800796c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005334:	e0ffff04 	addi	r3,fp,-4
 8005338:	e0bffc04 	addi	r2,fp,-16
 800533c:	180b883a 	mov	r5,r3
 8005340:	1009883a 	mov	r4,r2
 8005344:	800716c0 	call	800716c <xTaskCheckForTimeOut>
 8005348:	10001d1e 	bne	r2,zero,80053c0 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534c:	e13ff917 	ldw	r4,-28(fp)
 8005350:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 8005354:	10001626 	beq	r2,zero,80053b0 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005358:	e0bff917 	ldw	r2,-28(fp)
 800535c:	10800017 	ldw	r2,0(r2)
 8005360:	1000071e 	bne	r2,zero,8005380 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 8005364:	80079180 	call	8007918 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005368:	e0bff917 	ldw	r2,-28(fp)
 800536c:	10800217 	ldw	r2,8(r2)
 8005370:	1009883a 	mov	r4,r2
 8005374:	80075540 	call	8007554 <xTaskPriorityInherit>
 8005378:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 800537c:	800796c0 	call	800796c <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005380:	e0bff917 	ldw	r2,-28(fp)
 8005384:	10800904 	addi	r2,r2,36
 8005388:	e0ffff17 	ldw	r3,-4(fp)
 800538c:	180b883a 	mov	r5,r3
 8005390:	1009883a 	mov	r4,r2
 8005394:	8006e5c0 	call	8006e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005398:	e13ff917 	ldw	r4,-28(fp)
 800539c:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053a0:	80069800 	call	8006980 <xTaskResumeAll>
 80053a4:	103fa41e 	bne	r2,zero,8005238 <xQueueSemaphoreTake+0x28>
				{
					portYIELD_WITHIN_API();
 80053a8:	003b683a 	trap	0
 80053ac:	003fa206 	br	8005238 <xQueueSemaphoreTake+0x28>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80053b0:	e13ff917 	ldw	r4,-28(fp)
 80053b4:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053b8:	80069800 	call	8006980 <xTaskResumeAll>
 80053bc:	003f9e06 	br	8005238 <xQueueSemaphoreTake+0x28>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80053c0:	e13ff917 	ldw	r4,-28(fp)
 80053c4:	8005ab00 	call	8005ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c8:	80069800 	call	8006980 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053cc:	e13ff917 	ldw	r4,-28(fp)
 80053d0:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 80053d4:	103f9826 	beq	r2,zero,8005238 <xQueueSemaphoreTake+0x28>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80053d8:	e0bff817 	ldw	r2,-32(fp)
 80053dc:	10000a26 	beq	r2,zero,8005408 <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 80053e0:	80079180 	call	8007918 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80053e4:	e13ff917 	ldw	r4,-28(fp)
 80053e8:	80058380 	call	8005838 <prvGetDisinheritPriorityAfterTimeout>
 80053ec:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80053f0:	e0bff917 	ldw	r2,-28(fp)
 80053f4:	10800217 	ldw	r2,8(r2)
 80053f8:	e17ffb17 	ldw	r5,-20(fp)
 80053fc:	1009883a 	mov	r4,r2
 8005400:	80077bc0 	call	80077bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005404:	800796c0 	call	800796c <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005408:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800540c:	e037883a 	mov	sp,fp
 8005410:	dfc00117 	ldw	ra,4(sp)
 8005414:	df000017 	ldw	fp,0(sp)
 8005418:	dec00204 	addi	sp,sp,8
 800541c:	f800283a 	ret

08005420 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005420:	defff504 	addi	sp,sp,-44
 8005424:	dfc00a15 	stw	ra,40(sp)
 8005428:	df000915 	stw	fp,36(sp)
 800542c:	df000904 	addi	fp,sp,36
 8005430:	e13ffd15 	stw	r4,-12(fp)
 8005434:	e17ffe15 	stw	r5,-8(fp)
 8005438:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 800543c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8005440:	e0bffd17 	ldw	r2,-12(fp)
 8005444:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005448:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544c:	e0bff817 	ldw	r2,-32(fp)
 8005450:	10800e17 	ldw	r2,56(r2)
 8005454:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005458:	e0bff917 	ldw	r2,-28(fp)
 800545c:	10001526 	beq	r2,zero,80054b4 <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8005460:	e0bff817 	ldw	r2,-32(fp)
 8005464:	10800317 	ldw	r2,12(r2)
 8005468:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800546c:	e17ffe17 	ldw	r5,-8(fp)
 8005470:	e13ff817 	ldw	r4,-32(fp)
 8005474:	8005a140 	call	8005a14 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8005478:	e0bff817 	ldw	r2,-32(fp)
 800547c:	e0fffa17 	ldw	r3,-24(fp)
 8005480:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005484:	e0bff817 	ldw	r2,-32(fp)
 8005488:	10800917 	ldw	r2,36(r2)
 800548c:	10000626 	beq	r2,zero,80054a8 <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005490:	e0bff817 	ldw	r2,-32(fp)
 8005494:	10800904 	addi	r2,r2,36
 8005498:	1009883a 	mov	r4,r2
 800549c:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 80054a0:	10000126 	beq	r2,zero,80054a8 <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80054a4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054a8:	800796c0 	call	800796c <vTaskExitCritical>
				return pdPASS;
 80054ac:	00800044 	movi	r2,1
 80054b0:	00004206 	br	80055bc <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b4:	e0bfff17 	ldw	r2,-4(fp)
 80054b8:	1000031e 	bne	r2,zero,80054c8 <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054bc:	800796c0 	call	800796c <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054c0:	0005883a 	mov	r2,zero
 80054c4:	00003d06 	br	80055bc <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c8:	e0bff717 	ldw	r2,-36(fp)
 80054cc:	1000051e 	bne	r2,zero,80054e4 <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054d0:	e0bffb04 	addi	r2,fp,-20
 80054d4:	1009883a 	mov	r4,r2
 80054d8:	80071300 	call	8007130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054dc:	00800044 	movi	r2,1
 80054e0:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054e4:	800796c0 	call	800796c <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054e8:	80069540 	call	8006954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ec:	80079180 	call	8007918 <vTaskEnterCritical>
 80054f0:	e0bff817 	ldw	r2,-32(fp)
 80054f4:	10801103 	ldbu	r2,68(r2)
 80054f8:	10803fcc 	andi	r2,r2,255
 80054fc:	1080201c 	xori	r2,r2,128
 8005500:	10bfe004 	addi	r2,r2,-128
 8005504:	10bfffd8 	cmpnei	r2,r2,-1
 8005508:	1000021e 	bne	r2,zero,8005514 <xQueuePeek+0xf4>
 800550c:	e0bff817 	ldw	r2,-32(fp)
 8005510:	10001105 	stb	zero,68(r2)
 8005514:	e0bff817 	ldw	r2,-32(fp)
 8005518:	10801143 	ldbu	r2,69(r2)
 800551c:	10803fcc 	andi	r2,r2,255
 8005520:	1080201c 	xori	r2,r2,128
 8005524:	10bfe004 	addi	r2,r2,-128
 8005528:	10bfffd8 	cmpnei	r2,r2,-1
 800552c:	1000021e 	bne	r2,zero,8005538 <xQueuePeek+0x118>
 8005530:	e0bff817 	ldw	r2,-32(fp)
 8005534:	10001145 	stb	zero,69(r2)
 8005538:	800796c0 	call	800796c <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553c:	e0ffff04 	addi	r3,fp,-4
 8005540:	e0bffb04 	addi	r2,fp,-20
 8005544:	180b883a 	mov	r5,r3
 8005548:	1009883a 	mov	r4,r2
 800554c:	800716c0 	call	800716c <xTaskCheckForTimeOut>
 8005550:	1000131e 	bne	r2,zero,80055a0 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005554:	e13ff817 	ldw	r4,-32(fp)
 8005558:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 800555c:	10000c26 	beq	r2,zero,8005590 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005560:	e0bff817 	ldw	r2,-32(fp)
 8005564:	10800904 	addi	r2,r2,36
 8005568:	e0ffff17 	ldw	r3,-4(fp)
 800556c:	180b883a 	mov	r5,r3
 8005570:	1009883a 	mov	r4,r2
 8005574:	8006e5c0 	call	8006e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005578:	e13ff817 	ldw	r4,-32(fp)
 800557c:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005580:	80069800 	call	8006980 <xTaskResumeAll>
 8005584:	103fb01e 	bne	r2,zero,8005448 <xQueuePeek+0x28>
				{
					portYIELD_WITHIN_API();
 8005588:	003b683a 	trap	0
 800558c:	003fae06 	br	8005448 <xQueuePeek+0x28>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8005590:	e13ff817 	ldw	r4,-32(fp)
 8005594:	8005ab00 	call	8005ab0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005598:	80069800 	call	8006980 <xTaskResumeAll>
 800559c:	003faa06 	br	8005448 <xQueuePeek+0x28>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80055a0:	e13ff817 	ldw	r4,-32(fp)
 80055a4:	8005ab00 	call	8005ab0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055a8:	80069800 	call	8006980 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ac:	e13ff817 	ldw	r4,-32(fp)
 80055b0:	8005ba40 	call	8005ba4 <prvIsQueueEmpty>
 80055b4:	103fa426 	beq	r2,zero,8005448 <xQueuePeek+0x28>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055b8:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055bc:	e037883a 	mov	sp,fp
 80055c0:	dfc00117 	ldw	ra,4(sp)
 80055c4:	df000017 	ldw	fp,0(sp)
 80055c8:	dec00204 	addi	sp,sp,8
 80055cc:	f800283a 	ret

080055d0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055d0:	defff604 	addi	sp,sp,-40
 80055d4:	dfc00915 	stw	ra,36(sp)
 80055d8:	df000815 	stw	fp,32(sp)
 80055dc:	df000804 	addi	fp,sp,32
 80055e0:	e13ffd15 	stw	r4,-12(fp)
 80055e4:	e17ffe15 	stw	r5,-8(fp)
 80055e8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ec:	e0bffd17 	ldw	r2,-12(fp)
 80055f0:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f4:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f8:	e0bff917 	ldw	r2,-28(fp)
 80055fc:	10800e17 	ldw	r2,56(r2)
 8005600:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005604:	e0bffb17 	ldw	r2,-20(fp)
 8005608:	10002326 	beq	r2,zero,8005698 <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800560c:	e0bff917 	ldw	r2,-28(fp)
 8005610:	10801103 	ldbu	r2,68(r2)
 8005614:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005618:	e17ffe17 	ldw	r5,-8(fp)
 800561c:	e13ff917 	ldw	r4,-28(fp)
 8005620:	8005a140 	call	8005a14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005624:	e0bffb17 	ldw	r2,-20(fp)
 8005628:	10ffffc4 	addi	r3,r2,-1
 800562c:	e0bff917 	ldw	r2,-28(fp)
 8005630:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005634:	e0bffc07 	ldb	r2,-16(fp)
 8005638:	10bfffd8 	cmpnei	r2,r2,-1
 800563c:	10000e1e 	bne	r2,zero,8005678 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005640:	e0bff917 	ldw	r2,-28(fp)
 8005644:	10800417 	ldw	r2,16(r2)
 8005648:	10001026 	beq	r2,zero,800568c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800564c:	e0bff917 	ldw	r2,-28(fp)
 8005650:	10800404 	addi	r2,r2,16
 8005654:	1009883a 	mov	r4,r2
 8005658:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 800565c:	10000b26 	beq	r2,zero,800568c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005660:	e0bfff17 	ldw	r2,-4(fp)
 8005664:	10000926 	beq	r2,zero,800568c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005668:	e0bfff17 	ldw	r2,-4(fp)
 800566c:	00c00044 	movi	r3,1
 8005670:	10c00015 	stw	r3,0(r2)
 8005674:	00000506 	br	800568c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005678:	e0bffc03 	ldbu	r2,-16(fp)
 800567c:	10800044 	addi	r2,r2,1
 8005680:	1007883a 	mov	r3,r2
 8005684:	e0bff917 	ldw	r2,-28(fp)
 8005688:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 800568c:	00800044 	movi	r2,1
 8005690:	e0bff815 	stw	r2,-32(fp)
 8005694:	00000106 	br	800569c <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 8005698:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800569c:	e0bff817 	ldw	r2,-32(fp)
}
 80056a0:	e037883a 	mov	sp,fp
 80056a4:	dfc00117 	ldw	ra,4(sp)
 80056a8:	df000017 	ldw	fp,0(sp)
 80056ac:	dec00204 	addi	sp,sp,8
 80056b0:	f800283a 	ret

080056b4 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 80056b4:	defff804 	addi	sp,sp,-32
 80056b8:	dfc00715 	stw	ra,28(sp)
 80056bc:	df000615 	stw	fp,24(sp)
 80056c0:	df000604 	addi	fp,sp,24
 80056c4:	e13ffe15 	stw	r4,-8(fp)
 80056c8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80056cc:	e0bffe17 	ldw	r2,-8(fp)
 80056d0:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056d4:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056d8:	e0bffb17 	ldw	r2,-20(fp)
 80056dc:	10800e17 	ldw	r2,56(r2)
 80056e0:	10000c26 	beq	r2,zero,8005714 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80056e4:	e0bffb17 	ldw	r2,-20(fp)
 80056e8:	10800317 	ldw	r2,12(r2)
 80056ec:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056f0:	e17fff17 	ldw	r5,-4(fp)
 80056f4:	e13ffb17 	ldw	r4,-20(fp)
 80056f8:	8005a140 	call	8005a14 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80056fc:	e0bffb17 	ldw	r2,-20(fp)
 8005700:	e0fffd17 	ldw	r3,-12(fp)
 8005704:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 8005708:	00800044 	movi	r2,1
 800570c:	e0bffa15 	stw	r2,-24(fp)
 8005710:	00000106 	br	8005718 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 8005714:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005718:	e0bffa17 	ldw	r2,-24(fp)
}
 800571c:	e037883a 	mov	sp,fp
 8005720:	dfc00117 	ldw	ra,4(sp)
 8005724:	df000017 	ldw	fp,0(sp)
 8005728:	dec00204 	addi	sp,sp,8
 800572c:	f800283a 	ret

08005730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005730:	defffc04 	addi	sp,sp,-16
 8005734:	dfc00315 	stw	ra,12(sp)
 8005738:	df000215 	stw	fp,8(sp)
 800573c:	df000204 	addi	fp,sp,8
 8005740:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 8005744:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005748:	e0bfff17 	ldw	r2,-4(fp)
 800574c:	10800e17 	ldw	r2,56(r2)
 8005750:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 8005754:	800796c0 	call	800796c <vTaskExitCritical>

	return uxReturn;
 8005758:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800575c:	e037883a 	mov	sp,fp
 8005760:	dfc00117 	ldw	ra,4(sp)
 8005764:	df000017 	ldw	fp,0(sp)
 8005768:	dec00204 	addi	sp,sp,8
 800576c:	f800283a 	ret

08005770 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8005770:	defffb04 	addi	sp,sp,-20
 8005774:	dfc00415 	stw	ra,16(sp)
 8005778:	df000315 	stw	fp,12(sp)
 800577c:	df000304 	addi	fp,sp,12
 8005780:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005784:	e0bfff17 	ldw	r2,-4(fp)
 8005788:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 800578c:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8005790:	e0bffd17 	ldw	r2,-12(fp)
 8005794:	10c00f17 	ldw	r3,60(r2)
 8005798:	e0bffd17 	ldw	r2,-12(fp)
 800579c:	10800e17 	ldw	r2,56(r2)
 80057a0:	1885c83a 	sub	r2,r3,r2
 80057a4:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 80057a8:	800796c0 	call	800796c <vTaskExitCritical>

	return uxReturn;
 80057ac:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80057b0:	e037883a 	mov	sp,fp
 80057b4:	dfc00117 	ldw	ra,4(sp)
 80057b8:	df000017 	ldw	fp,0(sp)
 80057bc:	dec00204 	addi	sp,sp,8
 80057c0:	f800283a 	ret

080057c4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80057c4:	defffc04 	addi	sp,sp,-16
 80057c8:	df000315 	stw	fp,12(sp)
 80057cc:	df000304 	addi	fp,sp,12
 80057d0:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80057d4:	e0bfff17 	ldw	r2,-4(fp)
 80057d8:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 80057dc:	e0bffd17 	ldw	r2,-12(fp)
 80057e0:	10800e17 	ldw	r2,56(r2)
 80057e4:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 80057e8:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80057ec:	e037883a 	mov	sp,fp
 80057f0:	df000017 	ldw	fp,0(sp)
 80057f4:	dec00104 	addi	sp,sp,4
 80057f8:	f800283a 	ret

080057fc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80057fc:	defffc04 	addi	sp,sp,-16
 8005800:	dfc00315 	stw	ra,12(sp)
 8005804:	df000215 	stw	fp,8(sp)
 8005808:	df000204 	addi	fp,sp,8
 800580c:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 8005810:	e0bfff17 	ldw	r2,-4(fp)
 8005814:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8005818:	e13ffe17 	ldw	r4,-8(fp)
 800581c:	80044f00 	call	80044f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005820:	0001883a 	nop
 8005824:	e037883a 	mov	sp,fp
 8005828:	dfc00117 	ldw	ra,4(sp)
 800582c:	df000017 	ldw	fp,0(sp)
 8005830:	dec00204 	addi	sp,sp,8
 8005834:	f800283a 	ret

08005838 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005838:	defffd04 	addi	sp,sp,-12
 800583c:	df000215 	stw	fp,8(sp)
 8005840:	df000204 	addi	fp,sp,8
 8005844:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005848:	e0bfff17 	ldw	r2,-4(fp)
 800584c:	10800917 	ldw	r2,36(r2)
 8005850:	10000726 	beq	r2,zero,8005870 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005854:	e0bfff17 	ldw	r2,-4(fp)
 8005858:	10800c17 	ldw	r2,48(r2)
 800585c:	10800017 	ldw	r2,0(r2)
 8005860:	00c00144 	movi	r3,5
 8005864:	1885c83a 	sub	r2,r3,r2
 8005868:	e0bffe15 	stw	r2,-8(fp)
 800586c:	00000106 	br	8005874 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005870:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 8005874:	e0bffe17 	ldw	r2,-8(fp)
	}
 8005878:	e037883a 	mov	sp,fp
 800587c:	df000017 	ldw	fp,0(sp)
 8005880:	dec00104 	addi	sp,sp,4
 8005884:	f800283a 	ret

08005888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005888:	defff904 	addi	sp,sp,-28
 800588c:	dfc00615 	stw	ra,24(sp)
 8005890:	df000515 	stw	fp,20(sp)
 8005894:	df000504 	addi	fp,sp,20
 8005898:	e13ffd15 	stw	r4,-12(fp)
 800589c:	e17ffe15 	stw	r5,-8(fp)
 80058a0:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 80058a4:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058a8:	e0bffd17 	ldw	r2,-12(fp)
 80058ac:	10800e17 	ldw	r2,56(r2)
 80058b0:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058b4:	e0bffd17 	ldw	r2,-12(fp)
 80058b8:	10801017 	ldw	r2,64(r2)
 80058bc:	10000b1e 	bne	r2,zero,80058ec <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c0:	e0bffd17 	ldw	r2,-12(fp)
 80058c4:	10800017 	ldw	r2,0(r2)
 80058c8:	1000481e 	bne	r2,zero,80059ec <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058cc:	e0bffd17 	ldw	r2,-12(fp)
 80058d0:	10800217 	ldw	r2,8(r2)
 80058d4:	1009883a 	mov	r4,r2
 80058d8:	80076b40 	call	80076b4 <xTaskPriorityDisinherit>
 80058dc:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058e0:	e0bffd17 	ldw	r2,-12(fp)
 80058e4:	10000215 	stw	zero,8(r2)
 80058e8:	00004006 	br	80059ec <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058ec:	e0bfff17 	ldw	r2,-4(fp)
 80058f0:	1000191e 	bne	r2,zero,8005958 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058f4:	e0bffd17 	ldw	r2,-12(fp)
 80058f8:	10c00117 	ldw	r3,4(r2)
 80058fc:	e0bffd17 	ldw	r2,-12(fp)
 8005900:	10801017 	ldw	r2,64(r2)
 8005904:	100d883a 	mov	r6,r2
 8005908:	e17ffe17 	ldw	r5,-8(fp)
 800590c:	1809883a 	mov	r4,r3
 8005910:	80098e40 	call	80098e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005914:	e0bffd17 	ldw	r2,-12(fp)
 8005918:	10c00117 	ldw	r3,4(r2)
 800591c:	e0bffd17 	ldw	r2,-12(fp)
 8005920:	10801017 	ldw	r2,64(r2)
 8005924:	1887883a 	add	r3,r3,r2
 8005928:	e0bffd17 	ldw	r2,-12(fp)
 800592c:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005930:	e0bffd17 	ldw	r2,-12(fp)
 8005934:	10c00117 	ldw	r3,4(r2)
 8005938:	e0bffd17 	ldw	r2,-12(fp)
 800593c:	10800217 	ldw	r2,8(r2)
 8005940:	18802a36 	bltu	r3,r2,80059ec <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005944:	e0bffd17 	ldw	r2,-12(fp)
 8005948:	10c00017 	ldw	r3,0(r2)
 800594c:	e0bffd17 	ldw	r2,-12(fp)
 8005950:	10c00115 	stw	r3,4(r2)
 8005954:	00002506 	br	80059ec <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005958:	e0bffd17 	ldw	r2,-12(fp)
 800595c:	10c00317 	ldw	r3,12(r2)
 8005960:	e0bffd17 	ldw	r2,-12(fp)
 8005964:	10801017 	ldw	r2,64(r2)
 8005968:	100d883a 	mov	r6,r2
 800596c:	e17ffe17 	ldw	r5,-8(fp)
 8005970:	1809883a 	mov	r4,r3
 8005974:	80098e40 	call	80098e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005978:	e0bffd17 	ldw	r2,-12(fp)
 800597c:	10c00317 	ldw	r3,12(r2)
 8005980:	e0bffd17 	ldw	r2,-12(fp)
 8005984:	10801017 	ldw	r2,64(r2)
 8005988:	0085c83a 	sub	r2,zero,r2
 800598c:	1887883a 	add	r3,r3,r2
 8005990:	e0bffd17 	ldw	r2,-12(fp)
 8005994:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005998:	e0bffd17 	ldw	r2,-12(fp)
 800599c:	10c00317 	ldw	r3,12(r2)
 80059a0:	e0bffd17 	ldw	r2,-12(fp)
 80059a4:	10800017 	ldw	r2,0(r2)
 80059a8:	1880082e 	bgeu	r3,r2,80059cc <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059ac:	e0bffd17 	ldw	r2,-12(fp)
 80059b0:	10c00217 	ldw	r3,8(r2)
 80059b4:	e0bffd17 	ldw	r2,-12(fp)
 80059b8:	10801017 	ldw	r2,64(r2)
 80059bc:	0085c83a 	sub	r2,zero,r2
 80059c0:	1887883a 	add	r3,r3,r2
 80059c4:	e0bffd17 	ldw	r2,-12(fp)
 80059c8:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059cc:	e0bfff17 	ldw	r2,-4(fp)
 80059d0:	10800098 	cmpnei	r2,r2,2
 80059d4:	1000051e 	bne	r2,zero,80059ec <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d8:	e0bffc17 	ldw	r2,-16(fp)
 80059dc:	10000326 	beq	r2,zero,80059ec <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059e0:	e0bffc17 	ldw	r2,-16(fp)
 80059e4:	10bfffc4 	addi	r2,r2,-1
 80059e8:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ec:	e0bffc17 	ldw	r2,-16(fp)
 80059f0:	10c00044 	addi	r3,r2,1
 80059f4:	e0bffd17 	ldw	r2,-12(fp)
 80059f8:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 80059fc:	e0bffb17 	ldw	r2,-20(fp)
}
 8005a00:	e037883a 	mov	sp,fp
 8005a04:	dfc00117 	ldw	ra,4(sp)
 8005a08:	df000017 	ldw	fp,0(sp)
 8005a0c:	dec00204 	addi	sp,sp,8
 8005a10:	f800283a 	ret

08005a14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a14:	defffc04 	addi	sp,sp,-16
 8005a18:	dfc00315 	stw	ra,12(sp)
 8005a1c:	df000215 	stw	fp,8(sp)
 8005a20:	df000204 	addi	fp,sp,8
 8005a24:	e13ffe15 	stw	r4,-8(fp)
 8005a28:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a2c:	e0bffe17 	ldw	r2,-8(fp)
 8005a30:	10801017 	ldw	r2,64(r2)
 8005a34:	10001826 	beq	r2,zero,8005a98 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a38:	e0bffe17 	ldw	r2,-8(fp)
 8005a3c:	10c00317 	ldw	r3,12(r2)
 8005a40:	e0bffe17 	ldw	r2,-8(fp)
 8005a44:	10801017 	ldw	r2,64(r2)
 8005a48:	1887883a 	add	r3,r3,r2
 8005a4c:	e0bffe17 	ldw	r2,-8(fp)
 8005a50:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a54:	e0bffe17 	ldw	r2,-8(fp)
 8005a58:	10c00317 	ldw	r3,12(r2)
 8005a5c:	e0bffe17 	ldw	r2,-8(fp)
 8005a60:	10800217 	ldw	r2,8(r2)
 8005a64:	18800436 	bltu	r3,r2,8005a78 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a68:	e0bffe17 	ldw	r2,-8(fp)
 8005a6c:	10c00017 	ldw	r3,0(r2)
 8005a70:	e0bffe17 	ldw	r2,-8(fp)
 8005a74:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a78:	e0bffe17 	ldw	r2,-8(fp)
 8005a7c:	10c00317 	ldw	r3,12(r2)
 8005a80:	e0bffe17 	ldw	r2,-8(fp)
 8005a84:	10801017 	ldw	r2,64(r2)
 8005a88:	100d883a 	mov	r6,r2
 8005a8c:	180b883a 	mov	r5,r3
 8005a90:	e13fff17 	ldw	r4,-4(fp)
 8005a94:	80098e40 	call	80098e4 <memcpy>
	}
}
 8005a98:	0001883a 	nop
 8005a9c:	e037883a 	mov	sp,fp
 8005aa0:	dfc00117 	ldw	ra,4(sp)
 8005aa4:	df000017 	ldw	fp,0(sp)
 8005aa8:	dec00204 	addi	sp,sp,8
 8005aac:	f800283a 	ret

08005ab0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ab0:	defffc04 	addi	sp,sp,-16
 8005ab4:	dfc00315 	stw	ra,12(sp)
 8005ab8:	df000215 	stw	fp,8(sp)
 8005abc:	df000204 	addi	fp,sp,8
 8005ac0:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ac4:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ac8:	e0bfff17 	ldw	r2,-4(fp)
 8005acc:	10801143 	ldbu	r2,69(r2)
 8005ad0:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad4:	00000c06 	br	8005b08 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ad8:	e0bfff17 	ldw	r2,-4(fp)
 8005adc:	10800917 	ldw	r2,36(r2)
 8005ae0:	10000c26 	beq	r2,zero,8005b14 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ae4:	e0bfff17 	ldw	r2,-4(fp)
 8005ae8:	10800904 	addi	r2,r2,36
 8005aec:	1009883a 	mov	r4,r2
 8005af0:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8005af4:	10000126 	beq	r2,zero,8005afc <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af8:	800724c0 	call	800724c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afc:	e0bffe03 	ldbu	r2,-8(fp)
 8005b00:	10bfffc4 	addi	r2,r2,-1
 8005b04:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b08:	e0bffe07 	ldb	r2,-8(fp)
 8005b0c:	00bff216 	blt	zero,r2,8005ad8 <prvUnlockQueue+0x28>
 8005b10:	00000106 	br	8005b18 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 8005b14:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b18:	e0bfff17 	ldw	r2,-4(fp)
 8005b1c:	00ffffc4 	movi	r3,-1
 8005b20:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 8005b24:	800796c0 	call	800796c <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b28:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b2c:	e0bfff17 	ldw	r2,-4(fp)
 8005b30:	10801103 	ldbu	r2,68(r2)
 8005b34:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b38:	00000c06 	br	8005b6c <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b3c:	e0bfff17 	ldw	r2,-4(fp)
 8005b40:	10800417 	ldw	r2,16(r2)
 8005b44:	10000c26 	beq	r2,zero,8005b78 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b48:	e0bfff17 	ldw	r2,-4(fp)
 8005b4c:	10800404 	addi	r2,r2,16
 8005b50:	1009883a 	mov	r4,r2
 8005b54:	8006f100 	call	8006f10 <xTaskRemoveFromEventList>
 8005b58:	10000126 	beq	r2,zero,8005b60 <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 8005b5c:	800724c0 	call	800724c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b60:	e0bffe43 	ldbu	r2,-7(fp)
 8005b64:	10bfffc4 	addi	r2,r2,-1
 8005b68:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b6c:	e0bffe47 	ldb	r2,-7(fp)
 8005b70:	00bff216 	blt	zero,r2,8005b3c <prvUnlockQueue+0x8c>
 8005b74:	00000106 	br	8005b7c <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 8005b78:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b7c:	e0bfff17 	ldw	r2,-4(fp)
 8005b80:	00ffffc4 	movi	r3,-1
 8005b84:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 8005b88:	800796c0 	call	800796c <vTaskExitCritical>
}
 8005b8c:	0001883a 	nop
 8005b90:	e037883a 	mov	sp,fp
 8005b94:	dfc00117 	ldw	ra,4(sp)
 8005b98:	df000017 	ldw	fp,0(sp)
 8005b9c:	dec00204 	addi	sp,sp,8
 8005ba0:	f800283a 	ret

08005ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ba4:	defffc04 	addi	sp,sp,-16
 8005ba8:	dfc00315 	stw	ra,12(sp)
 8005bac:	df000215 	stw	fp,8(sp)
 8005bb0:	df000204 	addi	fp,sp,8
 8005bb4:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bb8:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bbc:	e0bfff17 	ldw	r2,-4(fp)
 8005bc0:	10800e17 	ldw	r2,56(r2)
 8005bc4:	1000031e 	bne	r2,zero,8005bd4 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 8005bc8:	00800044 	movi	r2,1
 8005bcc:	e0bffe15 	stw	r2,-8(fp)
 8005bd0:	00000106 	br	8005bd8 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 8005bd4:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 8005bd8:	800796c0 	call	800796c <vTaskExitCritical>

	return xReturn;
 8005bdc:	e0bffe17 	ldw	r2,-8(fp)
}
 8005be0:	e037883a 	mov	sp,fp
 8005be4:	dfc00117 	ldw	ra,4(sp)
 8005be8:	df000017 	ldw	fp,0(sp)
 8005bec:	dec00204 	addi	sp,sp,8
 8005bf0:	f800283a 	ret

08005bf4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8005bf4:	defffc04 	addi	sp,sp,-16
 8005bf8:	df000315 	stw	fp,12(sp)
 8005bfc:	df000304 	addi	fp,sp,12
 8005c00:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8005c04:	e0bfff17 	ldw	r2,-4(fp)
 8005c08:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005c0c:	e0bffe17 	ldw	r2,-8(fp)
 8005c10:	10800e17 	ldw	r2,56(r2)
 8005c14:	1000031e 	bne	r2,zero,8005c24 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 8005c18:	00800044 	movi	r2,1
 8005c1c:	e0bffd15 	stw	r2,-12(fp)
 8005c20:	00000106 	br	8005c28 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 8005c24:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 8005c28:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c2c:	e037883a 	mov	sp,fp
 8005c30:	df000017 	ldw	fp,0(sp)
 8005c34:	dec00104 	addi	sp,sp,4
 8005c38:	f800283a 	ret

08005c3c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c3c:	defffc04 	addi	sp,sp,-16
 8005c40:	dfc00315 	stw	ra,12(sp)
 8005c44:	df000215 	stw	fp,8(sp)
 8005c48:	df000204 	addi	fp,sp,8
 8005c4c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c50:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c54:	e0bfff17 	ldw	r2,-4(fp)
 8005c58:	10c00e17 	ldw	r3,56(r2)
 8005c5c:	e0bfff17 	ldw	r2,-4(fp)
 8005c60:	10800f17 	ldw	r2,60(r2)
 8005c64:	1880031e 	bne	r3,r2,8005c74 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 8005c68:	00800044 	movi	r2,1
 8005c6c:	e0bffe15 	stw	r2,-8(fp)
 8005c70:	00000106 	br	8005c78 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 8005c74:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 8005c78:	800796c0 	call	800796c <vTaskExitCritical>

	return xReturn;
 8005c7c:	e0bffe17 	ldw	r2,-8(fp)
}
 8005c80:	e037883a 	mov	sp,fp
 8005c84:	dfc00117 	ldw	ra,4(sp)
 8005c88:	df000017 	ldw	fp,0(sp)
 8005c8c:	dec00204 	addi	sp,sp,8
 8005c90:	f800283a 	ret

08005c94 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005c94:	defffc04 	addi	sp,sp,-16
 8005c98:	df000315 	stw	fp,12(sp)
 8005c9c:	df000304 	addi	fp,sp,12
 8005ca0:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8005ca4:	e0bfff17 	ldw	r2,-4(fp)
 8005ca8:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cac:	e0bffe17 	ldw	r2,-8(fp)
 8005cb0:	10c00e17 	ldw	r3,56(r2)
 8005cb4:	e0bffe17 	ldw	r2,-8(fp)
 8005cb8:	10800f17 	ldw	r2,60(r2)
 8005cbc:	1880031e 	bne	r3,r2,8005ccc <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 8005cc0:	00800044 	movi	r2,1
 8005cc4:	e0bffd15 	stw	r2,-12(fp)
 8005cc8:	00000106 	br	8005cd0 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 8005ccc:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 8005cd0:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cd4:	e037883a 	mov	sp,fp
 8005cd8:	df000017 	ldw	fp,0(sp)
 8005cdc:	dec00104 	addi	sp,sp,4
 8005ce0:	f800283a 	ret

08005ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ce4:	defff304 	addi	sp,sp,-52
 8005ce8:	dfc00c15 	stw	ra,48(sp)
 8005cec:	df000b15 	stw	fp,44(sp)
 8005cf0:	df000b04 	addi	fp,sp,44
 8005cf4:	e13ffc15 	stw	r4,-16(fp)
 8005cf8:	e17ffd15 	stw	r5,-12(fp)
 8005cfc:	3005883a 	mov	r2,r6
 8005d00:	e1ffff15 	stw	r7,-4(fp)
 8005d04:	e0bffe0d 	sth	r2,-8(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d08:	e0bffe0b 	ldhu	r2,-8(fp)
 8005d0c:	1085883a 	add	r2,r2,r2
 8005d10:	1085883a 	add	r2,r2,r2
 8005d14:	1009883a 	mov	r4,r2
 8005d18:	800433c0 	call	800433c <pvPortMalloc>
 8005d1c:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 8005d20:	e0bffb17 	ldw	r2,-20(fp)
 8005d24:	10000c26 	beq	r2,zero,8005d58 <xTaskCreate+0x74>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d28:	01001404 	movi	r4,80
 8005d2c:	800433c0 	call	800433c <pvPortMalloc>
 8005d30:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 8005d34:	e0bff917 	ldw	r2,-28(fp)
 8005d38:	10000426 	beq	r2,zero,8005d4c <xTaskCreate+0x68>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d3c:	e0bff917 	ldw	r2,-28(fp)
 8005d40:	e0fffb17 	ldw	r3,-20(fp)
 8005d44:	10c00c15 	stw	r3,48(r2)
 8005d48:	00000406 	br	8005d5c <xTaskCreate+0x78>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d4c:	e13ffb17 	ldw	r4,-20(fp)
 8005d50:	80044f00 	call	80044f0 <vPortFree>
 8005d54:	00000106 	br	8005d5c <xTaskCreate+0x78>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d58:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d5c:	e0bff917 	ldw	r2,-28(fp)
 8005d60:	10001226 	beq	r2,zero,8005dac <xTaskCreate+0xc8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d64:	e0fffe0b 	ldhu	r3,-8(fp)
 8005d68:	d8000315 	stw	zero,12(sp)
 8005d6c:	e0bff917 	ldw	r2,-28(fp)
 8005d70:	d8800215 	stw	r2,8(sp)
 8005d74:	e0800317 	ldw	r2,12(fp)
 8005d78:	d8800115 	stw	r2,4(sp)
 8005d7c:	e0800217 	ldw	r2,8(fp)
 8005d80:	d8800015 	stw	r2,0(sp)
 8005d84:	e1ffff17 	ldw	r7,-4(fp)
 8005d88:	180d883a 	mov	r6,r3
 8005d8c:	e17ffd17 	ldw	r5,-12(fp)
 8005d90:	e13ffc17 	ldw	r4,-16(fp)
 8005d94:	8005dcc0 	call	8005dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d98:	e13ff917 	ldw	r4,-28(fp)
 8005d9c:	8005fb00 	call	8005fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da0:	00800044 	movi	r2,1
 8005da4:	e0bffa15 	stw	r2,-24(fp)
 8005da8:	00000206 	br	8005db4 <xTaskCreate+0xd0>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dac:	00bfffc4 	movi	r2,-1
 8005db0:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 8005db4:	e0bffa17 	ldw	r2,-24(fp)
	}
 8005db8:	e037883a 	mov	sp,fp
 8005dbc:	dfc00117 	ldw	ra,4(sp)
 8005dc0:	df000017 	ldw	fp,0(sp)
 8005dc4:	dec00204 	addi	sp,sp,8
 8005dc8:	f800283a 	ret

08005dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dcc:	defff804 	addi	sp,sp,-32
 8005dd0:	dfc00715 	stw	ra,28(sp)
 8005dd4:	df000615 	stw	fp,24(sp)
 8005dd8:	df000604 	addi	fp,sp,24
 8005ddc:	e13ffc15 	stw	r4,-16(fp)
 8005de0:	e17ffd15 	stw	r5,-12(fp)
 8005de4:	e1bffe15 	stw	r6,-8(fp)
 8005de8:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dec:	e0800417 	ldw	r2,16(fp)
 8005df0:	10c00c17 	ldw	r3,48(r2)
 8005df4:	e0bffe17 	ldw	r2,-8(fp)
 8005df8:	1085883a 	add	r2,r2,r2
 8005dfc:	1085883a 	add	r2,r2,r2
 8005e00:	100d883a 	mov	r6,r2
 8005e04:	01402944 	movi	r5,165
 8005e08:	1809883a 	mov	r4,r3
 8005e0c:	8009a2c0 	call	8009a2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e10:	e0800417 	ldw	r2,16(fp)
 8005e14:	10c00c17 	ldw	r3,48(r2)
 8005e18:	e13ffe17 	ldw	r4,-8(fp)
 8005e1c:	00900034 	movhi	r2,16384
 8005e20:	10bfffc4 	addi	r2,r2,-1
 8005e24:	2085883a 	add	r2,r4,r2
 8005e28:	1085883a 	add	r2,r2,r2
 8005e2c:	1085883a 	add	r2,r2,r2
 8005e30:	1885883a 	add	r2,r3,r2
 8005e34:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e38:	e0fffb17 	ldw	r3,-20(fp)
 8005e3c:	00bfff04 	movi	r2,-4
 8005e40:	1884703a 	and	r2,r3,r2
 8005e44:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e48:	e0bffd17 	ldw	r2,-12(fp)
 8005e4c:	10001e26 	beq	r2,zero,8005ec8 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	e03ffa15 	stw	zero,-24(fp)
 8005e54:	00001406 	br	8005ea8 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e58:	e0fffd17 	ldw	r3,-12(fp)
 8005e5c:	e0bffa17 	ldw	r2,-24(fp)
 8005e60:	1885883a 	add	r2,r3,r2
 8005e64:	10c00003 	ldbu	r3,0(r2)
 8005e68:	e1000417 	ldw	r4,16(fp)
 8005e6c:	e0bffa17 	ldw	r2,-24(fp)
 8005e70:	2085883a 	add	r2,r4,r2
 8005e74:	10800d04 	addi	r2,r2,52
 8005e78:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e7c:	e0fffd17 	ldw	r3,-12(fp)
 8005e80:	e0bffa17 	ldw	r2,-24(fp)
 8005e84:	1885883a 	add	r2,r3,r2
 8005e88:	10800003 	ldbu	r2,0(r2)
 8005e8c:	10803fcc 	andi	r2,r2,255
 8005e90:	1080201c 	xori	r2,r2,128
 8005e94:	10bfe004 	addi	r2,r2,-128
 8005e98:	10000726 	beq	r2,zero,8005eb8 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e9c:	e0bffa17 	ldw	r2,-24(fp)
 8005ea0:	10800044 	addi	r2,r2,1
 8005ea4:	e0bffa15 	stw	r2,-24(fp)
 8005ea8:	e0bffa17 	ldw	r2,-24(fp)
 8005eac:	10800230 	cmpltui	r2,r2,8
 8005eb0:	103fe91e 	bne	r2,zero,8005e58 <prvInitialiseNewTask+0x8c>
 8005eb4:	00000106 	br	8005ebc <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 8005eb8:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ebc:	e0800417 	ldw	r2,16(fp)
 8005ec0:	10000ec5 	stb	zero,59(r2)
 8005ec4:	00000206 	br	8005ed0 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ec8:	e0800417 	ldw	r2,16(fp)
 8005ecc:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ed0:	e0800217 	ldw	r2,8(fp)
 8005ed4:	10800170 	cmpltui	r2,r2,5
 8005ed8:	1000021e 	bne	r2,zero,8005ee4 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005edc:	00800104 	movi	r2,4
 8005ee0:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ee4:	e0800417 	ldw	r2,16(fp)
 8005ee8:	e0c00217 	ldw	r3,8(fp)
 8005eec:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ef0:	e0800417 	ldw	r2,16(fp)
 8005ef4:	e0c00217 	ldw	r3,8(fp)
 8005ef8:	10c01015 	stw	r3,64(r2)
		pxNewTCB->uxMutexesHeld = 0;
 8005efc:	e0800417 	ldw	r2,16(fp)
 8005f00:	10001115 	stw	zero,68(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f04:	e0800417 	ldw	r2,16(fp)
 8005f08:	10800104 	addi	r2,r2,4
 8005f0c:	1009883a 	mov	r4,r2
 8005f10:	8003c7c0 	call	8003c7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f14:	e0800417 	ldw	r2,16(fp)
 8005f18:	10800604 	addi	r2,r2,24
 8005f1c:	1009883a 	mov	r4,r2
 8005f20:	8003c7c0 	call	8003c7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f24:	e0800417 	ldw	r2,16(fp)
 8005f28:	e0c00417 	ldw	r3,16(fp)
 8005f2c:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f30:	00c00144 	movi	r3,5
 8005f34:	e0800217 	ldw	r2,8(fp)
 8005f38:	1887c83a 	sub	r3,r3,r2
 8005f3c:	e0800417 	ldw	r2,16(fp)
 8005f40:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f44:	e0800417 	ldw	r2,16(fp)
 8005f48:	e0c00417 	ldw	r3,16(fp)
 8005f4c:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 8005f50:	e0800417 	ldw	r2,16(fp)
 8005f54:	10000f15 	stw	zero,60(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f58:	e0800417 	ldw	r2,16(fp)
 8005f5c:	10001215 	stw	zero,72(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f60:	e0800417 	ldw	r2,16(fp)
 8005f64:	10001305 	stb	zero,76(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f68:	e1bfff17 	ldw	r6,-4(fp)
 8005f6c:	e17ffc17 	ldw	r5,-16(fp)
 8005f70:	e13ffb17 	ldw	r4,-20(fp)
 8005f74:	8003ecc0 	call	8003ecc <pxPortInitialiseStack>
 8005f78:	1007883a 	mov	r3,r2
 8005f7c:	e0800417 	ldw	r2,16(fp)
 8005f80:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f84:	e0800317 	ldw	r2,12(fp)
 8005f88:	10000326 	beq	r2,zero,8005f98 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f8c:	e0800317 	ldw	r2,12(fp)
 8005f90:	e0c00417 	ldw	r3,16(fp)
 8005f94:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f98:	0001883a 	nop
 8005f9c:	e037883a 	mov	sp,fp
 8005fa0:	dfc00117 	ldw	ra,4(sp)
 8005fa4:	df000017 	ldw	fp,0(sp)
 8005fa8:	dec00204 	addi	sp,sp,8
 8005fac:	f800283a 	ret

08005fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fb0:	defffd04 	addi	sp,sp,-12
 8005fb4:	dfc00215 	stw	ra,8(sp)
 8005fb8:	df000115 	stw	fp,4(sp)
 8005fbc:	df000104 	addi	fp,sp,4
 8005fc0:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc4:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc8:	d0a8a117 	ldw	r2,-23932(gp)
 8005fcc:	10800044 	addi	r2,r2,1
 8005fd0:	d0a8a115 	stw	r2,-23932(gp)
		if( pxCurrentTCB == NULL )
 8005fd4:	d0a89d17 	ldw	r2,-23948(gp)
 8005fd8:	1000071e 	bne	r2,zero,8005ff8 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fdc:	e0bfff17 	ldw	r2,-4(fp)
 8005fe0:	d0a89d15 	stw	r2,-23948(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe4:	d0a8a117 	ldw	r2,-23932(gp)
 8005fe8:	10800058 	cmpnei	r2,r2,1
 8005fec:	10000b1e 	bne	r2,zero,800601c <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ff0:	80072900 	call	8007290 <prvInitialiseTaskLists>
 8005ff4:	00000906 	br	800601c <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ff8:	d0a8a417 	ldw	r2,-23920(gp)
 8005ffc:	1000071e 	bne	r2,zero,800601c <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006000:	d0a89d17 	ldw	r2,-23948(gp)
 8006004:	10800b17 	ldw	r2,44(r2)
 8006008:	e0ffff17 	ldw	r3,-4(fp)
 800600c:	18c00b17 	ldw	r3,44(r3)
 8006010:	18800236 	bltu	r3,r2,800601c <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 8006014:	e0bfff17 	ldw	r2,-4(fp)
 8006018:	d0a89d15 	stw	r2,-23948(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800601c:	d0a8a817 	ldw	r2,-23904(gp)
 8006020:	10800044 	addi	r2,r2,1
 8006024:	d0a8a815 	stw	r2,-23904(gp)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006028:	e0bfff17 	ldw	r2,-4(fp)
 800602c:	10800b17 	ldw	r2,44(r2)
 8006030:	d0e8a317 	ldw	r3,-23924(gp)
 8006034:	1880032e 	bgeu	r3,r2,8006044 <prvAddNewTaskToReadyList+0x94>
 8006038:	e0bfff17 	ldw	r2,-4(fp)
 800603c:	10800b17 	ldw	r2,44(r2)
 8006040:	d0a8a315 	stw	r2,-23924(gp)
 8006044:	e0bfff17 	ldw	r2,-4(fp)
 8006048:	10800b17 	ldw	r2,44(r2)
 800604c:	01400504 	movi	r5,20
 8006050:	1009883a 	mov	r4,r2
 8006054:	80087fc0 	call	80087fc <__mulsi3>
 8006058:	1007883a 	mov	r3,r2
 800605c:	008220b4 	movhi	r2,2178
 8006060:	10bc7a04 	addi	r2,r2,-3608
 8006064:	1887883a 	add	r3,r3,r2
 8006068:	e0bfff17 	ldw	r2,-4(fp)
 800606c:	10800104 	addi	r2,r2,4
 8006070:	100b883a 	mov	r5,r2
 8006074:	1809883a 	mov	r4,r3
 8006078:	8003ca80 	call	8003ca8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800607c:	800796c0 	call	800796c <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006080:	d0a8a417 	ldw	r2,-23920(gp)
 8006084:	10000626 	beq	r2,zero,80060a0 <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006088:	d0a89d17 	ldw	r2,-23948(gp)
 800608c:	10c00b17 	ldw	r3,44(r2)
 8006090:	e0bfff17 	ldw	r2,-4(fp)
 8006094:	10800b17 	ldw	r2,44(r2)
 8006098:	1880012e 	bgeu	r3,r2,80060a0 <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800609c:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a0:	0001883a 	nop
 80060a4:	e037883a 	mov	sp,fp
 80060a8:	dfc00117 	ldw	ra,4(sp)
 80060ac:	df000017 	ldw	fp,0(sp)
 80060b0:	dec00204 	addi	sp,sp,8
 80060b4:	f800283a 	ret

080060b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80060b8:	defffc04 	addi	sp,sp,-16
 80060bc:	dfc00315 	stw	ra,12(sp)
 80060c0:	df000215 	stw	fp,8(sp)
 80060c4:	df000204 	addi	fp,sp,8
 80060c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80060cc:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80060d0:	e0bfff17 	ldw	r2,-4(fp)
 80060d4:	1000021e 	bne	r2,zero,80060e0 <vTaskDelete+0x28>
 80060d8:	d0a89d17 	ldw	r2,-23948(gp)
 80060dc:	00000106 	br	80060e4 <vTaskDelete+0x2c>
 80060e0:	e0bfff17 	ldw	r2,-4(fp)
 80060e4:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e8:	e0bffe17 	ldw	r2,-8(fp)
 80060ec:	10800104 	addi	r2,r2,4
 80060f0:	1009883a 	mov	r4,r2
 80060f4:	8003e0c0 	call	8003e0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f8:	e0bffe17 	ldw	r2,-8(fp)
 80060fc:	10800a17 	ldw	r2,40(r2)
 8006100:	10000426 	beq	r2,zero,8006114 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006104:	e0bffe17 	ldw	r2,-8(fp)
 8006108:	10800604 	addi	r2,r2,24
 800610c:	1009883a 	mov	r4,r2
 8006110:	8003e0c0 	call	8003e0c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006114:	d0a8a817 	ldw	r2,-23904(gp)
 8006118:	10800044 	addi	r2,r2,1
 800611c:	d0a8a815 	stw	r2,-23904(gp)

			if( pxTCB == pxCurrentTCB )
 8006120:	d0a89d17 	ldw	r2,-23948(gp)
 8006124:	e0fffe17 	ldw	r3,-8(fp)
 8006128:	18800a1e 	bne	r3,r2,8006154 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800612c:	e0bffe17 	ldw	r2,-8(fp)
 8006130:	10800104 	addi	r2,r2,4
 8006134:	100b883a 	mov	r5,r2
 8006138:	010220b4 	movhi	r4,2178
 800613c:	213ca204 	addi	r4,r4,-3448
 8006140:	8003ca80 	call	8003ca8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006144:	d0a8a017 	ldw	r2,-23936(gp)
 8006148:	10800044 	addi	r2,r2,1
 800614c:	d0a8a015 	stw	r2,-23936(gp)
 8006150:	00000606 	br	800616c <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006154:	d0a8a117 	ldw	r2,-23932(gp)
 8006158:	10bfffc4 	addi	r2,r2,-1
 800615c:	d0a8a115 	stw	r2,-23932(gp)
				prvDeleteTCB( pxTCB );
 8006160:	e13ffe17 	ldw	r4,-8(fp)
 8006164:	80074940 	call	8007494 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006168:	80074d80 	call	80074d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800616c:	800796c0 	call	800796c <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006170:	d0a8a417 	ldw	r2,-23920(gp)
 8006174:	10000426 	beq	r2,zero,8006188 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 8006178:	d0a89d17 	ldw	r2,-23948(gp)
 800617c:	e0fffe17 	ldw	r3,-8(fp)
 8006180:	1880011e 	bne	r3,r2,8006188 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8006184:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006188:	0001883a 	nop
 800618c:	e037883a 	mov	sp,fp
 8006190:	dfc00117 	ldw	ra,4(sp)
 8006194:	df000017 	ldw	fp,0(sp)
 8006198:	dec00204 	addi	sp,sp,8
 800619c:	f800283a 	ret

080061a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80061a0:	defff804 	addi	sp,sp,-32
 80061a4:	dfc00715 	stw	ra,28(sp)
 80061a8:	df000615 	stw	fp,24(sp)
 80061ac:	df000604 	addi	fp,sp,24
 80061b0:	e13ffe15 	stw	r4,-8(fp)
 80061b4:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80061b8:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 80061bc:	80069540 	call	8006954 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80061c0:	d0a8a217 	ldw	r2,-23928(gp)
 80061c4:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80061c8:	e0bffe17 	ldw	r2,-8(fp)
 80061cc:	10c00017 	ldw	r3,0(r2)
 80061d0:	e0bfff17 	ldw	r2,-4(fp)
 80061d4:	1885883a 	add	r2,r3,r2
 80061d8:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 80061dc:	e0bffe17 	ldw	r2,-8(fp)
 80061e0:	10800017 	ldw	r2,0(r2)
 80061e4:	e0fffb17 	ldw	r3,-20(fp)
 80061e8:	18800a2e 	bgeu	r3,r2,8006214 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80061ec:	e0bffe17 	ldw	r2,-8(fp)
 80061f0:	10800017 	ldw	r2,0(r2)
 80061f4:	e0fffc17 	ldw	r3,-16(fp)
 80061f8:	18800f2e 	bgeu	r3,r2,8006238 <vTaskDelayUntil+0x98>
 80061fc:	e0bffc17 	ldw	r2,-16(fp)
 8006200:	e0fffb17 	ldw	r3,-20(fp)
 8006204:	18800c2e 	bgeu	r3,r2,8006238 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8006208:	00800044 	movi	r2,1
 800620c:	e0bffa15 	stw	r2,-24(fp)
 8006210:	00000906 	br	8006238 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006214:	e0bffe17 	ldw	r2,-8(fp)
 8006218:	10800017 	ldw	r2,0(r2)
 800621c:	e0fffc17 	ldw	r3,-16(fp)
 8006220:	18800336 	bltu	r3,r2,8006230 <vTaskDelayUntil+0x90>
 8006224:	e0bffc17 	ldw	r2,-16(fp)
 8006228:	e0fffb17 	ldw	r3,-20(fp)
 800622c:	1880022e 	bgeu	r3,r2,8006238 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 8006230:	00800044 	movi	r2,1
 8006234:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006238:	e0bffe17 	ldw	r2,-8(fp)
 800623c:	e0fffc17 	ldw	r3,-16(fp)
 8006240:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 8006244:	e0bffa17 	ldw	r2,-24(fp)
 8006248:	10000626 	beq	r2,zero,8006264 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800624c:	e0fffc17 	ldw	r3,-16(fp)
 8006250:	e0bffb17 	ldw	r2,-20(fp)
 8006254:	1885c83a 	sub	r2,r3,r2
 8006258:	000b883a 	mov	r5,zero
 800625c:	1009883a 	mov	r4,r2
 8006260:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006264:	80069800 	call	8006980 <xTaskResumeAll>
 8006268:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800626c:	e0bffd17 	ldw	r2,-12(fp)
 8006270:	1000011e 	bne	r2,zero,8006278 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 8006274:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006278:	0001883a 	nop
 800627c:	e037883a 	mov	sp,fp
 8006280:	dfc00117 	ldw	ra,4(sp)
 8006284:	df000017 	ldw	fp,0(sp)
 8006288:	dec00204 	addi	sp,sp,8
 800628c:	f800283a 	ret

08006290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006290:	defffc04 	addi	sp,sp,-16
 8006294:	dfc00315 	stw	ra,12(sp)
 8006298:	df000215 	stw	fp,8(sp)
 800629c:	df000204 	addi	fp,sp,8
 80062a0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 80062a4:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062a8:	e0bfff17 	ldw	r2,-4(fp)
 80062ac:	10000626 	beq	r2,zero,80062c8 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 80062b0:	80069540 	call	8006954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b4:	000b883a 	mov	r5,zero
 80062b8:	e13fff17 	ldw	r4,-4(fp)
 80062bc:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062c0:	80069800 	call	8006980 <xTaskResumeAll>
 80062c4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062c8:	e0bffe17 	ldw	r2,-8(fp)
 80062cc:	1000011e 	bne	r2,zero,80062d4 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 80062d0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062d4:	0001883a 	nop
 80062d8:	e037883a 	mov	sp,fp
 80062dc:	dfc00117 	ldw	ra,4(sp)
 80062e0:	df000017 	ldw	fp,0(sp)
 80062e4:	dec00204 	addi	sp,sp,8
 80062e8:	f800283a 	ret

080062ec <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 80062ec:	defffb04 	addi	sp,sp,-20
 80062f0:	dfc00415 	stw	ra,16(sp)
 80062f4:	df000315 	stw	fp,12(sp)
 80062f8:	df000304 	addi	fp,sp,12
 80062fc:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8006300:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006304:	e0bfff17 	ldw	r2,-4(fp)
 8006308:	1000021e 	bne	r2,zero,8006314 <uxTaskPriorityGet+0x28>
 800630c:	d0a89d17 	ldw	r2,-23948(gp)
 8006310:	00000106 	br	8006318 <uxTaskPriorityGet+0x2c>
 8006314:	e0bfff17 	ldw	r2,-4(fp)
 8006318:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 800631c:	e0bffd17 	ldw	r2,-12(fp)
 8006320:	10800b17 	ldw	r2,44(r2)
 8006324:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 8006328:	800796c0 	call	800796c <vTaskExitCritical>

		return uxReturn;
 800632c:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006330:	e037883a 	mov	sp,fp
 8006334:	dfc00117 	ldw	ra,4(sp)
 8006338:	df000017 	ldw	fp,0(sp)
 800633c:	dec00204 	addi	sp,sp,8
 8006340:	f800283a 	ret

08006344 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8006344:	defffb04 	addi	sp,sp,-20
 8006348:	df000415 	stw	fp,16(sp)
 800634c:	df000404 	addi	fp,sp,16
 8006350:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8006354:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006358:	e0bfff17 	ldw	r2,-4(fp)
 800635c:	1000021e 	bne	r2,zero,8006368 <uxTaskPriorityGetFromISR+0x24>
 8006360:	d0a89d17 	ldw	r2,-23948(gp)
 8006364:	00000106 	br	800636c <uxTaskPriorityGetFromISR+0x28>
 8006368:	e0bfff17 	ldw	r2,-4(fp)
 800636c:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 8006370:	e0bffd17 	ldw	r2,-12(fp)
 8006374:	10800b17 	ldw	r2,44(r2)
 8006378:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 800637c:	e0bffe17 	ldw	r2,-8(fp)
	}
 8006380:	e037883a 	mov	sp,fp
 8006384:	df000017 	ldw	fp,0(sp)
 8006388:	dec00104 	addi	sp,sp,4
 800638c:	f800283a 	ret

08006390 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006390:	defff704 	addi	sp,sp,-36
 8006394:	dfc00815 	stw	ra,32(sp)
 8006398:	df000715 	stw	fp,28(sp)
 800639c:	dc000615 	stw	r16,24(sp)
 80063a0:	df000704 	addi	fp,sp,28
 80063a4:	e13ffd15 	stw	r4,-12(fp)
 80063a8:	e17ffe15 	stw	r5,-8(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80063ac:	e03ff915 	stw	zero,-28(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063b0:	e0bffe17 	ldw	r2,-8(fp)
 80063b4:	10800170 	cmpltui	r2,r2,5
 80063b8:	1000021e 	bne	r2,zero,80063c4 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063bc:	00800104 	movi	r2,4
 80063c0:	e0bffe15 	stw	r2,-8(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80063c4:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80063c8:	e0bffd17 	ldw	r2,-12(fp)
 80063cc:	1000021e 	bne	r2,zero,80063d8 <vTaskPrioritySet+0x48>
 80063d0:	d0a89d17 	ldw	r2,-23948(gp)
 80063d4:	00000106 	br	80063dc <vTaskPrioritySet+0x4c>
 80063d8:	e0bffd17 	ldw	r2,-12(fp)
 80063dc:	e0bffa15 	stw	r2,-24(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80063e0:	e0bffa17 	ldw	r2,-24(fp)
 80063e4:	10801017 	ldw	r2,64(r2)
 80063e8:	e0bffb15 	stw	r2,-20(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80063ec:	e0fffb17 	ldw	r3,-20(fp)
 80063f0:	e0bffe17 	ldw	r2,-8(fp)
 80063f4:	18804e26 	beq	r3,r2,8006530 <vTaskPrioritySet+0x1a0>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80063f8:	e0bffe17 	ldw	r2,-8(fp)
 80063fc:	e0fffb17 	ldw	r3,-20(fp)
 8006400:	18800a2e 	bgeu	r3,r2,800642c <vTaskPrioritySet+0x9c>
				{
					if( pxTCB != pxCurrentTCB )
 8006404:	d0a89d17 	ldw	r2,-23948(gp)
 8006408:	e0fffa17 	ldw	r3,-24(fp)
 800640c:	18800c26 	beq	r3,r2,8006440 <vTaskPrioritySet+0xb0>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006410:	d0a89d17 	ldw	r2,-23948(gp)
 8006414:	10800b17 	ldw	r2,44(r2)
 8006418:	e0fffe17 	ldw	r3,-8(fp)
 800641c:	18800836 	bltu	r3,r2,8006440 <vTaskPrioritySet+0xb0>
						{
							xYieldRequired = pdTRUE;
 8006420:	00800044 	movi	r2,1
 8006424:	e0bff915 	stw	r2,-28(fp)
 8006428:	00000506 	br	8006440 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800642c:	d0a89d17 	ldw	r2,-23948(gp)
 8006430:	e0fffa17 	ldw	r3,-24(fp)
 8006434:	1880021e 	bne	r3,r2,8006440 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006438:	00800044 	movi	r2,1
 800643c:	e0bff915 	stw	r2,-28(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006440:	e0bffa17 	ldw	r2,-24(fp)
 8006444:	10800b17 	ldw	r2,44(r2)
 8006448:	e0bffc15 	stw	r2,-16(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800644c:	e0bffa17 	ldw	r2,-24(fp)
 8006450:	10c01017 	ldw	r3,64(r2)
 8006454:	e0bffa17 	ldw	r2,-24(fp)
 8006458:	10800b17 	ldw	r2,44(r2)
 800645c:	1880031e 	bne	r3,r2,800646c <vTaskPrioritySet+0xdc>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006460:	e0bffa17 	ldw	r2,-24(fp)
 8006464:	e0fffe17 	ldw	r3,-8(fp)
 8006468:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800646c:	e0bffa17 	ldw	r2,-24(fp)
 8006470:	e0fffe17 	ldw	r3,-8(fp)
 8006474:	10c01015 	stw	r3,64(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006478:	e0bffa17 	ldw	r2,-24(fp)
 800647c:	10800617 	ldw	r2,24(r2)
 8006480:	10000516 	blt	r2,zero,8006498 <vTaskPrioritySet+0x108>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006484:	00c00144 	movi	r3,5
 8006488:	e0bffe17 	ldw	r2,-8(fp)
 800648c:	1887c83a 	sub	r3,r3,r2
 8006490:	e0bffa17 	ldw	r2,-24(fp)
 8006494:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006498:	e0bffa17 	ldw	r2,-24(fp)
 800649c:	14000517 	ldw	r16,20(r2)
 80064a0:	01400504 	movi	r5,20
 80064a4:	e13ffc17 	ldw	r4,-16(fp)
 80064a8:	80087fc0 	call	80087fc <__mulsi3>
 80064ac:	1007883a 	mov	r3,r2
 80064b0:	008220b4 	movhi	r2,2178
 80064b4:	10bc7a04 	addi	r2,r2,-3608
 80064b8:	1885883a 	add	r2,r3,r2
 80064bc:	8080191e 	bne	r16,r2,8006524 <vTaskPrioritySet+0x194>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c0:	e0bffa17 	ldw	r2,-24(fp)
 80064c4:	10800104 	addi	r2,r2,4
 80064c8:	1009883a 	mov	r4,r2
 80064cc:	8003e0c0 	call	8003e0c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80064d0:	e0bffa17 	ldw	r2,-24(fp)
 80064d4:	10800b17 	ldw	r2,44(r2)
 80064d8:	d0e8a317 	ldw	r3,-23924(gp)
 80064dc:	1880032e 	bgeu	r3,r2,80064ec <vTaskPrioritySet+0x15c>
 80064e0:	e0bffa17 	ldw	r2,-24(fp)
 80064e4:	10800b17 	ldw	r2,44(r2)
 80064e8:	d0a8a315 	stw	r2,-23924(gp)
 80064ec:	e0bffa17 	ldw	r2,-24(fp)
 80064f0:	10800b17 	ldw	r2,44(r2)
 80064f4:	01400504 	movi	r5,20
 80064f8:	1009883a 	mov	r4,r2
 80064fc:	80087fc0 	call	80087fc <__mulsi3>
 8006500:	1007883a 	mov	r3,r2
 8006504:	008220b4 	movhi	r2,2178
 8006508:	10bc7a04 	addi	r2,r2,-3608
 800650c:	1887883a 	add	r3,r3,r2
 8006510:	e0bffa17 	ldw	r2,-24(fp)
 8006514:	10800104 	addi	r2,r2,4
 8006518:	100b883a 	mov	r5,r2
 800651c:	1809883a 	mov	r4,r3
 8006520:	8003ca80 	call	8003ca8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006524:	e0bff917 	ldw	r2,-28(fp)
 8006528:	10000126 	beq	r2,zero,8006530 <vTaskPrioritySet+0x1a0>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800652c:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006530:	800796c0 	call	800796c <vTaskExitCritical>
	}
 8006534:	0001883a 	nop
 8006538:	e6ffff04 	addi	sp,fp,-4
 800653c:	dfc00217 	ldw	ra,8(sp)
 8006540:	df000117 	ldw	fp,4(sp)
 8006544:	dc000017 	ldw	r16,0(sp)
 8006548:	dec00304 	addi	sp,sp,12
 800654c:	f800283a 	ret

08006550 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006550:	defffc04 	addi	sp,sp,-16
 8006554:	dfc00315 	stw	ra,12(sp)
 8006558:	df000215 	stw	fp,8(sp)
 800655c:	df000204 	addi	fp,sp,8
 8006560:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006564:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006568:	e0bfff17 	ldw	r2,-4(fp)
 800656c:	1000021e 	bne	r2,zero,8006578 <vTaskSuspend+0x28>
 8006570:	d0a89d17 	ldw	r2,-23948(gp)
 8006574:	00000106 	br	800657c <vTaskSuspend+0x2c>
 8006578:	e0bfff17 	ldw	r2,-4(fp)
 800657c:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006580:	e0bffe17 	ldw	r2,-8(fp)
 8006584:	10800104 	addi	r2,r2,4
 8006588:	1009883a 	mov	r4,r2
 800658c:	8003e0c0 	call	8003e0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006590:	e0bffe17 	ldw	r2,-8(fp)
 8006594:	10800a17 	ldw	r2,40(r2)
 8006598:	10000426 	beq	r2,zero,80065ac <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800659c:	e0bffe17 	ldw	r2,-8(fp)
 80065a0:	10800604 	addi	r2,r2,24
 80065a4:	1009883a 	mov	r4,r2
 80065a8:	8003e0c0 	call	8003e0c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80065ac:	e0bffe17 	ldw	r2,-8(fp)
 80065b0:	10800104 	addi	r2,r2,4
 80065b4:	100b883a 	mov	r5,r2
 80065b8:	010220b4 	movhi	r4,2178
 80065bc:	213ca704 	addi	r4,r4,-3428
 80065c0:	8003ca80 	call	8003ca8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80065c4:	e0bffe17 	ldw	r2,-8(fp)
 80065c8:	10801303 	ldbu	r2,76(r2)
 80065cc:	10803fcc 	andi	r2,r2,255
 80065d0:	10800058 	cmpnei	r2,r2,1
 80065d4:	1000021e 	bne	r2,zero,80065e0 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065d8:	e0bffe17 	ldw	r2,-8(fp)
 80065dc:	10001305 	stb	zero,76(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80065e0:	800796c0 	call	800796c <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80065e4:	d0a8a417 	ldw	r2,-23920(gp)
 80065e8:	10000326 	beq	r2,zero,80065f8 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80065ec:	80079180 	call	8007918 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80065f0:	80074d80 	call	80074d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80065f4:	800796c0 	call	800796c <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80065f8:	d0a89d17 	ldw	r2,-23948(gp)
 80065fc:	e0fffe17 	ldw	r3,-8(fp)
 8006600:	18800c1e 	bne	r3,r2,8006634 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 8006604:	d0a8a417 	ldw	r2,-23920(gp)
 8006608:	10000226 	beq	r2,zero,8006614 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 800660c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006610:	00000806 	br	8006634 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006614:	008220b4 	movhi	r2,2178
 8006618:	10bca704 	addi	r2,r2,-3428
 800661c:	10c00017 	ldw	r3,0(r2)
 8006620:	d0a8a117 	ldw	r2,-23932(gp)
 8006624:	1880021e 	bne	r3,r2,8006630 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8006628:	d0289d15 	stw	zero,-23948(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800662c:	00000106 	br	8006634 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 8006630:	8006d640 	call	8006d64 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006634:	0001883a 	nop
 8006638:	e037883a 	mov	sp,fp
 800663c:	dfc00117 	ldw	ra,4(sp)
 8006640:	df000017 	ldw	fp,0(sp)
 8006644:	dec00204 	addi	sp,sp,8
 8006648:	f800283a 	ret

0800664c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800664c:	defffc04 	addi	sp,sp,-16
 8006650:	df000315 	stw	fp,12(sp)
 8006654:	df000304 	addi	fp,sp,12
 8006658:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 800665c:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 8006660:	e0bfff17 	ldw	r2,-4(fp)
 8006664:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006668:	e0bffe17 	ldw	r2,-8(fp)
 800666c:	10c00517 	ldw	r3,20(r2)
 8006670:	008220b4 	movhi	r2,2178
 8006674:	10bca704 	addi	r2,r2,-3428
 8006678:	18800a1e 	bne	r3,r2,80066a4 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800667c:	e0bffe17 	ldw	r2,-8(fp)
 8006680:	10c00a17 	ldw	r3,40(r2)
 8006684:	008220b4 	movhi	r2,2178
 8006688:	10bc9d04 	addi	r2,r2,-3468
 800668c:	18800526 	beq	r3,r2,80066a4 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006690:	e0bffe17 	ldw	r2,-8(fp)
 8006694:	10800a17 	ldw	r2,40(r2)
 8006698:	1000021e 	bne	r2,zero,80066a4 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 800669c:	00800044 	movi	r2,1
 80066a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a4:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80066a8:	e037883a 	mov	sp,fp
 80066ac:	df000017 	ldw	fp,0(sp)
 80066b0:	dec00104 	addi	sp,sp,4
 80066b4:	f800283a 	ret

080066b8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80066b8:	defffc04 	addi	sp,sp,-16
 80066bc:	dfc00315 	stw	ra,12(sp)
 80066c0:	df000215 	stw	fp,8(sp)
 80066c4:	df000204 	addi	fp,sp,8
 80066c8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80066cc:	e0bfff17 	ldw	r2,-4(fp)
 80066d0:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80066d4:	d0a89d17 	ldw	r2,-23948(gp)
 80066d8:	e0fffe17 	ldw	r3,-8(fp)
 80066dc:	18802626 	beq	r3,r2,8006778 <vTaskResume+0xc0>
 80066e0:	e0bffe17 	ldw	r2,-8(fp)
 80066e4:	10002426 	beq	r2,zero,8006778 <vTaskResume+0xc0>
		{
			taskENTER_CRITICAL();
 80066e8:	80079180 	call	8007918 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80066ec:	e13ffe17 	ldw	r4,-8(fp)
 80066f0:	800664c0 	call	800664c <prvTaskIsTaskSuspended>
 80066f4:	10001f26 	beq	r2,zero,8006774 <vTaskResume+0xbc>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80066f8:	e0bffe17 	ldw	r2,-8(fp)
 80066fc:	10800104 	addi	r2,r2,4
 8006700:	1009883a 	mov	r4,r2
 8006704:	8003e0c0 	call	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006708:	e0bffe17 	ldw	r2,-8(fp)
 800670c:	10800b17 	ldw	r2,44(r2)
 8006710:	d0e8a317 	ldw	r3,-23924(gp)
 8006714:	1880032e 	bgeu	r3,r2,8006724 <vTaskResume+0x6c>
 8006718:	e0bffe17 	ldw	r2,-8(fp)
 800671c:	10800b17 	ldw	r2,44(r2)
 8006720:	d0a8a315 	stw	r2,-23924(gp)
 8006724:	e0bffe17 	ldw	r2,-8(fp)
 8006728:	10800b17 	ldw	r2,44(r2)
 800672c:	01400504 	movi	r5,20
 8006730:	1009883a 	mov	r4,r2
 8006734:	80087fc0 	call	80087fc <__mulsi3>
 8006738:	1007883a 	mov	r3,r2
 800673c:	008220b4 	movhi	r2,2178
 8006740:	10bc7a04 	addi	r2,r2,-3608
 8006744:	1887883a 	add	r3,r3,r2
 8006748:	e0bffe17 	ldw	r2,-8(fp)
 800674c:	10800104 	addi	r2,r2,4
 8006750:	100b883a 	mov	r5,r2
 8006754:	1809883a 	mov	r4,r3
 8006758:	8003ca80 	call	8003ca8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800675c:	e0bffe17 	ldw	r2,-8(fp)
 8006760:	10c00b17 	ldw	r3,44(r2)
 8006764:	d0a89d17 	ldw	r2,-23948(gp)
 8006768:	10800b17 	ldw	r2,44(r2)
 800676c:	18800136 	bltu	r3,r2,8006774 <vTaskResume+0xbc>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006770:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006774:	800796c0 	call	800796c <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006778:	0001883a 	nop
 800677c:	e037883a 	mov	sp,fp
 8006780:	dfc00117 	ldw	ra,4(sp)
 8006784:	df000017 	ldw	fp,0(sp)
 8006788:	dec00204 	addi	sp,sp,8
 800678c:	f800283a 	ret

08006790 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006790:	defffa04 	addi	sp,sp,-24
 8006794:	dfc00515 	stw	ra,20(sp)
 8006798:	df000415 	stw	fp,16(sp)
 800679c:	df000404 	addi	fp,sp,16
 80067a0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 80067a4:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 80067a8:	e0bfff17 	ldw	r2,-4(fp)
 80067ac:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b0:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80067b4:	e13ffd17 	ldw	r4,-12(fp)
 80067b8:	800664c0 	call	800664c <prvTaskIsTaskSuspended>
 80067bc:	10002926 	beq	r2,zero,8006864 <xTaskResumeFromISR+0xd4>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c0:	d0a8ab17 	ldw	r2,-23892(gp)
 80067c4:	1000211e 	bne	r2,zero,800684c <xTaskResumeFromISR+0xbc>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067c8:	e0bffd17 	ldw	r2,-12(fp)
 80067cc:	10c00b17 	ldw	r3,44(r2)
 80067d0:	d0a89d17 	ldw	r2,-23948(gp)
 80067d4:	10800b17 	ldw	r2,44(r2)
 80067d8:	18800236 	bltu	r3,r2,80067e4 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 80067dc:	00800044 	movi	r2,1
 80067e0:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e4:	e0bffd17 	ldw	r2,-12(fp)
 80067e8:	10800104 	addi	r2,r2,4
 80067ec:	1009883a 	mov	r4,r2
 80067f0:	8003e0c0 	call	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067f4:	e0bffd17 	ldw	r2,-12(fp)
 80067f8:	10800b17 	ldw	r2,44(r2)
 80067fc:	d0e8a317 	ldw	r3,-23924(gp)
 8006800:	1880032e 	bgeu	r3,r2,8006810 <xTaskResumeFromISR+0x80>
 8006804:	e0bffd17 	ldw	r2,-12(fp)
 8006808:	10800b17 	ldw	r2,44(r2)
 800680c:	d0a8a315 	stw	r2,-23924(gp)
 8006810:	e0bffd17 	ldw	r2,-12(fp)
 8006814:	10800b17 	ldw	r2,44(r2)
 8006818:	01400504 	movi	r5,20
 800681c:	1009883a 	mov	r4,r2
 8006820:	80087fc0 	call	80087fc <__mulsi3>
 8006824:	1007883a 	mov	r3,r2
 8006828:	008220b4 	movhi	r2,2178
 800682c:	10bc7a04 	addi	r2,r2,-3608
 8006830:	1887883a 	add	r3,r3,r2
 8006834:	e0bffd17 	ldw	r2,-12(fp)
 8006838:	10800104 	addi	r2,r2,4
 800683c:	100b883a 	mov	r5,r2
 8006840:	1809883a 	mov	r4,r3
 8006844:	8003ca80 	call	8003ca8 <vListInsertEnd>
 8006848:	00000606 	br	8006864 <xTaskResumeFromISR+0xd4>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800684c:	e0bffd17 	ldw	r2,-12(fp)
 8006850:	10800604 	addi	r2,r2,24
 8006854:	100b883a 	mov	r5,r2
 8006858:	010220b4 	movhi	r4,2178
 800685c:	213c9d04 	addi	r4,r4,-3468
 8006860:	8003ca80 	call	8003ca8 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006864:	e0bffc17 	ldw	r2,-16(fp)
	}
 8006868:	e037883a 	mov	sp,fp
 800686c:	dfc00117 	ldw	ra,4(sp)
 8006870:	df000017 	ldw	fp,0(sp)
 8006874:	dec00204 	addi	sp,sp,8
 8006878:	f800283a 	ret

0800687c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800687c:	defffa04 	addi	sp,sp,-24
 8006880:	dfc00515 	stw	ra,20(sp)
 8006884:	df000415 	stw	fp,16(sp)
 8006888:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800688c:	d0a8aa04 	addi	r2,gp,-23896
 8006890:	d8800115 	stw	r2,4(sp)
 8006894:	d8000015 	stw	zero,0(sp)
 8006898:	000f883a 	mov	r7,zero
 800689c:	01810004 	movi	r6,1024
 80068a0:	014200b4 	movhi	r5,2050
 80068a4:	2968c004 	addi	r5,r5,-23808
 80068a8:	01020034 	movhi	r4,2048
 80068ac:	211c9d04 	addi	r4,r4,29300
 80068b0:	8005ce40 	call	8005ce4 <xTaskCreate>
 80068b4:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068b8:	e0bffe17 	ldw	r2,-8(fp)
 80068bc:	10800058 	cmpnei	r2,r2,1
 80068c0:	10000c1e 	bne	r2,zero,80068f4 <vTaskStartScheduler+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80068c4:	0005303a 	rdctl	r2,status
 80068c8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80068cc:	e0ffff17 	ldw	r3,-4(fp)
 80068d0:	00bfff84 	movi	r2,-2
 80068d4:	1884703a 	and	r2,r3,r2
 80068d8:	1001703a 	wrctl	status,r2
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068dc:	00bfffc4 	movi	r2,-1
 80068e0:	d0a8a915 	stw	r2,-23900(gp)
		xSchedulerRunning = pdTRUE;
 80068e4:	00800044 	movi	r2,1
 80068e8:	d0a8a415 	stw	r2,-23920(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068ec:	d028a215 	stw	zero,-23928(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068f0:	8003fac0 	call	8003fac <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068f4:	0001883a 	nop
 80068f8:	e037883a 	mov	sp,fp
 80068fc:	dfc00117 	ldw	ra,4(sp)
 8006900:	df000017 	ldw	fp,0(sp)
 8006904:	dec00204 	addi	sp,sp,8
 8006908:	f800283a 	ret

0800690c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 800690c:	defffd04 	addi	sp,sp,-12
 8006910:	dfc00215 	stw	ra,8(sp)
 8006914:	df000115 	stw	fp,4(sp)
 8006918:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800691c:	0005303a 	rdctl	r2,status
 8006920:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006924:	e0ffff17 	ldw	r3,-4(fp)
 8006928:	00bfff84 	movi	r2,-2
 800692c:	1884703a 	and	r2,r3,r2
 8006930:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8006934:	d028a415 	stw	zero,-23920(gp)
	vPortEndScheduler();
 8006938:	8003fe40 	call	8003fe4 <vPortEndScheduler>
}
 800693c:	0001883a 	nop
 8006940:	e037883a 	mov	sp,fp
 8006944:	dfc00117 	ldw	ra,4(sp)
 8006948:	df000017 	ldw	fp,0(sp)
 800694c:	dec00204 	addi	sp,sp,8
 8006950:	f800283a 	ret

08006954 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006954:	deffff04 	addi	sp,sp,-4
 8006958:	df000015 	stw	fp,0(sp)
 800695c:	d839883a 	mov	fp,sp
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006960:	d0a8ab17 	ldw	r2,-23892(gp)
 8006964:	10800044 	addi	r2,r2,1
 8006968:	d0a8ab15 	stw	r2,-23892(gp)
	portMEMORY_BARRIER();
}
 800696c:	0001883a 	nop
 8006970:	e037883a 	mov	sp,fp
 8006974:	df000017 	ldw	fp,0(sp)
 8006978:	dec00104 	addi	sp,sp,4
 800697c:	f800283a 	ret

08006980 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006980:	defffb04 	addi	sp,sp,-20
 8006984:	dfc00415 	stw	ra,16(sp)
 8006988:	df000315 	stw	fp,12(sp)
 800698c:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 8006990:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 8006994:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006998:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 800699c:	d0a8ab17 	ldw	r2,-23892(gp)
 80069a0:	10bfffc4 	addi	r2,r2,-1
 80069a4:	d0a8ab15 	stw	r2,-23892(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a8:	d0a8ab17 	ldw	r2,-23892(gp)
 80069ac:	1000461e 	bne	r2,zero,8006ac8 <xTaskResumeAll+0x148>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b0:	d0a8a117 	ldw	r2,-23932(gp)
 80069b4:	10004426 	beq	r2,zero,8006ac8 <xTaskResumeAll+0x148>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069b8:	00002906 	br	8006a60 <xTaskResumeAll+0xe0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069bc:	008220b4 	movhi	r2,2178
 80069c0:	10bc9d04 	addi	r2,r2,-3468
 80069c4:	10800317 	ldw	r2,12(r2)
 80069c8:	10800317 	ldw	r2,12(r2)
 80069cc:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069d0:	e0bffd17 	ldw	r2,-12(fp)
 80069d4:	10800604 	addi	r2,r2,24
 80069d8:	1009883a 	mov	r4,r2
 80069dc:	8003e0c0 	call	8003e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e0:	e0bffd17 	ldw	r2,-12(fp)
 80069e4:	10800104 	addi	r2,r2,4
 80069e8:	1009883a 	mov	r4,r2
 80069ec:	8003e0c0 	call	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069f0:	e0bffd17 	ldw	r2,-12(fp)
 80069f4:	10800b17 	ldw	r2,44(r2)
 80069f8:	d0e8a317 	ldw	r3,-23924(gp)
 80069fc:	1880032e 	bgeu	r3,r2,8006a0c <xTaskResumeAll+0x8c>
 8006a00:	e0bffd17 	ldw	r2,-12(fp)
 8006a04:	10800b17 	ldw	r2,44(r2)
 8006a08:	d0a8a315 	stw	r2,-23924(gp)
 8006a0c:	e0bffd17 	ldw	r2,-12(fp)
 8006a10:	10800b17 	ldw	r2,44(r2)
 8006a14:	01400504 	movi	r5,20
 8006a18:	1009883a 	mov	r4,r2
 8006a1c:	80087fc0 	call	80087fc <__mulsi3>
 8006a20:	1007883a 	mov	r3,r2
 8006a24:	008220b4 	movhi	r2,2178
 8006a28:	10bc7a04 	addi	r2,r2,-3608
 8006a2c:	1887883a 	add	r3,r3,r2
 8006a30:	e0bffd17 	ldw	r2,-12(fp)
 8006a34:	10800104 	addi	r2,r2,4
 8006a38:	100b883a 	mov	r5,r2
 8006a3c:	1809883a 	mov	r4,r3
 8006a40:	8003ca80 	call	8003ca8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a44:	e0bffd17 	ldw	r2,-12(fp)
 8006a48:	10c00b17 	ldw	r3,44(r2)
 8006a4c:	d0a89d17 	ldw	r2,-23948(gp)
 8006a50:	10800b17 	ldw	r2,44(r2)
 8006a54:	18800236 	bltu	r3,r2,8006a60 <xTaskResumeAll+0xe0>
					{
						xYieldPending = pdTRUE;
 8006a58:	00800044 	movi	r2,1
 8006a5c:	d0a8a615 	stw	r2,-23912(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a60:	008220b4 	movhi	r2,2178
 8006a64:	10bc9d04 	addi	r2,r2,-3468
 8006a68:	10800017 	ldw	r2,0(r2)
 8006a6c:	103fd31e 	bne	r2,zero,80069bc <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a70:	e0bffd17 	ldw	r2,-12(fp)
 8006a74:	10000126 	beq	r2,zero,8006a7c <xTaskResumeAll+0xfc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a78:	80074d80 	call	80074d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a7c:	d0a8a517 	ldw	r2,-23916(gp)
 8006a80:	e0bfff15 	stw	r2,-4(fp)

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a84:	e0bfff17 	ldw	r2,-4(fp)
 8006a88:	10000a26 	beq	r2,zero,8006ab4 <xTaskResumeAll+0x134>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a8c:	8006b980 	call	8006b98 <xTaskIncrementTick>
 8006a90:	10000226 	beq	r2,zero,8006a9c <xTaskResumeAll+0x11c>
							{
								xYieldPending = pdTRUE;
 8006a94:	00800044 	movi	r2,1
 8006a98:	d0a8a615 	stw	r2,-23912(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a9c:	e0bfff17 	ldw	r2,-4(fp)
 8006aa0:	10bfffc4 	addi	r2,r2,-1
 8006aa4:	e0bfff15 	stw	r2,-4(fp)
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006aa8:	e0bfff17 	ldw	r2,-4(fp)
 8006aac:	103ff71e 	bne	r2,zero,8006a8c <xTaskResumeAll+0x10c>

						uxPendedTicks = 0;
 8006ab0:	d028a515 	stw	zero,-23916(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ab4:	d0a8a617 	ldw	r2,-23912(gp)
 8006ab8:	10000326 	beq	r2,zero,8006ac8 <xTaskResumeAll+0x148>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006abc:	00800044 	movi	r2,1
 8006ac0:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ac4:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac8:	800796c0 	call	800796c <vTaskExitCritical>

	return xAlreadyYielded;
 8006acc:	e0bffe17 	ldw	r2,-8(fp)
}
 8006ad0:	e037883a 	mov	sp,fp
 8006ad4:	dfc00117 	ldw	ra,4(sp)
 8006ad8:	df000017 	ldw	fp,0(sp)
 8006adc:	dec00204 	addi	sp,sp,8
 8006ae0:	f800283a 	ret

08006ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ae4:	defffe04 	addi	sp,sp,-8
 8006ae8:	df000115 	stw	fp,4(sp)
 8006aec:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006af0:	d0a8a217 	ldw	r2,-23928(gp)
 8006af4:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006af8:	e0bfff17 	ldw	r2,-4(fp)
}
 8006afc:	e037883a 	mov	sp,fp
 8006b00:	df000017 	ldw	fp,0(sp)
 8006b04:	dec00104 	addi	sp,sp,4
 8006b08:	f800283a 	ret

08006b0c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006b0c:	defffd04 	addi	sp,sp,-12
 8006b10:	df000215 	stw	fp,8(sp)
 8006b14:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006b18:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 8006b1c:	d0a8a217 	ldw	r2,-23928(gp)
 8006b20:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b24:	e0bfff17 	ldw	r2,-4(fp)
}
 8006b28:	e037883a 	mov	sp,fp
 8006b2c:	df000017 	ldw	fp,0(sp)
 8006b30:	dec00104 	addi	sp,sp,4
 8006b34:	f800283a 	ret

08006b38 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006b38:	deffff04 	addi	sp,sp,-4
 8006b3c:	df000015 	stw	fp,0(sp)
 8006b40:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8006b44:	d0a8a117 	ldw	r2,-23932(gp)
}
 8006b48:	e037883a 	mov	sp,fp
 8006b4c:	df000017 	ldw	fp,0(sp)
 8006b50:	dec00104 	addi	sp,sp,4
 8006b54:	f800283a 	ret

08006b58 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006b58:	defffd04 	addi	sp,sp,-12
 8006b5c:	df000215 	stw	fp,8(sp)
 8006b60:	df000204 	addi	fp,sp,8
 8006b64:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006b68:	e0bfff17 	ldw	r2,-4(fp)
 8006b6c:	1000021e 	bne	r2,zero,8006b78 <pcTaskGetName+0x20>
 8006b70:	d0a89d17 	ldw	r2,-23948(gp)
 8006b74:	00000106 	br	8006b7c <pcTaskGetName+0x24>
 8006b78:	e0bfff17 	ldw	r2,-4(fp)
 8006b7c:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 8006b80:	e0bffe17 	ldw	r2,-8(fp)
 8006b84:	10800d04 	addi	r2,r2,52
}
 8006b88:	e037883a 	mov	sp,fp
 8006b8c:	df000017 	ldw	fp,0(sp)
 8006b90:	dec00104 	addi	sp,sp,4
 8006b94:	f800283a 	ret

08006b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b98:	defff804 	addi	sp,sp,-32
 8006b9c:	dfc00715 	stw	ra,28(sp)
 8006ba0:	df000615 	stw	fp,24(sp)
 8006ba4:	dc000515 	stw	r16,20(sp)
 8006ba8:	df000604 	addi	fp,sp,24
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bac:	e03ffa15 	stw	zero,-24(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb0:	d0a8ab17 	ldw	r2,-23892(gp)
 8006bb4:	10005d1e 	bne	r2,zero,8006d2c <xTaskIncrementTick+0x194>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bb8:	d0a8a217 	ldw	r2,-23928(gp)
 8006bbc:	10800044 	addi	r2,r2,1
 8006bc0:	e0bffb15 	stw	r2,-20(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bc4:	e0bffb17 	ldw	r2,-20(fp)
 8006bc8:	d0a8a215 	stw	r2,-23928(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bcc:	e0bffb17 	ldw	r2,-20(fp)
 8006bd0:	10000a1e 	bne	r2,zero,8006bfc <xTaskIncrementTick+0x64>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd4:	d0a89e17 	ldw	r2,-23944(gp)
 8006bd8:	e0bffc15 	stw	r2,-16(fp)
 8006bdc:	d0a89f17 	ldw	r2,-23940(gp)
 8006be0:	d0a89e15 	stw	r2,-23944(gp)
 8006be4:	e0bffc17 	ldw	r2,-16(fp)
 8006be8:	d0a89f15 	stw	r2,-23940(gp)
 8006bec:	d0a8a717 	ldw	r2,-23908(gp)
 8006bf0:	10800044 	addi	r2,r2,1
 8006bf4:	d0a8a715 	stw	r2,-23908(gp)
 8006bf8:	80074d80 	call	80074d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bfc:	d0a8a917 	ldw	r2,-23900(gp)
 8006c00:	e0fffb17 	ldw	r3,-20(fp)
 8006c04:	18803b36 	bltu	r3,r2,8006cf4 <xTaskIncrementTick+0x15c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c08:	d0a89e17 	ldw	r2,-23944(gp)
 8006c0c:	10800017 	ldw	r2,0(r2)
 8006c10:	1000031e 	bne	r2,zero,8006c20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c14:	00bfffc4 	movi	r2,-1
 8006c18:	d0a8a915 	stw	r2,-23900(gp)
					break;
 8006c1c:	00003506 	br	8006cf4 <xTaskIncrementTick+0x15c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c20:	d0a89e17 	ldw	r2,-23944(gp)
 8006c24:	10800317 	ldw	r2,12(r2)
 8006c28:	10800317 	ldw	r2,12(r2)
 8006c2c:	e0bffd15 	stw	r2,-12(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c30:	e0bffd17 	ldw	r2,-12(fp)
 8006c34:	10800117 	ldw	r2,4(r2)
 8006c38:	e0bffe15 	stw	r2,-8(fp)

					if( xConstTickCount < xItemValue )
 8006c3c:	e0fffb17 	ldw	r3,-20(fp)
 8006c40:	e0bffe17 	ldw	r2,-8(fp)
 8006c44:	1880032e 	bgeu	r3,r2,8006c54 <xTaskIncrementTick+0xbc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c48:	e0bffe17 	ldw	r2,-8(fp)
 8006c4c:	d0a8a915 	stw	r2,-23900(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c50:	00002806 	br	8006cf4 <xTaskIncrementTick+0x15c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	e0bffd17 	ldw	r2,-12(fp)
 8006c58:	10800104 	addi	r2,r2,4
 8006c5c:	1009883a 	mov	r4,r2
 8006c60:	8003e0c0 	call	8003e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c64:	e0bffd17 	ldw	r2,-12(fp)
 8006c68:	10800a17 	ldw	r2,40(r2)
 8006c6c:	10000426 	beq	r2,zero,8006c80 <xTaskIncrementTick+0xe8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c70:	e0bffd17 	ldw	r2,-12(fp)
 8006c74:	10800604 	addi	r2,r2,24
 8006c78:	1009883a 	mov	r4,r2
 8006c7c:	8003e0c0 	call	8003e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c80:	e0bffd17 	ldw	r2,-12(fp)
 8006c84:	10800b17 	ldw	r2,44(r2)
 8006c88:	d0e8a317 	ldw	r3,-23924(gp)
 8006c8c:	1880032e 	bgeu	r3,r2,8006c9c <xTaskIncrementTick+0x104>
 8006c90:	e0bffd17 	ldw	r2,-12(fp)
 8006c94:	10800b17 	ldw	r2,44(r2)
 8006c98:	d0a8a315 	stw	r2,-23924(gp)
 8006c9c:	e0bffd17 	ldw	r2,-12(fp)
 8006ca0:	10800b17 	ldw	r2,44(r2)
 8006ca4:	01400504 	movi	r5,20
 8006ca8:	1009883a 	mov	r4,r2
 8006cac:	80087fc0 	call	80087fc <__mulsi3>
 8006cb0:	1007883a 	mov	r3,r2
 8006cb4:	008220b4 	movhi	r2,2178
 8006cb8:	10bc7a04 	addi	r2,r2,-3608
 8006cbc:	1887883a 	add	r3,r3,r2
 8006cc0:	e0bffd17 	ldw	r2,-12(fp)
 8006cc4:	10800104 	addi	r2,r2,4
 8006cc8:	100b883a 	mov	r5,r2
 8006ccc:	1809883a 	mov	r4,r3
 8006cd0:	8003ca80 	call	8003ca8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cd4:	e0bffd17 	ldw	r2,-12(fp)
 8006cd8:	10c00b17 	ldw	r3,44(r2)
 8006cdc:	d0a89d17 	ldw	r2,-23948(gp)
 8006ce0:	10800b17 	ldw	r2,44(r2)
 8006ce4:	18bfc836 	bltu	r3,r2,8006c08 <xTaskIncrementTick+0x70>
						{
							xSwitchRequired = pdTRUE;
 8006ce8:	00800044 	movi	r2,1
 8006cec:	e0bffa15 	stw	r2,-24(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8006cf0:	003fc506 	br	8006c08 <xTaskIncrementTick+0x70>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cf4:	d0a89d17 	ldw	r2,-23948(gp)
 8006cf8:	10800b17 	ldw	r2,44(r2)
 8006cfc:	040220b4 	movhi	r16,2178
 8006d00:	843c7a04 	addi	r16,r16,-3608
 8006d04:	01400504 	movi	r5,20
 8006d08:	1009883a 	mov	r4,r2
 8006d0c:	80087fc0 	call	80087fc <__mulsi3>
 8006d10:	8085883a 	add	r2,r16,r2
 8006d14:	10800017 	ldw	r2,0(r2)
 8006d18:	108000b0 	cmpltui	r2,r2,2
 8006d1c:	1000061e 	bne	r2,zero,8006d38 <xTaskIncrementTick+0x1a0>
			{
				xSwitchRequired = pdTRUE;
 8006d20:	00800044 	movi	r2,1
 8006d24:	e0bffa15 	stw	r2,-24(fp)
 8006d28:	00000306 	br	8006d38 <xTaskIncrementTick+0x1a0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d2c:	d0a8a517 	ldw	r2,-23916(gp)
 8006d30:	10800044 	addi	r2,r2,1
 8006d34:	d0a8a515 	stw	r2,-23916(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d38:	d0a8a617 	ldw	r2,-23912(gp)
 8006d3c:	10000226 	beq	r2,zero,8006d48 <xTaskIncrementTick+0x1b0>
		{
			xSwitchRequired = pdTRUE;
 8006d40:	00800044 	movi	r2,1
 8006d44:	e0bffa15 	stw	r2,-24(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d48:	e0bffa17 	ldw	r2,-24(fp)
}
 8006d4c:	e6ffff04 	addi	sp,fp,-4
 8006d50:	dfc00217 	ldw	ra,8(sp)
 8006d54:	df000117 	ldw	fp,4(sp)
 8006d58:	dc000017 	ldw	r16,0(sp)
 8006d5c:	dec00304 	addi	sp,sp,12
 8006d60:	f800283a 	ret

08006d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d64:	defffb04 	addi	sp,sp,-20
 8006d68:	dfc00415 	stw	ra,16(sp)
 8006d6c:	df000315 	stw	fp,12(sp)
 8006d70:	dc000215 	stw	r16,8(sp)
 8006d74:	df000304 	addi	fp,sp,12
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d78:	d0a8ab17 	ldw	r2,-23892(gp)
 8006d7c:	10000326 	beq	r2,zero,8006d8c <vTaskSwitchContext+0x28>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d80:	00800044 	movi	r2,1
 8006d84:	d0a8a615 	stw	r2,-23912(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d88:	00002d06 	br	8006e40 <vTaskSwitchContext+0xdc>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8006d8c:	d028a615 	stw	zero,-23912(gp)
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d90:	d0a8a317 	ldw	r2,-23924(gp)
 8006d94:	e0bffd15 	stw	r2,-12(fp)
 8006d98:	00000306 	br	8006da8 <vTaskSwitchContext+0x44>
 8006d9c:	e0bffd17 	ldw	r2,-12(fp)
 8006da0:	10bfffc4 	addi	r2,r2,-1
 8006da4:	e0bffd15 	stw	r2,-12(fp)
 8006da8:	040220b4 	movhi	r16,2178
 8006dac:	843c7a04 	addi	r16,r16,-3608
 8006db0:	e0bffd17 	ldw	r2,-12(fp)
 8006db4:	01400504 	movi	r5,20
 8006db8:	1009883a 	mov	r4,r2
 8006dbc:	80087fc0 	call	80087fc <__mulsi3>
 8006dc0:	8085883a 	add	r2,r16,r2
 8006dc4:	10800017 	ldw	r2,0(r2)
 8006dc8:	103ff426 	beq	r2,zero,8006d9c <vTaskSwitchContext+0x38>
 8006dcc:	01400504 	movi	r5,20
 8006dd0:	e13ffd17 	ldw	r4,-12(fp)
 8006dd4:	80087fc0 	call	80087fc <__mulsi3>
 8006dd8:	1007883a 	mov	r3,r2
 8006ddc:	008220b4 	movhi	r2,2178
 8006de0:	10bc7a04 	addi	r2,r2,-3608
 8006de4:	1885883a 	add	r2,r3,r2
 8006de8:	e0bffe15 	stw	r2,-8(fp)
 8006dec:	e0bffe17 	ldw	r2,-8(fp)
 8006df0:	10800117 	ldw	r2,4(r2)
 8006df4:	10c00117 	ldw	r3,4(r2)
 8006df8:	e0bffe17 	ldw	r2,-8(fp)
 8006dfc:	10c00115 	stw	r3,4(r2)
 8006e00:	e0bffe17 	ldw	r2,-8(fp)
 8006e04:	10c00117 	ldw	r3,4(r2)
 8006e08:	e0bffe17 	ldw	r2,-8(fp)
 8006e0c:	10800204 	addi	r2,r2,8
 8006e10:	1880051e 	bne	r3,r2,8006e28 <vTaskSwitchContext+0xc4>
 8006e14:	e0bffe17 	ldw	r2,-8(fp)
 8006e18:	10800117 	ldw	r2,4(r2)
 8006e1c:	10c00117 	ldw	r3,4(r2)
 8006e20:	e0bffe17 	ldw	r2,-8(fp)
 8006e24:	10c00115 	stw	r3,4(r2)
 8006e28:	e0bffe17 	ldw	r2,-8(fp)
 8006e2c:	10800117 	ldw	r2,4(r2)
 8006e30:	10800317 	ldw	r2,12(r2)
 8006e34:	d0a89d15 	stw	r2,-23948(gp)
 8006e38:	e0bffd17 	ldw	r2,-12(fp)
 8006e3c:	d0a8a315 	stw	r2,-23924(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e40:	0001883a 	nop
 8006e44:	e6ffff04 	addi	sp,fp,-4
 8006e48:	dfc00217 	ldw	ra,8(sp)
 8006e4c:	df000117 	ldw	fp,4(sp)
 8006e50:	dc000017 	ldw	r16,0(sp)
 8006e54:	dec00304 	addi	sp,sp,12
 8006e58:	f800283a 	ret

08006e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e5c:	defffc04 	addi	sp,sp,-16
 8006e60:	dfc00315 	stw	ra,12(sp)
 8006e64:	df000215 	stw	fp,8(sp)
 8006e68:	df000204 	addi	fp,sp,8
 8006e6c:	e13ffe15 	stw	r4,-8(fp)
 8006e70:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e74:	d0a89d17 	ldw	r2,-23948(gp)
 8006e78:	10800604 	addi	r2,r2,24
 8006e7c:	100b883a 	mov	r5,r2
 8006e80:	e13ffe17 	ldw	r4,-8(fp)
 8006e84:	8003d340 	call	8003d34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e88:	01400044 	movi	r5,1
 8006e8c:	e13fff17 	ldw	r4,-4(fp)
 8006e90:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>
}
 8006e94:	0001883a 	nop
 8006e98:	e037883a 	mov	sp,fp
 8006e9c:	dfc00117 	ldw	ra,4(sp)
 8006ea0:	df000017 	ldw	fp,0(sp)
 8006ea4:	dec00204 	addi	sp,sp,8
 8006ea8:	f800283a 	ret

08006eac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006eac:	defffb04 	addi	sp,sp,-20
 8006eb0:	dfc00415 	stw	ra,16(sp)
 8006eb4:	df000315 	stw	fp,12(sp)
 8006eb8:	df000304 	addi	fp,sp,12
 8006ebc:	e13ffd15 	stw	r4,-12(fp)
 8006ec0:	e17ffe15 	stw	r5,-8(fp)
 8006ec4:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ec8:	d0a89d17 	ldw	r2,-23948(gp)
 8006ecc:	e0fffe17 	ldw	r3,-8(fp)
 8006ed0:	18e00034 	orhi	r3,r3,32768
 8006ed4:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed8:	d0a89d17 	ldw	r2,-23948(gp)
 8006edc:	10800604 	addi	r2,r2,24
 8006ee0:	100b883a 	mov	r5,r2
 8006ee4:	e13ffd17 	ldw	r4,-12(fp)
 8006ee8:	8003ca80 	call	8003ca8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eec:	01400044 	movi	r5,1
 8006ef0:	e13fff17 	ldw	r4,-4(fp)
 8006ef4:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>
}
 8006ef8:	0001883a 	nop
 8006efc:	e037883a 	mov	sp,fp
 8006f00:	dfc00117 	ldw	ra,4(sp)
 8006f04:	df000017 	ldw	fp,0(sp)
 8006f08:	dec00204 	addi	sp,sp,8
 8006f0c:	f800283a 	ret

08006f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f10:	defffb04 	addi	sp,sp,-20
 8006f14:	dfc00415 	stw	ra,16(sp)
 8006f18:	df000315 	stw	fp,12(sp)
 8006f1c:	df000304 	addi	fp,sp,12
 8006f20:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f24:	e0bfff17 	ldw	r2,-4(fp)
 8006f28:	10800317 	ldw	r2,12(r2)
 8006f2c:	10800317 	ldw	r2,12(r2)
 8006f30:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f34:	e0bffe17 	ldw	r2,-8(fp)
 8006f38:	10800604 	addi	r2,r2,24
 8006f3c:	1009883a 	mov	r4,r2
 8006f40:	8003e0c0 	call	8003e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f44:	d0a8ab17 	ldw	r2,-23892(gp)
 8006f48:	10001a1e 	bne	r2,zero,8006fb4 <xTaskRemoveFromEventList+0xa4>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f4c:	e0bffe17 	ldw	r2,-8(fp)
 8006f50:	10800104 	addi	r2,r2,4
 8006f54:	1009883a 	mov	r4,r2
 8006f58:	8003e0c0 	call	8003e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f5c:	e0bffe17 	ldw	r2,-8(fp)
 8006f60:	10800b17 	ldw	r2,44(r2)
 8006f64:	d0e8a317 	ldw	r3,-23924(gp)
 8006f68:	1880032e 	bgeu	r3,r2,8006f78 <xTaskRemoveFromEventList+0x68>
 8006f6c:	e0bffe17 	ldw	r2,-8(fp)
 8006f70:	10800b17 	ldw	r2,44(r2)
 8006f74:	d0a8a315 	stw	r2,-23924(gp)
 8006f78:	e0bffe17 	ldw	r2,-8(fp)
 8006f7c:	10800b17 	ldw	r2,44(r2)
 8006f80:	01400504 	movi	r5,20
 8006f84:	1009883a 	mov	r4,r2
 8006f88:	80087fc0 	call	80087fc <__mulsi3>
 8006f8c:	1007883a 	mov	r3,r2
 8006f90:	008220b4 	movhi	r2,2178
 8006f94:	10bc7a04 	addi	r2,r2,-3608
 8006f98:	1887883a 	add	r3,r3,r2
 8006f9c:	e0bffe17 	ldw	r2,-8(fp)
 8006fa0:	10800104 	addi	r2,r2,4
 8006fa4:	100b883a 	mov	r5,r2
 8006fa8:	1809883a 	mov	r4,r3
 8006fac:	8003ca80 	call	8003ca8 <vListInsertEnd>
 8006fb0:	00000606 	br	8006fcc <xTaskRemoveFromEventList+0xbc>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fb4:	e0bffe17 	ldw	r2,-8(fp)
 8006fb8:	10800604 	addi	r2,r2,24
 8006fbc:	100b883a 	mov	r5,r2
 8006fc0:	010220b4 	movhi	r4,2178
 8006fc4:	213c9d04 	addi	r4,r4,-3468
 8006fc8:	8003ca80 	call	8003ca8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fcc:	e0bffe17 	ldw	r2,-8(fp)
 8006fd0:	10800b17 	ldw	r2,44(r2)
 8006fd4:	d0e89d17 	ldw	r3,-23948(gp)
 8006fd8:	18c00b17 	ldw	r3,44(r3)
 8006fdc:	1880052e 	bgeu	r3,r2,8006ff4 <xTaskRemoveFromEventList+0xe4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fe0:	00800044 	movi	r2,1
 8006fe4:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fe8:	00800044 	movi	r2,1
 8006fec:	d0a8a615 	stw	r2,-23912(gp)
 8006ff0:	00000106 	br	8006ff8 <xTaskRemoveFromEventList+0xe8>
	}
	else
	{
		xReturn = pdFALSE;
 8006ff4:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 8006ff8:	e0bffd17 	ldw	r2,-12(fp)
}
 8006ffc:	e037883a 	mov	sp,fp
 8007000:	dfc00117 	ldw	ra,4(sp)
 8007004:	df000017 	ldw	fp,0(sp)
 8007008:	dec00204 	addi	sp,sp,8
 800700c:	f800283a 	ret

08007010 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007010:	defffb04 	addi	sp,sp,-20
 8007014:	dfc00415 	stw	ra,16(sp)
 8007018:	df000315 	stw	fp,12(sp)
 800701c:	df000304 	addi	fp,sp,12
 8007020:	e13ffe15 	stw	r4,-8(fp)
 8007024:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007028:	e0bfff17 	ldw	r2,-4(fp)
 800702c:	10e00034 	orhi	r3,r2,32768
 8007030:	e0bffe17 	ldw	r2,-8(fp)
 8007034:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007038:	e0bffe17 	ldw	r2,-8(fp)
 800703c:	10800317 	ldw	r2,12(r2)
 8007040:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8007044:	e13ffe17 	ldw	r4,-8(fp)
 8007048:	8003e0c0 	call	8003e0c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800704c:	e0bffd17 	ldw	r2,-12(fp)
 8007050:	10800104 	addi	r2,r2,4
 8007054:	1009883a 	mov	r4,r2
 8007058:	8003e0c0 	call	8003e0c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800705c:	e0bffd17 	ldw	r2,-12(fp)
 8007060:	10800b17 	ldw	r2,44(r2)
 8007064:	d0e8a317 	ldw	r3,-23924(gp)
 8007068:	1880032e 	bgeu	r3,r2,8007078 <vTaskRemoveFromUnorderedEventList+0x68>
 800706c:	e0bffd17 	ldw	r2,-12(fp)
 8007070:	10800b17 	ldw	r2,44(r2)
 8007074:	d0a8a315 	stw	r2,-23924(gp)
 8007078:	e0bffd17 	ldw	r2,-12(fp)
 800707c:	10800b17 	ldw	r2,44(r2)
 8007080:	01400504 	movi	r5,20
 8007084:	1009883a 	mov	r4,r2
 8007088:	80087fc0 	call	80087fc <__mulsi3>
 800708c:	1007883a 	mov	r3,r2
 8007090:	008220b4 	movhi	r2,2178
 8007094:	10bc7a04 	addi	r2,r2,-3608
 8007098:	1887883a 	add	r3,r3,r2
 800709c:	e0bffd17 	ldw	r2,-12(fp)
 80070a0:	10800104 	addi	r2,r2,4
 80070a4:	100b883a 	mov	r5,r2
 80070a8:	1809883a 	mov	r4,r3
 80070ac:	8003ca80 	call	8003ca8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b0:	e0bffd17 	ldw	r2,-12(fp)
 80070b4:	10800b17 	ldw	r2,44(r2)
 80070b8:	d0e89d17 	ldw	r3,-23948(gp)
 80070bc:	18c00b17 	ldw	r3,44(r3)
 80070c0:	1880022e 	bgeu	r3,r2,80070cc <vTaskRemoveFromUnorderedEventList+0xbc>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80070c4:	00800044 	movi	r2,1
 80070c8:	d0a8a615 	stw	r2,-23912(gp)
	}
}
 80070cc:	0001883a 	nop
 80070d0:	e037883a 	mov	sp,fp
 80070d4:	dfc00117 	ldw	ra,4(sp)
 80070d8:	df000017 	ldw	fp,0(sp)
 80070dc:	dec00204 	addi	sp,sp,8
 80070e0:	f800283a 	ret

080070e4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070e4:	defffd04 	addi	sp,sp,-12
 80070e8:	dfc00215 	stw	ra,8(sp)
 80070ec:	df000115 	stw	fp,4(sp)
 80070f0:	df000104 	addi	fp,sp,4
 80070f4:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 80070f8:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070fc:	d0e8a717 	ldw	r3,-23908(gp)
 8007100:	e0bfff17 	ldw	r2,-4(fp)
 8007104:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007108:	d0e8a217 	ldw	r3,-23928(gp)
 800710c:	e0bfff17 	ldw	r2,-4(fp)
 8007110:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 8007114:	800796c0 	call	800796c <vTaskExitCritical>
}
 8007118:	0001883a 	nop
 800711c:	e037883a 	mov	sp,fp
 8007120:	dfc00117 	ldw	ra,4(sp)
 8007124:	df000017 	ldw	fp,0(sp)
 8007128:	dec00204 	addi	sp,sp,8
 800712c:	f800283a 	ret

08007130 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007130:	defffe04 	addi	sp,sp,-8
 8007134:	df000115 	stw	fp,4(sp)
 8007138:	df000104 	addi	fp,sp,4
 800713c:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007140:	d0e8a717 	ldw	r3,-23908(gp)
 8007144:	e0bfff17 	ldw	r2,-4(fp)
 8007148:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800714c:	d0e8a217 	ldw	r3,-23928(gp)
 8007150:	e0bfff17 	ldw	r2,-4(fp)
 8007154:	10c00115 	stw	r3,4(r2)
}
 8007158:	0001883a 	nop
 800715c:	e037883a 	mov	sp,fp
 8007160:	df000017 	ldw	fp,0(sp)
 8007164:	dec00104 	addi	sp,sp,4
 8007168:	f800283a 	ret

0800716c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800716c:	defff904 	addi	sp,sp,-28
 8007170:	dfc00615 	stw	ra,24(sp)
 8007174:	df000515 	stw	fp,20(sp)
 8007178:	df000504 	addi	fp,sp,20
 800717c:	e13ffe15 	stw	r4,-8(fp)
 8007180:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8007184:	80079180 	call	8007918 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007188:	d0a8a217 	ldw	r2,-23928(gp)
 800718c:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007190:	e0bffe17 	ldw	r2,-8(fp)
 8007194:	10800117 	ldw	r2,4(r2)
 8007198:	e0fffc17 	ldw	r3,-16(fp)
 800719c:	1885c83a 	sub	r2,r3,r2
 80071a0:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071a4:	e0bfff17 	ldw	r2,-4(fp)
 80071a8:	10800017 	ldw	r2,0(r2)
 80071ac:	10bfffd8 	cmpnei	r2,r2,-1
 80071b0:	1000021e 	bne	r2,zero,80071bc <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071b4:	e03ffb15 	stw	zero,-20(fp)
 80071b8:	00001d06 	br	8007230 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071bc:	e0bffe17 	ldw	r2,-8(fp)
 80071c0:	10c00017 	ldw	r3,0(r2)
 80071c4:	d0a8a717 	ldw	r2,-23908(gp)
 80071c8:	18800726 	beq	r3,r2,80071e8 <xTaskCheckForTimeOut+0x7c>
 80071cc:	e0bffe17 	ldw	r2,-8(fp)
 80071d0:	10800117 	ldw	r2,4(r2)
 80071d4:	e0fffc17 	ldw	r3,-16(fp)
 80071d8:	18800336 	bltu	r3,r2,80071e8 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071dc:	00800044 	movi	r2,1
 80071e0:	e0bffb15 	stw	r2,-20(fp)
 80071e4:	00001206 	br	8007230 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071e8:	e0bfff17 	ldw	r2,-4(fp)
 80071ec:	10800017 	ldw	r2,0(r2)
 80071f0:	e0fffd17 	ldw	r3,-12(fp)
 80071f4:	18800a2e 	bgeu	r3,r2,8007220 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071f8:	e0bfff17 	ldw	r2,-4(fp)
 80071fc:	10c00017 	ldw	r3,0(r2)
 8007200:	e0bffd17 	ldw	r2,-12(fp)
 8007204:	1887c83a 	sub	r3,r3,r2
 8007208:	e0bfff17 	ldw	r2,-4(fp)
 800720c:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007210:	e13ffe17 	ldw	r4,-8(fp)
 8007214:	80071300 	call	8007130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007218:	e03ffb15 	stw	zero,-20(fp)
 800721c:	00000406 	br	8007230 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 8007220:	e0bfff17 	ldw	r2,-4(fp)
 8007224:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 8007228:	00800044 	movi	r2,1
 800722c:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 8007230:	800796c0 	call	800796c <vTaskExitCritical>

	return xReturn;
 8007234:	e0bffb17 	ldw	r2,-20(fp)
}
 8007238:	e037883a 	mov	sp,fp
 800723c:	dfc00117 	ldw	ra,4(sp)
 8007240:	df000017 	ldw	fp,0(sp)
 8007244:	dec00204 	addi	sp,sp,8
 8007248:	f800283a 	ret

0800724c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800724c:	deffff04 	addi	sp,sp,-4
 8007250:	df000015 	stw	fp,0(sp)
 8007254:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 8007258:	00800044 	movi	r2,1
 800725c:	d0a8a615 	stw	r2,-23912(gp)
}
 8007260:	0001883a 	nop
 8007264:	e037883a 	mov	sp,fp
 8007268:	df000017 	ldw	fp,0(sp)
 800726c:	dec00104 	addi	sp,sp,4
 8007270:	f800283a 	ret

08007274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007274:	defffd04 	addi	sp,sp,-12
 8007278:	dfc00215 	stw	ra,8(sp)
 800727c:	df000115 	stw	fp,4(sp)
 8007280:	df000104 	addi	fp,sp,4
 8007284:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007288:	80073500 	call	8007350 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800728c:	003ffe06 	br	8007288 <prvIdleTask+0x14>

08007290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007290:	defffd04 	addi	sp,sp,-12
 8007294:	dfc00215 	stw	ra,8(sp)
 8007298:	df000115 	stw	fp,4(sp)
 800729c:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a0:	e03fff15 	stw	zero,-4(fp)
 80072a4:	00000c06 	br	80072d8 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072a8:	01400504 	movi	r5,20
 80072ac:	e13fff17 	ldw	r4,-4(fp)
 80072b0:	80087fc0 	call	80087fc <__mulsi3>
 80072b4:	1007883a 	mov	r3,r2
 80072b8:	008220b4 	movhi	r2,2178
 80072bc:	10bc7a04 	addi	r2,r2,-3608
 80072c0:	1885883a 	add	r2,r3,r2
 80072c4:	1009883a 	mov	r4,r2
 80072c8:	8003c140 	call	8003c14 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072cc:	e0bfff17 	ldw	r2,-4(fp)
 80072d0:	10800044 	addi	r2,r2,1
 80072d4:	e0bfff15 	stw	r2,-4(fp)
 80072d8:	e0bfff17 	ldw	r2,-4(fp)
 80072dc:	10800170 	cmpltui	r2,r2,5
 80072e0:	103ff11e 	bne	r2,zero,80072a8 <prvInitialiseTaskLists+0x18>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80072e4:	010220b4 	movhi	r4,2178
 80072e8:	213c9304 	addi	r4,r4,-3508
 80072ec:	8003c140 	call	8003c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072f0:	010220b4 	movhi	r4,2178
 80072f4:	213c9804 	addi	r4,r4,-3488
 80072f8:	8003c140 	call	8003c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072fc:	010220b4 	movhi	r4,2178
 8007300:	213c9d04 	addi	r4,r4,-3468
 8007304:	8003c140 	call	8003c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007308:	010220b4 	movhi	r4,2178
 800730c:	213ca204 	addi	r4,r4,-3448
 8007310:	8003c140 	call	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007314:	010220b4 	movhi	r4,2178
 8007318:	213ca704 	addi	r4,r4,-3428
 800731c:	8003c140 	call	8003c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007320:	008220b4 	movhi	r2,2178
 8007324:	10bc9304 	addi	r2,r2,-3508
 8007328:	d0a89e15 	stw	r2,-23944(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800732c:	008220b4 	movhi	r2,2178
 8007330:	10bc9804 	addi	r2,r2,-3488
 8007334:	d0a89f15 	stw	r2,-23940(gp)
}
 8007338:	0001883a 	nop
 800733c:	e037883a 	mov	sp,fp
 8007340:	dfc00117 	ldw	ra,4(sp)
 8007344:	df000017 	ldw	fp,0(sp)
 8007348:	dec00204 	addi	sp,sp,8
 800734c:	f800283a 	ret

08007350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007350:	defffd04 	addi	sp,sp,-12
 8007354:	dfc00215 	stw	ra,8(sp)
 8007358:	df000115 	stw	fp,4(sp)
 800735c:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007360:	00001306 	br	80073b0 <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 8007364:	80079180 	call	8007918 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007368:	008220b4 	movhi	r2,2178
 800736c:	10bca204 	addi	r2,r2,-3448
 8007370:	10800317 	ldw	r2,12(r2)
 8007374:	10800317 	ldw	r2,12(r2)
 8007378:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737c:	e0bfff17 	ldw	r2,-4(fp)
 8007380:	10800104 	addi	r2,r2,4
 8007384:	1009883a 	mov	r4,r2
 8007388:	8003e0c0 	call	8003e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800738c:	d0a8a117 	ldw	r2,-23932(gp)
 8007390:	10bfffc4 	addi	r2,r2,-1
 8007394:	d0a8a115 	stw	r2,-23932(gp)
				--uxDeletedTasksWaitingCleanUp;
 8007398:	d0a8a017 	ldw	r2,-23936(gp)
 800739c:	10bfffc4 	addi	r2,r2,-1
 80073a0:	d0a8a015 	stw	r2,-23936(gp)
			}
			taskEXIT_CRITICAL();
 80073a4:	800796c0 	call	800796c <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 80073a8:	e13fff17 	ldw	r4,-4(fp)
 80073ac:	80074940 	call	8007494 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073b0:	d0a8a017 	ldw	r2,-23936(gp)
 80073b4:	103feb1e 	bne	r2,zero,8007364 <prvCheckTasksWaitingTermination+0x14>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073b8:	0001883a 	nop
 80073bc:	e037883a 	mov	sp,fp
 80073c0:	dfc00117 	ldw	ra,4(sp)
 80073c4:	df000017 	ldw	fp,0(sp)
 80073c8:	dec00204 	addi	sp,sp,8
 80073cc:	f800283a 	ret

080073d0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80073d0:	defffd04 	addi	sp,sp,-12
 80073d4:	df000215 	stw	fp,8(sp)
 80073d8:	df000204 	addi	fp,sp,8
 80073dc:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 80073e0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80073e4:	00000606 	br	8007400 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 80073e8:	e0bfff17 	ldw	r2,-4(fp)
 80073ec:	10800044 	addi	r2,r2,1
 80073f0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 80073f4:	e0bffe17 	ldw	r2,-8(fp)
 80073f8:	10800044 	addi	r2,r2,1
 80073fc:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007400:	e0bfff17 	ldw	r2,-4(fp)
 8007404:	10800003 	ldbu	r2,0(r2)
 8007408:	10803fcc 	andi	r2,r2,255
 800740c:	10802960 	cmpeqi	r2,r2,165
 8007410:	103ff51e 	bne	r2,zero,80073e8 <prvTaskCheckFreeStackSpace+0x18>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007414:	e0bffe17 	ldw	r2,-8(fp)
 8007418:	1004d0ba 	srli	r2,r2,2
 800741c:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007420:	e0bffe17 	ldw	r2,-8(fp)
	}
 8007424:	e037883a 	mov	sp,fp
 8007428:	df000017 	ldw	fp,0(sp)
 800742c:	dec00104 	addi	sp,sp,4
 8007430:	f800283a 	ret

08007434 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007434:	defffa04 	addi	sp,sp,-24
 8007438:	dfc00515 	stw	ra,20(sp)
 800743c:	df000415 	stw	fp,16(sp)
 8007440:	df000404 	addi	fp,sp,16
 8007444:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007448:	e0bfff17 	ldw	r2,-4(fp)
 800744c:	1000021e 	bne	r2,zero,8007458 <uxTaskGetStackHighWaterMark+0x24>
 8007450:	d0a89d17 	ldw	r2,-23948(gp)
 8007454:	00000106 	br	800745c <uxTaskGetStackHighWaterMark+0x28>
 8007458:	e0bfff17 	ldw	r2,-4(fp)
 800745c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007460:	e0bffc17 	ldw	r2,-16(fp)
 8007464:	10800c17 	ldw	r2,48(r2)
 8007468:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800746c:	e13ffd17 	ldw	r4,-12(fp)
 8007470:	80073d00 	call	80073d0 <prvTaskCheckFreeStackSpace>
 8007474:	10bfffcc 	andi	r2,r2,65535
 8007478:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 800747c:	e0bffe17 	ldw	r2,-8(fp)
	}
 8007480:	e037883a 	mov	sp,fp
 8007484:	dfc00117 	ldw	ra,4(sp)
 8007488:	df000017 	ldw	fp,0(sp)
 800748c:	dec00204 	addi	sp,sp,8
 8007490:	f800283a 	ret

08007494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007494:	defffd04 	addi	sp,sp,-12
 8007498:	dfc00215 	stw	ra,8(sp)
 800749c:	df000115 	stw	fp,4(sp)
 80074a0:	df000104 	addi	fp,sp,4
 80074a4:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80074a8:	e0bfff17 	ldw	r2,-4(fp)
 80074ac:	10800c17 	ldw	r2,48(r2)
 80074b0:	1009883a 	mov	r4,r2
 80074b4:	80044f00 	call	80044f0 <vPortFree>
			vPortFree( pxTCB );
 80074b8:	e13fff17 	ldw	r4,-4(fp)
 80074bc:	80044f00 	call	80044f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074c0:	0001883a 	nop
 80074c4:	e037883a 	mov	sp,fp
 80074c8:	dfc00117 	ldw	ra,4(sp)
 80074cc:	df000017 	ldw	fp,0(sp)
 80074d0:	dec00204 	addi	sp,sp,8
 80074d4:	f800283a 	ret

080074d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074d8:	defffe04 	addi	sp,sp,-8
 80074dc:	df000115 	stw	fp,4(sp)
 80074e0:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e4:	d0a89e17 	ldw	r2,-23944(gp)
 80074e8:	10800017 	ldw	r2,0(r2)
 80074ec:	1000031e 	bne	r2,zero,80074fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074f0:	00bfffc4 	movi	r2,-1
 80074f4:	d0a8a915 	stw	r2,-23900(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074f8:	00000706 	br	8007518 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fc:	d0a89e17 	ldw	r2,-23944(gp)
 8007500:	10800317 	ldw	r2,12(r2)
 8007504:	10800317 	ldw	r2,12(r2)
 8007508:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800750c:	e0bfff17 	ldw	r2,-4(fp)
 8007510:	10800117 	ldw	r2,4(r2)
 8007514:	d0a8a915 	stw	r2,-23900(gp)
	}
}
 8007518:	0001883a 	nop
 800751c:	e037883a 	mov	sp,fp
 8007520:	df000017 	ldw	fp,0(sp)
 8007524:	dec00104 	addi	sp,sp,4
 8007528:	f800283a 	ret

0800752c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800752c:	defffe04 	addi	sp,sp,-8
 8007530:	df000115 	stw	fp,4(sp)
 8007534:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007538:	d0a89d17 	ldw	r2,-23948(gp)
 800753c:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 8007540:	e0bfff17 	ldw	r2,-4(fp)
	}
 8007544:	e037883a 	mov	sp,fp
 8007548:	df000017 	ldw	fp,0(sp)
 800754c:	dec00104 	addi	sp,sp,4
 8007550:	f800283a 	ret

08007554 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007554:	defffa04 	addi	sp,sp,-24
 8007558:	dfc00515 	stw	ra,20(sp)
 800755c:	df000415 	stw	fp,16(sp)
 8007560:	dc000315 	stw	r16,12(sp)
 8007564:	df000404 	addi	fp,sp,16
 8007568:	e13ffe15 	stw	r4,-8(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800756c:	e0bffe17 	ldw	r2,-8(fp)
 8007570:	e0bffd15 	stw	r2,-12(fp)
	BaseType_t xReturn = pdFALSE;
 8007574:	e03ffc15 	stw	zero,-16(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007578:	e0bffe17 	ldw	r2,-8(fp)
 800757c:	10004626 	beq	r2,zero,8007698 <xTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007580:	e0bffd17 	ldw	r2,-12(fp)
 8007584:	10c00b17 	ldw	r3,44(r2)
 8007588:	d0a89d17 	ldw	r2,-23948(gp)
 800758c:	10800b17 	ldw	r2,44(r2)
 8007590:	18803a2e 	bgeu	r3,r2,800767c <xTaskPriorityInherit+0x128>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007594:	e0bffd17 	ldw	r2,-12(fp)
 8007598:	10800617 	ldw	r2,24(r2)
 800759c:	10000616 	blt	r2,zero,80075b8 <xTaskPriorityInherit+0x64>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a0:	d0a89d17 	ldw	r2,-23948(gp)
 80075a4:	10800b17 	ldw	r2,44(r2)
 80075a8:	00c00144 	movi	r3,5
 80075ac:	1887c83a 	sub	r3,r3,r2
 80075b0:	e0bffd17 	ldw	r2,-12(fp)
 80075b4:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075b8:	e0bffd17 	ldw	r2,-12(fp)
 80075bc:	14000517 	ldw	r16,20(r2)
 80075c0:	e0bffd17 	ldw	r2,-12(fp)
 80075c4:	10800b17 	ldw	r2,44(r2)
 80075c8:	01400504 	movi	r5,20
 80075cc:	1009883a 	mov	r4,r2
 80075d0:	80087fc0 	call	80087fc <__mulsi3>
 80075d4:	1007883a 	mov	r3,r2
 80075d8:	008220b4 	movhi	r2,2178
 80075dc:	10bc7a04 	addi	r2,r2,-3608
 80075e0:	1885883a 	add	r2,r3,r2
 80075e4:	80801e1e 	bne	r16,r2,8007660 <xTaskPriorityInherit+0x10c>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075e8:	e0bffd17 	ldw	r2,-12(fp)
 80075ec:	10800104 	addi	r2,r2,4
 80075f0:	1009883a 	mov	r4,r2
 80075f4:	8003e0c0 	call	8003e0c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075f8:	d0a89d17 	ldw	r2,-23948(gp)
 80075fc:	10c00b17 	ldw	r3,44(r2)
 8007600:	e0bffd17 	ldw	r2,-12(fp)
 8007604:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007608:	e0bffd17 	ldw	r2,-12(fp)
 800760c:	10800b17 	ldw	r2,44(r2)
 8007610:	d0e8a317 	ldw	r3,-23924(gp)
 8007614:	1880032e 	bgeu	r3,r2,8007624 <xTaskPriorityInherit+0xd0>
 8007618:	e0bffd17 	ldw	r2,-12(fp)
 800761c:	10800b17 	ldw	r2,44(r2)
 8007620:	d0a8a315 	stw	r2,-23924(gp)
 8007624:	e0bffd17 	ldw	r2,-12(fp)
 8007628:	10800b17 	ldw	r2,44(r2)
 800762c:	01400504 	movi	r5,20
 8007630:	1009883a 	mov	r4,r2
 8007634:	80087fc0 	call	80087fc <__mulsi3>
 8007638:	1007883a 	mov	r3,r2
 800763c:	008220b4 	movhi	r2,2178
 8007640:	10bc7a04 	addi	r2,r2,-3608
 8007644:	1887883a 	add	r3,r3,r2
 8007648:	e0bffd17 	ldw	r2,-12(fp)
 800764c:	10800104 	addi	r2,r2,4
 8007650:	100b883a 	mov	r5,r2
 8007654:	1809883a 	mov	r4,r3
 8007658:	8003ca80 	call	8003ca8 <vListInsertEnd>
 800765c:	00000406 	br	8007670 <xTaskPriorityInherit+0x11c>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007660:	d0a89d17 	ldw	r2,-23948(gp)
 8007664:	10c00b17 	ldw	r3,44(r2)
 8007668:	e0bffd17 	ldw	r2,-12(fp)
 800766c:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007670:	00800044 	movi	r2,1
 8007674:	e0bffc15 	stw	r2,-16(fp)
 8007678:	00000706 	br	8007698 <xTaskPriorityInherit+0x144>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800767c:	e0bffd17 	ldw	r2,-12(fp)
 8007680:	10c01017 	ldw	r3,64(r2)
 8007684:	d0a89d17 	ldw	r2,-23948(gp)
 8007688:	10800b17 	ldw	r2,44(r2)
 800768c:	1880022e 	bgeu	r3,r2,8007698 <xTaskPriorityInherit+0x144>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007690:	00800044 	movi	r2,1
 8007694:	e0bffc15 	stw	r2,-16(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007698:	e0bffc17 	ldw	r2,-16(fp)
	}
 800769c:	e6ffff04 	addi	sp,fp,-4
 80076a0:	dfc00217 	ldw	ra,8(sp)
 80076a4:	df000117 	ldw	fp,4(sp)
 80076a8:	dc000017 	ldw	r16,0(sp)
 80076ac:	dec00304 	addi	sp,sp,12
 80076b0:	f800283a 	ret

080076b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b4:	defffb04 	addi	sp,sp,-20
 80076b8:	dfc00415 	stw	ra,16(sp)
 80076bc:	df000315 	stw	fp,12(sp)
 80076c0:	df000304 	addi	fp,sp,12
 80076c4:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80076c8:	e0bfff17 	ldw	r2,-4(fp)
 80076cc:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 80076d0:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 80076d4:	e0bfff17 	ldw	r2,-4(fp)
 80076d8:	10003226 	beq	r2,zero,80077a4 <xTaskPriorityDisinherit+0xf0>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80076dc:	e0bffe17 	ldw	r2,-8(fp)
 80076e0:	10801117 	ldw	r2,68(r2)
 80076e4:	10ffffc4 	addi	r3,r2,-1
 80076e8:	e0bffe17 	ldw	r2,-8(fp)
 80076ec:	10c01115 	stw	r3,68(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076f0:	e0bffe17 	ldw	r2,-8(fp)
 80076f4:	10c00b17 	ldw	r3,44(r2)
 80076f8:	e0bffe17 	ldw	r2,-8(fp)
 80076fc:	10801017 	ldw	r2,64(r2)
 8007700:	18802826 	beq	r3,r2,80077a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007704:	e0bffe17 	ldw	r2,-8(fp)
 8007708:	10801117 	ldw	r2,68(r2)
 800770c:	1000251e 	bne	r2,zero,80077a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007710:	e0bffe17 	ldw	r2,-8(fp)
 8007714:	10800104 	addi	r2,r2,4
 8007718:	1009883a 	mov	r4,r2
 800771c:	8003e0c0 	call	8003e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007720:	e0bffe17 	ldw	r2,-8(fp)
 8007724:	10c01017 	ldw	r3,64(r2)
 8007728:	e0bffe17 	ldw	r2,-8(fp)
 800772c:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007730:	e0bffe17 	ldw	r2,-8(fp)
 8007734:	10800b17 	ldw	r2,44(r2)
 8007738:	00c00144 	movi	r3,5
 800773c:	1887c83a 	sub	r3,r3,r2
 8007740:	e0bffe17 	ldw	r2,-8(fp)
 8007744:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 8007748:	e0bffe17 	ldw	r2,-8(fp)
 800774c:	10800b17 	ldw	r2,44(r2)
 8007750:	d0e8a317 	ldw	r3,-23924(gp)
 8007754:	1880032e 	bgeu	r3,r2,8007764 <xTaskPriorityDisinherit+0xb0>
 8007758:	e0bffe17 	ldw	r2,-8(fp)
 800775c:	10800b17 	ldw	r2,44(r2)
 8007760:	d0a8a315 	stw	r2,-23924(gp)
 8007764:	e0bffe17 	ldw	r2,-8(fp)
 8007768:	10800b17 	ldw	r2,44(r2)
 800776c:	01400504 	movi	r5,20
 8007770:	1009883a 	mov	r4,r2
 8007774:	80087fc0 	call	80087fc <__mulsi3>
 8007778:	1007883a 	mov	r3,r2
 800777c:	008220b4 	movhi	r2,2178
 8007780:	10bc7a04 	addi	r2,r2,-3608
 8007784:	1887883a 	add	r3,r3,r2
 8007788:	e0bffe17 	ldw	r2,-8(fp)
 800778c:	10800104 	addi	r2,r2,4
 8007790:	100b883a 	mov	r5,r2
 8007794:	1809883a 	mov	r4,r3
 8007798:	8003ca80 	call	8003ca8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800779c:	00800044 	movi	r2,1
 80077a0:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077a4:	e0bffd17 	ldw	r2,-12(fp)
	}
 80077a8:	e037883a 	mov	sp,fp
 80077ac:	dfc00117 	ldw	ra,4(sp)
 80077b0:	df000017 	ldw	fp,0(sp)
 80077b4:	dec00204 	addi	sp,sp,8
 80077b8:	f800283a 	ret

080077bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077bc:	defff704 	addi	sp,sp,-36
 80077c0:	dfc00815 	stw	ra,32(sp)
 80077c4:	df000715 	stw	fp,28(sp)
 80077c8:	dc000615 	stw	r16,24(sp)
 80077cc:	df000704 	addi	fp,sp,28
 80077d0:	e13ffd15 	stw	r4,-12(fp)
 80077d4:	e17ffe15 	stw	r5,-8(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 80077d8:	e0bffd17 	ldw	r2,-12(fp)
 80077dc:	e0bffa15 	stw	r2,-24(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077e0:	00800044 	movi	r2,1
 80077e4:	e0bffb15 	stw	r2,-20(fp)

		if( pxMutexHolder != NULL )
 80077e8:	e0bffd17 	ldw	r2,-12(fp)
 80077ec:	10004326 	beq	r2,zero,80078fc <vTaskPriorityDisinheritAfterTimeout+0x140>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077f0:	e0bffa17 	ldw	r2,-24(fp)
 80077f4:	10c01017 	ldw	r3,64(r2)
 80077f8:	e0bffe17 	ldw	r2,-8(fp)
 80077fc:	1880032e 	bgeu	r3,r2,800780c <vTaskPriorityDisinheritAfterTimeout+0x50>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007800:	e0bffe17 	ldw	r2,-8(fp)
 8007804:	e0bff915 	stw	r2,-28(fp)
 8007808:	00000306 	br	8007818 <vTaskPriorityDisinheritAfterTimeout+0x5c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800780c:	e0bffa17 	ldw	r2,-24(fp)
 8007810:	10801017 	ldw	r2,64(r2)
 8007814:	e0bff915 	stw	r2,-28(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007818:	e0bffa17 	ldw	r2,-24(fp)
 800781c:	10c00b17 	ldw	r3,44(r2)
 8007820:	e0bff917 	ldw	r2,-28(fp)
 8007824:	18803526 	beq	r3,r2,80078fc <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007828:	e0bffa17 	ldw	r2,-24(fp)
 800782c:	10c01117 	ldw	r3,68(r2)
 8007830:	e0bffb17 	ldw	r2,-20(fp)
 8007834:	1880311e 	bne	r3,r2,80078fc <vTaskPriorityDisinheritAfterTimeout+0x140>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007838:	e0bffa17 	ldw	r2,-24(fp)
 800783c:	10800b17 	ldw	r2,44(r2)
 8007840:	e0bffc15 	stw	r2,-16(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 8007844:	e0bffa17 	ldw	r2,-24(fp)
 8007848:	e0fff917 	ldw	r3,-28(fp)
 800784c:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007850:	e0bffa17 	ldw	r2,-24(fp)
 8007854:	10800617 	ldw	r2,24(r2)
 8007858:	10000516 	blt	r2,zero,8007870 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785c:	00c00144 	movi	r3,5
 8007860:	e0bff917 	ldw	r2,-28(fp)
 8007864:	1887c83a 	sub	r3,r3,r2
 8007868:	e0bffa17 	ldw	r2,-24(fp)
 800786c:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007870:	e0bffa17 	ldw	r2,-24(fp)
 8007874:	14000517 	ldw	r16,20(r2)
 8007878:	01400504 	movi	r5,20
 800787c:	e13ffc17 	ldw	r4,-16(fp)
 8007880:	80087fc0 	call	80087fc <__mulsi3>
 8007884:	1007883a 	mov	r3,r2
 8007888:	008220b4 	movhi	r2,2178
 800788c:	10bc7a04 	addi	r2,r2,-3608
 8007890:	1885883a 	add	r2,r3,r2
 8007894:	8080191e 	bne	r16,r2,80078fc <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007898:	e0bffa17 	ldw	r2,-24(fp)
 800789c:	10800104 	addi	r2,r2,4
 80078a0:	1009883a 	mov	r4,r2
 80078a4:	8003e0c0 	call	8003e0c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80078a8:	e0bffa17 	ldw	r2,-24(fp)
 80078ac:	10800b17 	ldw	r2,44(r2)
 80078b0:	d0e8a317 	ldw	r3,-23924(gp)
 80078b4:	1880032e 	bgeu	r3,r2,80078c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
 80078b8:	e0bffa17 	ldw	r2,-24(fp)
 80078bc:	10800b17 	ldw	r2,44(r2)
 80078c0:	d0a8a315 	stw	r2,-23924(gp)
 80078c4:	e0bffa17 	ldw	r2,-24(fp)
 80078c8:	10800b17 	ldw	r2,44(r2)
 80078cc:	01400504 	movi	r5,20
 80078d0:	1009883a 	mov	r4,r2
 80078d4:	80087fc0 	call	80087fc <__mulsi3>
 80078d8:	1007883a 	mov	r3,r2
 80078dc:	008220b4 	movhi	r2,2178
 80078e0:	10bc7a04 	addi	r2,r2,-3608
 80078e4:	1887883a 	add	r3,r3,r2
 80078e8:	e0bffa17 	ldw	r2,-24(fp)
 80078ec:	10800104 	addi	r2,r2,4
 80078f0:	100b883a 	mov	r5,r2
 80078f4:	1809883a 	mov	r4,r3
 80078f8:	8003ca80 	call	8003ca8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078fc:	0001883a 	nop
 8007900:	e6ffff04 	addi	sp,fp,-4
 8007904:	dfc00217 	ldw	ra,8(sp)
 8007908:	df000117 	ldw	fp,4(sp)
 800790c:	dc000017 	ldw	r16,0(sp)
 8007910:	dec00304 	addi	sp,sp,12
 8007914:	f800283a 	ret

08007918 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 8007918:	defffe04 	addi	sp,sp,-8
 800791c:	df000115 	stw	fp,4(sp)
 8007920:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007924:	0005303a 	rdctl	r2,status
 8007928:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800792c:	e0ffff17 	ldw	r3,-4(fp)
 8007930:	00bfff84 	movi	r2,-2
 8007934:	1884703a 	and	r2,r3,r2
 8007938:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 800793c:	d0a8a417 	ldw	r2,-23920(gp)
 8007940:	10000526 	beq	r2,zero,8007958 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 8007944:	d0a89d17 	ldw	r2,-23948(gp)
 8007948:	10c00f17 	ldw	r3,60(r2)
 800794c:	18c00044 	addi	r3,r3,1
 8007950:	10c00f15 	stw	r3,60(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 8007954:	d0a89d17 	ldw	r2,-23948(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007958:	0001883a 	nop
 800795c:	e037883a 	mov	sp,fp
 8007960:	df000017 	ldw	fp,0(sp)
 8007964:	dec00104 	addi	sp,sp,4
 8007968:	f800283a 	ret

0800796c <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 800796c:	defffe04 	addi	sp,sp,-8
 8007970:	df000115 	stw	fp,4(sp)
 8007974:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 8007978:	d0a8a417 	ldw	r2,-23920(gp)
 800797c:	10000e26 	beq	r2,zero,80079b8 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 8007980:	d0a89d17 	ldw	r2,-23948(gp)
 8007984:	10800f17 	ldw	r2,60(r2)
 8007988:	10000b26 	beq	r2,zero,80079b8 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 800798c:	d0a89d17 	ldw	r2,-23948(gp)
 8007990:	10c00f17 	ldw	r3,60(r2)
 8007994:	18ffffc4 	addi	r3,r3,-1
 8007998:	10c00f15 	stw	r3,60(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 800799c:	d0a89d17 	ldw	r2,-23948(gp)
 80079a0:	10800f17 	ldw	r2,60(r2)
 80079a4:	1000041e 	bne	r2,zero,80079b8 <vTaskExitCritical+0x4c>
 80079a8:	00800044 	movi	r2,1
 80079ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80079b0:	e0bfff17 	ldw	r2,-4(fp)
 80079b4:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079b8:	0001883a 	nop
 80079bc:	e037883a 	mov	sp,fp
 80079c0:	df000017 	ldw	fp,0(sp)
 80079c4:	dec00104 	addi	sp,sp,4
 80079c8:	f800283a 	ret

080079cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80079cc:	defffe04 	addi	sp,sp,-8
 80079d0:	df000115 	stw	fp,4(sp)
 80079d4:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80079d8:	d0a89d17 	ldw	r2,-23948(gp)
 80079dc:	10800617 	ldw	r2,24(r2)
 80079e0:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e4:	d0a89d17 	ldw	r2,-23948(gp)
 80079e8:	d0e89d17 	ldw	r3,-23948(gp)
 80079ec:	18c00b17 	ldw	r3,44(r3)
 80079f0:	01000144 	movi	r4,5
 80079f4:	20c7c83a 	sub	r3,r4,r3
 80079f8:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 80079fc:	e0bfff17 	ldw	r2,-4(fp)
}
 8007a00:	e037883a 	mov	sp,fp
 8007a04:	df000017 	ldw	fp,0(sp)
 8007a08:	dec00104 	addi	sp,sp,4
 8007a0c:	f800283a 	ret

08007a10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a10:	deffff04 	addi	sp,sp,-4
 8007a14:	df000015 	stw	fp,0(sp)
 8007a18:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a1c:	d0a89d17 	ldw	r2,-23948(gp)
 8007a20:	10000426 	beq	r2,zero,8007a34 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a24:	d0a89d17 	ldw	r2,-23948(gp)
 8007a28:	10c01117 	ldw	r3,68(r2)
 8007a2c:	18c00044 	addi	r3,r3,1
 8007a30:	10c01115 	stw	r3,68(r2)
		}

		return pxCurrentTCB;
 8007a34:	d0a89d17 	ldw	r2,-23948(gp)
	}
 8007a38:	e037883a 	mov	sp,fp
 8007a3c:	df000017 	ldw	fp,0(sp)
 8007a40:	dec00104 	addi	sp,sp,4
 8007a44:	f800283a 	ret

08007a48 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007a48:	defffb04 	addi	sp,sp,-20
 8007a4c:	dfc00415 	stw	ra,16(sp)
 8007a50:	df000315 	stw	fp,12(sp)
 8007a54:	df000304 	addi	fp,sp,12
 8007a58:	e13ffe15 	stw	r4,-8(fp)
 8007a5c:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007a60:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007a64:	d0a89d17 	ldw	r2,-23948(gp)
 8007a68:	10801217 	ldw	r2,72(r2)
 8007a6c:	1000091e 	bne	r2,zero,8007a94 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007a70:	d0a89d17 	ldw	r2,-23948(gp)
 8007a74:	00c00044 	movi	r3,1
 8007a78:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007a7c:	e0bfff17 	ldw	r2,-4(fp)
 8007a80:	10000426 	beq	r2,zero,8007a94 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a84:	01400044 	movi	r5,1
 8007a88:	e13fff17 	ldw	r4,-4(fp)
 8007a8c:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007a90:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007a94:	800796c0 	call	800796c <vTaskExitCritical>

		taskENTER_CRITICAL();
 8007a98:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007a9c:	d0a89d17 	ldw	r2,-23948(gp)
 8007aa0:	10801217 	ldw	r2,72(r2)
 8007aa4:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 8007aa8:	e0bffd17 	ldw	r2,-12(fp)
 8007aac:	10000926 	beq	r2,zero,8007ad4 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 8007ab0:	e0bffe17 	ldw	r2,-8(fp)
 8007ab4:	10000326 	beq	r2,zero,8007ac4 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007ab8:	d0a89d17 	ldw	r2,-23948(gp)
 8007abc:	10001215 	stw	zero,72(r2)
 8007ac0:	00000406 	br	8007ad4 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007ac4:	d0a89d17 	ldw	r2,-23948(gp)
 8007ac8:	e0fffd17 	ldw	r3,-12(fp)
 8007acc:	18ffffc4 	addi	r3,r3,-1
 8007ad0:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ad4:	d0a89d17 	ldw	r2,-23948(gp)
 8007ad8:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 8007adc:	800796c0 	call	800796c <vTaskExitCritical>

		return ulReturn;
 8007ae0:	e0bffd17 	ldw	r2,-12(fp)
	}
 8007ae4:	e037883a 	mov	sp,fp
 8007ae8:	dfc00117 	ldw	ra,4(sp)
 8007aec:	df000017 	ldw	fp,0(sp)
 8007af0:	dec00204 	addi	sp,sp,8
 8007af4:	f800283a 	ret

08007af8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007af8:	defff904 	addi	sp,sp,-28
 8007afc:	dfc00615 	stw	ra,24(sp)
 8007b00:	df000515 	stw	fp,20(sp)
 8007b04:	df000504 	addi	fp,sp,20
 8007b08:	e13ffc15 	stw	r4,-16(fp)
 8007b0c:	e17ffd15 	stw	r5,-12(fp)
 8007b10:	e1bffe15 	stw	r6,-8(fp)
 8007b14:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007b18:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b1c:	d0a89d17 	ldw	r2,-23948(gp)
 8007b20:	10801303 	ldbu	r2,76(r2)
 8007b24:	10803fcc 	andi	r2,r2,255
 8007b28:	108000a0 	cmpeqi	r2,r2,2
 8007b2c:	10000f1e 	bne	r2,zero,8007b6c <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b30:	d0a89d17 	ldw	r2,-23948(gp)
 8007b34:	11001217 	ldw	r4,72(r2)
 8007b38:	e0fffc17 	ldw	r3,-16(fp)
 8007b3c:	00c6303a 	nor	r3,zero,r3
 8007b40:	20c6703a 	and	r3,r4,r3
 8007b44:	10c01215 	stw	r3,72(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b48:	d0a89d17 	ldw	r2,-23948(gp)
 8007b4c:	00c00044 	movi	r3,1
 8007b50:	10c01305 	stb	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b54:	e0bfff17 	ldw	r2,-4(fp)
 8007b58:	10000426 	beq	r2,zero,8007b6c <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b5c:	01400044 	movi	r5,1
 8007b60:	e13fff17 	ldw	r4,-4(fp)
 8007b64:	80081380 	call	8008138 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b68:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b6c:	800796c0 	call	800796c <vTaskExitCritical>

		taskENTER_CRITICAL();
 8007b70:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b74:	e0bffe17 	ldw	r2,-8(fp)
 8007b78:	10000426 	beq	r2,zero,8007b8c <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b7c:	d0a89d17 	ldw	r2,-23948(gp)
 8007b80:	10c01217 	ldw	r3,72(r2)
 8007b84:	e0bffe17 	ldw	r2,-8(fp)
 8007b88:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b8c:	d0a89d17 	ldw	r2,-23948(gp)
 8007b90:	10801303 	ldbu	r2,76(r2)
 8007b94:	10803fcc 	andi	r2,r2,255
 8007b98:	108000a0 	cmpeqi	r2,r2,2
 8007b9c:	1000021e 	bne	r2,zero,8007ba8 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007ba0:	e03ffb15 	stw	zero,-20(fp)
 8007ba4:	00000806 	br	8007bc8 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007ba8:	d0a89d17 	ldw	r2,-23948(gp)
 8007bac:	11001217 	ldw	r4,72(r2)
 8007bb0:	e0fffd17 	ldw	r3,-12(fp)
 8007bb4:	00c6303a 	nor	r3,zero,r3
 8007bb8:	20c6703a 	and	r3,r4,r3
 8007bbc:	10c01215 	stw	r3,72(r2)
				xReturn = pdTRUE;
 8007bc0:	00800044 	movi	r2,1
 8007bc4:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bc8:	d0a89d17 	ldw	r2,-23948(gp)
 8007bcc:	10001305 	stb	zero,76(r2)
		}
		taskEXIT_CRITICAL();
 8007bd0:	800796c0 	call	800796c <vTaskExitCritical>

		return xReturn;
 8007bd4:	e0bffb17 	ldw	r2,-20(fp)
	}
 8007bd8:	e037883a 	mov	sp,fp
 8007bdc:	dfc00117 	ldw	ra,4(sp)
 8007be0:	df000017 	ldw	fp,0(sp)
 8007be4:	dec00204 	addi	sp,sp,8
 8007be8:	f800283a 	ret

08007bec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007bec:	defff704 	addi	sp,sp,-36
 8007bf0:	dfc00815 	stw	ra,32(sp)
 8007bf4:	df000715 	stw	fp,28(sp)
 8007bf8:	df000704 	addi	fp,sp,28
 8007bfc:	e13ffc15 	stw	r4,-16(fp)
 8007c00:	e17ffd15 	stw	r5,-12(fp)
 8007c04:	e1bffe15 	stw	r6,-8(fp)
 8007c08:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007c0c:	00800044 	movi	r2,1
 8007c10:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 8007c14:	e0bffc17 	ldw	r2,-16(fp)
 8007c18:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 8007c1c:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007c20:	e0bfff17 	ldw	r2,-4(fp)
 8007c24:	10000426 	beq	r2,zero,8007c38 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007c28:	e0bffa17 	ldw	r2,-24(fp)
 8007c2c:	10c01217 	ldw	r3,72(r2)
 8007c30:	e0bfff17 	ldw	r2,-4(fp)
 8007c34:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c38:	e0bffa17 	ldw	r2,-24(fp)
 8007c3c:	10801303 	ldbu	r2,76(r2)
 8007c40:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c44:	e0bffa17 	ldw	r2,-24(fp)
 8007c48:	00c00084 	movi	r3,2
 8007c4c:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 8007c50:	e0bffe17 	ldw	r2,-8(fp)
 8007c54:	10800168 	cmpgeui	r2,r2,5
 8007c58:	1000261e 	bne	r2,zero,8007cf4 <xTaskGenericNotify+0x108>
 8007c5c:	e0bffe17 	ldw	r2,-8(fp)
 8007c60:	100690ba 	slli	r3,r2,2
 8007c64:	00820034 	movhi	r2,2048
 8007c68:	109f1e04 	addi	r2,r2,31864
 8007c6c:	1885883a 	add	r2,r3,r2
 8007c70:	10800017 	ldw	r2,0(r2)
 8007c74:	1000683a 	jmp	r2
 8007c78:	08007cfc 	xorhi	zero,at,499
 8007c7c:	08007c8c 	andi	zero,at,498
 8007c80:	08007ca8 	cmpgeui	zero,at,498
 8007c84:	08007cc0 	call	8007cc <__alt_mem_sdram-0x77ff834>
 8007c88:	08007cd0 	cmplti	zero,at,499
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c8c:	e0bffa17 	ldw	r2,-24(fp)
 8007c90:	10c01217 	ldw	r3,72(r2)
 8007c94:	e0bffd17 	ldw	r2,-12(fp)
 8007c98:	1886b03a 	or	r3,r3,r2
 8007c9c:	e0bffa17 	ldw	r2,-24(fp)
 8007ca0:	10c01215 	stw	r3,72(r2)
					break;
 8007ca4:	00001606 	br	8007d00 <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007ca8:	e0bffa17 	ldw	r2,-24(fp)
 8007cac:	10801217 	ldw	r2,72(r2)
 8007cb0:	10c00044 	addi	r3,r2,1
 8007cb4:	e0bffa17 	ldw	r2,-24(fp)
 8007cb8:	10c01215 	stw	r3,72(r2)
					break;
 8007cbc:	00001006 	br	8007d00 <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007cc0:	e0bffa17 	ldw	r2,-24(fp)
 8007cc4:	e0fffd17 	ldw	r3,-12(fp)
 8007cc8:	10c01215 	stw	r3,72(r2)
					break;
 8007ccc:	00000c06 	br	8007d00 <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007cd0:	e0bffb03 	ldbu	r2,-20(fp)
 8007cd4:	108000a0 	cmpeqi	r2,r2,2
 8007cd8:	1000041e 	bne	r2,zero,8007cec <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007cdc:	e0bffa17 	ldw	r2,-24(fp)
 8007ce0:	e0fffd17 	ldw	r3,-12(fp)
 8007ce4:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007ce8:	00000506 	br	8007d00 <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8007cec:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 8007cf0:	00000306 	br	8007d00 <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 8007cf4:	0001883a 	nop
 8007cf8:	00000106 	br	8007d00 <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007cfc:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007d00:	e0bffb03 	ldbu	r2,-20(fp)
 8007d04:	10800058 	cmpnei	r2,r2,1
 8007d08:	10001f1e 	bne	r2,zero,8007d88 <xTaskGenericNotify+0x19c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0c:	e0bffa17 	ldw	r2,-24(fp)
 8007d10:	10800104 	addi	r2,r2,4
 8007d14:	1009883a 	mov	r4,r2
 8007d18:	8003e0c0 	call	8003e0c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007d1c:	e0bffa17 	ldw	r2,-24(fp)
 8007d20:	10800b17 	ldw	r2,44(r2)
 8007d24:	d0e8a317 	ldw	r3,-23924(gp)
 8007d28:	1880032e 	bgeu	r3,r2,8007d38 <xTaskGenericNotify+0x14c>
 8007d2c:	e0bffa17 	ldw	r2,-24(fp)
 8007d30:	10800b17 	ldw	r2,44(r2)
 8007d34:	d0a8a315 	stw	r2,-23924(gp)
 8007d38:	e0bffa17 	ldw	r2,-24(fp)
 8007d3c:	10800b17 	ldw	r2,44(r2)
 8007d40:	01400504 	movi	r5,20
 8007d44:	1009883a 	mov	r4,r2
 8007d48:	80087fc0 	call	80087fc <__mulsi3>
 8007d4c:	1007883a 	mov	r3,r2
 8007d50:	008220b4 	movhi	r2,2178
 8007d54:	10bc7a04 	addi	r2,r2,-3608
 8007d58:	1887883a 	add	r3,r3,r2
 8007d5c:	e0bffa17 	ldw	r2,-24(fp)
 8007d60:	10800104 	addi	r2,r2,4
 8007d64:	100b883a 	mov	r5,r2
 8007d68:	1809883a 	mov	r4,r3
 8007d6c:	8003ca80 	call	8003ca8 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d70:	e0bffa17 	ldw	r2,-24(fp)
 8007d74:	10800b17 	ldw	r2,44(r2)
 8007d78:	d0e89d17 	ldw	r3,-23948(gp)
 8007d7c:	18c00b17 	ldw	r3,44(r3)
 8007d80:	1880012e 	bgeu	r3,r2,8007d88 <xTaskGenericNotify+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007d84:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d88:	800796c0 	call	800796c <vTaskExitCritical>

		return xReturn;
 8007d8c:	e0bff917 	ldw	r2,-28(fp)
	}
 8007d90:	e037883a 	mov	sp,fp
 8007d94:	dfc00117 	ldw	ra,4(sp)
 8007d98:	df000017 	ldw	fp,0(sp)
 8007d9c:	dec00204 	addi	sp,sp,8
 8007da0:	f800283a 	ret

08007da4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007da4:	defff604 	addi	sp,sp,-40
 8007da8:	dfc00915 	stw	ra,36(sp)
 8007dac:	df000815 	stw	fp,32(sp)
 8007db0:	df000804 	addi	fp,sp,32
 8007db4:	e13ffc15 	stw	r4,-16(fp)
 8007db8:	e17ffd15 	stw	r5,-12(fp)
 8007dbc:	e1bffe15 	stw	r6,-8(fp)
 8007dc0:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007dc4:	00800044 	movi	r2,1
 8007dc8:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8007dcc:	e0bffc17 	ldw	r2,-16(fp)
 8007dd0:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dd4:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 8007dd8:	e0bfff17 	ldw	r2,-4(fp)
 8007ddc:	10000426 	beq	r2,zero,8007df0 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007de0:	e0bff917 	ldw	r2,-28(fp)
 8007de4:	10c01217 	ldw	r3,72(r2)
 8007de8:	e0bfff17 	ldw	r2,-4(fp)
 8007dec:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007df0:	e0bff917 	ldw	r2,-28(fp)
 8007df4:	10801303 	ldbu	r2,76(r2)
 8007df8:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007dfc:	e0bff917 	ldw	r2,-28(fp)
 8007e00:	00c00084 	movi	r3,2
 8007e04:	10c01305 	stb	r3,76(r2)

			switch( eAction )
 8007e08:	e0bffe17 	ldw	r2,-8(fp)
 8007e0c:	10800168 	cmpgeui	r2,r2,5
 8007e10:	1000261e 	bne	r2,zero,8007eac <xTaskGenericNotifyFromISR+0x108>
 8007e14:	e0bffe17 	ldw	r2,-8(fp)
 8007e18:	100690ba 	slli	r3,r2,2
 8007e1c:	00820034 	movhi	r2,2048
 8007e20:	109f8c04 	addi	r2,r2,32304
 8007e24:	1885883a 	add	r2,r3,r2
 8007e28:	10800017 	ldw	r2,0(r2)
 8007e2c:	1000683a 	jmp	r2
 8007e30:	08007eb4 	orhi	zero,at,506
 8007e34:	08007e44 	addi	zero,at,505
 8007e38:	08007e60 	cmpeqi	zero,at,505
 8007e3c:	08007e78 	rdprs	zero,at,505
 8007e40:	08007e88 	cmpgei	zero,at,506
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007e44:	e0bff917 	ldw	r2,-28(fp)
 8007e48:	10c01217 	ldw	r3,72(r2)
 8007e4c:	e0bffd17 	ldw	r2,-12(fp)
 8007e50:	1886b03a 	or	r3,r3,r2
 8007e54:	e0bff917 	ldw	r2,-28(fp)
 8007e58:	10c01215 	stw	r3,72(r2)
					break;
 8007e5c:	00001606 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007e60:	e0bff917 	ldw	r2,-28(fp)
 8007e64:	10801217 	ldw	r2,72(r2)
 8007e68:	10c00044 	addi	r3,r2,1
 8007e6c:	e0bff917 	ldw	r2,-28(fp)
 8007e70:	10c01215 	stw	r3,72(r2)
					break;
 8007e74:	00001006 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007e78:	e0bff917 	ldw	r2,-28(fp)
 8007e7c:	e0fffd17 	ldw	r3,-12(fp)
 8007e80:	10c01215 	stw	r3,72(r2)
					break;
 8007e84:	00000c06 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007e88:	e0bffb03 	ldbu	r2,-20(fp)
 8007e8c:	108000a0 	cmpeqi	r2,r2,2
 8007e90:	1000041e 	bne	r2,zero,8007ea4 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007e94:	e0bff917 	ldw	r2,-28(fp)
 8007e98:	e0fffd17 	ldw	r3,-12(fp)
 8007e9c:	10c01215 	stw	r3,72(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007ea0:	00000506 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8007ea4:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 8007ea8:	00000306 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 8007eac:	0001883a 	nop
 8007eb0:	00000106 	br	8007eb8 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8007eb4:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007eb8:	e0bffb03 	ldbu	r2,-20(fp)
 8007ebc:	10800058 	cmpnei	r2,r2,1
 8007ec0:	10002e1e 	bne	r2,zero,8007f7c <xTaskGenericNotifyFromISR+0x1d8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ec4:	d0a8ab17 	ldw	r2,-23892(gp)
 8007ec8:	10001a1e 	bne	r2,zero,8007f34 <xTaskGenericNotifyFromISR+0x190>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ecc:	e0bff917 	ldw	r2,-28(fp)
 8007ed0:	10800104 	addi	r2,r2,4
 8007ed4:	1009883a 	mov	r4,r2
 8007ed8:	8003e0c0 	call	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007edc:	e0bff917 	ldw	r2,-28(fp)
 8007ee0:	10800b17 	ldw	r2,44(r2)
 8007ee4:	d0e8a317 	ldw	r3,-23924(gp)
 8007ee8:	1880032e 	bgeu	r3,r2,8007ef8 <xTaskGenericNotifyFromISR+0x154>
 8007eec:	e0bff917 	ldw	r2,-28(fp)
 8007ef0:	10800b17 	ldw	r2,44(r2)
 8007ef4:	d0a8a315 	stw	r2,-23924(gp)
 8007ef8:	e0bff917 	ldw	r2,-28(fp)
 8007efc:	10800b17 	ldw	r2,44(r2)
 8007f00:	01400504 	movi	r5,20
 8007f04:	1009883a 	mov	r4,r2
 8007f08:	80087fc0 	call	80087fc <__mulsi3>
 8007f0c:	1007883a 	mov	r3,r2
 8007f10:	008220b4 	movhi	r2,2178
 8007f14:	10bc7a04 	addi	r2,r2,-3608
 8007f18:	1887883a 	add	r3,r3,r2
 8007f1c:	e0bff917 	ldw	r2,-28(fp)
 8007f20:	10800104 	addi	r2,r2,4
 8007f24:	100b883a 	mov	r5,r2
 8007f28:	1809883a 	mov	r4,r3
 8007f2c:	8003ca80 	call	8003ca8 <vListInsertEnd>
 8007f30:	00000606 	br	8007f4c <xTaskGenericNotifyFromISR+0x1a8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007f34:	e0bff917 	ldw	r2,-28(fp)
 8007f38:	10800604 	addi	r2,r2,24
 8007f3c:	100b883a 	mov	r5,r2
 8007f40:	010220b4 	movhi	r4,2178
 8007f44:	213c9d04 	addi	r4,r4,-3468
 8007f48:	8003ca80 	call	8003ca8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f4c:	e0bff917 	ldw	r2,-28(fp)
 8007f50:	10800b17 	ldw	r2,44(r2)
 8007f54:	d0e89d17 	ldw	r3,-23948(gp)
 8007f58:	18c00b17 	ldw	r3,44(r3)
 8007f5c:	1880072e 	bgeu	r3,r2,8007f7c <xTaskGenericNotifyFromISR+0x1d8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007f60:	e0800217 	ldw	r2,8(fp)
 8007f64:	10000326 	beq	r2,zero,8007f74 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007f68:	e0800217 	ldw	r2,8(fp)
 8007f6c:	00c00044 	movi	r3,1
 8007f70:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007f74:	00800044 	movi	r2,1
 8007f78:	d0a8a615 	stw	r2,-23912(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007f7c:	e0bff817 	ldw	r2,-32(fp)
	}
 8007f80:	e037883a 	mov	sp,fp
 8007f84:	dfc00117 	ldw	ra,4(sp)
 8007f88:	df000017 	ldw	fp,0(sp)
 8007f8c:	dec00204 	addi	sp,sp,8
 8007f90:	f800283a 	ret

08007f94 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007f94:	defff904 	addi	sp,sp,-28
 8007f98:	dfc00615 	stw	ra,24(sp)
 8007f9c:	df000515 	stw	fp,20(sp)
 8007fa0:	df000504 	addi	fp,sp,20
 8007fa4:	e13ffe15 	stw	r4,-8(fp)
 8007fa8:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8007fac:	e0bffe17 	ldw	r2,-8(fp)
 8007fb0:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb4:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007fb8:	e0bffb17 	ldw	r2,-20(fp)
 8007fbc:	10801303 	ldbu	r2,76(r2)
 8007fc0:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007fc4:	e0bffb17 	ldw	r2,-20(fp)
 8007fc8:	00c00084 	movi	r3,2
 8007fcc:	10c01305 	stb	r3,76(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007fd0:	e0bffb17 	ldw	r2,-20(fp)
 8007fd4:	10801217 	ldw	r2,72(r2)
 8007fd8:	10c00044 	addi	r3,r2,1
 8007fdc:	e0bffb17 	ldw	r2,-20(fp)
 8007fe0:	10c01215 	stw	r3,72(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007fe4:	e0bffd03 	ldbu	r2,-12(fp)
 8007fe8:	10800058 	cmpnei	r2,r2,1
 8007fec:	10002e1e 	bne	r2,zero,80080a8 <vTaskNotifyGiveFromISR+0x114>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff0:	d0a8ab17 	ldw	r2,-23892(gp)
 8007ff4:	10001a1e 	bne	r2,zero,8008060 <vTaskNotifyGiveFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ff8:	e0bffb17 	ldw	r2,-20(fp)
 8007ffc:	10800104 	addi	r2,r2,4
 8008000:	1009883a 	mov	r4,r2
 8008004:	8003e0c0 	call	8003e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008008:	e0bffb17 	ldw	r2,-20(fp)
 800800c:	10800b17 	ldw	r2,44(r2)
 8008010:	d0e8a317 	ldw	r3,-23924(gp)
 8008014:	1880032e 	bgeu	r3,r2,8008024 <vTaskNotifyGiveFromISR+0x90>
 8008018:	e0bffb17 	ldw	r2,-20(fp)
 800801c:	10800b17 	ldw	r2,44(r2)
 8008020:	d0a8a315 	stw	r2,-23924(gp)
 8008024:	e0bffb17 	ldw	r2,-20(fp)
 8008028:	10800b17 	ldw	r2,44(r2)
 800802c:	01400504 	movi	r5,20
 8008030:	1009883a 	mov	r4,r2
 8008034:	80087fc0 	call	80087fc <__mulsi3>
 8008038:	1007883a 	mov	r3,r2
 800803c:	008220b4 	movhi	r2,2178
 8008040:	10bc7a04 	addi	r2,r2,-3608
 8008044:	1887883a 	add	r3,r3,r2
 8008048:	e0bffb17 	ldw	r2,-20(fp)
 800804c:	10800104 	addi	r2,r2,4
 8008050:	100b883a 	mov	r5,r2
 8008054:	1809883a 	mov	r4,r3
 8008058:	8003ca80 	call	8003ca8 <vListInsertEnd>
 800805c:	00000606 	br	8008078 <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008060:	e0bffb17 	ldw	r2,-20(fp)
 8008064:	10800604 	addi	r2,r2,24
 8008068:	100b883a 	mov	r5,r2
 800806c:	010220b4 	movhi	r4,2178
 8008070:	213c9d04 	addi	r4,r4,-3468
 8008074:	8003ca80 	call	8003ca8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008078:	e0bffb17 	ldw	r2,-20(fp)
 800807c:	10800b17 	ldw	r2,44(r2)
 8008080:	d0e89d17 	ldw	r3,-23948(gp)
 8008084:	18c00b17 	ldw	r3,44(r3)
 8008088:	1880072e 	bgeu	r3,r2,80080a8 <vTaskNotifyGiveFromISR+0x114>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800808c:	e0bfff17 	ldw	r2,-4(fp)
 8008090:	10000326 	beq	r2,zero,80080a0 <vTaskNotifyGiveFromISR+0x10c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008094:	e0bfff17 	ldw	r2,-4(fp)
 8008098:	00c00044 	movi	r3,1
 800809c:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80080a0:	00800044 	movi	r2,1
 80080a4:	d0a8a615 	stw	r2,-23912(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80080a8:	0001883a 	nop
 80080ac:	e037883a 	mov	sp,fp
 80080b0:	dfc00117 	ldw	ra,4(sp)
 80080b4:	df000017 	ldw	fp,0(sp)
 80080b8:	dec00204 	addi	sp,sp,8
 80080bc:	f800283a 	ret

080080c0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80080c0:	defffb04 	addi	sp,sp,-20
 80080c4:	dfc00415 	stw	ra,16(sp)
 80080c8:	df000315 	stw	fp,12(sp)
 80080cc:	df000304 	addi	fp,sp,12
 80080d0:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80080d4:	e0bfff17 	ldw	r2,-4(fp)
 80080d8:	1000021e 	bne	r2,zero,80080e4 <xTaskNotifyStateClear+0x24>
 80080dc:	d0a89d17 	ldw	r2,-23948(gp)
 80080e0:	00000106 	br	80080e8 <xTaskNotifyStateClear+0x28>
 80080e4:	e0bfff17 	ldw	r2,-4(fp)
 80080e8:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 80080ec:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80080f0:	e0bffe17 	ldw	r2,-8(fp)
 80080f4:	10801303 	ldbu	r2,76(r2)
 80080f8:	10803fcc 	andi	r2,r2,255
 80080fc:	10800098 	cmpnei	r2,r2,2
 8008100:	1000051e 	bne	r2,zero,8008118 <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008104:	e0bffe17 	ldw	r2,-8(fp)
 8008108:	10001305 	stb	zero,76(r2)
				xReturn = pdPASS;
 800810c:	00800044 	movi	r2,1
 8008110:	e0bffd15 	stw	r2,-12(fp)
 8008114:	00000106 	br	800811c <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 8008118:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 800811c:	800796c0 	call	800796c <vTaskExitCritical>

		return xReturn;
 8008120:	e0bffd17 	ldw	r2,-12(fp)
	}
 8008124:	e037883a 	mov	sp,fp
 8008128:	dfc00117 	ldw	ra,4(sp)
 800812c:	df000017 	ldw	fp,0(sp)
 8008130:	dec00204 	addi	sp,sp,8
 8008134:	f800283a 	ret

08008138 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008138:	defffa04 	addi	sp,sp,-24
 800813c:	dfc00515 	stw	ra,20(sp)
 8008140:	df000415 	stw	fp,16(sp)
 8008144:	df000404 	addi	fp,sp,16
 8008148:	e13ffe15 	stw	r4,-8(fp)
 800814c:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008150:	d0a8a217 	ldw	r2,-23928(gp)
 8008154:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008158:	d0a89d17 	ldw	r2,-23948(gp)
 800815c:	10800104 	addi	r2,r2,4
 8008160:	1009883a 	mov	r4,r2
 8008164:	8003e0c0 	call	8003e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008168:	e0bffe17 	ldw	r2,-8(fp)
 800816c:	10bfffd8 	cmpnei	r2,r2,-1
 8008170:	1000091e 	bne	r2,zero,8008198 <prvAddCurrentTaskToDelayedList+0x60>
 8008174:	e0bfff17 	ldw	r2,-4(fp)
 8008178:	10000726 	beq	r2,zero,8008198 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817c:	d0a89d17 	ldw	r2,-23948(gp)
 8008180:	10800104 	addi	r2,r2,4
 8008184:	100b883a 	mov	r5,r2
 8008188:	010220b4 	movhi	r4,2178
 800818c:	213ca704 	addi	r4,r4,-3428
 8008190:	8003ca80 	call	8003ca8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008194:	00001c06 	br	8008208 <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008198:	e0fffc17 	ldw	r3,-16(fp)
 800819c:	e0bffe17 	ldw	r2,-8(fp)
 80081a0:	1885883a 	add	r2,r3,r2
 80081a4:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081a8:	d0a89d17 	ldw	r2,-23948(gp)
 80081ac:	e0fffd17 	ldw	r3,-12(fp)
 80081b0:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 80081b4:	e0fffd17 	ldw	r3,-12(fp)
 80081b8:	e0bffc17 	ldw	r2,-16(fp)
 80081bc:	1880072e 	bgeu	r3,r2,80081dc <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081c0:	d0e89f17 	ldw	r3,-23940(gp)
 80081c4:	d0a89d17 	ldw	r2,-23948(gp)
 80081c8:	10800104 	addi	r2,r2,4
 80081cc:	100b883a 	mov	r5,r2
 80081d0:	1809883a 	mov	r4,r3
 80081d4:	8003d340 	call	8003d34 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d8:	00000b06 	br	8008208 <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081dc:	d0e89e17 	ldw	r3,-23944(gp)
 80081e0:	d0a89d17 	ldw	r2,-23948(gp)
 80081e4:	10800104 	addi	r2,r2,4
 80081e8:	100b883a 	mov	r5,r2
 80081ec:	1809883a 	mov	r4,r3
 80081f0:	8003d340 	call	8003d34 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80081f4:	d0a8a917 	ldw	r2,-23900(gp)
 80081f8:	e0fffd17 	ldw	r3,-12(fp)
 80081fc:	1880022e 	bgeu	r3,r2,8008208 <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008200:	e0bffd17 	ldw	r2,-12(fp)
 8008204:	d0a8a915 	stw	r2,-23900(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008208:	0001883a 	nop
 800820c:	e037883a 	mov	sp,fp
 8008210:	dfc00117 	ldw	ra,4(sp)
 8008214:	df000017 	ldw	fp,0(sp)
 8008218:	dec00204 	addi	sp,sp,8
 800821c:	f800283a 	ret

08008220 <xSerialPortInitMinimal>:
static void vUARTReceiveHandler( alt_u32 status );
static void vUARTTransmitHandler( alt_u32 status );
/*---------------------------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
 8008220:	defffb04 	addi	sp,sp,-20
 8008224:	dfc00415 	stw	ra,16(sp)
 8008228:	df000315 	stw	fp,12(sp)
 800822c:	df000304 	addi	fp,sp,12
 8008230:	e13ffe15 	stw	r4,-8(fp)
 8008234:	e17fff15 	stw	r5,-4(fp)
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 8008238:	000d883a 	mov	r6,zero
 800823c:	01400044 	movi	r5,1
 8008240:	e13fff17 	ldw	r4,-4(fp)
 8008244:	80049840 	call	8004984 <xQueueGenericCreate>
 8008248:	d0a8ac15 	stw	r2,-23888(gp)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
 800824c:	e0bfff17 	ldw	r2,-4(fp)
 8008250:	10800044 	addi	r2,r2,1
 8008254:	000d883a 	mov	r6,zero
 8008258:	01400044 	movi	r5,1
 800825c:	1009883a 	mov	r4,r2
 8008260:	80049840 	call	8004984 <xQueueGenericCreate>
 8008264:	d0a8ad15 	stw	r2,-23884(gp)

	/* If the queues were created correctly then setup the serial port hardware. */
	if( ( xRxedChars != serINVALID_QUEUE ) && ( xCharsForTx != serINVALID_QUEUE ) )
 8008268:	d0a8ac17 	ldw	r2,-23888(gp)
 800826c:	10001426 	beq	r2,zero,80082c0 <xSerialPortInitMinimal+0xa0>
 8008270:	d0a8ad17 	ldw	r2,-23884(gp)
 8008274:	10001226 	beq	r2,zero,80082c0 <xSerialPortInitMinimal+0xa0>
	{
		portENTER_CRITICAL();
 8008278:	80079180 	call	8007918 <vTaskEnterCritical>
		{
			uartControl = ALTERA_AVALON_UART_CONTROL_RTS_MSK | ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
 800827c:	00832004 	movi	r2,3200
 8008280:	d0a8ae15 	stw	r2,-23880(gp)
			IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008284:	d0a8ae17 	ldw	r2,-23880(gp)
 8008288:	1007883a 	mov	r3,r2
 800828c:	00840034 	movhi	r2,4096
 8008290:	10912304 	addi	r2,r2,17548
 8008294:	10c00035 	stwio	r3,0(r2)

		    /* register the interrupt handler */
			//cjr Jul-1-2010 new API
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ,
 8008298:	d8000015 	stw	zero,0(sp)
 800829c:	000f883a 	mov	r7,zero
 80082a0:	01820074 	movhi	r6,2049
 80082a4:	31a12404 	addi	r6,r6,-31600
 80082a8:	01400084 	movi	r5,2
 80082ac:	0009883a 	mov	r4,zero
 80082b0:	80161540 	call	8016154 <alt_ic_isr_register>
#else
	alt_irq_register ( UART_IRQ, NULL, vUARTInterruptHandler );

#endif
		}
		portEXIT_CRITICAL();
 80082b4:	800796c0 	call	800796c <vTaskExitCritical>
	}
	else
	{
		return ( xComPortHandle ) 0;
	}
    return ( xComPortHandle ) 1;
 80082b8:	00800044 	movi	r2,1
 80082bc:	00000106 	br	80082c4 <xSerialPortInitMinimal+0xa4>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		return ( xComPortHandle ) 0;
 80082c0:	0005883a 	mov	r2,zero
	}
    return ( xComPortHandle ) 1;
}
 80082c4:	e037883a 	mov	sp,fp
 80082c8:	dfc00117 	ldw	ra,4(sp)
 80082cc:	df000017 	ldw	fp,0(sp)
 80082d0:	dec00204 	addi	sp,sp,8
 80082d4:	f800283a 	ret

080082d8 <vSerialClose>:
/*---------------------------------------------------------------------------*/

void vSerialClose( xComPortHandle xPort )
{
 80082d8:	defffe04 	addi	sp,sp,-8
 80082dc:	df000115 	stw	fp,4(sp)
 80082e0:	df000104 	addi	fp,sp,4
 80082e4:	e13fff15 	stw	r4,-4(fp)
    /* Never used. */
}
 80082e8:	0001883a 	nop
 80082ec:	e037883a 	mov	sp,fp
 80082f0:	df000017 	ldw	fp,0(sp)
 80082f4:	dec00104 	addi	sp,sp,4
 80082f8:	f800283a 	ret

080082fc <xSerialGetChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialGetChar( xComPortHandle pxPort, signed char *pcRxedChar, portTickType xBlockTime )
{
 80082fc:	defffb04 	addi	sp,sp,-20
 8008300:	dfc00415 	stw	ra,16(sp)
 8008304:	df000315 	stw	fp,12(sp)
 8008308:	df000304 	addi	fp,sp,12
 800830c:	e13ffd15 	stw	r4,-12(fp)
 8008310:	e17ffe15 	stw	r5,-8(fp)
 8008314:	e1bfff15 	stw	r6,-4(fp)
	( void ) pxPort;


	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
 8008318:	d0a8ac17 	ldw	r2,-23888(gp)
 800831c:	e1bfff17 	ldw	r6,-4(fp)
 8008320:	e17ffe17 	ldw	r5,-8(fp)
 8008324:	1009883a 	mov	r4,r2
 8008328:	80050680 	call	8005068 <xQueueReceive>
 800832c:	10000226 	beq	r2,zero,8008338 <xSerialGetChar+0x3c>
	{
		return pdTRUE;
 8008330:	00800044 	movi	r2,1
 8008334:	00000906 	br	800835c <xSerialGetChar+0x60>
	}
	else
	{
		uartControl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8008338:	d0a8ae17 	ldw	r2,-23880(gp)
 800833c:	10802014 	ori	r2,r2,128
 8008340:	d0a8ae15 	stw	r2,-23880(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008344:	d0a8ae17 	ldw	r2,-23880(gp)
 8008348:	1007883a 	mov	r3,r2
 800834c:	00840034 	movhi	r2,4096
 8008350:	10912304 	addi	r2,r2,17548
 8008354:	10c00035 	stwio	r3,0(r2)
		return pdFALSE;
 8008358:	0005883a 	mov	r2,zero
	}
}
 800835c:	e037883a 	mov	sp,fp
 8008360:	dfc00117 	ldw	ra,4(sp)
 8008364:	df000017 	ldw	fp,0(sp)
 8008368:	dec00204 	addi	sp,sp,8
 800836c:	f800283a 	ret

08008370 <xSerialPutChar>:
/*---------------------------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, portTickType xBlockTime )
{
 8008370:	defffa04 	addi	sp,sp,-24
 8008374:	dfc00515 	stw	ra,20(sp)
 8008378:	df000415 	stw	fp,16(sp)
 800837c:	df000404 	addi	fp,sp,16
 8008380:	e13ffd15 	stw	r4,-12(fp)
 8008384:	2805883a 	mov	r2,r5
 8008388:	e1bfff15 	stw	r6,-4(fp)
 800838c:	e0bffe05 	stb	r2,-8(fp)
signed portBASE_TYPE lReturn = pdPASS;
 8008390:	00800044 	movi	r2,1
 8008394:	e0bffc15 	stw	r2,-16(fp)

	/* Place the character in the queue of characters to be transmitted. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) == pdPASS )
 8008398:	d0a8ad17 	ldw	r2,-23884(gp)
 800839c:	e0fffe04 	addi	r3,fp,-8
 80083a0:	000f883a 	mov	r7,zero
 80083a4:	e1bfff17 	ldw	r6,-4(fp)
 80083a8:	180b883a 	mov	r5,r3
 80083ac:	1009883a 	mov	r4,r2
 80083b0:	8004cf00 	call	8004cf0 <xQueueGenericSend>
 80083b4:	10800058 	cmpnei	r2,r2,1
 80083b8:	10000b1e 	bne	r2,zero,80083e8 <xSerialPutChar+0x78>
	{
        /*Triggers an interrupt on every character or (down) when queue is full. */
        uartControl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 80083bc:	d0a8ae17 	ldw	r2,-23880(gp)
 80083c0:	10801014 	ori	r2,r2,64
 80083c4:	d0a8ae15 	stw	r2,-23880(gp)
        IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 80083c8:	d0a8ae17 	ldw	r2,-23880(gp)
 80083cc:	1007883a 	mov	r3,r2
 80083d0:	00840034 	movhi	r2,4096
 80083d4:	10912304 	addi	r2,r2,17548
 80083d8:	10c00035 	stwio	r3,0(r2)
        lReturn = pdPASS;
 80083dc:	00800044 	movi	r2,1
 80083e0:	e0bffc15 	stw	r2,-16(fp)
 80083e4:	00000106 	br	80083ec <xSerialPutChar+0x7c>
    }
    else
    {
		lReturn = pdFAIL;
 80083e8:	e03ffc15 	stw	zero,-16(fp)
	}
	return lReturn;
 80083ec:	e0bffc17 	ldw	r2,-16(fp)
}
 80083f0:	e037883a 	mov	sp,fp
 80083f4:	dfc00117 	ldw	ra,4(sp)
 80083f8:	df000017 	ldw	fp,0(sp)
 80083fc:	dec00204 	addi	sp,sp,8
 8008400:	f800283a 	ret

08008404 <vSerialPutString>:
/*---------------------------------------------------------------------------*/

void vSerialPutString( xComPortHandle pxPort, const signed char * const pcString, unsigned short usStringLength )
{
 8008404:	defffa04 	addi	sp,sp,-24
 8008408:	dfc00515 	stw	ra,20(sp)
 800840c:	df000415 	stw	fp,16(sp)
 8008410:	df000404 	addi	fp,sp,16
 8008414:	e13ffd15 	stw	r4,-12(fp)
 8008418:	e17ffe15 	stw	r5,-8(fp)
 800841c:	3005883a 	mov	r2,r6
 8008420:	e0bfff0d 	sth	r2,-4(fp)

	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
 8008424:	e0bffe17 	ldw	r2,-8(fp)
 8008428:	e0bffc15 	stw	r2,-16(fp)
	while( *pxNext )
 800842c:	00000c06 	br	8008460 <vSerialPutString+0x5c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
 8008430:	e0bffc17 	ldw	r2,-16(fp)
 8008434:	10800003 	ldbu	r2,0(r2)
 8008438:	10803fcc 	andi	r2,r2,255
 800843c:	1080201c 	xori	r2,r2,128
 8008440:	10bfe004 	addi	r2,r2,-128
 8008444:	000d883a 	mov	r6,zero
 8008448:	100b883a 	mov	r5,r2
 800844c:	e13ffd17 	ldw	r4,-12(fp)
 8008450:	80083700 	call	8008370 <xSerialPutChar>
		pxNext++;
 8008454:	e0bffc17 	ldw	r2,-16(fp)
 8008458:	10800044 	addi	r2,r2,1
 800845c:	e0bffc15 	stw	r2,-16(fp)
	/* The port handle is not required as this driver only supports UART0. */
	( void ) pxPort;

	/* Send each character in the string, one at a time. */
	pxNext = ( signed char * ) pcString;
	while( *pxNext )
 8008460:	e0bffc17 	ldw	r2,-16(fp)
 8008464:	10800003 	ldbu	r2,0(r2)
 8008468:	10803fcc 	andi	r2,r2,255
 800846c:	1080201c 	xori	r2,r2,128
 8008470:	10bfe004 	addi	r2,r2,-128
 8008474:	103fee1e 	bne	r2,zero,8008430 <vSerialPutString+0x2c>
	{
		xSerialPutChar( pxPort, *pxNext, serNO_BLOCK );
		pxNext++;
	}
}
 8008478:	0001883a 	nop
 800847c:	e037883a 	mov	sp,fp
 8008480:	dfc00117 	ldw	ra,4(sp)
 8008484:	df000017 	ldw	fp,0(sp)
 8008488:	dec00204 	addi	sp,sp,8
 800848c:	f800283a 	ret

08008490 <vUARTInterruptHandler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void vUARTInterruptHandler(void* context)
#else
static void vUARTInterruptHandler(void* context, alt_u32 id)
#endif
{
 8008490:	defffc04 	addi	sp,sp,-16
 8008494:	dfc00315 	stw	ra,12(sp)
 8008498:	df000215 	stw	fp,8(sp)
 800849c:	df000204 	addi	fp,sp,8
 80084a0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 status;

	/* Read the status register in order to determine the cause of the
    interrupt. */
	status = IORD_ALTERA_AVALON_UART_STATUS( UART_BASE );
 80084a4:	00840034 	movhi	r2,4096
 80084a8:	10912204 	addi	r2,r2,17544
 80084ac:	10800037 	ldwio	r2,0(r2)
 80084b0:	e0bffe15 	stw	r2,-8(fp)

	/* Clear any error flags set at the device */
	IOWR_ALTERA_AVALON_UART_STATUS( UART_BASE, 0 );
 80084b4:	0007883a 	mov	r3,zero
 80084b8:	00840034 	movhi	r2,4096
 80084bc:	10912204 	addi	r2,r2,17544
 80084c0:	10c00035 	stwio	r3,0(r2)

	/* process a read irq */
	if ( status & ALTERA_AVALON_UART_STATUS_RRDY_MSK )
 80084c4:	e0bffe17 	ldw	r2,-8(fp)
 80084c8:	1080200c 	andi	r2,r2,128
 80084cc:	10000226 	beq	r2,zero,80084d8 <vUARTInterruptHandler+0x48>
	{
		vUARTReceiveHandler( status );
 80084d0:	e13ffe17 	ldw	r4,-8(fp)
 80084d4:	80085040 	call	8008504 <vUARTReceiveHandler>
	}

	/* process a write irq */
	if ( status & ( ALTERA_AVALON_UART_STATUS_TRDY_MSK  ) )
 80084d8:	e0bffe17 	ldw	r2,-8(fp)
 80084dc:	1080100c 	andi	r2,r2,64
 80084e0:	10000226 	beq	r2,zero,80084ec <vUARTInterruptHandler+0x5c>
	{
		vUARTTransmitHandler( status );
 80084e4:	e13ffe17 	ldw	r4,-8(fp)
 80084e8:	80085a80 	call	80085a8 <vUARTTransmitHandler>
	}
}
 80084ec:	0001883a 	nop
 80084f0:	e037883a 	mov	sp,fp
 80084f4:	dfc00117 	ldw	ra,4(sp)
 80084f8:	df000017 	ldw	fp,0(sp)
 80084fc:	dec00204 	addi	sp,sp,8
 8008500:	f800283a 	ret

08008504 <vUARTReceiveHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTReceiveHandler( alt_u32 status )
{
 8008504:	defffb04 	addi	sp,sp,-20
 8008508:	dfc00415 	stw	ra,16(sp)
 800850c:	df000315 	stw	fp,12(sp)
 8008510:	df000304 	addi	fp,sp,12
 8008514:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8008518:	e03ffe15 	stw	zero,-8(fp)

	/* If there was an error, discard the data */
	if ( status & ( ALTERA_AVALON_UART_STATUS_PE_MSK | ALTERA_AVALON_UART_STATUS_FE_MSK ) )
 800851c:	e0bfff17 	ldw	r2,-4(fp)
 8008520:	108000cc 	andi	r2,r2,3
 8008524:	10000226 	beq	r2,zero,8008530 <vUARTReceiveHandler+0x2c>
	{
        asm("break");
 8008528:	003da03a 	break	0
 800852c:	00001906 	br	8008594 <vUARTReceiveHandler+0x90>
		return;
	}

	/* Transfer data from the device to the circular buffer */
	cChar = IORD_ALTERA_AVALON_UART_RXDATA( UART_BASE );
 8008530:	00840034 	movhi	r2,4096
 8008534:	10912004 	addi	r2,r2,17536
 8008538:	10800037 	ldwio	r2,0(r2)
 800853c:	e0bffd05 	stb	r2,-12(fp)
	if ( pdTRUE != xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken ) )
 8008540:	d0a8ac17 	ldw	r2,-23888(gp)
 8008544:	e0fffe04 	addi	r3,fp,-8
 8008548:	000f883a 	mov	r7,zero
 800854c:	180d883a 	mov	r6,r3
 8008550:	e17ffd04 	addi	r5,fp,-12
 8008554:	1009883a 	mov	r4,r2
 8008558:	8004ea40 	call	8004ea4 <xQueueGenericSendFromISR>
 800855c:	10800060 	cmpeqi	r2,r2,1
 8008560:	1000091e 	bne	r2,zero,8008588 <vUARTReceiveHandler+0x84>
	{
		/* If the circular buffer was full, disable interrupts. Interrupts will
        be re-enabled when data is removed from the buffer. */
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8008564:	d0e8ae17 	ldw	r3,-23880(gp)
 8008568:	00bfdfc4 	movi	r2,-129
 800856c:	1884703a 	and	r2,r3,r2
 8008570:	d0a8ae15 	stw	r2,-23880(gp)
		IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008574:	d0a8ae17 	ldw	r2,-23880(gp)
 8008578:	1007883a 	mov	r3,r2
 800857c:	00840034 	movhi	r2,4096
 8008580:	10912304 	addi	r2,r2,17548
 8008584:	10c00035 	stwio	r3,0(r2)
	}

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8008588:	e0bffe17 	ldw	r2,-8(fp)
 800858c:	10000126 	beq	r2,zero,8008594 <vUARTReceiveHandler+0x90>
 8008590:	8006d640 	call	8006d64 <vTaskSwitchContext>
}
 8008594:	e037883a 	mov	sp,fp
 8008598:	dfc00117 	ldw	ra,4(sp)
 800859c:	df000017 	ldw	fp,0(sp)
 80085a0:	dec00204 	addi	sp,sp,8
 80085a4:	f800283a 	ret

080085a8 <vUARTTransmitHandler>:
/*---------------------------------------------------------------------------*/

static void vUARTTransmitHandler( alt_u32 status )
{
 80085a8:	defffb04 	addi	sp,sp,-20
 80085ac:	dfc00415 	stw	ra,16(sp)
 80085b0:	df000315 	stw	fp,12(sp)
 80085b4:	df000304 	addi	fp,sp,12
 80085b8:	e13fff15 	stw	r4,-4(fp)
signed char cChar;
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80085bc:	e03ffe15 	stw	zero,-8(fp)
	/* Transfer data if there is some ready to be transferred */
	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &xHigherPriorityTaskWoken ) == pdTRUE )
 80085c0:	d0a8ad17 	ldw	r2,-23884(gp)
 80085c4:	e0fffe04 	addi	r3,fp,-8
 80085c8:	180d883a 	mov	r6,r3
 80085cc:	e17ffd04 	addi	r5,fp,-12
 80085d0:	1009883a 	mov	r4,r2
 80085d4:	80055d00 	call	80055d0 <xQueueReceiveFromISR>
 80085d8:	10800058 	cmpnei	r2,r2,1
 80085dc:	1000081e 	bne	r2,zero,8008600 <vUARTTransmitHandler+0x58>
	{
		IOWR_ALTERA_AVALON_UART_TXDATA( UART_BASE, cChar );
 80085e0:	e0bffd03 	ldbu	r2,-12(fp)
 80085e4:	10c03fcc 	andi	r3,r2,255
 80085e8:	18c0201c 	xori	r3,r3,128
 80085ec:	18ffe004 	addi	r3,r3,-128
 80085f0:	00840034 	movhi	r2,4096
 80085f4:	10912104 	addi	r2,r2,17540
 80085f8:	10c00035 	stwio	r3,0(r2)
 80085fc:	00000406 	br	8008610 <vUARTTransmitHandler+0x68>
    }
    else
    {
		uartControl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8008600:	d0e8ae17 	ldw	r3,-23880(gp)
 8008604:	00bfefc4 	movi	r2,-65
 8008608:	1884703a 	and	r2,r3,r2
 800860c:	d0a8ae15 	stw	r2,-23880(gp)
    }

	IOWR_ALTERA_AVALON_UART_CONTROL( UART_BASE, uartControl );
 8008610:	d0a8ae17 	ldw	r2,-23880(gp)
 8008614:	1007883a 	mov	r3,r2
 8008618:	00840034 	movhi	r2,4096
 800861c:	10912304 	addi	r2,r2,17548
 8008620:	10c00035 	stwio	r3,0(r2)
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8008624:	e0bffe17 	ldw	r2,-8(fp)
 8008628:	10000126 	beq	r2,zero,8008630 <vUARTTransmitHandler+0x88>
 800862c:	8006d640 	call	8006d64 <vTaskSwitchContext>
}
 8008630:	0001883a 	nop
 8008634:	e037883a 	mov	sp,fp
 8008638:	dfc00117 	ldw	ra,4(sp)
 800863c:	df000017 	ldw	fp,0(sp)
 8008640:	dec00204 	addi	sp,sp,8
 8008644:	f800283a 	ret

08008648 <__divsi3>:
 8008648:	20001b16 	blt	r4,zero,80086b8 <__divsi3+0x70>
 800864c:	000f883a 	mov	r7,zero
 8008650:	28001616 	blt	r5,zero,80086ac <__divsi3+0x64>
 8008654:	200d883a 	mov	r6,r4
 8008658:	29001a2e 	bgeu	r5,r4,80086c4 <__divsi3+0x7c>
 800865c:	00800804 	movi	r2,32
 8008660:	00c00044 	movi	r3,1
 8008664:	00000106 	br	800866c <__divsi3+0x24>
 8008668:	10000d26 	beq	r2,zero,80086a0 <__divsi3+0x58>
 800866c:	294b883a 	add	r5,r5,r5
 8008670:	10bfffc4 	addi	r2,r2,-1
 8008674:	18c7883a 	add	r3,r3,r3
 8008678:	293ffb36 	bltu	r5,r4,8008668 <__divsi3+0x20>
 800867c:	0005883a 	mov	r2,zero
 8008680:	18000726 	beq	r3,zero,80086a0 <__divsi3+0x58>
 8008684:	0005883a 	mov	r2,zero
 8008688:	31400236 	bltu	r6,r5,8008694 <__divsi3+0x4c>
 800868c:	314dc83a 	sub	r6,r6,r5
 8008690:	10c4b03a 	or	r2,r2,r3
 8008694:	1806d07a 	srli	r3,r3,1
 8008698:	280ad07a 	srli	r5,r5,1
 800869c:	183ffa1e 	bne	r3,zero,8008688 <__divsi3+0x40>
 80086a0:	38000126 	beq	r7,zero,80086a8 <__divsi3+0x60>
 80086a4:	0085c83a 	sub	r2,zero,r2
 80086a8:	f800283a 	ret
 80086ac:	014bc83a 	sub	r5,zero,r5
 80086b0:	39c0005c 	xori	r7,r7,1
 80086b4:	003fe706 	br	8008654 <__divsi3+0xc>
 80086b8:	0109c83a 	sub	r4,zero,r4
 80086bc:	01c00044 	movi	r7,1
 80086c0:	003fe306 	br	8008650 <__divsi3+0x8>
 80086c4:	00c00044 	movi	r3,1
 80086c8:	003fee06 	br	8008684 <__divsi3+0x3c>

080086cc <__modsi3>:
 80086cc:	20001716 	blt	r4,zero,800872c <__modsi3+0x60>
 80086d0:	000f883a 	mov	r7,zero
 80086d4:	2005883a 	mov	r2,r4
 80086d8:	28001216 	blt	r5,zero,8008724 <__modsi3+0x58>
 80086dc:	2900162e 	bgeu	r5,r4,8008738 <__modsi3+0x6c>
 80086e0:	01800804 	movi	r6,32
 80086e4:	00c00044 	movi	r3,1
 80086e8:	00000106 	br	80086f0 <__modsi3+0x24>
 80086ec:	30000a26 	beq	r6,zero,8008718 <__modsi3+0x4c>
 80086f0:	294b883a 	add	r5,r5,r5
 80086f4:	31bfffc4 	addi	r6,r6,-1
 80086f8:	18c7883a 	add	r3,r3,r3
 80086fc:	293ffb36 	bltu	r5,r4,80086ec <__modsi3+0x20>
 8008700:	18000526 	beq	r3,zero,8008718 <__modsi3+0x4c>
 8008704:	1806d07a 	srli	r3,r3,1
 8008708:	11400136 	bltu	r2,r5,8008710 <__modsi3+0x44>
 800870c:	1145c83a 	sub	r2,r2,r5
 8008710:	280ad07a 	srli	r5,r5,1
 8008714:	183ffb1e 	bne	r3,zero,8008704 <__modsi3+0x38>
 8008718:	38000126 	beq	r7,zero,8008720 <__modsi3+0x54>
 800871c:	0085c83a 	sub	r2,zero,r2
 8008720:	f800283a 	ret
 8008724:	014bc83a 	sub	r5,zero,r5
 8008728:	003fec06 	br	80086dc <__modsi3+0x10>
 800872c:	0109c83a 	sub	r4,zero,r4
 8008730:	01c00044 	movi	r7,1
 8008734:	003fe706 	br	80086d4 <__modsi3+0x8>
 8008738:	00c00044 	movi	r3,1
 800873c:	003ff106 	br	8008704 <__modsi3+0x38>

08008740 <__udivsi3>:
 8008740:	200d883a 	mov	r6,r4
 8008744:	2900152e 	bgeu	r5,r4,800879c <__udivsi3+0x5c>
 8008748:	28001416 	blt	r5,zero,800879c <__udivsi3+0x5c>
 800874c:	00800804 	movi	r2,32
 8008750:	00c00044 	movi	r3,1
 8008754:	00000206 	br	8008760 <__udivsi3+0x20>
 8008758:	10000e26 	beq	r2,zero,8008794 <__udivsi3+0x54>
 800875c:	28000516 	blt	r5,zero,8008774 <__udivsi3+0x34>
 8008760:	294b883a 	add	r5,r5,r5
 8008764:	10bfffc4 	addi	r2,r2,-1
 8008768:	18c7883a 	add	r3,r3,r3
 800876c:	293ffa36 	bltu	r5,r4,8008758 <__udivsi3+0x18>
 8008770:	18000826 	beq	r3,zero,8008794 <__udivsi3+0x54>
 8008774:	0005883a 	mov	r2,zero
 8008778:	31400236 	bltu	r6,r5,8008784 <__udivsi3+0x44>
 800877c:	314dc83a 	sub	r6,r6,r5
 8008780:	10c4b03a 	or	r2,r2,r3
 8008784:	1806d07a 	srli	r3,r3,1
 8008788:	280ad07a 	srli	r5,r5,1
 800878c:	183ffa1e 	bne	r3,zero,8008778 <__udivsi3+0x38>
 8008790:	f800283a 	ret
 8008794:	0005883a 	mov	r2,zero
 8008798:	f800283a 	ret
 800879c:	00c00044 	movi	r3,1
 80087a0:	003ff406 	br	8008774 <__udivsi3+0x34>

080087a4 <__umodsi3>:
 80087a4:	2005883a 	mov	r2,r4
 80087a8:	2900122e 	bgeu	r5,r4,80087f4 <__umodsi3+0x50>
 80087ac:	28001116 	blt	r5,zero,80087f4 <__umodsi3+0x50>
 80087b0:	01800804 	movi	r6,32
 80087b4:	00c00044 	movi	r3,1
 80087b8:	00000206 	br	80087c4 <__umodsi3+0x20>
 80087bc:	30000c26 	beq	r6,zero,80087f0 <__umodsi3+0x4c>
 80087c0:	28000516 	blt	r5,zero,80087d8 <__umodsi3+0x34>
 80087c4:	294b883a 	add	r5,r5,r5
 80087c8:	31bfffc4 	addi	r6,r6,-1
 80087cc:	18c7883a 	add	r3,r3,r3
 80087d0:	293ffa36 	bltu	r5,r4,80087bc <__umodsi3+0x18>
 80087d4:	18000626 	beq	r3,zero,80087f0 <__umodsi3+0x4c>
 80087d8:	1806d07a 	srli	r3,r3,1
 80087dc:	11400136 	bltu	r2,r5,80087e4 <__umodsi3+0x40>
 80087e0:	1145c83a 	sub	r2,r2,r5
 80087e4:	280ad07a 	srli	r5,r5,1
 80087e8:	183ffb1e 	bne	r3,zero,80087d8 <__umodsi3+0x34>
 80087ec:	f800283a 	ret
 80087f0:	f800283a 	ret
 80087f4:	00c00044 	movi	r3,1
 80087f8:	003ff706 	br	80087d8 <__umodsi3+0x34>

080087fc <__mulsi3>:
 80087fc:	0005883a 	mov	r2,zero
 8008800:	20000726 	beq	r4,zero,8008820 <__mulsi3+0x24>
 8008804:	20c0004c 	andi	r3,r4,1
 8008808:	2008d07a 	srli	r4,r4,1
 800880c:	18000126 	beq	r3,zero,8008814 <__mulsi3+0x18>
 8008810:	1145883a 	add	r2,r2,r5
 8008814:	294b883a 	add	r5,r5,r5
 8008818:	203ffa1e 	bne	r4,zero,8008804 <__mulsi3+0x8>
 800881c:	f800283a 	ret
 8008820:	f800283a 	ret

08008824 <_fopen_r>:
 8008824:	defffa04 	addi	sp,sp,-24
 8008828:	3005883a 	mov	r2,r6
 800882c:	dcc00415 	stw	r19,16(sp)
 8008830:	d80d883a 	mov	r6,sp
 8008834:	2827883a 	mov	r19,r5
 8008838:	100b883a 	mov	r5,r2
 800883c:	dc800315 	stw	r18,12(sp)
 8008840:	dfc00515 	stw	ra,20(sp)
 8008844:	dc400215 	stw	r17,8(sp)
 8008848:	dc000115 	stw	r16,4(sp)
 800884c:	2025883a 	mov	r18,r4
 8008850:	800e5d00 	call	800e5d0 <__sflags>
 8008854:	10002726 	beq	r2,zero,80088f4 <_fopen_r+0xd0>
 8008858:	9009883a 	mov	r4,r18
 800885c:	1023883a 	mov	r17,r2
 8008860:	800e4500 	call	800e450 <__sfp>
 8008864:	1021883a 	mov	r16,r2
 8008868:	10002226 	beq	r2,zero,80088f4 <_fopen_r+0xd0>
 800886c:	d9800017 	ldw	r6,0(sp)
 8008870:	01c06d84 	movi	r7,438
 8008874:	980b883a 	mov	r5,r19
 8008878:	9009883a 	mov	r4,r18
 800887c:	8009b540 	call	8009b54 <_open_r>
 8008880:	10001916 	blt	r2,zero,80088e8 <_fopen_r+0xc4>
 8008884:	8080038d 	sth	r2,14(r16)
 8008888:	00820074 	movhi	r2,2049
 800888c:	10a7ce04 	addi	r2,r2,-24776
 8008890:	80800815 	stw	r2,32(r16)
 8008894:	00820074 	movhi	r2,2049
 8008898:	10a7e504 	addi	r2,r2,-24684
 800889c:	80800915 	stw	r2,36(r16)
 80088a0:	00820074 	movhi	r2,2049
 80088a4:	10a80404 	addi	r2,r2,-24560
 80088a8:	80800a15 	stw	r2,40(r16)
 80088ac:	00820074 	movhi	r2,2049
 80088b0:	10a81b04 	addi	r2,r2,-24468
 80088b4:	8440030d 	sth	r17,12(r16)
 80088b8:	84000715 	stw	r16,28(r16)
 80088bc:	80800b15 	stw	r2,44(r16)
 80088c0:	8c40400c 	andi	r17,r17,256
 80088c4:	88000d1e 	bne	r17,zero,80088fc <_fopen_r+0xd8>
 80088c8:	8005883a 	mov	r2,r16
 80088cc:	dfc00517 	ldw	ra,20(sp)
 80088d0:	dcc00417 	ldw	r19,16(sp)
 80088d4:	dc800317 	ldw	r18,12(sp)
 80088d8:	dc400217 	ldw	r17,8(sp)
 80088dc:	dc000117 	ldw	r16,4(sp)
 80088e0:	dec00604 	addi	sp,sp,24
 80088e4:	f800283a 	ret
 80088e8:	800e5900 	call	800e590 <__sfp_lock_acquire>
 80088ec:	8000030d 	sth	zero,12(r16)
 80088f0:	800e5940 	call	800e594 <__sfp_lock_release>
 80088f4:	0005883a 	mov	r2,zero
 80088f8:	003ff406 	br	80088cc <_fopen_r+0xa8>
 80088fc:	01c00084 	movi	r7,2
 8008900:	000d883a 	mov	r6,zero
 8008904:	800b883a 	mov	r5,r16
 8008908:	9009883a 	mov	r4,r18
 800890c:	80089300 	call	8008930 <_fseek_r>
 8008910:	8005883a 	mov	r2,r16
 8008914:	003fed06 	br	80088cc <_fopen_r+0xa8>

08008918 <fopen>:
 8008918:	008200b4 	movhi	r2,2050
 800891c:	10b1bc04 	addi	r2,r2,-14608
 8008920:	280d883a 	mov	r6,r5
 8008924:	200b883a 	mov	r5,r4
 8008928:	11000017 	ldw	r4,0(r2)
 800892c:	80088241 	jmpi	8008824 <_fopen_r>

08008930 <_fseek_r>:
 8008930:	80089501 	jmpi	8008950 <_fseeko_r>

08008934 <fseek>:
 8008934:	008200b4 	movhi	r2,2050
 8008938:	10b1bc04 	addi	r2,r2,-14608
 800893c:	300f883a 	mov	r7,r6
 8008940:	280d883a 	mov	r6,r5
 8008944:	200b883a 	mov	r5,r4
 8008948:	11000017 	ldw	r4,0(r2)
 800894c:	80089501 	jmpi	8008950 <_fseeko_r>

08008950 <_fseeko_r>:
 8008950:	deffe804 	addi	sp,sp,-96
 8008954:	dd401415 	stw	r21,80(sp)
 8008958:	dc801115 	stw	r18,68(sp)
 800895c:	dc401015 	stw	r17,64(sp)
 8008960:	dc000f15 	stw	r16,60(sp)
 8008964:	dfc01715 	stw	ra,92(sp)
 8008968:	ddc01615 	stw	r23,88(sp)
 800896c:	dd801515 	stw	r22,84(sp)
 8008970:	dd001315 	stw	r20,76(sp)
 8008974:	dcc01215 	stw	r19,72(sp)
 8008978:	2023883a 	mov	r17,r4
 800897c:	2821883a 	mov	r16,r5
 8008980:	302b883a 	mov	r21,r6
 8008984:	3825883a 	mov	r18,r7
 8008988:	20000226 	beq	r4,zero,8008994 <_fseeko_r+0x44>
 800898c:	20800e17 	ldw	r2,56(r4)
 8008990:	10005a26 	beq	r2,zero,8008afc <_fseeko_r+0x1ac>
 8008994:	8080030b 	ldhu	r2,12(r16)
 8008998:	00c04204 	movi	r3,264
 800899c:	1080420c 	andi	r2,r2,264
 80089a0:	10c05b26 	beq	r2,r3,8008b10 <_fseeko_r+0x1c0>
 80089a4:	85000a17 	ldw	r20,40(r16)
 80089a8:	a000f626 	beq	r20,zero,8008d84 <_fseeko_r+0x434>
 80089ac:	00800044 	movi	r2,1
 80089b0:	90803e26 	beq	r18,r2,8008aac <_fseeko_r+0x15c>
 80089b4:	00800084 	movi	r2,2
 80089b8:	90801026 	beq	r18,r2,80089fc <_fseeko_r+0xac>
 80089bc:	90000f26 	beq	r18,zero,80089fc <_fseeko_r+0xac>
 80089c0:	00800584 	movi	r2,22
 80089c4:	88800015 	stw	r2,0(r17)
 80089c8:	04ffffc4 	movi	r19,-1
 80089cc:	9805883a 	mov	r2,r19
 80089d0:	dfc01717 	ldw	ra,92(sp)
 80089d4:	ddc01617 	ldw	r23,88(sp)
 80089d8:	dd801517 	ldw	r22,84(sp)
 80089dc:	dd401417 	ldw	r21,80(sp)
 80089e0:	dd001317 	ldw	r20,76(sp)
 80089e4:	dcc01217 	ldw	r19,72(sp)
 80089e8:	dc801117 	ldw	r18,68(sp)
 80089ec:	dc401017 	ldw	r17,64(sp)
 80089f0:	dc000f17 	ldw	r16,60(sp)
 80089f4:	dec01804 	addi	sp,sp,96
 80089f8:	f800283a 	ret
 80089fc:	80800417 	ldw	r2,16(r16)
 8008a00:	002f883a 	mov	r23,zero
 8008a04:	0027883a 	mov	r19,zero
 8008a08:	1000cb26 	beq	r2,zero,8008d38 <_fseeko_r+0x3e8>
 8008a0c:	8080030b 	ldhu	r2,12(r16)
 8008a10:	10c2068c 	andi	r3,r2,2074
 8008a14:	1800071e 	bne	r3,zero,8008a34 <_fseeko_r+0xe4>
 8008a18:	10c1000c 	andi	r3,r2,1024
 8008a1c:	1800451e 	bne	r3,zero,8008b34 <_fseeko_r+0x1e4>
 8008a20:	00c20074 	movhi	r3,2049
 8008a24:	18e80404 	addi	r3,r3,-24560
 8008a28:	a0c0b726 	beq	r20,r3,8008d08 <_fseeko_r+0x3b8>
 8008a2c:	10820014 	ori	r2,r2,2048
 8008a30:	8080030d 	sth	r2,12(r16)
 8008a34:	800b883a 	mov	r5,r16
 8008a38:	8809883a 	mov	r4,r17
 8008a3c:	800e1940 	call	800e194 <_fflush_r>
 8008a40:	1027883a 	mov	r19,r2
 8008a44:	103fe01e 	bne	r2,zero,80089c8 <_fseeko_r+0x78>
 8008a48:	81400717 	ldw	r5,28(r16)
 8008a4c:	900f883a 	mov	r7,r18
 8008a50:	a80d883a 	mov	r6,r21
 8008a54:	8809883a 	mov	r4,r17
 8008a58:	a03ee83a 	callr	r20
 8008a5c:	00ffffc4 	movi	r3,-1
 8008a60:	10ffd926 	beq	r2,r3,80089c8 <_fseeko_r+0x78>
 8008a64:	81400c17 	ldw	r5,48(r16)
 8008a68:	28000526 	beq	r5,zero,8008a80 <_fseeko_r+0x130>
 8008a6c:	80801004 	addi	r2,r16,64
 8008a70:	28800226 	beq	r5,r2,8008a7c <_fseeko_r+0x12c>
 8008a74:	8809883a 	mov	r4,r17
 8008a78:	800e7a00 	call	800e7a0 <_free_r>
 8008a7c:	80000c15 	stw	zero,48(r16)
 8008a80:	8080030b 	ldhu	r2,12(r16)
 8008a84:	80c00417 	ldw	r3,16(r16)
 8008a88:	80000115 	stw	zero,4(r16)
 8008a8c:	10bdf7cc 	andi	r2,r2,63455
 8008a90:	80c00015 	stw	r3,0(r16)
 8008a94:	8080030d 	sth	r2,12(r16)
 8008a98:	01800204 	movi	r6,8
 8008a9c:	000b883a 	mov	r5,zero
 8008aa0:	81001704 	addi	r4,r16,92
 8008aa4:	8009a2c0 	call	8009a2c <memset>
 8008aa8:	003fc806 	br	80089cc <_fseeko_r+0x7c>
 8008aac:	800b883a 	mov	r5,r16
 8008ab0:	8809883a 	mov	r4,r17
 8008ab4:	800e1940 	call	800e194 <_fflush_r>
 8008ab8:	8080030b 	ldhu	r2,12(r16)
 8008abc:	10c4000c 	andi	r3,r2,4096
 8008ac0:	18008726 	beq	r3,zero,8008ce0 <_fseeko_r+0x390>
 8008ac4:	84c01417 	ldw	r19,80(r16)
 8008ac8:	10c0010c 	andi	r3,r2,4
 8008acc:	1800431e 	bne	r3,zero,8008bdc <_fseeko_r+0x28c>
 8008ad0:	1080020c 	andi	r2,r2,8
 8008ad4:	10008026 	beq	r2,zero,8008cd8 <_fseeko_r+0x388>
 8008ad8:	80c00017 	ldw	r3,0(r16)
 8008adc:	80800417 	ldw	r2,16(r16)
 8008ae0:	18000226 	beq	r3,zero,8008aec <_fseeko_r+0x19c>
 8008ae4:	1887c83a 	sub	r3,r3,r2
 8008ae8:	98e7883a 	add	r19,r19,r3
 8008aec:	aceb883a 	add	r21,r21,r19
 8008af0:	05c00044 	movi	r23,1
 8008af4:	0025883a 	mov	r18,zero
 8008af8:	003fc306 	br	8008a08 <_fseeko_r+0xb8>
 8008afc:	800e5800 	call	800e580 <__sinit>
 8008b00:	8080030b 	ldhu	r2,12(r16)
 8008b04:	00c04204 	movi	r3,264
 8008b08:	1080420c 	andi	r2,r2,264
 8008b0c:	10ffa51e 	bne	r2,r3,80089a4 <_fseeko_r+0x54>
 8008b10:	800b883a 	mov	r5,r16
 8008b14:	8809883a 	mov	r4,r17
 8008b18:	800e1940 	call	800e194 <_fflush_r>
 8008b1c:	003fa106 	br	80089a4 <_fseeko_r+0x54>
 8008b20:	8080030b 	ldhu	r2,12(r16)
 8008b24:	00c10004 	movi	r3,1024
 8008b28:	80c01315 	stw	r3,76(r16)
 8008b2c:	10c4b03a 	or	r2,r2,r3
 8008b30:	8080030d 	sth	r2,12(r16)
 8008b34:	9000311e 	bne	r18,zero,8008bfc <_fseeko_r+0x2ac>
 8008b38:	a82d883a 	mov	r22,r21
 8008b3c:	b800371e 	bne	r23,zero,8008c1c <_fseeko_r+0x2cc>
 8008b40:	8080030b 	ldhu	r2,12(r16)
 8008b44:	1084000c 	andi	r2,r2,4096
 8008b48:	10007f26 	beq	r2,zero,8008d48 <_fseeko_r+0x3f8>
 8008b4c:	80801417 	ldw	r2,80(r16)
 8008b50:	81800117 	ldw	r6,4(r16)
 8008b54:	81400c17 	ldw	r5,48(r16)
 8008b58:	11a7c83a 	sub	r19,r2,r6
 8008b5c:	28008226 	beq	r5,zero,8008d68 <_fseeko_r+0x418>
 8008b60:	81c00f17 	ldw	r7,60(r16)
 8008b64:	99e7c83a 	sub	r19,r19,r7
 8008b68:	81000e17 	ldw	r4,56(r16)
 8008b6c:	80800417 	ldw	r2,16(r16)
 8008b70:	99a7883a 	add	r19,r19,r6
 8008b74:	2087c83a 	sub	r3,r4,r2
 8008b78:	98e7c83a 	sub	r19,r19,r3
 8008b7c:	38c7883a 	add	r3,r7,r3
 8008b80:	b4c02b16 	blt	r22,r19,8008c30 <_fseeko_r+0x2e0>
 8008b84:	98c9883a 	add	r4,r19,r3
 8008b88:	b100292e 	bgeu	r22,r4,8008c30 <_fseeko_r+0x2e0>
 8008b8c:	b4e7c83a 	sub	r19,r22,r19
 8008b90:	14c5883a 	add	r2,r2,r19
 8008b94:	1ce7c83a 	sub	r19,r3,r19
 8008b98:	80800015 	stw	r2,0(r16)
 8008b9c:	84c00115 	stw	r19,4(r16)
 8008ba0:	28000526 	beq	r5,zero,8008bb8 <_fseeko_r+0x268>
 8008ba4:	80801004 	addi	r2,r16,64
 8008ba8:	28800226 	beq	r5,r2,8008bb4 <_fseeko_r+0x264>
 8008bac:	8809883a 	mov	r4,r17
 8008bb0:	800e7a00 	call	800e7a0 <_free_r>
 8008bb4:	80000c15 	stw	zero,48(r16)
 8008bb8:	8080030b 	ldhu	r2,12(r16)
 8008bbc:	01800204 	movi	r6,8
 8008bc0:	000b883a 	mov	r5,zero
 8008bc4:	10bff7cc 	andi	r2,r2,65503
 8008bc8:	8080030d 	sth	r2,12(r16)
 8008bcc:	81001704 	addi	r4,r16,92
 8008bd0:	8009a2c0 	call	8009a2c <memset>
 8008bd4:	0027883a 	mov	r19,zero
 8008bd8:	003f7c06 	br	80089cc <_fseeko_r+0x7c>
 8008bdc:	80c00117 	ldw	r3,4(r16)
 8008be0:	80800c17 	ldw	r2,48(r16)
 8008be4:	98e7c83a 	sub	r19,r19,r3
 8008be8:	10003b26 	beq	r2,zero,8008cd8 <_fseeko_r+0x388>
 8008bec:	80c00f17 	ldw	r3,60(r16)
 8008bf0:	80800417 	ldw	r2,16(r16)
 8008bf4:	98e7c83a 	sub	r19,r19,r3
 8008bf8:	003fbc06 	br	8008aec <_fseeko_r+0x19c>
 8008bfc:	8140038f 	ldh	r5,14(r16)
 8008c00:	d80d883a 	mov	r6,sp
 8008c04:	8809883a 	mov	r4,r17
 8008c08:	8008db00 	call	8008db0 <_fstat_r>
 8008c0c:	103f891e 	bne	r2,zero,8008a34 <_fseeko_r+0xe4>
 8008c10:	dd800417 	ldw	r22,16(sp)
 8008c14:	adad883a 	add	r22,r21,r22
 8008c18:	b83fc926 	beq	r23,zero,8008b40 <_fseeko_r+0x1f0>
 8008c1c:	81400c17 	ldw	r5,48(r16)
 8008c20:	81800117 	ldw	r6,4(r16)
 8008c24:	28005026 	beq	r5,zero,8008d68 <_fseeko_r+0x418>
 8008c28:	81c00f17 	ldw	r7,60(r16)
 8008c2c:	003fce06 	br	8008b68 <_fseeko_r+0x218>
 8008c30:	84c01317 	ldw	r19,76(r16)
 8008c34:	81400717 	ldw	r5,28(r16)
 8008c38:	000f883a 	mov	r7,zero
 8008c3c:	04e7c83a 	sub	r19,zero,r19
 8008c40:	9da6703a 	and	r19,r19,r22
 8008c44:	980d883a 	mov	r6,r19
 8008c48:	8809883a 	mov	r4,r17
 8008c4c:	a03ee83a 	callr	r20
 8008c50:	00ffffc4 	movi	r3,-1
 8008c54:	10ff7726 	beq	r2,r3,8008a34 <_fseeko_r+0xe4>
 8008c58:	80800417 	ldw	r2,16(r16)
 8008c5c:	81400c17 	ldw	r5,48(r16)
 8008c60:	80000115 	stw	zero,4(r16)
 8008c64:	80800015 	stw	r2,0(r16)
 8008c68:	28000526 	beq	r5,zero,8008c80 <_fseeko_r+0x330>
 8008c6c:	80801004 	addi	r2,r16,64
 8008c70:	28800226 	beq	r5,r2,8008c7c <_fseeko_r+0x32c>
 8008c74:	8809883a 	mov	r4,r17
 8008c78:	800e7a00 	call	800e7a0 <_free_r>
 8008c7c:	80000c15 	stw	zero,48(r16)
 8008c80:	8080030b 	ldhu	r2,12(r16)
 8008c84:	b4e7c83a 	sub	r19,r22,r19
 8008c88:	10bff7cc 	andi	r2,r2,65503
 8008c8c:	8080030d 	sth	r2,12(r16)
 8008c90:	98000b26 	beq	r19,zero,8008cc0 <_fseeko_r+0x370>
 8008c94:	800b883a 	mov	r5,r16
 8008c98:	8809883a 	mov	r4,r17
 8008c9c:	8009d100 	call	8009d10 <__srefill_r>
 8008ca0:	103f641e 	bne	r2,zero,8008a34 <_fseeko_r+0xe4>
 8008ca4:	80800117 	ldw	r2,4(r16)
 8008ca8:	14ff6236 	bltu	r2,r19,8008a34 <_fseeko_r+0xe4>
 8008cac:	80c00017 	ldw	r3,0(r16)
 8008cb0:	14c5c83a 	sub	r2,r2,r19
 8008cb4:	80800115 	stw	r2,4(r16)
 8008cb8:	1ce7883a 	add	r19,r3,r19
 8008cbc:	84c00015 	stw	r19,0(r16)
 8008cc0:	01800204 	movi	r6,8
 8008cc4:	000b883a 	mov	r5,zero
 8008cc8:	81001704 	addi	r4,r16,92
 8008ccc:	8009a2c0 	call	8009a2c <memset>
 8008cd0:	0027883a 	mov	r19,zero
 8008cd4:	003f3d06 	br	80089cc <_fseeko_r+0x7c>
 8008cd8:	80800417 	ldw	r2,16(r16)
 8008cdc:	003f8306 	br	8008aec <_fseeko_r+0x19c>
 8008ce0:	81400717 	ldw	r5,28(r16)
 8008ce4:	900f883a 	mov	r7,r18
 8008ce8:	000d883a 	mov	r6,zero
 8008cec:	8809883a 	mov	r4,r17
 8008cf0:	a03ee83a 	callr	r20
 8008cf4:	1027883a 	mov	r19,r2
 8008cf8:	00bfffc4 	movi	r2,-1
 8008cfc:	98bf3226 	beq	r19,r2,80089c8 <_fseeko_r+0x78>
 8008d00:	8080030b 	ldhu	r2,12(r16)
 8008d04:	003f7006 	br	8008ac8 <_fseeko_r+0x178>
 8008d08:	8140038f 	ldh	r5,14(r16)
 8008d0c:	283f4716 	blt	r5,zero,8008a2c <_fseeko_r+0xdc>
 8008d10:	d80d883a 	mov	r6,sp
 8008d14:	8809883a 	mov	r4,r17
 8008d18:	8008db00 	call	8008db0 <_fstat_r>
 8008d1c:	1000041e 	bne	r2,zero,8008d30 <_fseeko_r+0x3e0>
 8008d20:	d8800117 	ldw	r2,4(sp)
 8008d24:	00e00014 	movui	r3,32768
 8008d28:	10bc000c 	andi	r2,r2,61440
 8008d2c:	10ff7c26 	beq	r2,r3,8008b20 <_fseeko_r+0x1d0>
 8008d30:	8080030b 	ldhu	r2,12(r16)
 8008d34:	003f3d06 	br	8008a2c <_fseeko_r+0xdc>
 8008d38:	800b883a 	mov	r5,r16
 8008d3c:	8809883a 	mov	r4,r17
 8008d40:	8008f1c0 	call	8008f1c <__smakebuf_r>
 8008d44:	003f3106 	br	8008a0c <_fseeko_r+0xbc>
 8008d48:	81400717 	ldw	r5,28(r16)
 8008d4c:	01c00044 	movi	r7,1
 8008d50:	000d883a 	mov	r6,zero
 8008d54:	8809883a 	mov	r4,r17
 8008d58:	a03ee83a 	callr	r20
 8008d5c:	00ffffc4 	movi	r3,-1
 8008d60:	10ff7b1e 	bne	r2,r3,8008b50 <_fseeko_r+0x200>
 8008d64:	003f3306 	br	8008a34 <_fseeko_r+0xe4>
 8008d68:	80c00017 	ldw	r3,0(r16)
 8008d6c:	80800417 	ldw	r2,16(r16)
 8008d70:	000b883a 	mov	r5,zero
 8008d74:	1887c83a 	sub	r3,r3,r2
 8008d78:	98e7c83a 	sub	r19,r19,r3
 8008d7c:	30c7883a 	add	r3,r6,r3
 8008d80:	003f7f06 	br	8008b80 <_fseeko_r+0x230>
 8008d84:	00800744 	movi	r2,29
 8008d88:	88800015 	stw	r2,0(r17)
 8008d8c:	04ffffc4 	movi	r19,-1
 8008d90:	003f0e06 	br	80089cc <_fseeko_r+0x7c>

08008d94 <fseeko>:
 8008d94:	008200b4 	movhi	r2,2050
 8008d98:	10b1bc04 	addi	r2,r2,-14608
 8008d9c:	300f883a 	mov	r7,r6
 8008da0:	280d883a 	mov	r6,r5
 8008da4:	200b883a 	mov	r5,r4
 8008da8:	11000017 	ldw	r4,0(r2)
 8008dac:	80089501 	jmpi	8008950 <_fseeko_r>

08008db0 <_fstat_r>:
 8008db0:	defffd04 	addi	sp,sp,-12
 8008db4:	2805883a 	mov	r2,r5
 8008db8:	dc000015 	stw	r16,0(sp)
 8008dbc:	040200b4 	movhi	r16,2050
 8008dc0:	dc400115 	stw	r17,4(sp)
 8008dc4:	843a6704 	addi	r16,r16,-5732
 8008dc8:	2023883a 	mov	r17,r4
 8008dcc:	300b883a 	mov	r5,r6
 8008dd0:	1009883a 	mov	r4,r2
 8008dd4:	dfc00215 	stw	ra,8(sp)
 8008dd8:	80000015 	stw	zero,0(r16)
 8008ddc:	801609c0 	call	801609c <fstat>
 8008de0:	00ffffc4 	movi	r3,-1
 8008de4:	10c00526 	beq	r2,r3,8008dfc <_fstat_r+0x4c>
 8008de8:	dfc00217 	ldw	ra,8(sp)
 8008dec:	dc400117 	ldw	r17,4(sp)
 8008df0:	dc000017 	ldw	r16,0(sp)
 8008df4:	dec00304 	addi	sp,sp,12
 8008df8:	f800283a 	ret
 8008dfc:	80c00017 	ldw	r3,0(r16)
 8008e00:	183ff926 	beq	r3,zero,8008de8 <_fstat_r+0x38>
 8008e04:	88c00015 	stw	r3,0(r17)
 8008e08:	003ff706 	br	8008de8 <_fstat_r+0x38>

08008e0c <_fwrite_r>:
 8008e0c:	defff504 	addi	sp,sp,-44
 8008e10:	dc400715 	stw	r17,28(sp)
 8008e14:	d9400315 	stw	r5,12(sp)
 8008e18:	2023883a 	mov	r17,r4
 8008e1c:	300b883a 	mov	r5,r6
 8008e20:	3809883a 	mov	r4,r7
 8008e24:	dcc00915 	stw	r19,36(sp)
 8008e28:	dc800815 	stw	r18,32(sp)
 8008e2c:	dc000615 	stw	r16,24(sp)
 8008e30:	dfc00a15 	stw	ra,40(sp)
 8008e34:	3027883a 	mov	r19,r6
 8008e38:	3821883a 	mov	r16,r7
 8008e3c:	80087fc0 	call	80087fc <__mulsi3>
 8008e40:	1025883a 	mov	r18,r2
 8008e44:	d8800415 	stw	r2,16(sp)
 8008e48:	d8800215 	stw	r2,8(sp)
 8008e4c:	d8800304 	addi	r2,sp,12
 8008e50:	d8800015 	stw	r2,0(sp)
 8008e54:	00800044 	movi	r2,1
 8008e58:	d8800115 	stw	r2,4(sp)
 8008e5c:	d9400b17 	ldw	r5,44(sp)
 8008e60:	88000226 	beq	r17,zero,8008e6c <_fwrite_r+0x60>
 8008e64:	88800e17 	ldw	r2,56(r17)
 8008e68:	10001a26 	beq	r2,zero,8008ed4 <_fwrite_r+0xc8>
 8008e6c:	2880030b 	ldhu	r2,12(r5)
 8008e70:	10c8000c 	andi	r3,r2,8192
 8008e74:	1800061e 	bne	r3,zero,8008e90 <_fwrite_r+0x84>
 8008e78:	29001917 	ldw	r4,100(r5)
 8008e7c:	00f7ffc4 	movi	r3,-8193
 8008e80:	10880014 	ori	r2,r2,8192
 8008e84:	20c6703a 	and	r3,r4,r3
 8008e88:	2880030d 	sth	r2,12(r5)
 8008e8c:	28c01915 	stw	r3,100(r5)
 8008e90:	d80d883a 	mov	r6,sp
 8008e94:	8809883a 	mov	r4,r17
 8008e98:	800eab00 	call	800eab0 <__sfvwrite_r>
 8008e9c:	10000b26 	beq	r2,zero,8008ecc <_fwrite_r+0xc0>
 8008ea0:	d9000217 	ldw	r4,8(sp)
 8008ea4:	980b883a 	mov	r5,r19
 8008ea8:	9109c83a 	sub	r4,r18,r4
 8008eac:	80087400 	call	8008740 <__udivsi3>
 8008eb0:	dfc00a17 	ldw	ra,40(sp)
 8008eb4:	dcc00917 	ldw	r19,36(sp)
 8008eb8:	dc800817 	ldw	r18,32(sp)
 8008ebc:	dc400717 	ldw	r17,28(sp)
 8008ec0:	dc000617 	ldw	r16,24(sp)
 8008ec4:	dec00b04 	addi	sp,sp,44
 8008ec8:	f800283a 	ret
 8008ecc:	8005883a 	mov	r2,r16
 8008ed0:	003ff706 	br	8008eb0 <_fwrite_r+0xa4>
 8008ed4:	8809883a 	mov	r4,r17
 8008ed8:	d9400515 	stw	r5,20(sp)
 8008edc:	800e5800 	call	800e580 <__sinit>
 8008ee0:	d9400517 	ldw	r5,20(sp)
 8008ee4:	003fe106 	br	8008e6c <_fwrite_r+0x60>

08008ee8 <fwrite>:
 8008ee8:	defffe04 	addi	sp,sp,-8
 8008eec:	008200b4 	movhi	r2,2050
 8008ef0:	d9c00015 	stw	r7,0(sp)
 8008ef4:	10b1bc04 	addi	r2,r2,-14608
 8008ef8:	300f883a 	mov	r7,r6
 8008efc:	280d883a 	mov	r6,r5
 8008f00:	200b883a 	mov	r5,r4
 8008f04:	11000017 	ldw	r4,0(r2)
 8008f08:	dfc00115 	stw	ra,4(sp)
 8008f0c:	8008e0c0 	call	8008e0c <_fwrite_r>
 8008f10:	dfc00117 	ldw	ra,4(sp)
 8008f14:	dec00204 	addi	sp,sp,8
 8008f18:	f800283a 	ret

08008f1c <__smakebuf_r>:
 8008f1c:	2880030b 	ldhu	r2,12(r5)
 8008f20:	10c0008c 	andi	r3,r2,2
 8008f24:	1800411e 	bne	r3,zero,800902c <__smakebuf_r+0x110>
 8008f28:	deffec04 	addi	sp,sp,-80
 8008f2c:	dc000f15 	stw	r16,60(sp)
 8008f30:	2821883a 	mov	r16,r5
 8008f34:	2940038f 	ldh	r5,14(r5)
 8008f38:	dc401015 	stw	r17,64(sp)
 8008f3c:	dfc01315 	stw	ra,76(sp)
 8008f40:	dcc01215 	stw	r19,72(sp)
 8008f44:	dc801115 	stw	r18,68(sp)
 8008f48:	2023883a 	mov	r17,r4
 8008f4c:	28001c16 	blt	r5,zero,8008fc0 <__smakebuf_r+0xa4>
 8008f50:	d80d883a 	mov	r6,sp
 8008f54:	8008db00 	call	8008db0 <_fstat_r>
 8008f58:	10001816 	blt	r2,zero,8008fbc <__smakebuf_r+0xa0>
 8008f5c:	d8800117 	ldw	r2,4(sp)
 8008f60:	00e00014 	movui	r3,32768
 8008f64:	10bc000c 	andi	r2,r2,61440
 8008f68:	14c80020 	cmpeqi	r19,r2,8192
 8008f6c:	10c03726 	beq	r2,r3,800904c <__smakebuf_r+0x130>
 8008f70:	80c0030b 	ldhu	r3,12(r16)
 8008f74:	18c20014 	ori	r3,r3,2048
 8008f78:	80c0030d 	sth	r3,12(r16)
 8008f7c:	00c80004 	movi	r3,8192
 8008f80:	10c0521e 	bne	r2,r3,80090cc <__smakebuf_r+0x1b0>
 8008f84:	8140038f 	ldh	r5,14(r16)
 8008f88:	8809883a 	mov	r4,r17
 8008f8c:	800f1000 	call	800f100 <_isatty_r>
 8008f90:	10004c26 	beq	r2,zero,80090c4 <__smakebuf_r+0x1a8>
 8008f94:	8080030b 	ldhu	r2,12(r16)
 8008f98:	80c010c4 	addi	r3,r16,67
 8008f9c:	80c00015 	stw	r3,0(r16)
 8008fa0:	10800054 	ori	r2,r2,1
 8008fa4:	8080030d 	sth	r2,12(r16)
 8008fa8:	00800044 	movi	r2,1
 8008fac:	80c00415 	stw	r3,16(r16)
 8008fb0:	80800515 	stw	r2,20(r16)
 8008fb4:	04810004 	movi	r18,1024
 8008fb8:	00000706 	br	8008fd8 <__smakebuf_r+0xbc>
 8008fbc:	8080030b 	ldhu	r2,12(r16)
 8008fc0:	10c0200c 	andi	r3,r2,128
 8008fc4:	18001f1e 	bne	r3,zero,8009044 <__smakebuf_r+0x128>
 8008fc8:	04810004 	movi	r18,1024
 8008fcc:	10820014 	ori	r2,r2,2048
 8008fd0:	8080030d 	sth	r2,12(r16)
 8008fd4:	0027883a 	mov	r19,zero
 8008fd8:	900b883a 	mov	r5,r18
 8008fdc:	8809883a 	mov	r4,r17
 8008fe0:	80090d80 	call	80090d8 <_malloc_r>
 8008fe4:	10002c26 	beq	r2,zero,8009098 <__smakebuf_r+0x17c>
 8008fe8:	80c0030b 	ldhu	r3,12(r16)
 8008fec:	01020074 	movhi	r4,2049
 8008ff0:	21388a04 	addi	r4,r4,-7640
 8008ff4:	89000f15 	stw	r4,60(r17)
 8008ff8:	18c02014 	ori	r3,r3,128
 8008ffc:	80c0030d 	sth	r3,12(r16)
 8009000:	80800015 	stw	r2,0(r16)
 8009004:	80800415 	stw	r2,16(r16)
 8009008:	84800515 	stw	r18,20(r16)
 800900c:	98001a1e 	bne	r19,zero,8009078 <__smakebuf_r+0x15c>
 8009010:	dfc01317 	ldw	ra,76(sp)
 8009014:	dcc01217 	ldw	r19,72(sp)
 8009018:	dc801117 	ldw	r18,68(sp)
 800901c:	dc401017 	ldw	r17,64(sp)
 8009020:	dc000f17 	ldw	r16,60(sp)
 8009024:	dec01404 	addi	sp,sp,80
 8009028:	f800283a 	ret
 800902c:	288010c4 	addi	r2,r5,67
 8009030:	28800015 	stw	r2,0(r5)
 8009034:	28800415 	stw	r2,16(r5)
 8009038:	00800044 	movi	r2,1
 800903c:	28800515 	stw	r2,20(r5)
 8009040:	f800283a 	ret
 8009044:	04801004 	movi	r18,64
 8009048:	003fe006 	br	8008fcc <__smakebuf_r+0xb0>
 800904c:	81000a17 	ldw	r4,40(r16)
 8009050:	00c20074 	movhi	r3,2049
 8009054:	18e80404 	addi	r3,r3,-24560
 8009058:	20ffc51e 	bne	r4,r3,8008f70 <__smakebuf_r+0x54>
 800905c:	8080030b 	ldhu	r2,12(r16)
 8009060:	04810004 	movi	r18,1024
 8009064:	84801315 	stw	r18,76(r16)
 8009068:	1484b03a 	or	r2,r2,r18
 800906c:	8080030d 	sth	r2,12(r16)
 8009070:	0027883a 	mov	r19,zero
 8009074:	003fd806 	br	8008fd8 <__smakebuf_r+0xbc>
 8009078:	8140038f 	ldh	r5,14(r16)
 800907c:	8809883a 	mov	r4,r17
 8009080:	800f1000 	call	800f100 <_isatty_r>
 8009084:	103fe226 	beq	r2,zero,8009010 <__smakebuf_r+0xf4>
 8009088:	8080030b 	ldhu	r2,12(r16)
 800908c:	10800054 	ori	r2,r2,1
 8009090:	8080030d 	sth	r2,12(r16)
 8009094:	003fde06 	br	8009010 <__smakebuf_r+0xf4>
 8009098:	8080030b 	ldhu	r2,12(r16)
 800909c:	10c0800c 	andi	r3,r2,512
 80090a0:	183fdb1e 	bne	r3,zero,8009010 <__smakebuf_r+0xf4>
 80090a4:	10800094 	ori	r2,r2,2
 80090a8:	80c010c4 	addi	r3,r16,67
 80090ac:	8080030d 	sth	r2,12(r16)
 80090b0:	00800044 	movi	r2,1
 80090b4:	80c00015 	stw	r3,0(r16)
 80090b8:	80c00415 	stw	r3,16(r16)
 80090bc:	80800515 	stw	r2,20(r16)
 80090c0:	003fd306 	br	8009010 <__smakebuf_r+0xf4>
 80090c4:	04810004 	movi	r18,1024
 80090c8:	003fc306 	br	8008fd8 <__smakebuf_r+0xbc>
 80090cc:	0027883a 	mov	r19,zero
 80090d0:	04810004 	movi	r18,1024
 80090d4:	003fc006 	br	8008fd8 <__smakebuf_r+0xbc>

080090d8 <_malloc_r>:
 80090d8:	defff504 	addi	sp,sp,-44
 80090dc:	dc800315 	stw	r18,12(sp)
 80090e0:	dfc00a15 	stw	ra,40(sp)
 80090e4:	df000915 	stw	fp,36(sp)
 80090e8:	ddc00815 	stw	r23,32(sp)
 80090ec:	dd800715 	stw	r22,28(sp)
 80090f0:	dd400615 	stw	r21,24(sp)
 80090f4:	dd000515 	stw	r20,20(sp)
 80090f8:	dcc00415 	stw	r19,16(sp)
 80090fc:	dc400215 	stw	r17,8(sp)
 8009100:	dc000115 	stw	r16,4(sp)
 8009104:	288002c4 	addi	r2,r5,11
 8009108:	00c00584 	movi	r3,22
 800910c:	2025883a 	mov	r18,r4
 8009110:	18807f2e 	bgeu	r3,r2,8009310 <_malloc_r+0x238>
 8009114:	047ffe04 	movi	r17,-8
 8009118:	1462703a 	and	r17,r2,r17
 800911c:	8800a316 	blt	r17,zero,80093ac <_malloc_r+0x2d4>
 8009120:	8940a236 	bltu	r17,r5,80093ac <_malloc_r+0x2d4>
 8009124:	801666c0 	call	801666c <__malloc_lock>
 8009128:	00807dc4 	movi	r2,503
 800912c:	1441e92e 	bgeu	r2,r17,80098d4 <_malloc_r+0x7fc>
 8009130:	8804d27a 	srli	r2,r17,9
 8009134:	1000a126 	beq	r2,zero,80093bc <_malloc_r+0x2e4>
 8009138:	00c00104 	movi	r3,4
 800913c:	18811e36 	bltu	r3,r2,80095b8 <_malloc_r+0x4e0>
 8009140:	8804d1ba 	srli	r2,r17,6
 8009144:	12000e44 	addi	r8,r2,57
 8009148:	11c00e04 	addi	r7,r2,56
 800914c:	4209883a 	add	r4,r8,r8
 8009150:	04c200b4 	movhi	r19,2050
 8009154:	2109883a 	add	r4,r4,r4
 8009158:	9ceba104 	addi	r19,r19,-20860
 800915c:	2109883a 	add	r4,r4,r4
 8009160:	9909883a 	add	r4,r19,r4
 8009164:	24000117 	ldw	r16,4(r4)
 8009168:	213ffe04 	addi	r4,r4,-8
 800916c:	24009726 	beq	r4,r16,80093cc <_malloc_r+0x2f4>
 8009170:	80800117 	ldw	r2,4(r16)
 8009174:	01bfff04 	movi	r6,-4
 8009178:	014003c4 	movi	r5,15
 800917c:	1184703a 	and	r2,r2,r6
 8009180:	1447c83a 	sub	r3,r2,r17
 8009184:	28c00716 	blt	r5,r3,80091a4 <_malloc_r+0xcc>
 8009188:	1800920e 	bge	r3,zero,80093d4 <_malloc_r+0x2fc>
 800918c:	84000317 	ldw	r16,12(r16)
 8009190:	24008e26 	beq	r4,r16,80093cc <_malloc_r+0x2f4>
 8009194:	80800117 	ldw	r2,4(r16)
 8009198:	1184703a 	and	r2,r2,r6
 800919c:	1447c83a 	sub	r3,r2,r17
 80091a0:	28fff90e 	bge	r5,r3,8009188 <_malloc_r+0xb0>
 80091a4:	3809883a 	mov	r4,r7
 80091a8:	018200b4 	movhi	r6,2050
 80091ac:	9c000417 	ldw	r16,16(r19)
 80091b0:	31aba104 	addi	r6,r6,-20860
 80091b4:	32000204 	addi	r8,r6,8
 80091b8:	82013426 	beq	r16,r8,800968c <_malloc_r+0x5b4>
 80091bc:	80c00117 	ldw	r3,4(r16)
 80091c0:	00bfff04 	movi	r2,-4
 80091c4:	188e703a 	and	r7,r3,r2
 80091c8:	3c45c83a 	sub	r2,r7,r17
 80091cc:	00c003c4 	movi	r3,15
 80091d0:	18811f16 	blt	r3,r2,8009650 <_malloc_r+0x578>
 80091d4:	32000515 	stw	r8,20(r6)
 80091d8:	32000415 	stw	r8,16(r6)
 80091dc:	10007f0e 	bge	r2,zero,80093dc <_malloc_r+0x304>
 80091e0:	00807fc4 	movi	r2,511
 80091e4:	11c0fd36 	bltu	r2,r7,80095dc <_malloc_r+0x504>
 80091e8:	3806d0fa 	srli	r3,r7,3
 80091ec:	01c00044 	movi	r7,1
 80091f0:	30800117 	ldw	r2,4(r6)
 80091f4:	19400044 	addi	r5,r3,1
 80091f8:	294b883a 	add	r5,r5,r5
 80091fc:	1807d0ba 	srai	r3,r3,2
 8009200:	294b883a 	add	r5,r5,r5
 8009204:	294b883a 	add	r5,r5,r5
 8009208:	298b883a 	add	r5,r5,r6
 800920c:	38c6983a 	sll	r3,r7,r3
 8009210:	29c00017 	ldw	r7,0(r5)
 8009214:	2a7ffe04 	addi	r9,r5,-8
 8009218:	1886b03a 	or	r3,r3,r2
 800921c:	82400315 	stw	r9,12(r16)
 8009220:	81c00215 	stw	r7,8(r16)
 8009224:	30c00115 	stw	r3,4(r6)
 8009228:	2c000015 	stw	r16,0(r5)
 800922c:	3c000315 	stw	r16,12(r7)
 8009230:	2005d0ba 	srai	r2,r4,2
 8009234:	01400044 	movi	r5,1
 8009238:	288a983a 	sll	r5,r5,r2
 800923c:	19406f36 	bltu	r3,r5,80093fc <_malloc_r+0x324>
 8009240:	28c4703a 	and	r2,r5,r3
 8009244:	10000a1e 	bne	r2,zero,8009270 <_malloc_r+0x198>
 8009248:	00bfff04 	movi	r2,-4
 800924c:	294b883a 	add	r5,r5,r5
 8009250:	2088703a 	and	r4,r4,r2
 8009254:	28c4703a 	and	r2,r5,r3
 8009258:	21000104 	addi	r4,r4,4
 800925c:	1000041e 	bne	r2,zero,8009270 <_malloc_r+0x198>
 8009260:	294b883a 	add	r5,r5,r5
 8009264:	28c4703a 	and	r2,r5,r3
 8009268:	21000104 	addi	r4,r4,4
 800926c:	103ffc26 	beq	r2,zero,8009260 <_malloc_r+0x188>
 8009270:	02bfff04 	movi	r10,-4
 8009274:	024003c4 	movi	r9,15
 8009278:	21800044 	addi	r6,r4,1
 800927c:	318d883a 	add	r6,r6,r6
 8009280:	318d883a 	add	r6,r6,r6
 8009284:	318d883a 	add	r6,r6,r6
 8009288:	998d883a 	add	r6,r19,r6
 800928c:	333ffe04 	addi	r12,r6,-8
 8009290:	2017883a 	mov	r11,r4
 8009294:	31800104 	addi	r6,r6,4
 8009298:	34000017 	ldw	r16,0(r6)
 800929c:	31fffd04 	addi	r7,r6,-12
 80092a0:	81c0041e 	bne	r16,r7,80092b4 <_malloc_r+0x1dc>
 80092a4:	0000fb06 	br	8009694 <_malloc_r+0x5bc>
 80092a8:	1801030e 	bge	r3,zero,80096b8 <_malloc_r+0x5e0>
 80092ac:	84000317 	ldw	r16,12(r16)
 80092b0:	81c0f826 	beq	r16,r7,8009694 <_malloc_r+0x5bc>
 80092b4:	80800117 	ldw	r2,4(r16)
 80092b8:	1284703a 	and	r2,r2,r10
 80092bc:	1447c83a 	sub	r3,r2,r17
 80092c0:	48fff90e 	bge	r9,r3,80092a8 <_malloc_r+0x1d0>
 80092c4:	80800317 	ldw	r2,12(r16)
 80092c8:	81000217 	ldw	r4,8(r16)
 80092cc:	89400054 	ori	r5,r17,1
 80092d0:	81400115 	stw	r5,4(r16)
 80092d4:	20800315 	stw	r2,12(r4)
 80092d8:	11000215 	stw	r4,8(r2)
 80092dc:	8463883a 	add	r17,r16,r17
 80092e0:	9c400515 	stw	r17,20(r19)
 80092e4:	9c400415 	stw	r17,16(r19)
 80092e8:	18800054 	ori	r2,r3,1
 80092ec:	88800115 	stw	r2,4(r17)
 80092f0:	8a000315 	stw	r8,12(r17)
 80092f4:	8a000215 	stw	r8,8(r17)
 80092f8:	88e3883a 	add	r17,r17,r3
 80092fc:	88c00015 	stw	r3,0(r17)
 8009300:	9009883a 	mov	r4,r18
 8009304:	80166900 	call	8016690 <__malloc_unlock>
 8009308:	80800204 	addi	r2,r16,8
 800930c:	00001b06 	br	800937c <_malloc_r+0x2a4>
 8009310:	04400404 	movi	r17,16
 8009314:	89402536 	bltu	r17,r5,80093ac <_malloc_r+0x2d4>
 8009318:	801666c0 	call	801666c <__malloc_lock>
 800931c:	00800184 	movi	r2,6
 8009320:	01000084 	movi	r4,2
 8009324:	04c200b4 	movhi	r19,2050
 8009328:	1085883a 	add	r2,r2,r2
 800932c:	9ceba104 	addi	r19,r19,-20860
 8009330:	1085883a 	add	r2,r2,r2
 8009334:	9885883a 	add	r2,r19,r2
 8009338:	14000117 	ldw	r16,4(r2)
 800933c:	10fffe04 	addi	r3,r2,-8
 8009340:	80c0d926 	beq	r16,r3,80096a8 <_malloc_r+0x5d0>
 8009344:	80c00117 	ldw	r3,4(r16)
 8009348:	81000317 	ldw	r4,12(r16)
 800934c:	00bfff04 	movi	r2,-4
 8009350:	1884703a 	and	r2,r3,r2
 8009354:	81400217 	ldw	r5,8(r16)
 8009358:	8085883a 	add	r2,r16,r2
 800935c:	10c00117 	ldw	r3,4(r2)
 8009360:	29000315 	stw	r4,12(r5)
 8009364:	21400215 	stw	r5,8(r4)
 8009368:	18c00054 	ori	r3,r3,1
 800936c:	10c00115 	stw	r3,4(r2)
 8009370:	9009883a 	mov	r4,r18
 8009374:	80166900 	call	8016690 <__malloc_unlock>
 8009378:	80800204 	addi	r2,r16,8
 800937c:	dfc00a17 	ldw	ra,40(sp)
 8009380:	df000917 	ldw	fp,36(sp)
 8009384:	ddc00817 	ldw	r23,32(sp)
 8009388:	dd800717 	ldw	r22,28(sp)
 800938c:	dd400617 	ldw	r21,24(sp)
 8009390:	dd000517 	ldw	r20,20(sp)
 8009394:	dcc00417 	ldw	r19,16(sp)
 8009398:	dc800317 	ldw	r18,12(sp)
 800939c:	dc400217 	ldw	r17,8(sp)
 80093a0:	dc000117 	ldw	r16,4(sp)
 80093a4:	dec00b04 	addi	sp,sp,44
 80093a8:	f800283a 	ret
 80093ac:	00800304 	movi	r2,12
 80093b0:	90800015 	stw	r2,0(r18)
 80093b4:	0005883a 	mov	r2,zero
 80093b8:	003ff006 	br	800937c <_malloc_r+0x2a4>
 80093bc:	01002004 	movi	r4,128
 80093c0:	02001004 	movi	r8,64
 80093c4:	01c00fc4 	movi	r7,63
 80093c8:	003f6106 	br	8009150 <_malloc_r+0x78>
 80093cc:	4009883a 	mov	r4,r8
 80093d0:	003f7506 	br	80091a8 <_malloc_r+0xd0>
 80093d4:	81000317 	ldw	r4,12(r16)
 80093d8:	003fde06 	br	8009354 <_malloc_r+0x27c>
 80093dc:	81c5883a 	add	r2,r16,r7
 80093e0:	11400117 	ldw	r5,4(r2)
 80093e4:	9009883a 	mov	r4,r18
 80093e8:	29400054 	ori	r5,r5,1
 80093ec:	11400115 	stw	r5,4(r2)
 80093f0:	80166900 	call	8016690 <__malloc_unlock>
 80093f4:	80800204 	addi	r2,r16,8
 80093f8:	003fe006 	br	800937c <_malloc_r+0x2a4>
 80093fc:	9c000217 	ldw	r16,8(r19)
 8009400:	00bfff04 	movi	r2,-4
 8009404:	85800117 	ldw	r22,4(r16)
 8009408:	b0ac703a 	and	r22,r22,r2
 800940c:	b4400336 	bltu	r22,r17,800941c <_malloc_r+0x344>
 8009410:	b445c83a 	sub	r2,r22,r17
 8009414:	00c003c4 	movi	r3,15
 8009418:	18805d16 	blt	r3,r2,8009590 <_malloc_r+0x4b8>
 800941c:	05c200b4 	movhi	r23,2050
 8009420:	008200b4 	movhi	r2,2050
 8009424:	10ba6a04 	addi	r2,r2,-5720
 8009428:	bdf1bd04 	addi	r23,r23,-14604
 800942c:	15400017 	ldw	r21,0(r2)
 8009430:	b8c00017 	ldw	r3,0(r23)
 8009434:	00bfffc4 	movi	r2,-1
 8009438:	858d883a 	add	r6,r16,r22
 800943c:	8d6b883a 	add	r21,r17,r21
 8009440:	1880ea26 	beq	r3,r2,80097ec <_malloc_r+0x714>
 8009444:	ad4403c4 	addi	r21,r21,4111
 8009448:	00bc0004 	movi	r2,-4096
 800944c:	a8aa703a 	and	r21,r21,r2
 8009450:	a80b883a 	mov	r5,r21
 8009454:	9009883a 	mov	r4,r18
 8009458:	d9800015 	stw	r6,0(sp)
 800945c:	8009ee40 	call	8009ee4 <_sbrk_r>
 8009460:	1029883a 	mov	r20,r2
 8009464:	00bfffc4 	movi	r2,-1
 8009468:	d9800017 	ldw	r6,0(sp)
 800946c:	a080e826 	beq	r20,r2,8009810 <_malloc_r+0x738>
 8009470:	a180a636 	bltu	r20,r6,800970c <_malloc_r+0x634>
 8009474:	070220b4 	movhi	fp,2178
 8009478:	e73cac04 	addi	fp,fp,-3408
 800947c:	e0800017 	ldw	r2,0(fp)
 8009480:	a887883a 	add	r3,r21,r2
 8009484:	e0c00015 	stw	r3,0(fp)
 8009488:	3500e626 	beq	r6,r20,8009824 <_malloc_r+0x74c>
 800948c:	b9000017 	ldw	r4,0(r23)
 8009490:	00bfffc4 	movi	r2,-1
 8009494:	2080ee26 	beq	r4,r2,8009850 <_malloc_r+0x778>
 8009498:	a185c83a 	sub	r2,r20,r6
 800949c:	10c5883a 	add	r2,r2,r3
 80094a0:	e0800015 	stw	r2,0(fp)
 80094a4:	a0c001cc 	andi	r3,r20,7
 80094a8:	1800bc26 	beq	r3,zero,800979c <_malloc_r+0x6c4>
 80094ac:	a0e9c83a 	sub	r20,r20,r3
 80094b0:	00840204 	movi	r2,4104
 80094b4:	a5000204 	addi	r20,r20,8
 80094b8:	10c7c83a 	sub	r3,r2,r3
 80094bc:	a545883a 	add	r2,r20,r21
 80094c0:	1083ffcc 	andi	r2,r2,4095
 80094c4:	18abc83a 	sub	r21,r3,r2
 80094c8:	a80b883a 	mov	r5,r21
 80094cc:	9009883a 	mov	r4,r18
 80094d0:	8009ee40 	call	8009ee4 <_sbrk_r>
 80094d4:	00ffffc4 	movi	r3,-1
 80094d8:	10c0e126 	beq	r2,r3,8009860 <_malloc_r+0x788>
 80094dc:	1505c83a 	sub	r2,r2,r20
 80094e0:	1545883a 	add	r2,r2,r21
 80094e4:	10800054 	ori	r2,r2,1
 80094e8:	e0c00017 	ldw	r3,0(fp)
 80094ec:	9d000215 	stw	r20,8(r19)
 80094f0:	a0800115 	stw	r2,4(r20)
 80094f4:	a8c7883a 	add	r3,r21,r3
 80094f8:	e0c00015 	stw	r3,0(fp)
 80094fc:	84c00e26 	beq	r16,r19,8009538 <_malloc_r+0x460>
 8009500:	018003c4 	movi	r6,15
 8009504:	3580a72e 	bgeu	r6,r22,80097a4 <_malloc_r+0x6cc>
 8009508:	81400117 	ldw	r5,4(r16)
 800950c:	013ffe04 	movi	r4,-8
 8009510:	b0bffd04 	addi	r2,r22,-12
 8009514:	1104703a 	and	r2,r2,r4
 8009518:	2900004c 	andi	r4,r5,1
 800951c:	2088b03a 	or	r4,r4,r2
 8009520:	81000115 	stw	r4,4(r16)
 8009524:	01400144 	movi	r5,5
 8009528:	8089883a 	add	r4,r16,r2
 800952c:	21400115 	stw	r5,4(r4)
 8009530:	21400215 	stw	r5,8(r4)
 8009534:	3080cd36 	bltu	r6,r2,800986c <_malloc_r+0x794>
 8009538:	008200b4 	movhi	r2,2050
 800953c:	10ba6904 	addi	r2,r2,-5724
 8009540:	11000017 	ldw	r4,0(r2)
 8009544:	20c0012e 	bgeu	r4,r3,800954c <_malloc_r+0x474>
 8009548:	10c00015 	stw	r3,0(r2)
 800954c:	008200b4 	movhi	r2,2050
 8009550:	10ba6804 	addi	r2,r2,-5728
 8009554:	11000017 	ldw	r4,0(r2)
 8009558:	9c000217 	ldw	r16,8(r19)
 800955c:	20c0012e 	bgeu	r4,r3,8009564 <_malloc_r+0x48c>
 8009560:	10c00015 	stw	r3,0(r2)
 8009564:	80c00117 	ldw	r3,4(r16)
 8009568:	00bfff04 	movi	r2,-4
 800956c:	1886703a 	and	r3,r3,r2
 8009570:	1c45c83a 	sub	r2,r3,r17
 8009574:	1c400236 	bltu	r3,r17,8009580 <_malloc_r+0x4a8>
 8009578:	00c003c4 	movi	r3,15
 800957c:	18800416 	blt	r3,r2,8009590 <_malloc_r+0x4b8>
 8009580:	9009883a 	mov	r4,r18
 8009584:	80166900 	call	8016690 <__malloc_unlock>
 8009588:	0005883a 	mov	r2,zero
 800958c:	003f7b06 	br	800937c <_malloc_r+0x2a4>
 8009590:	88c00054 	ori	r3,r17,1
 8009594:	80c00115 	stw	r3,4(r16)
 8009598:	8463883a 	add	r17,r16,r17
 800959c:	10800054 	ori	r2,r2,1
 80095a0:	9c400215 	stw	r17,8(r19)
 80095a4:	88800115 	stw	r2,4(r17)
 80095a8:	9009883a 	mov	r4,r18
 80095ac:	80166900 	call	8016690 <__malloc_unlock>
 80095b0:	80800204 	addi	r2,r16,8
 80095b4:	003f7106 	br	800937c <_malloc_r+0x2a4>
 80095b8:	00c00504 	movi	r3,20
 80095bc:	18804a2e 	bgeu	r3,r2,80096e8 <_malloc_r+0x610>
 80095c0:	00c01504 	movi	r3,84
 80095c4:	18806e36 	bltu	r3,r2,8009780 <_malloc_r+0x6a8>
 80095c8:	8804d33a 	srli	r2,r17,12
 80095cc:	12001bc4 	addi	r8,r2,111
 80095d0:	11c01b84 	addi	r7,r2,110
 80095d4:	4209883a 	add	r4,r8,r8
 80095d8:	003edd06 	br	8009150 <_malloc_r+0x78>
 80095dc:	3804d27a 	srli	r2,r7,9
 80095e0:	00c00104 	movi	r3,4
 80095e4:	1880442e 	bgeu	r3,r2,80096f8 <_malloc_r+0x620>
 80095e8:	00c00504 	movi	r3,20
 80095ec:	18808136 	bltu	r3,r2,80097f4 <_malloc_r+0x71c>
 80095f0:	11401704 	addi	r5,r2,92
 80095f4:	10c016c4 	addi	r3,r2,91
 80095f8:	294b883a 	add	r5,r5,r5
 80095fc:	294b883a 	add	r5,r5,r5
 8009600:	294b883a 	add	r5,r5,r5
 8009604:	994b883a 	add	r5,r19,r5
 8009608:	28800017 	ldw	r2,0(r5)
 800960c:	018200b4 	movhi	r6,2050
 8009610:	297ffe04 	addi	r5,r5,-8
 8009614:	31aba104 	addi	r6,r6,-20860
 8009618:	28806526 	beq	r5,r2,80097b0 <_malloc_r+0x6d8>
 800961c:	01bfff04 	movi	r6,-4
 8009620:	10c00117 	ldw	r3,4(r2)
 8009624:	1986703a 	and	r3,r3,r6
 8009628:	38c0022e 	bgeu	r7,r3,8009634 <_malloc_r+0x55c>
 800962c:	10800217 	ldw	r2,8(r2)
 8009630:	28bffb1e 	bne	r5,r2,8009620 <_malloc_r+0x548>
 8009634:	11400317 	ldw	r5,12(r2)
 8009638:	98c00117 	ldw	r3,4(r19)
 800963c:	81400315 	stw	r5,12(r16)
 8009640:	80800215 	stw	r2,8(r16)
 8009644:	2c000215 	stw	r16,8(r5)
 8009648:	14000315 	stw	r16,12(r2)
 800964c:	003ef806 	br	8009230 <_malloc_r+0x158>
 8009650:	88c00054 	ori	r3,r17,1
 8009654:	80c00115 	stw	r3,4(r16)
 8009658:	8463883a 	add	r17,r16,r17
 800965c:	34400515 	stw	r17,20(r6)
 8009660:	34400415 	stw	r17,16(r6)
 8009664:	10c00054 	ori	r3,r2,1
 8009668:	8a000315 	stw	r8,12(r17)
 800966c:	8a000215 	stw	r8,8(r17)
 8009670:	88c00115 	stw	r3,4(r17)
 8009674:	88a3883a 	add	r17,r17,r2
 8009678:	88800015 	stw	r2,0(r17)
 800967c:	9009883a 	mov	r4,r18
 8009680:	80166900 	call	8016690 <__malloc_unlock>
 8009684:	80800204 	addi	r2,r16,8
 8009688:	003f3c06 	br	800937c <_malloc_r+0x2a4>
 800968c:	30c00117 	ldw	r3,4(r6)
 8009690:	003ee706 	br	8009230 <_malloc_r+0x158>
 8009694:	5ac00044 	addi	r11,r11,1
 8009698:	588000cc 	andi	r2,r11,3
 800969c:	31800204 	addi	r6,r6,8
 80096a0:	103efd1e 	bne	r2,zero,8009298 <_malloc_r+0x1c0>
 80096a4:	00002406 	br	8009738 <_malloc_r+0x660>
 80096a8:	14000317 	ldw	r16,12(r2)
 80096ac:	143f251e 	bne	r2,r16,8009344 <_malloc_r+0x26c>
 80096b0:	21000084 	addi	r4,r4,2
 80096b4:	003ebc06 	br	80091a8 <_malloc_r+0xd0>
 80096b8:	8085883a 	add	r2,r16,r2
 80096bc:	10c00117 	ldw	r3,4(r2)
 80096c0:	81000317 	ldw	r4,12(r16)
 80096c4:	81400217 	ldw	r5,8(r16)
 80096c8:	18c00054 	ori	r3,r3,1
 80096cc:	10c00115 	stw	r3,4(r2)
 80096d0:	29000315 	stw	r4,12(r5)
 80096d4:	21400215 	stw	r5,8(r4)
 80096d8:	9009883a 	mov	r4,r18
 80096dc:	80166900 	call	8016690 <__malloc_unlock>
 80096e0:	80800204 	addi	r2,r16,8
 80096e4:	003f2506 	br	800937c <_malloc_r+0x2a4>
 80096e8:	12001704 	addi	r8,r2,92
 80096ec:	11c016c4 	addi	r7,r2,91
 80096f0:	4209883a 	add	r4,r8,r8
 80096f4:	003e9606 	br	8009150 <_malloc_r+0x78>
 80096f8:	3804d1ba 	srli	r2,r7,6
 80096fc:	11400e44 	addi	r5,r2,57
 8009700:	10c00e04 	addi	r3,r2,56
 8009704:	294b883a 	add	r5,r5,r5
 8009708:	003fbc06 	br	80095fc <_malloc_r+0x524>
 800970c:	84ff5926 	beq	r16,r19,8009474 <_malloc_r+0x39c>
 8009710:	008200b4 	movhi	r2,2050
 8009714:	10aba104 	addi	r2,r2,-20860
 8009718:	14000217 	ldw	r16,8(r2)
 800971c:	00bfff04 	movi	r2,-4
 8009720:	80c00117 	ldw	r3,4(r16)
 8009724:	1886703a 	and	r3,r3,r2
 8009728:	003f9106 	br	8009570 <_malloc_r+0x498>
 800972c:	60800217 	ldw	r2,8(r12)
 8009730:	213fffc4 	addi	r4,r4,-1
 8009734:	1300651e 	bne	r2,r12,80098cc <_malloc_r+0x7f4>
 8009738:	208000cc 	andi	r2,r4,3
 800973c:	633ffe04 	addi	r12,r12,-8
 8009740:	103ffa1e 	bne	r2,zero,800972c <_malloc_r+0x654>
 8009744:	98800117 	ldw	r2,4(r19)
 8009748:	0146303a 	nor	r3,zero,r5
 800974c:	1884703a 	and	r2,r3,r2
 8009750:	98800115 	stw	r2,4(r19)
 8009754:	294b883a 	add	r5,r5,r5
 8009758:	117f2836 	bltu	r2,r5,80093fc <_malloc_r+0x324>
 800975c:	283f2726 	beq	r5,zero,80093fc <_malloc_r+0x324>
 8009760:	2886703a 	and	r3,r5,r2
 8009764:	5809883a 	mov	r4,r11
 8009768:	183ec31e 	bne	r3,zero,8009278 <_malloc_r+0x1a0>
 800976c:	294b883a 	add	r5,r5,r5
 8009770:	2886703a 	and	r3,r5,r2
 8009774:	21000104 	addi	r4,r4,4
 8009778:	183ffc26 	beq	r3,zero,800976c <_malloc_r+0x694>
 800977c:	003ebe06 	br	8009278 <_malloc_r+0x1a0>
 8009780:	00c05504 	movi	r3,340
 8009784:	18801236 	bltu	r3,r2,80097d0 <_malloc_r+0x6f8>
 8009788:	8804d3fa 	srli	r2,r17,15
 800978c:	12001e04 	addi	r8,r2,120
 8009790:	11c01dc4 	addi	r7,r2,119
 8009794:	4209883a 	add	r4,r8,r8
 8009798:	003e6d06 	br	8009150 <_malloc_r+0x78>
 800979c:	00c40004 	movi	r3,4096
 80097a0:	003f4606 	br	80094bc <_malloc_r+0x3e4>
 80097a4:	00800044 	movi	r2,1
 80097a8:	a0800115 	stw	r2,4(r20)
 80097ac:	003f7406 	br	8009580 <_malloc_r+0x4a8>
 80097b0:	1805d0ba 	srai	r2,r3,2
 80097b4:	01c00044 	movi	r7,1
 80097b8:	30c00117 	ldw	r3,4(r6)
 80097bc:	388e983a 	sll	r7,r7,r2
 80097c0:	2805883a 	mov	r2,r5
 80097c4:	38c6b03a 	or	r3,r7,r3
 80097c8:	30c00115 	stw	r3,4(r6)
 80097cc:	003f9b06 	br	800963c <_malloc_r+0x564>
 80097d0:	00c15504 	movi	r3,1364
 80097d4:	18801a36 	bltu	r3,r2,8009840 <_malloc_r+0x768>
 80097d8:	8804d4ba 	srli	r2,r17,18
 80097dc:	12001f44 	addi	r8,r2,125
 80097e0:	11c01f04 	addi	r7,r2,124
 80097e4:	4209883a 	add	r4,r8,r8
 80097e8:	003e5906 	br	8009150 <_malloc_r+0x78>
 80097ec:	ad400404 	addi	r21,r21,16
 80097f0:	003f1706 	br	8009450 <_malloc_r+0x378>
 80097f4:	00c01504 	movi	r3,84
 80097f8:	18802336 	bltu	r3,r2,8009888 <_malloc_r+0x7b0>
 80097fc:	3804d33a 	srli	r2,r7,12
 8009800:	11401bc4 	addi	r5,r2,111
 8009804:	10c01b84 	addi	r3,r2,110
 8009808:	294b883a 	add	r5,r5,r5
 800980c:	003f7b06 	br	80095fc <_malloc_r+0x524>
 8009810:	9c000217 	ldw	r16,8(r19)
 8009814:	00bfff04 	movi	r2,-4
 8009818:	80c00117 	ldw	r3,4(r16)
 800981c:	1886703a 	and	r3,r3,r2
 8009820:	003f5306 	br	8009570 <_malloc_r+0x498>
 8009824:	3083ffcc 	andi	r2,r6,4095
 8009828:	103f181e 	bne	r2,zero,800948c <_malloc_r+0x3b4>
 800982c:	99000217 	ldw	r4,8(r19)
 8009830:	b545883a 	add	r2,r22,r21
 8009834:	10800054 	ori	r2,r2,1
 8009838:	20800115 	stw	r2,4(r4)
 800983c:	003f3e06 	br	8009538 <_malloc_r+0x460>
 8009840:	01003f84 	movi	r4,254
 8009844:	02001fc4 	movi	r8,127
 8009848:	01c01f84 	movi	r7,126
 800984c:	003e4006 	br	8009150 <_malloc_r+0x78>
 8009850:	008200b4 	movhi	r2,2050
 8009854:	10b1bd04 	addi	r2,r2,-14604
 8009858:	15000015 	stw	r20,0(r2)
 800985c:	003f1106 	br	80094a4 <_malloc_r+0x3cc>
 8009860:	00800044 	movi	r2,1
 8009864:	002b883a 	mov	r21,zero
 8009868:	003f1f06 	br	80094e8 <_malloc_r+0x410>
 800986c:	81400204 	addi	r5,r16,8
 8009870:	9009883a 	mov	r4,r18
 8009874:	800e7a00 	call	800e7a0 <_free_r>
 8009878:	008220b4 	movhi	r2,2178
 800987c:	10bcac04 	addi	r2,r2,-3408
 8009880:	10c00017 	ldw	r3,0(r2)
 8009884:	003f2c06 	br	8009538 <_malloc_r+0x460>
 8009888:	00c05504 	movi	r3,340
 800988c:	18800536 	bltu	r3,r2,80098a4 <_malloc_r+0x7cc>
 8009890:	3804d3fa 	srli	r2,r7,15
 8009894:	11401e04 	addi	r5,r2,120
 8009898:	10c01dc4 	addi	r3,r2,119
 800989c:	294b883a 	add	r5,r5,r5
 80098a0:	003f5606 	br	80095fc <_malloc_r+0x524>
 80098a4:	00c15504 	movi	r3,1364
 80098a8:	18800536 	bltu	r3,r2,80098c0 <_malloc_r+0x7e8>
 80098ac:	3804d4ba 	srli	r2,r7,18
 80098b0:	11401f44 	addi	r5,r2,125
 80098b4:	10c01f04 	addi	r3,r2,124
 80098b8:	294b883a 	add	r5,r5,r5
 80098bc:	003f4f06 	br	80095fc <_malloc_r+0x524>
 80098c0:	01403f84 	movi	r5,254
 80098c4:	00c01f84 	movi	r3,126
 80098c8:	003f4c06 	br	80095fc <_malloc_r+0x524>
 80098cc:	98800117 	ldw	r2,4(r19)
 80098d0:	003fa006 	br	8009754 <_malloc_r+0x67c>
 80098d4:	8808d0fa 	srli	r4,r17,3
 80098d8:	20800044 	addi	r2,r4,1
 80098dc:	1085883a 	add	r2,r2,r2
 80098e0:	003e9006 	br	8009324 <_malloc_r+0x24c>

080098e4 <memcpy>:
 80098e4:	defffd04 	addi	sp,sp,-12
 80098e8:	dfc00215 	stw	ra,8(sp)
 80098ec:	dc400115 	stw	r17,4(sp)
 80098f0:	dc000015 	stw	r16,0(sp)
 80098f4:	00c003c4 	movi	r3,15
 80098f8:	2005883a 	mov	r2,r4
 80098fc:	1980452e 	bgeu	r3,r6,8009a14 <memcpy+0x130>
 8009900:	2906b03a 	or	r3,r5,r4
 8009904:	18c000cc 	andi	r3,r3,3
 8009908:	1800441e 	bne	r3,zero,8009a1c <memcpy+0x138>
 800990c:	347ffc04 	addi	r17,r6,-16
 8009910:	8822d13a 	srli	r17,r17,4
 8009914:	28c00104 	addi	r3,r5,4
 8009918:	23400104 	addi	r13,r4,4
 800991c:	8820913a 	slli	r16,r17,4
 8009920:	2b000204 	addi	r12,r5,8
 8009924:	22c00204 	addi	r11,r4,8
 8009928:	84000504 	addi	r16,r16,20
 800992c:	2a800304 	addi	r10,r5,12
 8009930:	22400304 	addi	r9,r4,12
 8009934:	2c21883a 	add	r16,r5,r16
 8009938:	2811883a 	mov	r8,r5
 800993c:	200f883a 	mov	r7,r4
 8009940:	41000017 	ldw	r4,0(r8)
 8009944:	1fc00017 	ldw	ra,0(r3)
 8009948:	63c00017 	ldw	r15,0(r12)
 800994c:	39000015 	stw	r4,0(r7)
 8009950:	53800017 	ldw	r14,0(r10)
 8009954:	6fc00015 	stw	ra,0(r13)
 8009958:	5bc00015 	stw	r15,0(r11)
 800995c:	4b800015 	stw	r14,0(r9)
 8009960:	18c00404 	addi	r3,r3,16
 8009964:	39c00404 	addi	r7,r7,16
 8009968:	42000404 	addi	r8,r8,16
 800996c:	6b400404 	addi	r13,r13,16
 8009970:	63000404 	addi	r12,r12,16
 8009974:	5ac00404 	addi	r11,r11,16
 8009978:	52800404 	addi	r10,r10,16
 800997c:	4a400404 	addi	r9,r9,16
 8009980:	1c3fef1e 	bne	r3,r16,8009940 <memcpy+0x5c>
 8009984:	89c00044 	addi	r7,r17,1
 8009988:	380e913a 	slli	r7,r7,4
 800998c:	310003cc 	andi	r4,r6,15
 8009990:	02c000c4 	movi	r11,3
 8009994:	11c7883a 	add	r3,r2,r7
 8009998:	29cb883a 	add	r5,r5,r7
 800999c:	5900212e 	bgeu	r11,r4,8009a24 <memcpy+0x140>
 80099a0:	1813883a 	mov	r9,r3
 80099a4:	2811883a 	mov	r8,r5
 80099a8:	200f883a 	mov	r7,r4
 80099ac:	42800017 	ldw	r10,0(r8)
 80099b0:	4a400104 	addi	r9,r9,4
 80099b4:	39ffff04 	addi	r7,r7,-4
 80099b8:	4abfff15 	stw	r10,-4(r9)
 80099bc:	42000104 	addi	r8,r8,4
 80099c0:	59fffa36 	bltu	r11,r7,80099ac <memcpy+0xc8>
 80099c4:	213fff04 	addi	r4,r4,-4
 80099c8:	2008d0ba 	srli	r4,r4,2
 80099cc:	318000cc 	andi	r6,r6,3
 80099d0:	21000044 	addi	r4,r4,1
 80099d4:	2109883a 	add	r4,r4,r4
 80099d8:	2109883a 	add	r4,r4,r4
 80099dc:	1907883a 	add	r3,r3,r4
 80099e0:	290b883a 	add	r5,r5,r4
 80099e4:	30000626 	beq	r6,zero,8009a00 <memcpy+0x11c>
 80099e8:	198d883a 	add	r6,r3,r6
 80099ec:	29c00003 	ldbu	r7,0(r5)
 80099f0:	18c00044 	addi	r3,r3,1
 80099f4:	29400044 	addi	r5,r5,1
 80099f8:	19ffffc5 	stb	r7,-1(r3)
 80099fc:	19bffb1e 	bne	r3,r6,80099ec <memcpy+0x108>
 8009a00:	dfc00217 	ldw	ra,8(sp)
 8009a04:	dc400117 	ldw	r17,4(sp)
 8009a08:	dc000017 	ldw	r16,0(sp)
 8009a0c:	dec00304 	addi	sp,sp,12
 8009a10:	f800283a 	ret
 8009a14:	2007883a 	mov	r3,r4
 8009a18:	003ff206 	br	80099e4 <memcpy+0x100>
 8009a1c:	2007883a 	mov	r3,r4
 8009a20:	003ff106 	br	80099e8 <memcpy+0x104>
 8009a24:	200d883a 	mov	r6,r4
 8009a28:	003fee06 	br	80099e4 <memcpy+0x100>

08009a2c <memset>:
 8009a2c:	20c000cc 	andi	r3,r4,3
 8009a30:	2005883a 	mov	r2,r4
 8009a34:	18004426 	beq	r3,zero,8009b48 <memset+0x11c>
 8009a38:	31ffffc4 	addi	r7,r6,-1
 8009a3c:	30004026 	beq	r6,zero,8009b40 <memset+0x114>
 8009a40:	2813883a 	mov	r9,r5
 8009a44:	200d883a 	mov	r6,r4
 8009a48:	2007883a 	mov	r3,r4
 8009a4c:	00000406 	br	8009a60 <memset+0x34>
 8009a50:	3a3fffc4 	addi	r8,r7,-1
 8009a54:	31800044 	addi	r6,r6,1
 8009a58:	38003926 	beq	r7,zero,8009b40 <memset+0x114>
 8009a5c:	400f883a 	mov	r7,r8
 8009a60:	18c00044 	addi	r3,r3,1
 8009a64:	32400005 	stb	r9,0(r6)
 8009a68:	1a0000cc 	andi	r8,r3,3
 8009a6c:	403ff81e 	bne	r8,zero,8009a50 <memset+0x24>
 8009a70:	010000c4 	movi	r4,3
 8009a74:	21c02d2e 	bgeu	r4,r7,8009b2c <memset+0x100>
 8009a78:	29003fcc 	andi	r4,r5,255
 8009a7c:	200c923a 	slli	r6,r4,8
 8009a80:	3108b03a 	or	r4,r6,r4
 8009a84:	200c943a 	slli	r6,r4,16
 8009a88:	218cb03a 	or	r6,r4,r6
 8009a8c:	010003c4 	movi	r4,15
 8009a90:	21c0182e 	bgeu	r4,r7,8009af4 <memset+0xc8>
 8009a94:	3b3ffc04 	addi	r12,r7,-16
 8009a98:	6018d13a 	srli	r12,r12,4
 8009a9c:	1a000104 	addi	r8,r3,4
 8009aa0:	1ac00204 	addi	r11,r3,8
 8009aa4:	6008913a 	slli	r4,r12,4
 8009aa8:	1a800304 	addi	r10,r3,12
 8009aac:	1813883a 	mov	r9,r3
 8009ab0:	21000504 	addi	r4,r4,20
 8009ab4:	1909883a 	add	r4,r3,r4
 8009ab8:	49800015 	stw	r6,0(r9)
 8009abc:	41800015 	stw	r6,0(r8)
 8009ac0:	59800015 	stw	r6,0(r11)
 8009ac4:	51800015 	stw	r6,0(r10)
 8009ac8:	42000404 	addi	r8,r8,16
 8009acc:	4a400404 	addi	r9,r9,16
 8009ad0:	5ac00404 	addi	r11,r11,16
 8009ad4:	52800404 	addi	r10,r10,16
 8009ad8:	413ff71e 	bne	r8,r4,8009ab8 <memset+0x8c>
 8009adc:	63000044 	addi	r12,r12,1
 8009ae0:	6018913a 	slli	r12,r12,4
 8009ae4:	39c003cc 	andi	r7,r7,15
 8009ae8:	010000c4 	movi	r4,3
 8009aec:	1b07883a 	add	r3,r3,r12
 8009af0:	21c00e2e 	bgeu	r4,r7,8009b2c <memset+0x100>
 8009af4:	1813883a 	mov	r9,r3
 8009af8:	3811883a 	mov	r8,r7
 8009afc:	010000c4 	movi	r4,3
 8009b00:	49800015 	stw	r6,0(r9)
 8009b04:	423fff04 	addi	r8,r8,-4
 8009b08:	4a400104 	addi	r9,r9,4
 8009b0c:	223ffc36 	bltu	r4,r8,8009b00 <memset+0xd4>
 8009b10:	393fff04 	addi	r4,r7,-4
 8009b14:	2008d0ba 	srli	r4,r4,2
 8009b18:	39c000cc 	andi	r7,r7,3
 8009b1c:	21000044 	addi	r4,r4,1
 8009b20:	2109883a 	add	r4,r4,r4
 8009b24:	2109883a 	add	r4,r4,r4
 8009b28:	1907883a 	add	r3,r3,r4
 8009b2c:	38000526 	beq	r7,zero,8009b44 <memset+0x118>
 8009b30:	19cf883a 	add	r7,r3,r7
 8009b34:	19400005 	stb	r5,0(r3)
 8009b38:	18c00044 	addi	r3,r3,1
 8009b3c:	38fffd1e 	bne	r7,r3,8009b34 <memset+0x108>
 8009b40:	f800283a 	ret
 8009b44:	f800283a 	ret
 8009b48:	2007883a 	mov	r3,r4
 8009b4c:	300f883a 	mov	r7,r6
 8009b50:	003fc706 	br	8009a70 <memset+0x44>

08009b54 <_open_r>:
 8009b54:	defffd04 	addi	sp,sp,-12
 8009b58:	2805883a 	mov	r2,r5
 8009b5c:	dc000015 	stw	r16,0(sp)
 8009b60:	040200b4 	movhi	r16,2050
 8009b64:	dc400115 	stw	r17,4(sp)
 8009b68:	300b883a 	mov	r5,r6
 8009b6c:	843a6704 	addi	r16,r16,-5732
 8009b70:	2023883a 	mov	r17,r4
 8009b74:	380d883a 	mov	r6,r7
 8009b78:	1009883a 	mov	r4,r2
 8009b7c:	dfc00215 	stw	ra,8(sp)
 8009b80:	80000015 	stw	zero,0(r16)
 8009b84:	80167dc0 	call	80167dc <open>
 8009b88:	00ffffc4 	movi	r3,-1
 8009b8c:	10c00526 	beq	r2,r3,8009ba4 <_open_r+0x50>
 8009b90:	dfc00217 	ldw	ra,8(sp)
 8009b94:	dc400117 	ldw	r17,4(sp)
 8009b98:	dc000017 	ldw	r16,0(sp)
 8009b9c:	dec00304 	addi	sp,sp,12
 8009ba0:	f800283a 	ret
 8009ba4:	80c00017 	ldw	r3,0(r16)
 8009ba8:	183ff926 	beq	r3,zero,8009b90 <_open_r+0x3c>
 8009bac:	88c00015 	stw	r3,0(r17)
 8009bb0:	003ff706 	br	8009b90 <_open_r+0x3c>

08009bb4 <_printf_r>:
 8009bb4:	defffd04 	addi	sp,sp,-12
 8009bb8:	2805883a 	mov	r2,r5
 8009bbc:	dfc00015 	stw	ra,0(sp)
 8009bc0:	d9800115 	stw	r6,4(sp)
 8009bc4:	d9c00215 	stw	r7,8(sp)
 8009bc8:	21400217 	ldw	r5,8(r4)
 8009bcc:	d9c00104 	addi	r7,sp,4
 8009bd0:	100d883a 	mov	r6,r2
 8009bd4:	800a10c0 	call	800a10c <___vfprintf_internal_r>
 8009bd8:	dfc00017 	ldw	ra,0(sp)
 8009bdc:	dec00304 	addi	sp,sp,12
 8009be0:	f800283a 	ret

08009be4 <printf>:
 8009be4:	defffc04 	addi	sp,sp,-16
 8009be8:	dfc00015 	stw	ra,0(sp)
 8009bec:	d9400115 	stw	r5,4(sp)
 8009bf0:	d9800215 	stw	r6,8(sp)
 8009bf4:	d9c00315 	stw	r7,12(sp)
 8009bf8:	008200b4 	movhi	r2,2050
 8009bfc:	10b1bc04 	addi	r2,r2,-14608
 8009c00:	10800017 	ldw	r2,0(r2)
 8009c04:	200b883a 	mov	r5,r4
 8009c08:	d9800104 	addi	r6,sp,4
 8009c0c:	11000217 	ldw	r4,8(r2)
 8009c10:	800c3e80 	call	800c3e8 <__vfprintf_internal>
 8009c14:	dfc00017 	ldw	ra,0(sp)
 8009c18:	dec00404 	addi	sp,sp,16
 8009c1c:	f800283a 	ret

08009c20 <_puts_r>:
 8009c20:	defff604 	addi	sp,sp,-40
 8009c24:	dc000715 	stw	r16,28(sp)
 8009c28:	2021883a 	mov	r16,r4
 8009c2c:	2809883a 	mov	r4,r5
 8009c30:	dc400815 	stw	r17,32(sp)
 8009c34:	dfc00915 	stw	ra,36(sp)
 8009c38:	2823883a 	mov	r17,r5
 8009c3c:	800a0740 	call	800a074 <strlen>
 8009c40:	10c00044 	addi	r3,r2,1
 8009c44:	d8800115 	stw	r2,4(sp)
 8009c48:	008200b4 	movhi	r2,2050
 8009c4c:	10a8c304 	addi	r2,r2,-23796
 8009c50:	d8800215 	stw	r2,8(sp)
 8009c54:	00800044 	movi	r2,1
 8009c58:	d8800315 	stw	r2,12(sp)
 8009c5c:	00800084 	movi	r2,2
 8009c60:	dc400015 	stw	r17,0(sp)
 8009c64:	d8c00615 	stw	r3,24(sp)
 8009c68:	dec00415 	stw	sp,16(sp)
 8009c6c:	d8800515 	stw	r2,20(sp)
 8009c70:	80000226 	beq	r16,zero,8009c7c <_puts_r+0x5c>
 8009c74:	80800e17 	ldw	r2,56(r16)
 8009c78:	10001426 	beq	r2,zero,8009ccc <_puts_r+0xac>
 8009c7c:	81400217 	ldw	r5,8(r16)
 8009c80:	2880030b 	ldhu	r2,12(r5)
 8009c84:	10c8000c 	andi	r3,r2,8192
 8009c88:	1800061e 	bne	r3,zero,8009ca4 <_puts_r+0x84>
 8009c8c:	29001917 	ldw	r4,100(r5)
 8009c90:	00f7ffc4 	movi	r3,-8193
 8009c94:	10880014 	ori	r2,r2,8192
 8009c98:	20c6703a 	and	r3,r4,r3
 8009c9c:	2880030d 	sth	r2,12(r5)
 8009ca0:	28c01915 	stw	r3,100(r5)
 8009ca4:	d9800404 	addi	r6,sp,16
 8009ca8:	8009883a 	mov	r4,r16
 8009cac:	800eab00 	call	800eab0 <__sfvwrite_r>
 8009cb0:	1000091e 	bne	r2,zero,8009cd8 <_puts_r+0xb8>
 8009cb4:	00800284 	movi	r2,10
 8009cb8:	dfc00917 	ldw	ra,36(sp)
 8009cbc:	dc400817 	ldw	r17,32(sp)
 8009cc0:	dc000717 	ldw	r16,28(sp)
 8009cc4:	dec00a04 	addi	sp,sp,40
 8009cc8:	f800283a 	ret
 8009ccc:	8009883a 	mov	r4,r16
 8009cd0:	800e5800 	call	800e580 <__sinit>
 8009cd4:	003fe906 	br	8009c7c <_puts_r+0x5c>
 8009cd8:	00bfffc4 	movi	r2,-1
 8009cdc:	003ff606 	br	8009cb8 <_puts_r+0x98>

08009ce0 <puts>:
 8009ce0:	008200b4 	movhi	r2,2050
 8009ce4:	10b1bc04 	addi	r2,r2,-14608
 8009ce8:	200b883a 	mov	r5,r4
 8009cec:	11000017 	ldw	r4,0(r2)
 8009cf0:	8009c201 	jmpi	8009c20 <_puts_r>

08009cf4 <lflush>:
 8009cf4:	2080030b 	ldhu	r2,12(r4)
 8009cf8:	00c00244 	movi	r3,9
 8009cfc:	1080024c 	andi	r2,r2,9
 8009d00:	10c00226 	beq	r2,r3,8009d0c <lflush+0x18>
 8009d04:	0005883a 	mov	r2,zero
 8009d08:	f800283a 	ret
 8009d0c:	800e1f01 	jmpi	800e1f0 <fflush>

08009d10 <__srefill_r>:
 8009d10:	defffc04 	addi	sp,sp,-16
 8009d14:	dc400115 	stw	r17,4(sp)
 8009d18:	dc000015 	stw	r16,0(sp)
 8009d1c:	dfc00315 	stw	ra,12(sp)
 8009d20:	dc800215 	stw	r18,8(sp)
 8009d24:	2023883a 	mov	r17,r4
 8009d28:	2821883a 	mov	r16,r5
 8009d2c:	20000226 	beq	r4,zero,8009d38 <__srefill_r+0x28>
 8009d30:	20800e17 	ldw	r2,56(r4)
 8009d34:	10003c26 	beq	r2,zero,8009e28 <__srefill_r+0x118>
 8009d38:	80c0030b 	ldhu	r3,12(r16)
 8009d3c:	1908000c 	andi	r4,r3,8192
 8009d40:	1805883a 	mov	r2,r3
 8009d44:	2000071e 	bne	r4,zero,8009d64 <__srefill_r+0x54>
 8009d48:	81001917 	ldw	r4,100(r16)
 8009d4c:	18880014 	ori	r2,r3,8192
 8009d50:	00f7ffc4 	movi	r3,-8193
 8009d54:	20c8703a 	and	r4,r4,r3
 8009d58:	8080030d 	sth	r2,12(r16)
 8009d5c:	1007883a 	mov	r3,r2
 8009d60:	81001915 	stw	r4,100(r16)
 8009d64:	80000115 	stw	zero,4(r16)
 8009d68:	1100080c 	andi	r4,r2,32
 8009d6c:	2000571e 	bne	r4,zero,8009ecc <__srefill_r+0x1bc>
 8009d70:	1100010c 	andi	r4,r2,4
 8009d74:	20001f26 	beq	r4,zero,8009df4 <__srefill_r+0xe4>
 8009d78:	81400c17 	ldw	r5,48(r16)
 8009d7c:	28000826 	beq	r5,zero,8009da0 <__srefill_r+0x90>
 8009d80:	80801004 	addi	r2,r16,64
 8009d84:	28800226 	beq	r5,r2,8009d90 <__srefill_r+0x80>
 8009d88:	8809883a 	mov	r4,r17
 8009d8c:	800e7a00 	call	800e7a0 <_free_r>
 8009d90:	80800f17 	ldw	r2,60(r16)
 8009d94:	80000c15 	stw	zero,48(r16)
 8009d98:	80800115 	stw	r2,4(r16)
 8009d9c:	1000391e 	bne	r2,zero,8009e84 <__srefill_r+0x174>
 8009da0:	80800417 	ldw	r2,16(r16)
 8009da4:	10004b26 	beq	r2,zero,8009ed4 <__srefill_r+0x1c4>
 8009da8:	8480030b 	ldhu	r18,12(r16)
 8009dac:	908000cc 	andi	r2,r18,3
 8009db0:	10001f1e 	bne	r2,zero,8009e30 <__srefill_r+0x120>
 8009db4:	81800417 	ldw	r6,16(r16)
 8009db8:	80800817 	ldw	r2,32(r16)
 8009dbc:	81c00517 	ldw	r7,20(r16)
 8009dc0:	81400717 	ldw	r5,28(r16)
 8009dc4:	81800015 	stw	r6,0(r16)
 8009dc8:	8809883a 	mov	r4,r17
 8009dcc:	103ee83a 	callr	r2
 8009dd0:	80800115 	stw	r2,4(r16)
 8009dd4:	00800e0e 	bge	zero,r2,8009e10 <__srefill_r+0x100>
 8009dd8:	0005883a 	mov	r2,zero
 8009ddc:	dfc00317 	ldw	ra,12(sp)
 8009de0:	dc800217 	ldw	r18,8(sp)
 8009de4:	dc400117 	ldw	r17,4(sp)
 8009de8:	dc000017 	ldw	r16,0(sp)
 8009dec:	dec00404 	addi	sp,sp,16
 8009df0:	f800283a 	ret
 8009df4:	1100040c 	andi	r4,r2,16
 8009df8:	20003026 	beq	r4,zero,8009ebc <__srefill_r+0x1ac>
 8009dfc:	1080020c 	andi	r2,r2,8
 8009e00:	1000241e 	bne	r2,zero,8009e94 <__srefill_r+0x184>
 8009e04:	18c00114 	ori	r3,r3,4
 8009e08:	80c0030d 	sth	r3,12(r16)
 8009e0c:	003fe406 	br	8009da0 <__srefill_r+0x90>
 8009e10:	80c0030b 	ldhu	r3,12(r16)
 8009e14:	1000161e 	bne	r2,zero,8009e70 <__srefill_r+0x160>
 8009e18:	18c00814 	ori	r3,r3,32
 8009e1c:	00bfffc4 	movi	r2,-1
 8009e20:	80c0030d 	sth	r3,12(r16)
 8009e24:	003fed06 	br	8009ddc <__srefill_r+0xcc>
 8009e28:	800e5800 	call	800e580 <__sinit>
 8009e2c:	003fc206 	br	8009d38 <__srefill_r+0x28>
 8009e30:	008200b4 	movhi	r2,2050
 8009e34:	10b1bb04 	addi	r2,r2,-14612
 8009e38:	11000017 	ldw	r4,0(r2)
 8009e3c:	01420074 	movhi	r5,2049
 8009e40:	00800044 	movi	r2,1
 8009e44:	29673d04 	addi	r5,r5,-25356
 8009e48:	8080030d 	sth	r2,12(r16)
 8009e4c:	800ef780 	call	800ef78 <_fwalk>
 8009e50:	00800244 	movi	r2,9
 8009e54:	8480030d 	sth	r18,12(r16)
 8009e58:	9480024c 	andi	r18,r18,9
 8009e5c:	90bfd51e 	bne	r18,r2,8009db4 <__srefill_r+0xa4>
 8009e60:	800b883a 	mov	r5,r16
 8009e64:	8809883a 	mov	r4,r17
 8009e68:	800df780 	call	800df78 <__sflush_r>
 8009e6c:	003fd106 	br	8009db4 <__srefill_r+0xa4>
 8009e70:	18c01014 	ori	r3,r3,64
 8009e74:	80000115 	stw	zero,4(r16)
 8009e78:	00bfffc4 	movi	r2,-1
 8009e7c:	80c0030d 	sth	r3,12(r16)
 8009e80:	003fd606 	br	8009ddc <__srefill_r+0xcc>
 8009e84:	80c00e17 	ldw	r3,56(r16)
 8009e88:	0005883a 	mov	r2,zero
 8009e8c:	80c00015 	stw	r3,0(r16)
 8009e90:	003fd206 	br	8009ddc <__srefill_r+0xcc>
 8009e94:	800b883a 	mov	r5,r16
 8009e98:	8809883a 	mov	r4,r17
 8009e9c:	800e1940 	call	800e194 <_fflush_r>
 8009ea0:	10000a1e 	bne	r2,zero,8009ecc <__srefill_r+0x1bc>
 8009ea4:	8080030b 	ldhu	r2,12(r16)
 8009ea8:	00fffdc4 	movi	r3,-9
 8009eac:	80000215 	stw	zero,8(r16)
 8009eb0:	1886703a 	and	r3,r3,r2
 8009eb4:	80000615 	stw	zero,24(r16)
 8009eb8:	003fd206 	br	8009e04 <__srefill_r+0xf4>
 8009ebc:	00800244 	movi	r2,9
 8009ec0:	88800015 	stw	r2,0(r17)
 8009ec4:	18c01014 	ori	r3,r3,64
 8009ec8:	80c0030d 	sth	r3,12(r16)
 8009ecc:	00bfffc4 	movi	r2,-1
 8009ed0:	003fc206 	br	8009ddc <__srefill_r+0xcc>
 8009ed4:	800b883a 	mov	r5,r16
 8009ed8:	8809883a 	mov	r4,r17
 8009edc:	8008f1c0 	call	8008f1c <__smakebuf_r>
 8009ee0:	003fb106 	br	8009da8 <__srefill_r+0x98>

08009ee4 <_sbrk_r>:
 8009ee4:	defffd04 	addi	sp,sp,-12
 8009ee8:	dc000015 	stw	r16,0(sp)
 8009eec:	040200b4 	movhi	r16,2050
 8009ef0:	dc400115 	stw	r17,4(sp)
 8009ef4:	843a6704 	addi	r16,r16,-5732
 8009ef8:	2023883a 	mov	r17,r4
 8009efc:	2809883a 	mov	r4,r5
 8009f00:	dfc00215 	stw	ra,8(sp)
 8009f04:	80000015 	stw	zero,0(r16)
 8009f08:	8016d640 	call	8016d64 <sbrk>
 8009f0c:	00ffffc4 	movi	r3,-1
 8009f10:	10c00526 	beq	r2,r3,8009f28 <_sbrk_r+0x44>
 8009f14:	dfc00217 	ldw	ra,8(sp)
 8009f18:	dc400117 	ldw	r17,4(sp)
 8009f1c:	dc000017 	ldw	r16,0(sp)
 8009f20:	dec00304 	addi	sp,sp,12
 8009f24:	f800283a 	ret
 8009f28:	80c00017 	ldw	r3,0(r16)
 8009f2c:	183ff926 	beq	r3,zero,8009f14 <_sbrk_r+0x30>
 8009f30:	88c00015 	stw	r3,0(r17)
 8009f34:	003ff706 	br	8009f14 <_sbrk_r+0x30>

08009f38 <__sread>:
 8009f38:	defffe04 	addi	sp,sp,-8
 8009f3c:	dc000015 	stw	r16,0(sp)
 8009f40:	2821883a 	mov	r16,r5
 8009f44:	2940038f 	ldh	r5,14(r5)
 8009f48:	dfc00115 	stw	ra,4(sp)
 8009f4c:	80105880 	call	8010588 <_read_r>
 8009f50:	10000716 	blt	r2,zero,8009f70 <__sread+0x38>
 8009f54:	80c01417 	ldw	r3,80(r16)
 8009f58:	1887883a 	add	r3,r3,r2
 8009f5c:	80c01415 	stw	r3,80(r16)
 8009f60:	dfc00117 	ldw	ra,4(sp)
 8009f64:	dc000017 	ldw	r16,0(sp)
 8009f68:	dec00204 	addi	sp,sp,8
 8009f6c:	f800283a 	ret
 8009f70:	80c0030b 	ldhu	r3,12(r16)
 8009f74:	18fbffcc 	andi	r3,r3,61439
 8009f78:	80c0030d 	sth	r3,12(r16)
 8009f7c:	dfc00117 	ldw	ra,4(sp)
 8009f80:	dc000017 	ldw	r16,0(sp)
 8009f84:	dec00204 	addi	sp,sp,8
 8009f88:	f800283a 	ret

08009f8c <__seofread>:
 8009f8c:	0005883a 	mov	r2,zero
 8009f90:	f800283a 	ret

08009f94 <__swrite>:
 8009f94:	2880030b 	ldhu	r2,12(r5)
 8009f98:	defffb04 	addi	sp,sp,-20
 8009f9c:	dcc00315 	stw	r19,12(sp)
 8009fa0:	dc800215 	stw	r18,8(sp)
 8009fa4:	dc400115 	stw	r17,4(sp)
 8009fa8:	dc000015 	stw	r16,0(sp)
 8009fac:	dfc00415 	stw	ra,16(sp)
 8009fb0:	10c0400c 	andi	r3,r2,256
 8009fb4:	2821883a 	mov	r16,r5
 8009fb8:	2023883a 	mov	r17,r4
 8009fbc:	3025883a 	mov	r18,r6
 8009fc0:	3827883a 	mov	r19,r7
 8009fc4:	18000526 	beq	r3,zero,8009fdc <__swrite+0x48>
 8009fc8:	2940038f 	ldh	r5,14(r5)
 8009fcc:	01c00084 	movi	r7,2
 8009fd0:	000d883a 	mov	r6,zero
 8009fd4:	800f2300 	call	800f230 <_lseek_r>
 8009fd8:	8080030b 	ldhu	r2,12(r16)
 8009fdc:	8140038f 	ldh	r5,14(r16)
 8009fe0:	10bbffcc 	andi	r2,r2,61439
 8009fe4:	980f883a 	mov	r7,r19
 8009fe8:	900d883a 	mov	r6,r18
 8009fec:	8809883a 	mov	r4,r17
 8009ff0:	8080030d 	sth	r2,12(r16)
 8009ff4:	dfc00417 	ldw	ra,16(sp)
 8009ff8:	dcc00317 	ldw	r19,12(sp)
 8009ffc:	dc800217 	ldw	r18,8(sp)
 800a000:	dc400117 	ldw	r17,4(sp)
 800a004:	dc000017 	ldw	r16,0(sp)
 800a008:	dec00504 	addi	sp,sp,20
 800a00c:	800c4c01 	jmpi	800c4c0 <_write_r>

0800a010 <__sseek>:
 800a010:	defffe04 	addi	sp,sp,-8
 800a014:	dc000015 	stw	r16,0(sp)
 800a018:	2821883a 	mov	r16,r5
 800a01c:	2940038f 	ldh	r5,14(r5)
 800a020:	dfc00115 	stw	ra,4(sp)
 800a024:	800f2300 	call	800f230 <_lseek_r>
 800a028:	00ffffc4 	movi	r3,-1
 800a02c:	10c00826 	beq	r2,r3,800a050 <__sseek+0x40>
 800a030:	80c0030b 	ldhu	r3,12(r16)
 800a034:	80801415 	stw	r2,80(r16)
 800a038:	18c40014 	ori	r3,r3,4096
 800a03c:	80c0030d 	sth	r3,12(r16)
 800a040:	dfc00117 	ldw	ra,4(sp)
 800a044:	dc000017 	ldw	r16,0(sp)
 800a048:	dec00204 	addi	sp,sp,8
 800a04c:	f800283a 	ret
 800a050:	80c0030b 	ldhu	r3,12(r16)
 800a054:	18fbffcc 	andi	r3,r3,61439
 800a058:	80c0030d 	sth	r3,12(r16)
 800a05c:	dfc00117 	ldw	ra,4(sp)
 800a060:	dc000017 	ldw	r16,0(sp)
 800a064:	dec00204 	addi	sp,sp,8
 800a068:	f800283a 	ret

0800a06c <__sclose>:
 800a06c:	2940038f 	ldh	r5,14(r5)
 800a070:	800c6741 	jmpi	800c674 <_close_r>

0800a074 <strlen>:
 800a074:	208000cc 	andi	r2,r4,3
 800a078:	10002026 	beq	r2,zero,800a0fc <strlen+0x88>
 800a07c:	20800007 	ldb	r2,0(r4)
 800a080:	10002026 	beq	r2,zero,800a104 <strlen+0x90>
 800a084:	2005883a 	mov	r2,r4
 800a088:	00000206 	br	800a094 <strlen+0x20>
 800a08c:	10c00007 	ldb	r3,0(r2)
 800a090:	18001826 	beq	r3,zero,800a0f4 <strlen+0x80>
 800a094:	10800044 	addi	r2,r2,1
 800a098:	10c000cc 	andi	r3,r2,3
 800a09c:	183ffb1e 	bne	r3,zero,800a08c <strlen+0x18>
 800a0a0:	10c00017 	ldw	r3,0(r2)
 800a0a4:	01ffbff4 	movhi	r7,65279
 800a0a8:	39ffbfc4 	addi	r7,r7,-257
 800a0ac:	00ca303a 	nor	r5,zero,r3
 800a0b0:	01a02074 	movhi	r6,32897
 800a0b4:	19c7883a 	add	r3,r3,r7
 800a0b8:	31a02004 	addi	r6,r6,-32640
 800a0bc:	1946703a 	and	r3,r3,r5
 800a0c0:	1986703a 	and	r3,r3,r6
 800a0c4:	1800091e 	bne	r3,zero,800a0ec <strlen+0x78>
 800a0c8:	10800104 	addi	r2,r2,4
 800a0cc:	10c00017 	ldw	r3,0(r2)
 800a0d0:	19cb883a 	add	r5,r3,r7
 800a0d4:	00c6303a 	nor	r3,zero,r3
 800a0d8:	28c6703a 	and	r3,r5,r3
 800a0dc:	1986703a 	and	r3,r3,r6
 800a0e0:	183ff926 	beq	r3,zero,800a0c8 <strlen+0x54>
 800a0e4:	00000106 	br	800a0ec <strlen+0x78>
 800a0e8:	10800044 	addi	r2,r2,1
 800a0ec:	10c00007 	ldb	r3,0(r2)
 800a0f0:	183ffd1e 	bne	r3,zero,800a0e8 <strlen+0x74>
 800a0f4:	1105c83a 	sub	r2,r2,r4
 800a0f8:	f800283a 	ret
 800a0fc:	2005883a 	mov	r2,r4
 800a100:	003fe706 	br	800a0a0 <strlen+0x2c>
 800a104:	0005883a 	mov	r2,zero
 800a108:	f800283a 	ret

0800a10c <___vfprintf_internal_r>:
 800a10c:	deffb804 	addi	sp,sp,-288
 800a110:	dfc04715 	stw	ra,284(sp)
 800a114:	ddc04515 	stw	r23,276(sp)
 800a118:	dd404315 	stw	r21,268(sp)
 800a11c:	d9002d15 	stw	r4,180(sp)
 800a120:	282f883a 	mov	r23,r5
 800a124:	302b883a 	mov	r21,r6
 800a128:	d9c02e15 	stw	r7,184(sp)
 800a12c:	df004615 	stw	fp,280(sp)
 800a130:	dd804415 	stw	r22,272(sp)
 800a134:	dd004215 	stw	r20,264(sp)
 800a138:	dcc04115 	stw	r19,260(sp)
 800a13c:	dc804015 	stw	r18,256(sp)
 800a140:	dc403f15 	stw	r17,252(sp)
 800a144:	dc003e15 	stw	r16,248(sp)
 800a148:	800f2000 	call	800f200 <_localeconv_r>
 800a14c:	10800017 	ldw	r2,0(r2)
 800a150:	1009883a 	mov	r4,r2
 800a154:	d8803415 	stw	r2,208(sp)
 800a158:	800a0740 	call	800a074 <strlen>
 800a15c:	d8803715 	stw	r2,220(sp)
 800a160:	d8802d17 	ldw	r2,180(sp)
 800a164:	10000226 	beq	r2,zero,800a170 <___vfprintf_internal_r+0x64>
 800a168:	10800e17 	ldw	r2,56(r2)
 800a16c:	1000fb26 	beq	r2,zero,800a55c <___vfprintf_internal_r+0x450>
 800a170:	b880030b 	ldhu	r2,12(r23)
 800a174:	10c8000c 	andi	r3,r2,8192
 800a178:	1800061e 	bne	r3,zero,800a194 <___vfprintf_internal_r+0x88>
 800a17c:	b9001917 	ldw	r4,100(r23)
 800a180:	00f7ffc4 	movi	r3,-8193
 800a184:	10880014 	ori	r2,r2,8192
 800a188:	20c6703a 	and	r3,r4,r3
 800a18c:	b880030d 	sth	r2,12(r23)
 800a190:	b8c01915 	stw	r3,100(r23)
 800a194:	10c0020c 	andi	r3,r2,8
 800a198:	1800c326 	beq	r3,zero,800a4a8 <___vfprintf_internal_r+0x39c>
 800a19c:	b8c00417 	ldw	r3,16(r23)
 800a1a0:	1800c126 	beq	r3,zero,800a4a8 <___vfprintf_internal_r+0x39c>
 800a1a4:	1080068c 	andi	r2,r2,26
 800a1a8:	00c00284 	movi	r3,10
 800a1ac:	10c0c626 	beq	r2,r3,800a4c8 <___vfprintf_internal_r+0x3bc>
 800a1b0:	d8c00404 	addi	r3,sp,16
 800a1b4:	050200b4 	movhi	r20,2050
 800a1b8:	d9001e04 	addi	r4,sp,120
 800a1bc:	a528d484 	addi	r20,r20,-23726
 800a1c0:	d8c01e15 	stw	r3,120(sp)
 800a1c4:	d8002015 	stw	zero,128(sp)
 800a1c8:	d8001f15 	stw	zero,124(sp)
 800a1cc:	d8003315 	stw	zero,204(sp)
 800a1d0:	d8003615 	stw	zero,216(sp)
 800a1d4:	d8003815 	stw	zero,224(sp)
 800a1d8:	1811883a 	mov	r8,r3
 800a1dc:	d8003915 	stw	zero,228(sp)
 800a1e0:	d8003a15 	stw	zero,232(sp)
 800a1e4:	d8002f15 	stw	zero,188(sp)
 800a1e8:	d9002815 	stw	r4,160(sp)
 800a1ec:	a8800007 	ldb	r2,0(r21)
 800a1f0:	10028b26 	beq	r2,zero,800ac20 <___vfprintf_internal_r+0xb14>
 800a1f4:	00c00944 	movi	r3,37
 800a1f8:	a823883a 	mov	r17,r21
 800a1fc:	10c0021e 	bne	r2,r3,800a208 <___vfprintf_internal_r+0xfc>
 800a200:	00001406 	br	800a254 <___vfprintf_internal_r+0x148>
 800a204:	10c00326 	beq	r2,r3,800a214 <___vfprintf_internal_r+0x108>
 800a208:	8c400044 	addi	r17,r17,1
 800a20c:	88800007 	ldb	r2,0(r17)
 800a210:	103ffc1e 	bne	r2,zero,800a204 <___vfprintf_internal_r+0xf8>
 800a214:	8d61c83a 	sub	r16,r17,r21
 800a218:	80000e26 	beq	r16,zero,800a254 <___vfprintf_internal_r+0x148>
 800a21c:	d8c02017 	ldw	r3,128(sp)
 800a220:	d8801f17 	ldw	r2,124(sp)
 800a224:	45400015 	stw	r21,0(r8)
 800a228:	1c07883a 	add	r3,r3,r16
 800a22c:	10800044 	addi	r2,r2,1
 800a230:	d8c02015 	stw	r3,128(sp)
 800a234:	44000115 	stw	r16,4(r8)
 800a238:	d8801f15 	stw	r2,124(sp)
 800a23c:	00c001c4 	movi	r3,7
 800a240:	1880a916 	blt	r3,r2,800a4e8 <___vfprintf_internal_r+0x3dc>
 800a244:	42000204 	addi	r8,r8,8
 800a248:	d9402f17 	ldw	r5,188(sp)
 800a24c:	2c0b883a 	add	r5,r5,r16
 800a250:	d9402f15 	stw	r5,188(sp)
 800a254:	88800007 	ldb	r2,0(r17)
 800a258:	1000aa26 	beq	r2,zero,800a504 <___vfprintf_internal_r+0x3f8>
 800a25c:	8d400044 	addi	r21,r17,1
 800a260:	8c400047 	ldb	r17,1(r17)
 800a264:	0021883a 	mov	r16,zero
 800a268:	00bfffc4 	movi	r2,-1
 800a26c:	0025883a 	mov	r18,zero
 800a270:	dc002905 	stb	r16,164(sp)
 800a274:	d8002785 	stb	zero,158(sp)
 800a278:	d8002b05 	stb	zero,172(sp)
 800a27c:	d8802a15 	stw	r2,168(sp)
 800a280:	d8003115 	stw	zero,196(sp)
 800a284:	04c01604 	movi	r19,88
 800a288:	05800244 	movi	r22,9
 800a28c:	9021883a 	mov	r16,r18
 800a290:	4039883a 	mov	fp,r8
 800a294:	ad400044 	addi	r21,r21,1
 800a298:	88bff804 	addi	r2,r17,-32
 800a29c:	98833236 	bltu	r19,r2,800af68 <___vfprintf_internal_r+0xe5c>
 800a2a0:	100490ba 	slli	r2,r2,2
 800a2a4:	00c20074 	movhi	r3,2049
 800a2a8:	18e8ae04 	addi	r3,r3,-23880
 800a2ac:	10c5883a 	add	r2,r2,r3
 800a2b0:	10800017 	ldw	r2,0(r2)
 800a2b4:	1000683a 	jmp	r2
 800a2b8:	0800ae60 	cmpeqi	zero,at,697
 800a2bc:	0800af68 	cmpgeui	zero,at,701
 800a2c0:	0800af68 	cmpgeui	zero,at,701
 800a2c4:	0800ae80 	call	800ae8 <__alt_mem_sdram-0x77ff518>
 800a2c8:	0800af68 	cmpgeui	zero,at,701
 800a2cc:	0800af68 	cmpgeui	zero,at,701
 800a2d0:	0800af68 	cmpgeui	zero,at,701
 800a2d4:	0800af68 	cmpgeui	zero,at,701
 800a2d8:	0800af68 	cmpgeui	zero,at,701
 800a2dc:	0800af68 	cmpgeui	zero,at,701
 800a2e0:	0800a568 	cmpgeui	zero,at,661
 800a2e4:	0800ad70 	cmpltui	zero,at,693
 800a2e8:	0800af68 	cmpgeui	zero,at,701
 800a2ec:	0800a42c 	andhi	zero,at,656
 800a2f0:	0800a58c 	andi	zero,at,662
 800a2f4:	0800af68 	cmpgeui	zero,at,701
 800a2f8:	0800a5dc 	xori	zero,at,663
 800a2fc:	0800a5e8 	cmpgeui	zero,at,663
 800a300:	0800a5e8 	cmpgeui	zero,at,663
 800a304:	0800a5e8 	cmpgeui	zero,at,663
 800a308:	0800a5e8 	cmpgeui	zero,at,663
 800a30c:	0800a5e8 	cmpgeui	zero,at,663
 800a310:	0800a5e8 	cmpgeui	zero,at,663
 800a314:	0800a5e8 	cmpgeui	zero,at,663
 800a318:	0800a5e8 	cmpgeui	zero,at,663
 800a31c:	0800a5e8 	cmpgeui	zero,at,663
 800a320:	0800af68 	cmpgeui	zero,at,701
 800a324:	0800af68 	cmpgeui	zero,at,701
 800a328:	0800af68 	cmpgeui	zero,at,701
 800a32c:	0800af68 	cmpgeui	zero,at,701
 800a330:	0800af68 	cmpgeui	zero,at,701
 800a334:	0800af68 	cmpgeui	zero,at,701
 800a338:	0800af68 	cmpgeui	zero,at,701
 800a33c:	0800af68 	cmpgeui	zero,at,701
 800a340:	0800af68 	cmpgeui	zero,at,701
 800a344:	0800af68 	cmpgeui	zero,at,701
 800a348:	0800a624 	muli	zero,at,664
 800a34c:	0800a6ec 	andhi	zero,at,667
 800a350:	0800af68 	cmpgeui	zero,at,701
 800a354:	0800a6ec 	andhi	zero,at,667
 800a358:	0800af68 	cmpgeui	zero,at,701
 800a35c:	0800af68 	cmpgeui	zero,at,701
 800a360:	0800af68 	cmpgeui	zero,at,701
 800a364:	0800af68 	cmpgeui	zero,at,701
 800a368:	0800a798 	cmpnei	zero,at,670
 800a36c:	0800af68 	cmpgeui	zero,at,701
 800a370:	0800af68 	cmpgeui	zero,at,701
 800a374:	0800a7a4 	muli	zero,at,670
 800a378:	0800af68 	cmpgeui	zero,at,701
 800a37c:	0800af68 	cmpgeui	zero,at,701
 800a380:	0800af68 	cmpgeui	zero,at,701
 800a384:	0800af68 	cmpgeui	zero,at,701
 800a388:	0800af68 	cmpgeui	zero,at,701
 800a38c:	0800ac28 	cmpgeui	zero,at,688
 800a390:	0800af68 	cmpgeui	zero,at,701
 800a394:	0800af68 	cmpgeui	zero,at,701
 800a398:	0800ac94 	ori	zero,at,690
 800a39c:	0800af68 	cmpgeui	zero,at,701
 800a3a0:	0800af68 	cmpgeui	zero,at,701
 800a3a4:	0800af68 	cmpgeui	zero,at,701
 800a3a8:	0800af68 	cmpgeui	zero,at,701
 800a3ac:	0800af68 	cmpgeui	zero,at,701
 800a3b0:	0800af68 	cmpgeui	zero,at,701
 800a3b4:	0800af68 	cmpgeui	zero,at,701
 800a3b8:	0800af68 	cmpgeui	zero,at,701
 800a3bc:	0800af68 	cmpgeui	zero,at,701
 800a3c0:	0800af68 	cmpgeui	zero,at,701
 800a3c4:	0800af0c 	andi	zero,at,700
 800a3c8:	0800ae8c 	andi	zero,at,698
 800a3cc:	0800a6ec 	andhi	zero,at,667
 800a3d0:	0800a6ec 	andhi	zero,at,667
 800a3d4:	0800a6ec 	andhi	zero,at,667
 800a3d8:	0800aeac 	andhi	zero,at,698
 800a3dc:	0800ae8c 	andi	zero,at,698
 800a3e0:	0800af68 	cmpgeui	zero,at,701
 800a3e4:	0800af68 	cmpgeui	zero,at,701
 800a3e8:	0800aeb8 	rdprs	zero,at,698
 800a3ec:	0800af68 	cmpgeui	zero,at,701
 800a3f0:	0800aecc 	andi	zero,at,699
 800a3f4:	0800ad50 	cmplti	zero,at,693
 800a3f8:	0800a438 	rdprs	zero,at,656
 800a3fc:	0800ad88 	cmpgei	zero,at,694
 800a400:	0800af68 	cmpgeui	zero,at,701
 800a404:	0800ad94 	ori	zero,at,694
 800a408:	0800af68 	cmpgeui	zero,at,701
 800a40c:	0800adf8 	rdprs	zero,at,695
 800a410:	0800af68 	cmpgeui	zero,at,701
 800a414:	0800af68 	cmpgeui	zero,at,701
 800a418:	0800ae18 	cmpnei	zero,at,696
 800a41c:	d8c03117 	ldw	r3,196(sp)
 800a420:	d8802e15 	stw	r2,184(sp)
 800a424:	00c7c83a 	sub	r3,zero,r3
 800a428:	d8c03115 	stw	r3,196(sp)
 800a42c:	84000114 	ori	r16,r16,4
 800a430:	ac400007 	ldb	r17,0(r21)
 800a434:	003f9706 	br	800a294 <___vfprintf_internal_r+0x188>
 800a438:	00800c04 	movi	r2,48
 800a43c:	d8802705 	stb	r2,156(sp)
 800a440:	00801e04 	movi	r2,120
 800a444:	d8802745 	stb	r2,157(sp)
 800a448:	d9002a17 	ldw	r4,168(sp)
 800a44c:	d8802e17 	ldw	r2,184(sp)
 800a450:	d8002785 	stb	zero,158(sp)
 800a454:	e011883a 	mov	r8,fp
 800a458:	10c00104 	addi	r3,r2,4
 800a45c:	14c00017 	ldw	r19,0(r2)
 800a460:	002d883a 	mov	r22,zero
 800a464:	80800094 	ori	r2,r16,2
 800a468:	2002ca16 	blt	r4,zero,800af94 <___vfprintf_internal_r+0xe88>
 800a46c:	00bfdfc4 	movi	r2,-129
 800a470:	80a4703a 	and	r18,r16,r2
 800a474:	d8c02e15 	stw	r3,184(sp)
 800a478:	94800094 	ori	r18,r18,2
 800a47c:	9802b41e 	bne	r19,zero,800af50 <___vfprintf_internal_r+0xe44>
 800a480:	014200b4 	movhi	r5,2050
 800a484:	2968cd04 	addi	r5,r5,-23756
 800a488:	d9403915 	stw	r5,228(sp)
 800a48c:	04401e04 	movi	r17,120
 800a490:	d8802a17 	ldw	r2,168(sp)
 800a494:	0039883a 	mov	fp,zero
 800a498:	1001fa26 	beq	r2,zero,800ac84 <___vfprintf_internal_r+0xb78>
 800a49c:	0027883a 	mov	r19,zero
 800a4a0:	002d883a 	mov	r22,zero
 800a4a4:	00021906 	br	800ad0c <___vfprintf_internal_r+0xc00>
 800a4a8:	d9002d17 	ldw	r4,180(sp)
 800a4ac:	b80b883a 	mov	r5,r23
 800a4b0:	800c5200 	call	800c520 <__swsetup_r>
 800a4b4:	1005dc1e 	bne	r2,zero,800bc28 <___vfprintf_internal_r+0x1b1c>
 800a4b8:	b880030b 	ldhu	r2,12(r23)
 800a4bc:	00c00284 	movi	r3,10
 800a4c0:	1080068c 	andi	r2,r2,26
 800a4c4:	10ff3a1e 	bne	r2,r3,800a1b0 <___vfprintf_internal_r+0xa4>
 800a4c8:	b880038f 	ldh	r2,14(r23)
 800a4cc:	103f3816 	blt	r2,zero,800a1b0 <___vfprintf_internal_r+0xa4>
 800a4d0:	d9c02e17 	ldw	r7,184(sp)
 800a4d4:	d9002d17 	ldw	r4,180(sp)
 800a4d8:	a80d883a 	mov	r6,r21
 800a4dc:	b80b883a 	mov	r5,r23
 800a4e0:	800c4040 	call	800c404 <__sbprintf>
 800a4e4:	00001106 	br	800a52c <___vfprintf_internal_r+0x420>
 800a4e8:	d9002d17 	ldw	r4,180(sp)
 800a4ec:	d9801e04 	addi	r6,sp,120
 800a4f0:	b80b883a 	mov	r5,r23
 800a4f4:	8010d980 	call	8010d98 <__sprint_r>
 800a4f8:	1000081e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800a4fc:	da000404 	addi	r8,sp,16
 800a500:	003f5106 	br	800a248 <___vfprintf_internal_r+0x13c>
 800a504:	d8802017 	ldw	r2,128(sp)
 800a508:	10000426 	beq	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800a50c:	d9002d17 	ldw	r4,180(sp)
 800a510:	d9801e04 	addi	r6,sp,120
 800a514:	b80b883a 	mov	r5,r23
 800a518:	8010d980 	call	8010d98 <__sprint_r>
 800a51c:	b880030b 	ldhu	r2,12(r23)
 800a520:	1080100c 	andi	r2,r2,64
 800a524:	1005c01e 	bne	r2,zero,800bc28 <___vfprintf_internal_r+0x1b1c>
 800a528:	d8802f17 	ldw	r2,188(sp)
 800a52c:	dfc04717 	ldw	ra,284(sp)
 800a530:	df004617 	ldw	fp,280(sp)
 800a534:	ddc04517 	ldw	r23,276(sp)
 800a538:	dd804417 	ldw	r22,272(sp)
 800a53c:	dd404317 	ldw	r21,268(sp)
 800a540:	dd004217 	ldw	r20,264(sp)
 800a544:	dcc04117 	ldw	r19,260(sp)
 800a548:	dc804017 	ldw	r18,256(sp)
 800a54c:	dc403f17 	ldw	r17,252(sp)
 800a550:	dc003e17 	ldw	r16,248(sp)
 800a554:	dec04804 	addi	sp,sp,288
 800a558:	f800283a 	ret
 800a55c:	d9002d17 	ldw	r4,180(sp)
 800a560:	800e5800 	call	800e580 <__sinit>
 800a564:	003f0206 	br	800a170 <___vfprintf_internal_r+0x64>
 800a568:	d9002e17 	ldw	r4,184(sp)
 800a56c:	d9402e17 	ldw	r5,184(sp)
 800a570:	21000017 	ldw	r4,0(r4)
 800a574:	28800104 	addi	r2,r5,4
 800a578:	d9003115 	stw	r4,196(sp)
 800a57c:	203fa716 	blt	r4,zero,800a41c <___vfprintf_internal_r+0x310>
 800a580:	d8802e15 	stw	r2,184(sp)
 800a584:	ac400007 	ldb	r17,0(r21)
 800a588:	003f4206 	br	800a294 <___vfprintf_internal_r+0x188>
 800a58c:	ac400007 	ldb	r17,0(r21)
 800a590:	01000a84 	movi	r4,42
 800a594:	a8c00044 	addi	r3,r21,1
 800a598:	89075826 	beq	r17,r4,800c2fc <___vfprintf_internal_r+0x21f0>
 800a59c:	8cbff404 	addi	r18,r17,-48
 800a5a0:	b486ae36 	bltu	r22,r18,800c05c <___vfprintf_internal_r+0x1f50>
 800a5a4:	0009883a 	mov	r4,zero
 800a5a8:	1823883a 	mov	r17,r3
 800a5ac:	01400284 	movi	r5,10
 800a5b0:	80087fc0 	call	80087fc <__mulsi3>
 800a5b4:	88c00007 	ldb	r3,0(r17)
 800a5b8:	1489883a 	add	r4,r2,r18
 800a5bc:	8d400044 	addi	r21,r17,1
 800a5c0:	1cbff404 	addi	r18,r3,-48
 800a5c4:	a823883a 	mov	r17,r21
 800a5c8:	b4bff82e 	bgeu	r22,r18,800a5ac <___vfprintf_internal_r+0x4a0>
 800a5cc:	1823883a 	mov	r17,r3
 800a5d0:	2005f616 	blt	r4,zero,800bdac <___vfprintf_internal_r+0x1ca0>
 800a5d4:	d9002a15 	stw	r4,168(sp)
 800a5d8:	003f2f06 	br	800a298 <___vfprintf_internal_r+0x18c>
 800a5dc:	84002014 	ori	r16,r16,128
 800a5e0:	ac400007 	ldb	r17,0(r21)
 800a5e4:	003f2b06 	br	800a294 <___vfprintf_internal_r+0x188>
 800a5e8:	8cbff404 	addi	r18,r17,-48
 800a5ec:	d8003115 	stw	zero,196(sp)
 800a5f0:	0009883a 	mov	r4,zero
 800a5f4:	a823883a 	mov	r17,r21
 800a5f8:	01400284 	movi	r5,10
 800a5fc:	80087fc0 	call	80087fc <__mulsi3>
 800a600:	88c00007 	ldb	r3,0(r17)
 800a604:	9089883a 	add	r4,r18,r2
 800a608:	ad400044 	addi	r21,r21,1
 800a60c:	1cbff404 	addi	r18,r3,-48
 800a610:	a823883a 	mov	r17,r21
 800a614:	b4bff82e 	bgeu	r22,r18,800a5f8 <___vfprintf_internal_r+0x4ec>
 800a618:	1823883a 	mov	r17,r3
 800a61c:	d9003115 	stw	r4,196(sp)
 800a620:	003f1d06 	br	800a298 <___vfprintf_internal_r+0x18c>
 800a624:	8025883a 	mov	r18,r16
 800a628:	dc002903 	ldbu	r16,164(sp)
 800a62c:	e011883a 	mov	r8,fp
 800a630:	84003fcc 	andi	r16,r16,255
 800a634:	8007531e 	bne	r16,zero,800c384 <___vfprintf_internal_r+0x2278>
 800a638:	94800414 	ori	r18,r18,16
 800a63c:	9080080c 	andi	r2,r18,32
 800a640:	1003a326 	beq	r2,zero,800b4d0 <___vfprintf_internal_r+0x13c4>
 800a644:	d9002e17 	ldw	r4,184(sp)
 800a648:	20800117 	ldw	r2,4(r4)
 800a64c:	24c00017 	ldw	r19,0(r4)
 800a650:	21000204 	addi	r4,r4,8
 800a654:	d9002e15 	stw	r4,184(sp)
 800a658:	102d883a 	mov	r22,r2
 800a65c:	10047316 	blt	r2,zero,800b82c <___vfprintf_internal_r+0x1720>
 800a660:	d9002a17 	ldw	r4,168(sp)
 800a664:	df002783 	ldbu	fp,158(sp)
 800a668:	2003e416 	blt	r4,zero,800b5fc <___vfprintf_internal_r+0x14f0>
 800a66c:	00ffdfc4 	movi	r3,-129
 800a670:	9d84b03a 	or	r2,r19,r22
 800a674:	90e4703a 	and	r18,r18,r3
 800a678:	10018026 	beq	r2,zero,800ac7c <___vfprintf_internal_r+0xb70>
 800a67c:	b003ab26 	beq	r22,zero,800b52c <___vfprintf_internal_r+0x1420>
 800a680:	dc402915 	stw	r17,164(sp)
 800a684:	dc001e04 	addi	r16,sp,120
 800a688:	b023883a 	mov	r17,r22
 800a68c:	402d883a 	mov	r22,r8
 800a690:	9809883a 	mov	r4,r19
 800a694:	880b883a 	mov	r5,r17
 800a698:	01800284 	movi	r6,10
 800a69c:	000f883a 	mov	r7,zero
 800a6a0:	80130b80 	call	80130b8 <__umoddi3>
 800a6a4:	10800c04 	addi	r2,r2,48
 800a6a8:	843fffc4 	addi	r16,r16,-1
 800a6ac:	9809883a 	mov	r4,r19
 800a6b0:	880b883a 	mov	r5,r17
 800a6b4:	80800005 	stb	r2,0(r16)
 800a6b8:	01800284 	movi	r6,10
 800a6bc:	000f883a 	mov	r7,zero
 800a6c0:	8012abc0 	call	8012abc <__udivdi3>
 800a6c4:	1027883a 	mov	r19,r2
 800a6c8:	10c4b03a 	or	r2,r2,r3
 800a6cc:	1823883a 	mov	r17,r3
 800a6d0:	103fef1e 	bne	r2,zero,800a690 <___vfprintf_internal_r+0x584>
 800a6d4:	d8c02817 	ldw	r3,160(sp)
 800a6d8:	dc402917 	ldw	r17,164(sp)
 800a6dc:	b011883a 	mov	r8,r22
 800a6e0:	1c07c83a 	sub	r3,r3,r16
 800a6e4:	d8c02b15 	stw	r3,172(sp)
 800a6e8:	00005f06 	br	800a868 <___vfprintf_internal_r+0x75c>
 800a6ec:	8025883a 	mov	r18,r16
 800a6f0:	dc002903 	ldbu	r16,164(sp)
 800a6f4:	e011883a 	mov	r8,fp
 800a6f8:	84003fcc 	andi	r16,r16,255
 800a6fc:	80071e1e 	bne	r16,zero,800c378 <___vfprintf_internal_r+0x226c>
 800a700:	9080020c 	andi	r2,r18,8
 800a704:	1004af26 	beq	r2,zero,800b9c4 <___vfprintf_internal_r+0x18b8>
 800a708:	d9002e17 	ldw	r4,184(sp)
 800a70c:	d9402e17 	ldw	r5,184(sp)
 800a710:	d8802e17 	ldw	r2,184(sp)
 800a714:	21000017 	ldw	r4,0(r4)
 800a718:	29400117 	ldw	r5,4(r5)
 800a71c:	10800204 	addi	r2,r2,8
 800a720:	d9003615 	stw	r4,216(sp)
 800a724:	d9403815 	stw	r5,224(sp)
 800a728:	d8802e15 	stw	r2,184(sp)
 800a72c:	d9003617 	ldw	r4,216(sp)
 800a730:	d9403817 	ldw	r5,224(sp)
 800a734:	da003d15 	stw	r8,244(sp)
 800a738:	04000044 	movi	r16,1
 800a73c:	8010b4c0 	call	8010b4c <__fpclassifyd>
 800a740:	da003d17 	ldw	r8,244(sp)
 800a744:	1404441e 	bne	r2,r16,800b858 <___vfprintf_internal_r+0x174c>
 800a748:	d9003617 	ldw	r4,216(sp)
 800a74c:	d9403817 	ldw	r5,224(sp)
 800a750:	000d883a 	mov	r6,zero
 800a754:	000f883a 	mov	r7,zero
 800a758:	8014a5c0 	call	8014a5c <__ledf2>
 800a75c:	da003d17 	ldw	r8,244(sp)
 800a760:	1005e316 	blt	r2,zero,800bef0 <___vfprintf_internal_r+0x1de4>
 800a764:	df002783 	ldbu	fp,158(sp)
 800a768:	008011c4 	movi	r2,71
 800a76c:	1445580e 	bge	r2,r17,800bcd0 <___vfprintf_internal_r+0x1bc4>
 800a770:	040200b4 	movhi	r16,2050
 800a774:	8428c504 	addi	r16,r16,-23788
 800a778:	00c000c4 	movi	r3,3
 800a77c:	00bfdfc4 	movi	r2,-129
 800a780:	d8c02915 	stw	r3,164(sp)
 800a784:	90a4703a 	and	r18,r18,r2
 800a788:	d8c02b15 	stw	r3,172(sp)
 800a78c:	d8002a15 	stw	zero,168(sp)
 800a790:	d8003215 	stw	zero,200(sp)
 800a794:	00003a06 	br	800a880 <___vfprintf_internal_r+0x774>
 800a798:	84000214 	ori	r16,r16,8
 800a79c:	ac400007 	ldb	r17,0(r21)
 800a7a0:	003ebc06 	br	800a294 <___vfprintf_internal_r+0x188>
 800a7a4:	8025883a 	mov	r18,r16
 800a7a8:	dc002903 	ldbu	r16,164(sp)
 800a7ac:	e011883a 	mov	r8,fp
 800a7b0:	84003fcc 	andi	r16,r16,255
 800a7b4:	8007001e 	bne	r16,zero,800c3b8 <___vfprintf_internal_r+0x22ac>
 800a7b8:	94800414 	ori	r18,r18,16
 800a7bc:	9080080c 	andi	r2,r18,32
 800a7c0:	1002fa26 	beq	r2,zero,800b3ac <___vfprintf_internal_r+0x12a0>
 800a7c4:	d9002e17 	ldw	r4,184(sp)
 800a7c8:	d9402a17 	ldw	r5,168(sp)
 800a7cc:	d8002785 	stb	zero,158(sp)
 800a7d0:	20800204 	addi	r2,r4,8
 800a7d4:	24c00017 	ldw	r19,0(r4)
 800a7d8:	25800117 	ldw	r22,4(r4)
 800a7dc:	2804b116 	blt	r5,zero,800baa4 <___vfprintf_internal_r+0x1998>
 800a7e0:	013fdfc4 	movi	r4,-129
 800a7e4:	9d86b03a 	or	r3,r19,r22
 800a7e8:	d8802e15 	stw	r2,184(sp)
 800a7ec:	9124703a 	and	r18,r18,r4
 800a7f0:	1802fb1e 	bne	r3,zero,800b3e0 <___vfprintf_internal_r+0x12d4>
 800a7f4:	d8c02a17 	ldw	r3,168(sp)
 800a7f8:	0039883a 	mov	fp,zero
 800a7fc:	1805e526 	beq	r3,zero,800bf94 <___vfprintf_internal_r+0x1e88>
 800a800:	0027883a 	mov	r19,zero
 800a804:	002d883a 	mov	r22,zero
 800a808:	dc001e04 	addi	r16,sp,120
 800a80c:	9806d0fa 	srli	r3,r19,3
 800a810:	b008977a 	slli	r4,r22,29
 800a814:	b02cd0fa 	srli	r22,r22,3
 800a818:	9cc001cc 	andi	r19,r19,7
 800a81c:	98800c04 	addi	r2,r19,48
 800a820:	843fffc4 	addi	r16,r16,-1
 800a824:	20e6b03a 	or	r19,r4,r3
 800a828:	80800005 	stb	r2,0(r16)
 800a82c:	9d86b03a 	or	r3,r19,r22
 800a830:	183ff61e 	bne	r3,zero,800a80c <___vfprintf_internal_r+0x700>
 800a834:	90c0004c 	andi	r3,r18,1
 800a838:	18014126 	beq	r3,zero,800ad40 <___vfprintf_internal_r+0xc34>
 800a83c:	10803fcc 	andi	r2,r2,255
 800a840:	1080201c 	xori	r2,r2,128
 800a844:	10bfe004 	addi	r2,r2,-128
 800a848:	00c00c04 	movi	r3,48
 800a84c:	10c13c26 	beq	r2,r3,800ad40 <___vfprintf_internal_r+0xc34>
 800a850:	80ffffc5 	stb	r3,-1(r16)
 800a854:	d8c02817 	ldw	r3,160(sp)
 800a858:	80bfffc4 	addi	r2,r16,-1
 800a85c:	1021883a 	mov	r16,r2
 800a860:	1887c83a 	sub	r3,r3,r2
 800a864:	d8c02b15 	stw	r3,172(sp)
 800a868:	d8802b17 	ldw	r2,172(sp)
 800a86c:	d9002a17 	ldw	r4,168(sp)
 800a870:	1100010e 	bge	r2,r4,800a878 <___vfprintf_internal_r+0x76c>
 800a874:	2005883a 	mov	r2,r4
 800a878:	d8802915 	stw	r2,164(sp)
 800a87c:	d8003215 	stw	zero,200(sp)
 800a880:	e7003fcc 	andi	fp,fp,255
 800a884:	e700201c 	xori	fp,fp,128
 800a888:	e73fe004 	addi	fp,fp,-128
 800a88c:	e0000326 	beq	fp,zero,800a89c <___vfprintf_internal_r+0x790>
 800a890:	d8c02917 	ldw	r3,164(sp)
 800a894:	18c00044 	addi	r3,r3,1
 800a898:	d8c02915 	stw	r3,164(sp)
 800a89c:	90c0008c 	andi	r3,r18,2
 800a8a0:	d8c02c15 	stw	r3,176(sp)
 800a8a4:	18000326 	beq	r3,zero,800a8b4 <___vfprintf_internal_r+0x7a8>
 800a8a8:	d8c02917 	ldw	r3,164(sp)
 800a8ac:	18c00084 	addi	r3,r3,2
 800a8b0:	d8c02915 	stw	r3,164(sp)
 800a8b4:	90c0210c 	andi	r3,r18,132
 800a8b8:	d8c03015 	stw	r3,192(sp)
 800a8bc:	1801c51e 	bne	r3,zero,800afd4 <___vfprintf_internal_r+0xec8>
 800a8c0:	d9003117 	ldw	r4,196(sp)
 800a8c4:	d8c02917 	ldw	r3,164(sp)
 800a8c8:	20e7c83a 	sub	r19,r4,r3
 800a8cc:	04c1c10e 	bge	zero,r19,800afd4 <___vfprintf_internal_r+0xec8>
 800a8d0:	02400404 	movi	r9,16
 800a8d4:	d8c02017 	ldw	r3,128(sp)
 800a8d8:	d8801f17 	ldw	r2,124(sp)
 800a8dc:	4cc52f0e 	bge	r9,r19,800bd9c <___vfprintf_internal_r+0x1c90>
 800a8e0:	014200b4 	movhi	r5,2050
 800a8e4:	2968d884 	addi	r5,r5,-23710
 800a8e8:	dc403b15 	stw	r17,236(sp)
 800a8ec:	d9403515 	stw	r5,212(sp)
 800a8f0:	9823883a 	mov	r17,r19
 800a8f4:	482d883a 	mov	r22,r9
 800a8f8:	9027883a 	mov	r19,r18
 800a8fc:	070001c4 	movi	fp,7
 800a900:	8025883a 	mov	r18,r16
 800a904:	dc002d17 	ldw	r16,180(sp)
 800a908:	00000306 	br	800a918 <___vfprintf_internal_r+0x80c>
 800a90c:	8c7ffc04 	addi	r17,r17,-16
 800a910:	42000204 	addi	r8,r8,8
 800a914:	b440130e 	bge	r22,r17,800a964 <___vfprintf_internal_r+0x858>
 800a918:	010200b4 	movhi	r4,2050
 800a91c:	18c00404 	addi	r3,r3,16
 800a920:	10800044 	addi	r2,r2,1
 800a924:	2128d884 	addi	r4,r4,-23710
 800a928:	41000015 	stw	r4,0(r8)
 800a92c:	45800115 	stw	r22,4(r8)
 800a930:	d8c02015 	stw	r3,128(sp)
 800a934:	d8801f15 	stw	r2,124(sp)
 800a938:	e0bff40e 	bge	fp,r2,800a90c <___vfprintf_internal_r+0x800>
 800a93c:	d9801e04 	addi	r6,sp,120
 800a940:	b80b883a 	mov	r5,r23
 800a944:	8009883a 	mov	r4,r16
 800a948:	8010d980 	call	8010d98 <__sprint_r>
 800a94c:	103ef31e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800a950:	8c7ffc04 	addi	r17,r17,-16
 800a954:	d8c02017 	ldw	r3,128(sp)
 800a958:	d8801f17 	ldw	r2,124(sp)
 800a95c:	da000404 	addi	r8,sp,16
 800a960:	b47fed16 	blt	r22,r17,800a918 <___vfprintf_internal_r+0x80c>
 800a964:	9021883a 	mov	r16,r18
 800a968:	9825883a 	mov	r18,r19
 800a96c:	8827883a 	mov	r19,r17
 800a970:	dc403b17 	ldw	r17,236(sp)
 800a974:	d9403517 	ldw	r5,212(sp)
 800a978:	98c7883a 	add	r3,r19,r3
 800a97c:	10800044 	addi	r2,r2,1
 800a980:	41400015 	stw	r5,0(r8)
 800a984:	44c00115 	stw	r19,4(r8)
 800a988:	d8c02015 	stw	r3,128(sp)
 800a98c:	d8801f15 	stw	r2,124(sp)
 800a990:	010001c4 	movi	r4,7
 800a994:	2082c516 	blt	r4,r2,800b4ac <___vfprintf_internal_r+0x13a0>
 800a998:	df002787 	ldb	fp,158(sp)
 800a99c:	42000204 	addi	r8,r8,8
 800a9a0:	e0000c26 	beq	fp,zero,800a9d4 <___vfprintf_internal_r+0x8c8>
 800a9a4:	d8801f17 	ldw	r2,124(sp)
 800a9a8:	d9002784 	addi	r4,sp,158
 800a9ac:	18c00044 	addi	r3,r3,1
 800a9b0:	10800044 	addi	r2,r2,1
 800a9b4:	41000015 	stw	r4,0(r8)
 800a9b8:	01000044 	movi	r4,1
 800a9bc:	41000115 	stw	r4,4(r8)
 800a9c0:	d8c02015 	stw	r3,128(sp)
 800a9c4:	d8801f15 	stw	r2,124(sp)
 800a9c8:	010001c4 	movi	r4,7
 800a9cc:	20825e16 	blt	r4,r2,800b348 <___vfprintf_internal_r+0x123c>
 800a9d0:	42000204 	addi	r8,r8,8
 800a9d4:	d8802c17 	ldw	r2,176(sp)
 800a9d8:	10000c26 	beq	r2,zero,800aa0c <___vfprintf_internal_r+0x900>
 800a9dc:	d8801f17 	ldw	r2,124(sp)
 800a9e0:	d9002704 	addi	r4,sp,156
 800a9e4:	18c00084 	addi	r3,r3,2
 800a9e8:	10800044 	addi	r2,r2,1
 800a9ec:	41000015 	stw	r4,0(r8)
 800a9f0:	01000084 	movi	r4,2
 800a9f4:	41000115 	stw	r4,4(r8)
 800a9f8:	d8c02015 	stw	r3,128(sp)
 800a9fc:	d8801f15 	stw	r2,124(sp)
 800aa00:	010001c4 	movi	r4,7
 800aa04:	20825816 	blt	r4,r2,800b368 <___vfprintf_internal_r+0x125c>
 800aa08:	42000204 	addi	r8,r8,8
 800aa0c:	d9003017 	ldw	r4,192(sp)
 800aa10:	00802004 	movi	r2,128
 800aa14:	2081bb26 	beq	r4,r2,800b104 <___vfprintf_internal_r+0xff8>
 800aa18:	d9402a17 	ldw	r5,168(sp)
 800aa1c:	d8802b17 	ldw	r2,172(sp)
 800aa20:	28adc83a 	sub	r22,r5,r2
 800aa24:	0580310e 	bge	zero,r22,800aaec <___vfprintf_internal_r+0x9e0>
 800aa28:	07000404 	movi	fp,16
 800aa2c:	d8801f17 	ldw	r2,124(sp)
 800aa30:	e584360e 	bge	fp,r22,800bb0c <___vfprintf_internal_r+0x1a00>
 800aa34:	014200b4 	movhi	r5,2050
 800aa38:	2968d484 	addi	r5,r5,-23726
 800aa3c:	dc402a15 	stw	r17,168(sp)
 800aa40:	d9402c15 	stw	r5,176(sp)
 800aa44:	b023883a 	mov	r17,r22
 800aa48:	04c001c4 	movi	r19,7
 800aa4c:	a82d883a 	mov	r22,r21
 800aa50:	902b883a 	mov	r21,r18
 800aa54:	8025883a 	mov	r18,r16
 800aa58:	dc002d17 	ldw	r16,180(sp)
 800aa5c:	00000306 	br	800aa6c <___vfprintf_internal_r+0x960>
 800aa60:	8c7ffc04 	addi	r17,r17,-16
 800aa64:	42000204 	addi	r8,r8,8
 800aa68:	e440110e 	bge	fp,r17,800aab0 <___vfprintf_internal_r+0x9a4>
 800aa6c:	18c00404 	addi	r3,r3,16
 800aa70:	10800044 	addi	r2,r2,1
 800aa74:	45000015 	stw	r20,0(r8)
 800aa78:	47000115 	stw	fp,4(r8)
 800aa7c:	d8c02015 	stw	r3,128(sp)
 800aa80:	d8801f15 	stw	r2,124(sp)
 800aa84:	98bff60e 	bge	r19,r2,800aa60 <___vfprintf_internal_r+0x954>
 800aa88:	d9801e04 	addi	r6,sp,120
 800aa8c:	b80b883a 	mov	r5,r23
 800aa90:	8009883a 	mov	r4,r16
 800aa94:	8010d980 	call	8010d98 <__sprint_r>
 800aa98:	103ea01e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800aa9c:	8c7ffc04 	addi	r17,r17,-16
 800aaa0:	d8c02017 	ldw	r3,128(sp)
 800aaa4:	d8801f17 	ldw	r2,124(sp)
 800aaa8:	da000404 	addi	r8,sp,16
 800aaac:	e47fef16 	blt	fp,r17,800aa6c <___vfprintf_internal_r+0x960>
 800aab0:	9021883a 	mov	r16,r18
 800aab4:	a825883a 	mov	r18,r21
 800aab8:	b02b883a 	mov	r21,r22
 800aabc:	882d883a 	mov	r22,r17
 800aac0:	dc402a17 	ldw	r17,168(sp)
 800aac4:	d9002c17 	ldw	r4,176(sp)
 800aac8:	1d87883a 	add	r3,r3,r22
 800aacc:	10800044 	addi	r2,r2,1
 800aad0:	41000015 	stw	r4,0(r8)
 800aad4:	45800115 	stw	r22,4(r8)
 800aad8:	d8c02015 	stw	r3,128(sp)
 800aadc:	d8801f15 	stw	r2,124(sp)
 800aae0:	010001c4 	movi	r4,7
 800aae4:	20821016 	blt	r4,r2,800b328 <___vfprintf_internal_r+0x121c>
 800aae8:	42000204 	addi	r8,r8,8
 800aaec:	9080400c 	andi	r2,r18,256
 800aaf0:	10013a1e 	bne	r2,zero,800afdc <___vfprintf_internal_r+0xed0>
 800aaf4:	d9402b17 	ldw	r5,172(sp)
 800aaf8:	d8801f17 	ldw	r2,124(sp)
 800aafc:	44000015 	stw	r16,0(r8)
 800ab00:	1947883a 	add	r3,r3,r5
 800ab04:	10800044 	addi	r2,r2,1
 800ab08:	41400115 	stw	r5,4(r8)
 800ab0c:	d8c02015 	stw	r3,128(sp)
 800ab10:	d8801f15 	stw	r2,124(sp)
 800ab14:	010001c4 	movi	r4,7
 800ab18:	2081f516 	blt	r4,r2,800b2f0 <___vfprintf_internal_r+0x11e4>
 800ab1c:	42000204 	addi	r8,r8,8
 800ab20:	9480010c 	andi	r18,r18,4
 800ab24:	90003226 	beq	r18,zero,800abf0 <___vfprintf_internal_r+0xae4>
 800ab28:	d9403117 	ldw	r5,196(sp)
 800ab2c:	d8802917 	ldw	r2,164(sp)
 800ab30:	28a1c83a 	sub	r16,r5,r2
 800ab34:	04002e0e 	bge	zero,r16,800abf0 <___vfprintf_internal_r+0xae4>
 800ab38:	04400404 	movi	r17,16
 800ab3c:	d8801f17 	ldw	r2,124(sp)
 800ab40:	8c04c40e 	bge	r17,r16,800be54 <___vfprintf_internal_r+0x1d48>
 800ab44:	014200b4 	movhi	r5,2050
 800ab48:	2968d884 	addi	r5,r5,-23710
 800ab4c:	d9403515 	stw	r5,212(sp)
 800ab50:	048001c4 	movi	r18,7
 800ab54:	dcc02d17 	ldw	r19,180(sp)
 800ab58:	00000306 	br	800ab68 <___vfprintf_internal_r+0xa5c>
 800ab5c:	843ffc04 	addi	r16,r16,-16
 800ab60:	42000204 	addi	r8,r8,8
 800ab64:	8c00130e 	bge	r17,r16,800abb4 <___vfprintf_internal_r+0xaa8>
 800ab68:	010200b4 	movhi	r4,2050
 800ab6c:	18c00404 	addi	r3,r3,16
 800ab70:	10800044 	addi	r2,r2,1
 800ab74:	2128d884 	addi	r4,r4,-23710
 800ab78:	41000015 	stw	r4,0(r8)
 800ab7c:	44400115 	stw	r17,4(r8)
 800ab80:	d8c02015 	stw	r3,128(sp)
 800ab84:	d8801f15 	stw	r2,124(sp)
 800ab88:	90bff40e 	bge	r18,r2,800ab5c <___vfprintf_internal_r+0xa50>
 800ab8c:	d9801e04 	addi	r6,sp,120
 800ab90:	b80b883a 	mov	r5,r23
 800ab94:	9809883a 	mov	r4,r19
 800ab98:	8010d980 	call	8010d98 <__sprint_r>
 800ab9c:	103e5f1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800aba0:	843ffc04 	addi	r16,r16,-16
 800aba4:	d8c02017 	ldw	r3,128(sp)
 800aba8:	d8801f17 	ldw	r2,124(sp)
 800abac:	da000404 	addi	r8,sp,16
 800abb0:	8c3fed16 	blt	r17,r16,800ab68 <___vfprintf_internal_r+0xa5c>
 800abb4:	d9403517 	ldw	r5,212(sp)
 800abb8:	1c07883a 	add	r3,r3,r16
 800abbc:	10800044 	addi	r2,r2,1
 800abc0:	41400015 	stw	r5,0(r8)
 800abc4:	44000115 	stw	r16,4(r8)
 800abc8:	d8c02015 	stw	r3,128(sp)
 800abcc:	d8801f15 	stw	r2,124(sp)
 800abd0:	010001c4 	movi	r4,7
 800abd4:	2080060e 	bge	r4,r2,800abf0 <___vfprintf_internal_r+0xae4>
 800abd8:	d9002d17 	ldw	r4,180(sp)
 800abdc:	d9801e04 	addi	r6,sp,120
 800abe0:	b80b883a 	mov	r5,r23
 800abe4:	8010d980 	call	8010d98 <__sprint_r>
 800abe8:	103e4c1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800abec:	d8c02017 	ldw	r3,128(sp)
 800abf0:	d8803117 	ldw	r2,196(sp)
 800abf4:	d9002917 	ldw	r4,164(sp)
 800abf8:	1100010e 	bge	r2,r4,800ac00 <___vfprintf_internal_r+0xaf4>
 800abfc:	2005883a 	mov	r2,r4
 800ac00:	d9402f17 	ldw	r5,188(sp)
 800ac04:	288b883a 	add	r5,r5,r2
 800ac08:	d9402f15 	stw	r5,188(sp)
 800ac0c:	1801c01e 	bne	r3,zero,800b310 <___vfprintf_internal_r+0x1204>
 800ac10:	a8800007 	ldb	r2,0(r21)
 800ac14:	d8001f15 	stw	zero,124(sp)
 800ac18:	da000404 	addi	r8,sp,16
 800ac1c:	103d751e 	bne	r2,zero,800a1f4 <___vfprintf_internal_r+0xe8>
 800ac20:	a823883a 	mov	r17,r21
 800ac24:	003d8b06 	br	800a254 <___vfprintf_internal_r+0x148>
 800ac28:	8025883a 	mov	r18,r16
 800ac2c:	dc002903 	ldbu	r16,164(sp)
 800ac30:	e011883a 	mov	r8,fp
 800ac34:	84003fcc 	andi	r16,r16,255
 800ac38:	8005e51e 	bne	r16,zero,800c3d0 <___vfprintf_internal_r+0x22c4>
 800ac3c:	94800414 	ori	r18,r18,16
 800ac40:	9080080c 	andi	r2,r18,32
 800ac44:	10022b26 	beq	r2,zero,800b4f4 <___vfprintf_internal_r+0x13e8>
 800ac48:	d9002e17 	ldw	r4,184(sp)
 800ac4c:	d9402a17 	ldw	r5,168(sp)
 800ac50:	d8002785 	stb	zero,158(sp)
 800ac54:	20c00204 	addi	r3,r4,8
 800ac58:	24c00017 	ldw	r19,0(r4)
 800ac5c:	25800117 	ldw	r22,4(r4)
 800ac60:	28042e16 	blt	r5,zero,800bd1c <___vfprintf_internal_r+0x1c10>
 800ac64:	013fdfc4 	movi	r4,-129
 800ac68:	9d84b03a 	or	r2,r19,r22
 800ac6c:	d8c02e15 	stw	r3,184(sp)
 800ac70:	9124703a 	and	r18,r18,r4
 800ac74:	0039883a 	mov	fp,zero
 800ac78:	103e801e 	bne	r2,zero,800a67c <___vfprintf_internal_r+0x570>
 800ac7c:	d9002a17 	ldw	r4,168(sp)
 800ac80:	2002e01e 	bne	r4,zero,800b804 <___vfprintf_internal_r+0x16f8>
 800ac84:	d8002a15 	stw	zero,168(sp)
 800ac88:	d8002b15 	stw	zero,172(sp)
 800ac8c:	dc001e04 	addi	r16,sp,120
 800ac90:	003ef506 	br	800a868 <___vfprintf_internal_r+0x75c>
 800ac94:	8025883a 	mov	r18,r16
 800ac98:	dc002903 	ldbu	r16,164(sp)
 800ac9c:	e011883a 	mov	r8,fp
 800aca0:	84003fcc 	andi	r16,r16,255
 800aca4:	8005ba1e 	bne	r16,zero,800c390 <___vfprintf_internal_r+0x2284>
 800aca8:	010200b4 	movhi	r4,2050
 800acac:	2128c804 	addi	r4,r4,-23776
 800acb0:	d9003915 	stw	r4,228(sp)
 800acb4:	9080080c 	andi	r2,r18,32
 800acb8:	10006126 	beq	r2,zero,800ae40 <___vfprintf_internal_r+0xd34>
 800acbc:	d9402e17 	ldw	r5,184(sp)
 800acc0:	2cc00017 	ldw	r19,0(r5)
 800acc4:	2d800117 	ldw	r22,4(r5)
 800acc8:	29400204 	addi	r5,r5,8
 800accc:	d9402e15 	stw	r5,184(sp)
 800acd0:	9080004c 	andi	r2,r18,1
 800acd4:	1001ac26 	beq	r2,zero,800b388 <___vfprintf_internal_r+0x127c>
 800acd8:	9d84b03a 	or	r2,r19,r22
 800acdc:	10038526 	beq	r2,zero,800baf4 <___vfprintf_internal_r+0x19e8>
 800ace0:	d8c02a17 	ldw	r3,168(sp)
 800ace4:	00800c04 	movi	r2,48
 800ace8:	d8802705 	stb	r2,156(sp)
 800acec:	dc402745 	stb	r17,157(sp)
 800acf0:	d8002785 	stb	zero,158(sp)
 800acf4:	90800094 	ori	r2,r18,2
 800acf8:	18047916 	blt	r3,zero,800bee0 <___vfprintf_internal_r+0x1dd4>
 800acfc:	00bfdfc4 	movi	r2,-129
 800ad00:	90a4703a 	and	r18,r18,r2
 800ad04:	94800094 	ori	r18,r18,2
 800ad08:	0039883a 	mov	fp,zero
 800ad0c:	d9003917 	ldw	r4,228(sp)
 800ad10:	dc001e04 	addi	r16,sp,120
 800ad14:	988003cc 	andi	r2,r19,15
 800ad18:	b006973a 	slli	r3,r22,28
 800ad1c:	2085883a 	add	r2,r4,r2
 800ad20:	9826d13a 	srli	r19,r19,4
 800ad24:	10800003 	ldbu	r2,0(r2)
 800ad28:	b02cd13a 	srli	r22,r22,4
 800ad2c:	843fffc4 	addi	r16,r16,-1
 800ad30:	1ce6b03a 	or	r19,r3,r19
 800ad34:	80800005 	stb	r2,0(r16)
 800ad38:	9d84b03a 	or	r2,r19,r22
 800ad3c:	103ff51e 	bne	r2,zero,800ad14 <___vfprintf_internal_r+0xc08>
 800ad40:	d8c02817 	ldw	r3,160(sp)
 800ad44:	1c07c83a 	sub	r3,r3,r16
 800ad48:	d8c02b15 	stw	r3,172(sp)
 800ad4c:	003ec606 	br	800a868 <___vfprintf_internal_r+0x75c>
 800ad50:	8025883a 	mov	r18,r16
 800ad54:	dc002903 	ldbu	r16,164(sp)
 800ad58:	e011883a 	mov	r8,fp
 800ad5c:	84003fcc 	andi	r16,r16,255
 800ad60:	803e9626 	beq	r16,zero,800a7bc <___vfprintf_internal_r+0x6b0>
 800ad64:	d8c02b03 	ldbu	r3,172(sp)
 800ad68:	d8c02785 	stb	r3,158(sp)
 800ad6c:	003e9306 	br	800a7bc <___vfprintf_internal_r+0x6b0>
 800ad70:	00c00044 	movi	r3,1
 800ad74:	d8c02905 	stb	r3,164(sp)
 800ad78:	00c00ac4 	movi	r3,43
 800ad7c:	d8c02b05 	stb	r3,172(sp)
 800ad80:	ac400007 	ldb	r17,0(r21)
 800ad84:	003d4306 	br	800a294 <___vfprintf_internal_r+0x188>
 800ad88:	84000814 	ori	r16,r16,32
 800ad8c:	ac400007 	ldb	r17,0(r21)
 800ad90:	003d4006 	br	800a294 <___vfprintf_internal_r+0x188>
 800ad94:	d8802e17 	ldw	r2,184(sp)
 800ad98:	8025883a 	mov	r18,r16
 800ad9c:	d8002785 	stb	zero,158(sp)
 800ada0:	14000017 	ldw	r16,0(r2)
 800ada4:	e011883a 	mov	r8,fp
 800ada8:	14c00104 	addi	r19,r2,4
 800adac:	80042d26 	beq	r16,zero,800be64 <___vfprintf_internal_r+0x1d58>
 800adb0:	d8c02a17 	ldw	r3,168(sp)
 800adb4:	1803e416 	blt	r3,zero,800bd48 <___vfprintf_internal_r+0x1c3c>
 800adb8:	180d883a 	mov	r6,r3
 800adbc:	000b883a 	mov	r5,zero
 800adc0:	8009883a 	mov	r4,r16
 800adc4:	df003d15 	stw	fp,244(sp)
 800adc8:	800f2900 	call	800f290 <memchr>
 800adcc:	da003d17 	ldw	r8,244(sp)
 800add0:	10046826 	beq	r2,zero,800bf74 <___vfprintf_internal_r+0x1e68>
 800add4:	1405c83a 	sub	r2,r2,r16
 800add8:	d8802b15 	stw	r2,172(sp)
 800addc:	1003e016 	blt	r2,zero,800bd60 <___vfprintf_internal_r+0x1c54>
 800ade0:	df002783 	ldbu	fp,158(sp)
 800ade4:	d8802915 	stw	r2,164(sp)
 800ade8:	dcc02e15 	stw	r19,184(sp)
 800adec:	d8002a15 	stw	zero,168(sp)
 800adf0:	d8003215 	stw	zero,200(sp)
 800adf4:	003ea206 	br	800a880 <___vfprintf_internal_r+0x774>
 800adf8:	8025883a 	mov	r18,r16
 800adfc:	dc002903 	ldbu	r16,164(sp)
 800ae00:	e011883a 	mov	r8,fp
 800ae04:	84003fcc 	andi	r16,r16,255
 800ae08:	803f8d26 	beq	r16,zero,800ac40 <___vfprintf_internal_r+0xb34>
 800ae0c:	d8c02b03 	ldbu	r3,172(sp)
 800ae10:	d8c02785 	stb	r3,158(sp)
 800ae14:	003f8a06 	br	800ac40 <___vfprintf_internal_r+0xb34>
 800ae18:	8025883a 	mov	r18,r16
 800ae1c:	dc002903 	ldbu	r16,164(sp)
 800ae20:	e011883a 	mov	r8,fp
 800ae24:	84003fcc 	andi	r16,r16,255
 800ae28:	8005661e 	bne	r16,zero,800c3c4 <___vfprintf_internal_r+0x22b8>
 800ae2c:	010200b4 	movhi	r4,2050
 800ae30:	2128cd04 	addi	r4,r4,-23756
 800ae34:	d9003915 	stw	r4,228(sp)
 800ae38:	9080080c 	andi	r2,r18,32
 800ae3c:	103f9f1e 	bne	r2,zero,800acbc <___vfprintf_internal_r+0xbb0>
 800ae40:	9080040c 	andi	r2,r18,16
 800ae44:	1002eb26 	beq	r2,zero,800b9f4 <___vfprintf_internal_r+0x18e8>
 800ae48:	d8802e17 	ldw	r2,184(sp)
 800ae4c:	002d883a 	mov	r22,zero
 800ae50:	14c00017 	ldw	r19,0(r2)
 800ae54:	10800104 	addi	r2,r2,4
 800ae58:	d8802e15 	stw	r2,184(sp)
 800ae5c:	003f9c06 	br	800acd0 <___vfprintf_internal_r+0xbc4>
 800ae60:	d8802b07 	ldb	r2,172(sp)
 800ae64:	1002e11e 	bne	r2,zero,800b9ec <___vfprintf_internal_r+0x18e0>
 800ae68:	00c00044 	movi	r3,1
 800ae6c:	d8c02905 	stb	r3,164(sp)
 800ae70:	00c00804 	movi	r3,32
 800ae74:	d8c02b05 	stb	r3,172(sp)
 800ae78:	ac400007 	ldb	r17,0(r21)
 800ae7c:	003d0506 	br	800a294 <___vfprintf_internal_r+0x188>
 800ae80:	84000054 	ori	r16,r16,1
 800ae84:	ac400007 	ldb	r17,0(r21)
 800ae88:	003d0206 	br	800a294 <___vfprintf_internal_r+0x188>
 800ae8c:	8025883a 	mov	r18,r16
 800ae90:	dc002903 	ldbu	r16,164(sp)
 800ae94:	e011883a 	mov	r8,fp
 800ae98:	84003fcc 	andi	r16,r16,255
 800ae9c:	803de726 	beq	r16,zero,800a63c <___vfprintf_internal_r+0x530>
 800aea0:	d8c02b03 	ldbu	r3,172(sp)
 800aea4:	d8c02785 	stb	r3,158(sp)
 800aea8:	003de406 	br	800a63c <___vfprintf_internal_r+0x530>
 800aeac:	84001014 	ori	r16,r16,64
 800aeb0:	ac400007 	ldb	r17,0(r21)
 800aeb4:	003cf706 	br	800a294 <___vfprintf_internal_r+0x188>
 800aeb8:	ac400007 	ldb	r17,0(r21)
 800aebc:	00801b04 	movi	r2,108
 800aec0:	88838f26 	beq	r17,r2,800bd00 <___vfprintf_internal_r+0x1bf4>
 800aec4:	84000414 	ori	r16,r16,16
 800aec8:	003cf206 	br	800a294 <___vfprintf_internal_r+0x188>
 800aecc:	8025883a 	mov	r18,r16
 800aed0:	dc002903 	ldbu	r16,164(sp)
 800aed4:	e011883a 	mov	r8,fp
 800aed8:	84003fcc 	andi	r16,r16,255
 800aedc:	80053f1e 	bne	r16,zero,800c3dc <___vfprintf_internal_r+0x22d0>
 800aee0:	9080080c 	andi	r2,r18,32
 800aee4:	1002d226 	beq	r2,zero,800ba30 <___vfprintf_internal_r+0x1924>
 800aee8:	d9002e17 	ldw	r4,184(sp)
 800aeec:	d9402f17 	ldw	r5,188(sp)
 800aef0:	20800017 	ldw	r2,0(r4)
 800aef4:	2807d7fa 	srai	r3,r5,31
 800aef8:	21000104 	addi	r4,r4,4
 800aefc:	d9002e15 	stw	r4,184(sp)
 800af00:	11400015 	stw	r5,0(r2)
 800af04:	10c00115 	stw	r3,4(r2)
 800af08:	003cb806 	br	800a1ec <___vfprintf_internal_r+0xe0>
 800af0c:	d8c02e17 	ldw	r3,184(sp)
 800af10:	d9002e17 	ldw	r4,184(sp)
 800af14:	8025883a 	mov	r18,r16
 800af18:	18800017 	ldw	r2,0(r3)
 800af1c:	21000104 	addi	r4,r4,4
 800af20:	00c00044 	movi	r3,1
 800af24:	e011883a 	mov	r8,fp
 800af28:	d8c02915 	stw	r3,164(sp)
 800af2c:	d8002785 	stb	zero,158(sp)
 800af30:	d8801405 	stb	r2,80(sp)
 800af34:	d9002e15 	stw	r4,184(sp)
 800af38:	d8c02b15 	stw	r3,172(sp)
 800af3c:	d8002a15 	stw	zero,168(sp)
 800af40:	d8003215 	stw	zero,200(sp)
 800af44:	dc001404 	addi	r16,sp,80
 800af48:	0039883a 	mov	fp,zero
 800af4c:	003e5306 	br	800a89c <___vfprintf_internal_r+0x790>
 800af50:	010200b4 	movhi	r4,2050
 800af54:	2128cd04 	addi	r4,r4,-23756
 800af58:	0039883a 	mov	fp,zero
 800af5c:	d9003915 	stw	r4,228(sp)
 800af60:	04401e04 	movi	r17,120
 800af64:	003f6906 	br	800ad0c <___vfprintf_internal_r+0xc00>
 800af68:	8025883a 	mov	r18,r16
 800af6c:	dc002903 	ldbu	r16,164(sp)
 800af70:	e011883a 	mov	r8,fp
 800af74:	84003fcc 	andi	r16,r16,255
 800af78:	8005081e 	bne	r16,zero,800c39c <___vfprintf_internal_r+0x2290>
 800af7c:	883d6126 	beq	r17,zero,800a504 <___vfprintf_internal_r+0x3f8>
 800af80:	00c00044 	movi	r3,1
 800af84:	d8c02915 	stw	r3,164(sp)
 800af88:	dc401405 	stb	r17,80(sp)
 800af8c:	d8002785 	stb	zero,158(sp)
 800af90:	003fe906 	br	800af38 <___vfprintf_internal_r+0xe2c>
 800af94:	014200b4 	movhi	r5,2050
 800af98:	2968cd04 	addi	r5,r5,-23756
 800af9c:	d9403915 	stw	r5,228(sp)
 800afa0:	d8c02e15 	stw	r3,184(sp)
 800afa4:	1025883a 	mov	r18,r2
 800afa8:	04401e04 	movi	r17,120
 800afac:	9d84b03a 	or	r2,r19,r22
 800afb0:	1000fc1e 	bne	r2,zero,800b3a4 <___vfprintf_internal_r+0x1298>
 800afb4:	0039883a 	mov	fp,zero
 800afb8:	00800084 	movi	r2,2
 800afbc:	10803fcc 	andi	r2,r2,255
 800afc0:	00c00044 	movi	r3,1
 800afc4:	10c20f26 	beq	r2,r3,800b804 <___vfprintf_internal_r+0x16f8>
 800afc8:	00c00084 	movi	r3,2
 800afcc:	10fd3326 	beq	r2,r3,800a49c <___vfprintf_internal_r+0x390>
 800afd0:	003e0b06 	br	800a800 <___vfprintf_internal_r+0x6f4>
 800afd4:	d8c02017 	ldw	r3,128(sp)
 800afd8:	003e7106 	br	800a9a0 <___vfprintf_internal_r+0x894>
 800afdc:	00801944 	movi	r2,101
 800afe0:	14407e0e 	bge	r2,r17,800b1dc <___vfprintf_internal_r+0x10d0>
 800afe4:	d9003617 	ldw	r4,216(sp)
 800afe8:	d9403817 	ldw	r5,224(sp)
 800afec:	000d883a 	mov	r6,zero
 800aff0:	000f883a 	mov	r7,zero
 800aff4:	d8c03c15 	stw	r3,240(sp)
 800aff8:	da003d15 	stw	r8,244(sp)
 800affc:	80148f80 	call	80148f8 <__eqdf2>
 800b000:	d8c03c17 	ldw	r3,240(sp)
 800b004:	da003d17 	ldw	r8,244(sp)
 800b008:	1000f71e 	bne	r2,zero,800b3e8 <___vfprintf_internal_r+0x12dc>
 800b00c:	d8801f17 	ldw	r2,124(sp)
 800b010:	010200b4 	movhi	r4,2050
 800b014:	2128d404 	addi	r4,r4,-23728
 800b018:	18c00044 	addi	r3,r3,1
 800b01c:	10800044 	addi	r2,r2,1
 800b020:	41000015 	stw	r4,0(r8)
 800b024:	01000044 	movi	r4,1
 800b028:	41000115 	stw	r4,4(r8)
 800b02c:	d8c02015 	stw	r3,128(sp)
 800b030:	d8801f15 	stw	r2,124(sp)
 800b034:	010001c4 	movi	r4,7
 800b038:	2082b816 	blt	r4,r2,800bb1c <___vfprintf_internal_r+0x1a10>
 800b03c:	42000204 	addi	r8,r8,8
 800b040:	d8802617 	ldw	r2,152(sp)
 800b044:	d9403317 	ldw	r5,204(sp)
 800b048:	11400216 	blt	r2,r5,800b054 <___vfprintf_internal_r+0xf48>
 800b04c:	9080004c 	andi	r2,r18,1
 800b050:	103eb326 	beq	r2,zero,800ab20 <___vfprintf_internal_r+0xa14>
 800b054:	d8803717 	ldw	r2,220(sp)
 800b058:	d9003417 	ldw	r4,208(sp)
 800b05c:	d9403717 	ldw	r5,220(sp)
 800b060:	1887883a 	add	r3,r3,r2
 800b064:	d8801f17 	ldw	r2,124(sp)
 800b068:	41000015 	stw	r4,0(r8)
 800b06c:	41400115 	stw	r5,4(r8)
 800b070:	10800044 	addi	r2,r2,1
 800b074:	d8c02015 	stw	r3,128(sp)
 800b078:	d8801f15 	stw	r2,124(sp)
 800b07c:	010001c4 	movi	r4,7
 800b080:	20832916 	blt	r4,r2,800bd28 <___vfprintf_internal_r+0x1c1c>
 800b084:	42000204 	addi	r8,r8,8
 800b088:	d8803317 	ldw	r2,204(sp)
 800b08c:	143fffc4 	addi	r16,r2,-1
 800b090:	043ea30e 	bge	zero,r16,800ab20 <___vfprintf_internal_r+0xa14>
 800b094:	04400404 	movi	r17,16
 800b098:	d8801f17 	ldw	r2,124(sp)
 800b09c:	8c00880e 	bge	r17,r16,800b2c0 <___vfprintf_internal_r+0x11b4>
 800b0a0:	014200b4 	movhi	r5,2050
 800b0a4:	2968d484 	addi	r5,r5,-23726
 800b0a8:	d9402c15 	stw	r5,176(sp)
 800b0ac:	058001c4 	movi	r22,7
 800b0b0:	dcc02d17 	ldw	r19,180(sp)
 800b0b4:	00000306 	br	800b0c4 <___vfprintf_internal_r+0xfb8>
 800b0b8:	42000204 	addi	r8,r8,8
 800b0bc:	843ffc04 	addi	r16,r16,-16
 800b0c0:	8c00820e 	bge	r17,r16,800b2cc <___vfprintf_internal_r+0x11c0>
 800b0c4:	18c00404 	addi	r3,r3,16
 800b0c8:	10800044 	addi	r2,r2,1
 800b0cc:	45000015 	stw	r20,0(r8)
 800b0d0:	44400115 	stw	r17,4(r8)
 800b0d4:	d8c02015 	stw	r3,128(sp)
 800b0d8:	d8801f15 	stw	r2,124(sp)
 800b0dc:	b0bff60e 	bge	r22,r2,800b0b8 <___vfprintf_internal_r+0xfac>
 800b0e0:	d9801e04 	addi	r6,sp,120
 800b0e4:	b80b883a 	mov	r5,r23
 800b0e8:	9809883a 	mov	r4,r19
 800b0ec:	8010d980 	call	8010d98 <__sprint_r>
 800b0f0:	103d0a1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b0f4:	d8c02017 	ldw	r3,128(sp)
 800b0f8:	d8801f17 	ldw	r2,124(sp)
 800b0fc:	da000404 	addi	r8,sp,16
 800b100:	003fee06 	br	800b0bc <___vfprintf_internal_r+0xfb0>
 800b104:	d9403117 	ldw	r5,196(sp)
 800b108:	d8802917 	ldw	r2,164(sp)
 800b10c:	28adc83a 	sub	r22,r5,r2
 800b110:	05be410e 	bge	zero,r22,800aa18 <___vfprintf_internal_r+0x90c>
 800b114:	07000404 	movi	fp,16
 800b118:	d8801f17 	ldw	r2,124(sp)
 800b11c:	e5838f0e 	bge	fp,r22,800bf5c <___vfprintf_internal_r+0x1e50>
 800b120:	014200b4 	movhi	r5,2050
 800b124:	2968d484 	addi	r5,r5,-23726
 800b128:	dc403015 	stw	r17,192(sp)
 800b12c:	d9402c15 	stw	r5,176(sp)
 800b130:	b023883a 	mov	r17,r22
 800b134:	04c001c4 	movi	r19,7
 800b138:	a82d883a 	mov	r22,r21
 800b13c:	902b883a 	mov	r21,r18
 800b140:	8025883a 	mov	r18,r16
 800b144:	dc002d17 	ldw	r16,180(sp)
 800b148:	00000306 	br	800b158 <___vfprintf_internal_r+0x104c>
 800b14c:	8c7ffc04 	addi	r17,r17,-16
 800b150:	42000204 	addi	r8,r8,8
 800b154:	e440110e 	bge	fp,r17,800b19c <___vfprintf_internal_r+0x1090>
 800b158:	18c00404 	addi	r3,r3,16
 800b15c:	10800044 	addi	r2,r2,1
 800b160:	45000015 	stw	r20,0(r8)
 800b164:	47000115 	stw	fp,4(r8)
 800b168:	d8c02015 	stw	r3,128(sp)
 800b16c:	d8801f15 	stw	r2,124(sp)
 800b170:	98bff60e 	bge	r19,r2,800b14c <___vfprintf_internal_r+0x1040>
 800b174:	d9801e04 	addi	r6,sp,120
 800b178:	b80b883a 	mov	r5,r23
 800b17c:	8009883a 	mov	r4,r16
 800b180:	8010d980 	call	8010d98 <__sprint_r>
 800b184:	103ce51e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b188:	8c7ffc04 	addi	r17,r17,-16
 800b18c:	d8c02017 	ldw	r3,128(sp)
 800b190:	d8801f17 	ldw	r2,124(sp)
 800b194:	da000404 	addi	r8,sp,16
 800b198:	e47fef16 	blt	fp,r17,800b158 <___vfprintf_internal_r+0x104c>
 800b19c:	9021883a 	mov	r16,r18
 800b1a0:	a825883a 	mov	r18,r21
 800b1a4:	b02b883a 	mov	r21,r22
 800b1a8:	882d883a 	mov	r22,r17
 800b1ac:	dc403017 	ldw	r17,192(sp)
 800b1b0:	d9002c17 	ldw	r4,176(sp)
 800b1b4:	1d87883a 	add	r3,r3,r22
 800b1b8:	10800044 	addi	r2,r2,1
 800b1bc:	41000015 	stw	r4,0(r8)
 800b1c0:	45800115 	stw	r22,4(r8)
 800b1c4:	d8c02015 	stw	r3,128(sp)
 800b1c8:	d8801f15 	stw	r2,124(sp)
 800b1cc:	010001c4 	movi	r4,7
 800b1d0:	20818e16 	blt	r4,r2,800b80c <___vfprintf_internal_r+0x1700>
 800b1d4:	42000204 	addi	r8,r8,8
 800b1d8:	003e0f06 	br	800aa18 <___vfprintf_internal_r+0x90c>
 800b1dc:	d9403317 	ldw	r5,204(sp)
 800b1e0:	00800044 	movi	r2,1
 800b1e4:	18c00044 	addi	r3,r3,1
 800b1e8:	1141530e 	bge	r2,r5,800b738 <___vfprintf_internal_r+0x162c>
 800b1ec:	dc401f17 	ldw	r17,124(sp)
 800b1f0:	00800044 	movi	r2,1
 800b1f4:	40800115 	stw	r2,4(r8)
 800b1f8:	8c400044 	addi	r17,r17,1
 800b1fc:	44000015 	stw	r16,0(r8)
 800b200:	d8c02015 	stw	r3,128(sp)
 800b204:	dc401f15 	stw	r17,124(sp)
 800b208:	008001c4 	movi	r2,7
 800b20c:	14416b16 	blt	r2,r17,800b7bc <___vfprintf_internal_r+0x16b0>
 800b210:	42000204 	addi	r8,r8,8
 800b214:	d8803717 	ldw	r2,220(sp)
 800b218:	d9003417 	ldw	r4,208(sp)
 800b21c:	8c400044 	addi	r17,r17,1
 800b220:	10c7883a 	add	r3,r2,r3
 800b224:	40800115 	stw	r2,4(r8)
 800b228:	41000015 	stw	r4,0(r8)
 800b22c:	d8c02015 	stw	r3,128(sp)
 800b230:	dc401f15 	stw	r17,124(sp)
 800b234:	008001c4 	movi	r2,7
 800b238:	14416916 	blt	r2,r17,800b7e0 <___vfprintf_internal_r+0x16d4>
 800b23c:	45800204 	addi	r22,r8,8
 800b240:	d9003617 	ldw	r4,216(sp)
 800b244:	d9403817 	ldw	r5,224(sp)
 800b248:	000d883a 	mov	r6,zero
 800b24c:	000f883a 	mov	r7,zero
 800b250:	d8c03c15 	stw	r3,240(sp)
 800b254:	80148f80 	call	80148f8 <__eqdf2>
 800b258:	d8c03c17 	ldw	r3,240(sp)
 800b25c:	1000bc26 	beq	r2,zero,800b550 <___vfprintf_internal_r+0x1444>
 800b260:	d9403317 	ldw	r5,204(sp)
 800b264:	84000044 	addi	r16,r16,1
 800b268:	8c400044 	addi	r17,r17,1
 800b26c:	28bfffc4 	addi	r2,r5,-1
 800b270:	1887883a 	add	r3,r3,r2
 800b274:	b0800115 	stw	r2,4(r22)
 800b278:	b4000015 	stw	r16,0(r22)
 800b27c:	d8c02015 	stw	r3,128(sp)
 800b280:	dc401f15 	stw	r17,124(sp)
 800b284:	008001c4 	movi	r2,7
 800b288:	14414316 	blt	r2,r17,800b798 <___vfprintf_internal_r+0x168c>
 800b28c:	b5800204 	addi	r22,r22,8
 800b290:	d9003a17 	ldw	r4,232(sp)
 800b294:	df0022c4 	addi	fp,sp,139
 800b298:	8c400044 	addi	r17,r17,1
 800b29c:	20c7883a 	add	r3,r4,r3
 800b2a0:	b7000015 	stw	fp,0(r22)
 800b2a4:	b1000115 	stw	r4,4(r22)
 800b2a8:	d8c02015 	stw	r3,128(sp)
 800b2ac:	dc401f15 	stw	r17,124(sp)
 800b2b0:	008001c4 	movi	r2,7
 800b2b4:	14400e16 	blt	r2,r17,800b2f0 <___vfprintf_internal_r+0x11e4>
 800b2b8:	b2000204 	addi	r8,r22,8
 800b2bc:	003e1806 	br	800ab20 <___vfprintf_internal_r+0xa14>
 800b2c0:	010200b4 	movhi	r4,2050
 800b2c4:	2128d484 	addi	r4,r4,-23726
 800b2c8:	d9002c15 	stw	r4,176(sp)
 800b2cc:	d9002c17 	ldw	r4,176(sp)
 800b2d0:	1c07883a 	add	r3,r3,r16
 800b2d4:	44000115 	stw	r16,4(r8)
 800b2d8:	41000015 	stw	r4,0(r8)
 800b2dc:	10800044 	addi	r2,r2,1
 800b2e0:	d8c02015 	stw	r3,128(sp)
 800b2e4:	d8801f15 	stw	r2,124(sp)
 800b2e8:	010001c4 	movi	r4,7
 800b2ec:	20be0b0e 	bge	r4,r2,800ab1c <___vfprintf_internal_r+0xa10>
 800b2f0:	d9002d17 	ldw	r4,180(sp)
 800b2f4:	d9801e04 	addi	r6,sp,120
 800b2f8:	b80b883a 	mov	r5,r23
 800b2fc:	8010d980 	call	8010d98 <__sprint_r>
 800b300:	103c861e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b304:	d8c02017 	ldw	r3,128(sp)
 800b308:	da000404 	addi	r8,sp,16
 800b30c:	003e0406 	br	800ab20 <___vfprintf_internal_r+0xa14>
 800b310:	d9002d17 	ldw	r4,180(sp)
 800b314:	d9801e04 	addi	r6,sp,120
 800b318:	b80b883a 	mov	r5,r23
 800b31c:	8010d980 	call	8010d98 <__sprint_r>
 800b320:	103e3b26 	beq	r2,zero,800ac10 <___vfprintf_internal_r+0xb04>
 800b324:	003c7d06 	br	800a51c <___vfprintf_internal_r+0x410>
 800b328:	d9002d17 	ldw	r4,180(sp)
 800b32c:	d9801e04 	addi	r6,sp,120
 800b330:	b80b883a 	mov	r5,r23
 800b334:	8010d980 	call	8010d98 <__sprint_r>
 800b338:	103c781e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b33c:	d8c02017 	ldw	r3,128(sp)
 800b340:	da000404 	addi	r8,sp,16
 800b344:	003de906 	br	800aaec <___vfprintf_internal_r+0x9e0>
 800b348:	d9002d17 	ldw	r4,180(sp)
 800b34c:	d9801e04 	addi	r6,sp,120
 800b350:	b80b883a 	mov	r5,r23
 800b354:	8010d980 	call	8010d98 <__sprint_r>
 800b358:	103c701e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b35c:	d8c02017 	ldw	r3,128(sp)
 800b360:	da000404 	addi	r8,sp,16
 800b364:	003d9b06 	br	800a9d4 <___vfprintf_internal_r+0x8c8>
 800b368:	d9002d17 	ldw	r4,180(sp)
 800b36c:	d9801e04 	addi	r6,sp,120
 800b370:	b80b883a 	mov	r5,r23
 800b374:	8010d980 	call	8010d98 <__sprint_r>
 800b378:	103c681e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b37c:	d8c02017 	ldw	r3,128(sp)
 800b380:	da000404 	addi	r8,sp,16
 800b384:	003da106 	br	800aa0c <___vfprintf_internal_r+0x900>
 800b388:	d9402a17 	ldw	r5,168(sp)
 800b38c:	d8002785 	stb	zero,158(sp)
 800b390:	283f0616 	blt	r5,zero,800afac <___vfprintf_internal_r+0xea0>
 800b394:	00ffdfc4 	movi	r3,-129
 800b398:	9d84b03a 	or	r2,r19,r22
 800b39c:	90e4703a 	and	r18,r18,r3
 800b3a0:	103c3b26 	beq	r2,zero,800a490 <___vfprintf_internal_r+0x384>
 800b3a4:	0039883a 	mov	fp,zero
 800b3a8:	003e5806 	br	800ad0c <___vfprintf_internal_r+0xc00>
 800b3ac:	9080040c 	andi	r2,r18,16
 800b3b0:	1001b326 	beq	r2,zero,800ba80 <___vfprintf_internal_r+0x1974>
 800b3b4:	d8c02e17 	ldw	r3,184(sp)
 800b3b8:	d9002a17 	ldw	r4,168(sp)
 800b3bc:	d8002785 	stb	zero,158(sp)
 800b3c0:	18800104 	addi	r2,r3,4
 800b3c4:	1cc00017 	ldw	r19,0(r3)
 800b3c8:	002d883a 	mov	r22,zero
 800b3cc:	2001b516 	blt	r4,zero,800baa4 <___vfprintf_internal_r+0x1998>
 800b3d0:	00ffdfc4 	movi	r3,-129
 800b3d4:	d8802e15 	stw	r2,184(sp)
 800b3d8:	90e4703a 	and	r18,r18,r3
 800b3dc:	983d0526 	beq	r19,zero,800a7f4 <___vfprintf_internal_r+0x6e8>
 800b3e0:	0039883a 	mov	fp,zero
 800b3e4:	003d0806 	br	800a808 <___vfprintf_internal_r+0x6fc>
 800b3e8:	dc402617 	ldw	r17,152(sp)
 800b3ec:	0441d30e 	bge	zero,r17,800bb3c <___vfprintf_internal_r+0x1a30>
 800b3f0:	dc403217 	ldw	r17,200(sp)
 800b3f4:	d8803317 	ldw	r2,204(sp)
 800b3f8:	1440010e 	bge	r2,r17,800b400 <___vfprintf_internal_r+0x12f4>
 800b3fc:	1023883a 	mov	r17,r2
 800b400:	04400a0e 	bge	zero,r17,800b42c <___vfprintf_internal_r+0x1320>
 800b404:	d8801f17 	ldw	r2,124(sp)
 800b408:	1c47883a 	add	r3,r3,r17
 800b40c:	44000015 	stw	r16,0(r8)
 800b410:	10800044 	addi	r2,r2,1
 800b414:	44400115 	stw	r17,4(r8)
 800b418:	d8c02015 	stw	r3,128(sp)
 800b41c:	d8801f15 	stw	r2,124(sp)
 800b420:	010001c4 	movi	r4,7
 800b424:	20826516 	blt	r4,r2,800bdbc <___vfprintf_internal_r+0x1cb0>
 800b428:	42000204 	addi	r8,r8,8
 800b42c:	88026116 	blt	r17,zero,800bdb4 <___vfprintf_internal_r+0x1ca8>
 800b430:	d9003217 	ldw	r4,200(sp)
 800b434:	2463c83a 	sub	r17,r4,r17
 800b438:	04407b0e 	bge	zero,r17,800b628 <___vfprintf_internal_r+0x151c>
 800b43c:	05800404 	movi	r22,16
 800b440:	d8801f17 	ldw	r2,124(sp)
 800b444:	b4419d0e 	bge	r22,r17,800babc <___vfprintf_internal_r+0x19b0>
 800b448:	010200b4 	movhi	r4,2050
 800b44c:	2128d484 	addi	r4,r4,-23726
 800b450:	d9002c15 	stw	r4,176(sp)
 800b454:	070001c4 	movi	fp,7
 800b458:	dcc02d17 	ldw	r19,180(sp)
 800b45c:	00000306 	br	800b46c <___vfprintf_internal_r+0x1360>
 800b460:	42000204 	addi	r8,r8,8
 800b464:	8c7ffc04 	addi	r17,r17,-16
 800b468:	b441970e 	bge	r22,r17,800bac8 <___vfprintf_internal_r+0x19bc>
 800b46c:	18c00404 	addi	r3,r3,16
 800b470:	10800044 	addi	r2,r2,1
 800b474:	45000015 	stw	r20,0(r8)
 800b478:	45800115 	stw	r22,4(r8)
 800b47c:	d8c02015 	stw	r3,128(sp)
 800b480:	d8801f15 	stw	r2,124(sp)
 800b484:	e0bff60e 	bge	fp,r2,800b460 <___vfprintf_internal_r+0x1354>
 800b488:	d9801e04 	addi	r6,sp,120
 800b48c:	b80b883a 	mov	r5,r23
 800b490:	9809883a 	mov	r4,r19
 800b494:	8010d980 	call	8010d98 <__sprint_r>
 800b498:	103c201e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b49c:	d8c02017 	ldw	r3,128(sp)
 800b4a0:	d8801f17 	ldw	r2,124(sp)
 800b4a4:	da000404 	addi	r8,sp,16
 800b4a8:	003fee06 	br	800b464 <___vfprintf_internal_r+0x1358>
 800b4ac:	d9002d17 	ldw	r4,180(sp)
 800b4b0:	d9801e04 	addi	r6,sp,120
 800b4b4:	b80b883a 	mov	r5,r23
 800b4b8:	8010d980 	call	8010d98 <__sprint_r>
 800b4bc:	103c171e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b4c0:	d8c02017 	ldw	r3,128(sp)
 800b4c4:	df002787 	ldb	fp,158(sp)
 800b4c8:	da000404 	addi	r8,sp,16
 800b4cc:	003d3406 	br	800a9a0 <___vfprintf_internal_r+0x894>
 800b4d0:	9080040c 	andi	r2,r18,16
 800b4d4:	10016126 	beq	r2,zero,800ba5c <___vfprintf_internal_r+0x1950>
 800b4d8:	d9402e17 	ldw	r5,184(sp)
 800b4dc:	2cc00017 	ldw	r19,0(r5)
 800b4e0:	29400104 	addi	r5,r5,4
 800b4e4:	d9402e15 	stw	r5,184(sp)
 800b4e8:	982dd7fa 	srai	r22,r19,31
 800b4ec:	b005883a 	mov	r2,r22
 800b4f0:	003c5a06 	br	800a65c <___vfprintf_internal_r+0x550>
 800b4f4:	9080040c 	andi	r2,r18,16
 800b4f8:	10003526 	beq	r2,zero,800b5d0 <___vfprintf_internal_r+0x14c4>
 800b4fc:	d8c02e17 	ldw	r3,184(sp)
 800b500:	d9002a17 	ldw	r4,168(sp)
 800b504:	d8002785 	stb	zero,158(sp)
 800b508:	18800104 	addi	r2,r3,4
 800b50c:	1cc00017 	ldw	r19,0(r3)
 800b510:	002d883a 	mov	r22,zero
 800b514:	20003716 	blt	r4,zero,800b5f4 <___vfprintf_internal_r+0x14e8>
 800b518:	00ffdfc4 	movi	r3,-129
 800b51c:	d8802e15 	stw	r2,184(sp)
 800b520:	90e4703a 	and	r18,r18,r3
 800b524:	0039883a 	mov	fp,zero
 800b528:	983dd426 	beq	r19,zero,800ac7c <___vfprintf_internal_r+0xb70>
 800b52c:	00800244 	movi	r2,9
 800b530:	14fc5336 	bltu	r2,r19,800a680 <___vfprintf_internal_r+0x574>
 800b534:	d8c02817 	ldw	r3,160(sp)
 800b538:	dc001dc4 	addi	r16,sp,119
 800b53c:	9cc00c04 	addi	r19,r19,48
 800b540:	1c07c83a 	sub	r3,r3,r16
 800b544:	dcc01dc5 	stb	r19,119(sp)
 800b548:	d8c02b15 	stw	r3,172(sp)
 800b54c:	003cc606 	br	800a868 <___vfprintf_internal_r+0x75c>
 800b550:	d8803317 	ldw	r2,204(sp)
 800b554:	143fffc4 	addi	r16,r2,-1
 800b558:	043f4d0e 	bge	zero,r16,800b290 <___vfprintf_internal_r+0x1184>
 800b55c:	07000404 	movi	fp,16
 800b560:	e400810e 	bge	fp,r16,800b768 <___vfprintf_internal_r+0x165c>
 800b564:	014200b4 	movhi	r5,2050
 800b568:	2968d484 	addi	r5,r5,-23726
 800b56c:	d9402c15 	stw	r5,176(sp)
 800b570:	01c001c4 	movi	r7,7
 800b574:	dcc02d17 	ldw	r19,180(sp)
 800b578:	00000306 	br	800b588 <___vfprintf_internal_r+0x147c>
 800b57c:	b5800204 	addi	r22,r22,8
 800b580:	843ffc04 	addi	r16,r16,-16
 800b584:	e4007b0e 	bge	fp,r16,800b774 <___vfprintf_internal_r+0x1668>
 800b588:	18c00404 	addi	r3,r3,16
 800b58c:	8c400044 	addi	r17,r17,1
 800b590:	b5000015 	stw	r20,0(r22)
 800b594:	b7000115 	stw	fp,4(r22)
 800b598:	d8c02015 	stw	r3,128(sp)
 800b59c:	dc401f15 	stw	r17,124(sp)
 800b5a0:	3c7ff60e 	bge	r7,r17,800b57c <___vfprintf_internal_r+0x1470>
 800b5a4:	d9801e04 	addi	r6,sp,120
 800b5a8:	b80b883a 	mov	r5,r23
 800b5ac:	9809883a 	mov	r4,r19
 800b5b0:	d9c03c15 	stw	r7,240(sp)
 800b5b4:	8010d980 	call	8010d98 <__sprint_r>
 800b5b8:	d9c03c17 	ldw	r7,240(sp)
 800b5bc:	103bd71e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b5c0:	d8c02017 	ldw	r3,128(sp)
 800b5c4:	dc401f17 	ldw	r17,124(sp)
 800b5c8:	dd800404 	addi	r22,sp,16
 800b5cc:	003fec06 	br	800b580 <___vfprintf_internal_r+0x1474>
 800b5d0:	9080100c 	andi	r2,r18,64
 800b5d4:	d8002785 	stb	zero,158(sp)
 800b5d8:	10010e26 	beq	r2,zero,800ba14 <___vfprintf_internal_r+0x1908>
 800b5dc:	d9402e17 	ldw	r5,184(sp)
 800b5e0:	d8c02a17 	ldw	r3,168(sp)
 800b5e4:	002d883a 	mov	r22,zero
 800b5e8:	28800104 	addi	r2,r5,4
 800b5ec:	2cc0000b 	ldhu	r19,0(r5)
 800b5f0:	183fc90e 	bge	r3,zero,800b518 <___vfprintf_internal_r+0x140c>
 800b5f4:	d8802e15 	stw	r2,184(sp)
 800b5f8:	0039883a 	mov	fp,zero
 800b5fc:	9d84b03a 	or	r2,r19,r22
 800b600:	103c1e1e 	bne	r2,zero,800a67c <___vfprintf_internal_r+0x570>
 800b604:	00800044 	movi	r2,1
 800b608:	003e6c06 	br	800afbc <___vfprintf_internal_r+0xeb0>
 800b60c:	d9002d17 	ldw	r4,180(sp)
 800b610:	d9801e04 	addi	r6,sp,120
 800b614:	b80b883a 	mov	r5,r23
 800b618:	8010d980 	call	8010d98 <__sprint_r>
 800b61c:	103bbf1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b620:	d8c02017 	ldw	r3,128(sp)
 800b624:	da000404 	addi	r8,sp,16
 800b628:	d9003217 	ldw	r4,200(sp)
 800b62c:	d8802617 	ldw	r2,152(sp)
 800b630:	d9403317 	ldw	r5,204(sp)
 800b634:	8123883a 	add	r17,r16,r4
 800b638:	11400216 	blt	r2,r5,800b644 <___vfprintf_internal_r+0x1538>
 800b63c:	9100004c 	andi	r4,r18,1
 800b640:	20000d26 	beq	r4,zero,800b678 <___vfprintf_internal_r+0x156c>
 800b644:	d9003717 	ldw	r4,220(sp)
 800b648:	d9403417 	ldw	r5,208(sp)
 800b64c:	1907883a 	add	r3,r3,r4
 800b650:	d9001f17 	ldw	r4,124(sp)
 800b654:	41400015 	stw	r5,0(r8)
 800b658:	d9403717 	ldw	r5,220(sp)
 800b65c:	21000044 	addi	r4,r4,1
 800b660:	d8c02015 	stw	r3,128(sp)
 800b664:	41400115 	stw	r5,4(r8)
 800b668:	d9001f15 	stw	r4,124(sp)
 800b66c:	014001c4 	movi	r5,7
 800b670:	2901e816 	blt	r5,r4,800be14 <___vfprintf_internal_r+0x1d08>
 800b674:	42000204 	addi	r8,r8,8
 800b678:	d9003317 	ldw	r4,204(sp)
 800b67c:	8121883a 	add	r16,r16,r4
 800b680:	2085c83a 	sub	r2,r4,r2
 800b684:	8461c83a 	sub	r16,r16,r17
 800b688:	1400010e 	bge	r2,r16,800b690 <___vfprintf_internal_r+0x1584>
 800b68c:	1021883a 	mov	r16,r2
 800b690:	04000a0e 	bge	zero,r16,800b6bc <___vfprintf_internal_r+0x15b0>
 800b694:	d9001f17 	ldw	r4,124(sp)
 800b698:	1c07883a 	add	r3,r3,r16
 800b69c:	44400015 	stw	r17,0(r8)
 800b6a0:	21000044 	addi	r4,r4,1
 800b6a4:	44000115 	stw	r16,4(r8)
 800b6a8:	d8c02015 	stw	r3,128(sp)
 800b6ac:	d9001f15 	stw	r4,124(sp)
 800b6b0:	014001c4 	movi	r5,7
 800b6b4:	2901fb16 	blt	r5,r4,800bea4 <___vfprintf_internal_r+0x1d98>
 800b6b8:	42000204 	addi	r8,r8,8
 800b6bc:	8001f716 	blt	r16,zero,800be9c <___vfprintf_internal_r+0x1d90>
 800b6c0:	1421c83a 	sub	r16,r2,r16
 800b6c4:	043d160e 	bge	zero,r16,800ab20 <___vfprintf_internal_r+0xa14>
 800b6c8:	04400404 	movi	r17,16
 800b6cc:	d8801f17 	ldw	r2,124(sp)
 800b6d0:	8c3efb0e 	bge	r17,r16,800b2c0 <___vfprintf_internal_r+0x11b4>
 800b6d4:	014200b4 	movhi	r5,2050
 800b6d8:	2968d484 	addi	r5,r5,-23726
 800b6dc:	d9402c15 	stw	r5,176(sp)
 800b6e0:	058001c4 	movi	r22,7
 800b6e4:	dcc02d17 	ldw	r19,180(sp)
 800b6e8:	00000306 	br	800b6f8 <___vfprintf_internal_r+0x15ec>
 800b6ec:	42000204 	addi	r8,r8,8
 800b6f0:	843ffc04 	addi	r16,r16,-16
 800b6f4:	8c3ef50e 	bge	r17,r16,800b2cc <___vfprintf_internal_r+0x11c0>
 800b6f8:	18c00404 	addi	r3,r3,16
 800b6fc:	10800044 	addi	r2,r2,1
 800b700:	45000015 	stw	r20,0(r8)
 800b704:	44400115 	stw	r17,4(r8)
 800b708:	d8c02015 	stw	r3,128(sp)
 800b70c:	d8801f15 	stw	r2,124(sp)
 800b710:	b0bff60e 	bge	r22,r2,800b6ec <___vfprintf_internal_r+0x15e0>
 800b714:	d9801e04 	addi	r6,sp,120
 800b718:	b80b883a 	mov	r5,r23
 800b71c:	9809883a 	mov	r4,r19
 800b720:	8010d980 	call	8010d98 <__sprint_r>
 800b724:	103b7d1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b728:	d8c02017 	ldw	r3,128(sp)
 800b72c:	d8801f17 	ldw	r2,124(sp)
 800b730:	da000404 	addi	r8,sp,16
 800b734:	003fee06 	br	800b6f0 <___vfprintf_internal_r+0x15e4>
 800b738:	9088703a 	and	r4,r18,r2
 800b73c:	203eab1e 	bne	r4,zero,800b1ec <___vfprintf_internal_r+0x10e0>
 800b740:	dc401f17 	ldw	r17,124(sp)
 800b744:	40800115 	stw	r2,4(r8)
 800b748:	44000015 	stw	r16,0(r8)
 800b74c:	8c400044 	addi	r17,r17,1
 800b750:	d8c02015 	stw	r3,128(sp)
 800b754:	dc401f15 	stw	r17,124(sp)
 800b758:	008001c4 	movi	r2,7
 800b75c:	14400e16 	blt	r2,r17,800b798 <___vfprintf_internal_r+0x168c>
 800b760:	45800204 	addi	r22,r8,8
 800b764:	003eca06 	br	800b290 <___vfprintf_internal_r+0x1184>
 800b768:	010200b4 	movhi	r4,2050
 800b76c:	2128d484 	addi	r4,r4,-23726
 800b770:	d9002c15 	stw	r4,176(sp)
 800b774:	d8802c17 	ldw	r2,176(sp)
 800b778:	1c07883a 	add	r3,r3,r16
 800b77c:	8c400044 	addi	r17,r17,1
 800b780:	b0800015 	stw	r2,0(r22)
 800b784:	b4000115 	stw	r16,4(r22)
 800b788:	d8c02015 	stw	r3,128(sp)
 800b78c:	dc401f15 	stw	r17,124(sp)
 800b790:	008001c4 	movi	r2,7
 800b794:	147ebd0e 	bge	r2,r17,800b28c <___vfprintf_internal_r+0x1180>
 800b798:	d9002d17 	ldw	r4,180(sp)
 800b79c:	d9801e04 	addi	r6,sp,120
 800b7a0:	b80b883a 	mov	r5,r23
 800b7a4:	8010d980 	call	8010d98 <__sprint_r>
 800b7a8:	103b5c1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b7ac:	d8c02017 	ldw	r3,128(sp)
 800b7b0:	dc401f17 	ldw	r17,124(sp)
 800b7b4:	dd800404 	addi	r22,sp,16
 800b7b8:	003eb506 	br	800b290 <___vfprintf_internal_r+0x1184>
 800b7bc:	d9002d17 	ldw	r4,180(sp)
 800b7c0:	d9801e04 	addi	r6,sp,120
 800b7c4:	b80b883a 	mov	r5,r23
 800b7c8:	8010d980 	call	8010d98 <__sprint_r>
 800b7cc:	103b531e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b7d0:	d8c02017 	ldw	r3,128(sp)
 800b7d4:	dc401f17 	ldw	r17,124(sp)
 800b7d8:	da000404 	addi	r8,sp,16
 800b7dc:	003e8d06 	br	800b214 <___vfprintf_internal_r+0x1108>
 800b7e0:	d9002d17 	ldw	r4,180(sp)
 800b7e4:	d9801e04 	addi	r6,sp,120
 800b7e8:	b80b883a 	mov	r5,r23
 800b7ec:	8010d980 	call	8010d98 <__sprint_r>
 800b7f0:	103b4a1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b7f4:	d8c02017 	ldw	r3,128(sp)
 800b7f8:	dc401f17 	ldw	r17,124(sp)
 800b7fc:	dd800404 	addi	r22,sp,16
 800b800:	003e8f06 	br	800b240 <___vfprintf_internal_r+0x1134>
 800b804:	0027883a 	mov	r19,zero
 800b808:	003f4a06 	br	800b534 <___vfprintf_internal_r+0x1428>
 800b80c:	d9002d17 	ldw	r4,180(sp)
 800b810:	d9801e04 	addi	r6,sp,120
 800b814:	b80b883a 	mov	r5,r23
 800b818:	8010d980 	call	8010d98 <__sprint_r>
 800b81c:	103b3f1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800b820:	d8c02017 	ldw	r3,128(sp)
 800b824:	da000404 	addi	r8,sp,16
 800b828:	003c7b06 	br	800aa18 <___vfprintf_internal_r+0x90c>
 800b82c:	d9402a17 	ldw	r5,168(sp)
 800b830:	04e7c83a 	sub	r19,zero,r19
 800b834:	07000b44 	movi	fp,45
 800b838:	9804c03a 	cmpne	r2,r19,zero
 800b83c:	05adc83a 	sub	r22,zero,r22
 800b840:	df002785 	stb	fp,158(sp)
 800b844:	b0adc83a 	sub	r22,r22,r2
 800b848:	28017b16 	blt	r5,zero,800be38 <___vfprintf_internal_r+0x1d2c>
 800b84c:	00bfdfc4 	movi	r2,-129
 800b850:	90a4703a 	and	r18,r18,r2
 800b854:	003b8906 	br	800a67c <___vfprintf_internal_r+0x570>
 800b858:	d9003617 	ldw	r4,216(sp)
 800b85c:	d9403817 	ldw	r5,224(sp)
 800b860:	da003d15 	stw	r8,244(sp)
 800b864:	8010b4c0 	call	8010b4c <__fpclassifyd>
 800b868:	da003d17 	ldw	r8,244(sp)
 800b86c:	1000f026 	beq	r2,zero,800bc30 <___vfprintf_internal_r+0x1b24>
 800b870:	d9002a17 	ldw	r4,168(sp)
 800b874:	05bff7c4 	movi	r22,-33
 800b878:	00bfffc4 	movi	r2,-1
 800b87c:	8dac703a 	and	r22,r17,r22
 800b880:	20820026 	beq	r4,r2,800c084 <___vfprintf_internal_r+0x1f78>
 800b884:	008011c4 	movi	r2,71
 800b888:	b081f726 	beq	r22,r2,800c068 <___vfprintf_internal_r+0x1f5c>
 800b88c:	d9003817 	ldw	r4,224(sp)
 800b890:	90c04014 	ori	r3,r18,256
 800b894:	d8c02c15 	stw	r3,176(sp)
 800b898:	20021516 	blt	r4,zero,800c0f0 <___vfprintf_internal_r+0x1fe4>
 800b89c:	dcc03817 	ldw	r19,224(sp)
 800b8a0:	d8002905 	stb	zero,164(sp)
 800b8a4:	00801984 	movi	r2,102
 800b8a8:	8881f926 	beq	r17,r2,800c090 <___vfprintf_internal_r+0x1f84>
 800b8ac:	00801184 	movi	r2,70
 800b8b0:	88821c26 	beq	r17,r2,800c124 <___vfprintf_internal_r+0x2018>
 800b8b4:	00801144 	movi	r2,69
 800b8b8:	b081ef26 	beq	r22,r2,800c078 <___vfprintf_internal_r+0x1f6c>
 800b8bc:	d8c02a17 	ldw	r3,168(sp)
 800b8c0:	d8802104 	addi	r2,sp,132
 800b8c4:	d8800315 	stw	r2,12(sp)
 800b8c8:	d9403617 	ldw	r5,216(sp)
 800b8cc:	d8802504 	addi	r2,sp,148
 800b8d0:	d9002d17 	ldw	r4,180(sp)
 800b8d4:	d8800215 	stw	r2,8(sp)
 800b8d8:	d8802604 	addi	r2,sp,152
 800b8dc:	d8c00015 	stw	r3,0(sp)
 800b8e0:	d8800115 	stw	r2,4(sp)
 800b8e4:	01c00084 	movi	r7,2
 800b8e8:	980d883a 	mov	r6,r19
 800b8ec:	d8c03c15 	stw	r3,240(sp)
 800b8f0:	da003d15 	stw	r8,244(sp)
 800b8f4:	800c8f00 	call	800c8f0 <_dtoa_r>
 800b8f8:	1021883a 	mov	r16,r2
 800b8fc:	008019c4 	movi	r2,103
 800b900:	d8c03c17 	ldw	r3,240(sp)
 800b904:	da003d17 	ldw	r8,244(sp)
 800b908:	88817126 	beq	r17,r2,800bed0 <___vfprintf_internal_r+0x1dc4>
 800b90c:	008011c4 	movi	r2,71
 800b910:	88829126 	beq	r17,r2,800c358 <___vfprintf_internal_r+0x224c>
 800b914:	80f9883a 	add	fp,r16,r3
 800b918:	d9003617 	ldw	r4,216(sp)
 800b91c:	000d883a 	mov	r6,zero
 800b920:	000f883a 	mov	r7,zero
 800b924:	980b883a 	mov	r5,r19
 800b928:	da003d15 	stw	r8,244(sp)
 800b92c:	80148f80 	call	80148f8 <__eqdf2>
 800b930:	da003d17 	ldw	r8,244(sp)
 800b934:	10018d26 	beq	r2,zero,800bf6c <___vfprintf_internal_r+0x1e60>
 800b938:	d8802117 	ldw	r2,132(sp)
 800b93c:	1700062e 	bgeu	r2,fp,800b958 <___vfprintf_internal_r+0x184c>
 800b940:	01000c04 	movi	r4,48
 800b944:	10c00044 	addi	r3,r2,1
 800b948:	d8c02115 	stw	r3,132(sp)
 800b94c:	11000005 	stb	r4,0(r2)
 800b950:	d8802117 	ldw	r2,132(sp)
 800b954:	173ffb36 	bltu	r2,fp,800b944 <___vfprintf_internal_r+0x1838>
 800b958:	1405c83a 	sub	r2,r2,r16
 800b95c:	d8803315 	stw	r2,204(sp)
 800b960:	008011c4 	movi	r2,71
 800b964:	b0817626 	beq	r22,r2,800bf40 <___vfprintf_internal_r+0x1e34>
 800b968:	00801944 	movi	r2,101
 800b96c:	1442800e 	bge	r2,r17,800c370 <___vfprintf_internal_r+0x2264>
 800b970:	d8c02617 	ldw	r3,152(sp)
 800b974:	00801984 	movi	r2,102
 800b978:	d8c03215 	stw	r3,200(sp)
 800b97c:	8881fe26 	beq	r17,r2,800c178 <___vfprintf_internal_r+0x206c>
 800b980:	d8c03217 	ldw	r3,200(sp)
 800b984:	d9003317 	ldw	r4,204(sp)
 800b988:	1901dd16 	blt	r3,r4,800c100 <___vfprintf_internal_r+0x1ff4>
 800b98c:	9480004c 	andi	r18,r18,1
 800b990:	90022b1e 	bne	r18,zero,800c240 <___vfprintf_internal_r+0x2134>
 800b994:	1805883a 	mov	r2,r3
 800b998:	18028316 	blt	r3,zero,800c3a8 <___vfprintf_internal_r+0x229c>
 800b99c:	d8c03217 	ldw	r3,200(sp)
 800b9a0:	044019c4 	movi	r17,103
 800b9a4:	d8c02b15 	stw	r3,172(sp)
 800b9a8:	df002907 	ldb	fp,164(sp)
 800b9ac:	e001531e 	bne	fp,zero,800befc <___vfprintf_internal_r+0x1df0>
 800b9b0:	df002783 	ldbu	fp,158(sp)
 800b9b4:	d8802915 	stw	r2,164(sp)
 800b9b8:	dc802c17 	ldw	r18,176(sp)
 800b9bc:	d8002a15 	stw	zero,168(sp)
 800b9c0:	003baf06 	br	800a880 <___vfprintf_internal_r+0x774>
 800b9c4:	d8c02e17 	ldw	r3,184(sp)
 800b9c8:	d9002e17 	ldw	r4,184(sp)
 800b9cc:	d9402e17 	ldw	r5,184(sp)
 800b9d0:	18c00017 	ldw	r3,0(r3)
 800b9d4:	21000117 	ldw	r4,4(r4)
 800b9d8:	29400204 	addi	r5,r5,8
 800b9dc:	d8c03615 	stw	r3,216(sp)
 800b9e0:	d9003815 	stw	r4,224(sp)
 800b9e4:	d9402e15 	stw	r5,184(sp)
 800b9e8:	003b5006 	br	800a72c <___vfprintf_internal_r+0x620>
 800b9ec:	ac400007 	ldb	r17,0(r21)
 800b9f0:	003a2806 	br	800a294 <___vfprintf_internal_r+0x188>
 800b9f4:	9080100c 	andi	r2,r18,64
 800b9f8:	1000a826 	beq	r2,zero,800bc9c <___vfprintf_internal_r+0x1b90>
 800b9fc:	d8c02e17 	ldw	r3,184(sp)
 800ba00:	002d883a 	mov	r22,zero
 800ba04:	1cc0000b 	ldhu	r19,0(r3)
 800ba08:	18c00104 	addi	r3,r3,4
 800ba0c:	d8c02e15 	stw	r3,184(sp)
 800ba10:	003caf06 	br	800acd0 <___vfprintf_internal_r+0xbc4>
 800ba14:	d9002e17 	ldw	r4,184(sp)
 800ba18:	d9402a17 	ldw	r5,168(sp)
 800ba1c:	002d883a 	mov	r22,zero
 800ba20:	20800104 	addi	r2,r4,4
 800ba24:	24c00017 	ldw	r19,0(r4)
 800ba28:	283ebb0e 	bge	r5,zero,800b518 <___vfprintf_internal_r+0x140c>
 800ba2c:	003ef106 	br	800b5f4 <___vfprintf_internal_r+0x14e8>
 800ba30:	9080040c 	andi	r2,r18,16
 800ba34:	1000921e 	bne	r2,zero,800bc80 <___vfprintf_internal_r+0x1b74>
 800ba38:	9480100c 	andi	r18,r18,64
 800ba3c:	90013926 	beq	r18,zero,800bf24 <___vfprintf_internal_r+0x1e18>
 800ba40:	d9402e17 	ldw	r5,184(sp)
 800ba44:	d8c02f17 	ldw	r3,188(sp)
 800ba48:	28800017 	ldw	r2,0(r5)
 800ba4c:	29400104 	addi	r5,r5,4
 800ba50:	d9402e15 	stw	r5,184(sp)
 800ba54:	10c0000d 	sth	r3,0(r2)
 800ba58:	0039e406 	br	800a1ec <___vfprintf_internal_r+0xe0>
 800ba5c:	9080100c 	andi	r2,r18,64
 800ba60:	10008026 	beq	r2,zero,800bc64 <___vfprintf_internal_r+0x1b58>
 800ba64:	d8802e17 	ldw	r2,184(sp)
 800ba68:	14c0000f 	ldh	r19,0(r2)
 800ba6c:	10800104 	addi	r2,r2,4
 800ba70:	d8802e15 	stw	r2,184(sp)
 800ba74:	982dd7fa 	srai	r22,r19,31
 800ba78:	b005883a 	mov	r2,r22
 800ba7c:	003af706 	br	800a65c <___vfprintf_internal_r+0x550>
 800ba80:	9080100c 	andi	r2,r18,64
 800ba84:	d8002785 	stb	zero,158(sp)
 800ba88:	10008a1e 	bne	r2,zero,800bcb4 <___vfprintf_internal_r+0x1ba8>
 800ba8c:	d9002e17 	ldw	r4,184(sp)
 800ba90:	d9402a17 	ldw	r5,168(sp)
 800ba94:	002d883a 	mov	r22,zero
 800ba98:	20800104 	addi	r2,r4,4
 800ba9c:	24c00017 	ldw	r19,0(r4)
 800baa0:	283e4b0e 	bge	r5,zero,800b3d0 <___vfprintf_internal_r+0x12c4>
 800baa4:	9d86b03a 	or	r3,r19,r22
 800baa8:	d8802e15 	stw	r2,184(sp)
 800baac:	183e4c1e 	bne	r3,zero,800b3e0 <___vfprintf_internal_r+0x12d4>
 800bab0:	0039883a 	mov	fp,zero
 800bab4:	0005883a 	mov	r2,zero
 800bab8:	003d4006 	br	800afbc <___vfprintf_internal_r+0xeb0>
 800babc:	014200b4 	movhi	r5,2050
 800bac0:	2968d484 	addi	r5,r5,-23726
 800bac4:	d9402c15 	stw	r5,176(sp)
 800bac8:	d9402c17 	ldw	r5,176(sp)
 800bacc:	1c47883a 	add	r3,r3,r17
 800bad0:	10800044 	addi	r2,r2,1
 800bad4:	41400015 	stw	r5,0(r8)
 800bad8:	44400115 	stw	r17,4(r8)
 800badc:	d8c02015 	stw	r3,128(sp)
 800bae0:	d8801f15 	stw	r2,124(sp)
 800bae4:	010001c4 	movi	r4,7
 800bae8:	20bec816 	blt	r4,r2,800b60c <___vfprintf_internal_r+0x1500>
 800baec:	42000204 	addi	r8,r8,8
 800baf0:	003ecd06 	br	800b628 <___vfprintf_internal_r+0x151c>
 800baf4:	d9002a17 	ldw	r4,168(sp)
 800baf8:	d8002785 	stb	zero,158(sp)
 800bafc:	203d2d16 	blt	r4,zero,800afb4 <___vfprintf_internal_r+0xea8>
 800bb00:	00bfdfc4 	movi	r2,-129
 800bb04:	90a4703a 	and	r18,r18,r2
 800bb08:	003a6106 	br	800a490 <___vfprintf_internal_r+0x384>
 800bb0c:	010200b4 	movhi	r4,2050
 800bb10:	2128d484 	addi	r4,r4,-23726
 800bb14:	d9002c15 	stw	r4,176(sp)
 800bb18:	003bea06 	br	800aac4 <___vfprintf_internal_r+0x9b8>
 800bb1c:	d9002d17 	ldw	r4,180(sp)
 800bb20:	d9801e04 	addi	r6,sp,120
 800bb24:	b80b883a 	mov	r5,r23
 800bb28:	8010d980 	call	8010d98 <__sprint_r>
 800bb2c:	103a7b1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bb30:	d8c02017 	ldw	r3,128(sp)
 800bb34:	da000404 	addi	r8,sp,16
 800bb38:	003d4106 	br	800b040 <___vfprintf_internal_r+0xf34>
 800bb3c:	d8801f17 	ldw	r2,124(sp)
 800bb40:	014200b4 	movhi	r5,2050
 800bb44:	01000044 	movi	r4,1
 800bb48:	18c00044 	addi	r3,r3,1
 800bb4c:	10800044 	addi	r2,r2,1
 800bb50:	2968d404 	addi	r5,r5,-23728
 800bb54:	41000115 	stw	r4,4(r8)
 800bb58:	41400015 	stw	r5,0(r8)
 800bb5c:	d8c02015 	stw	r3,128(sp)
 800bb60:	d8801f15 	stw	r2,124(sp)
 800bb64:	010001c4 	movi	r4,7
 800bb68:	20805c16 	blt	r4,r2,800bcdc <___vfprintf_internal_r+0x1bd0>
 800bb6c:	42000204 	addi	r8,r8,8
 800bb70:	8800041e 	bne	r17,zero,800bb84 <___vfprintf_internal_r+0x1a78>
 800bb74:	d8803317 	ldw	r2,204(sp)
 800bb78:	1000021e 	bne	r2,zero,800bb84 <___vfprintf_internal_r+0x1a78>
 800bb7c:	9080004c 	andi	r2,r18,1
 800bb80:	103be726 	beq	r2,zero,800ab20 <___vfprintf_internal_r+0xa14>
 800bb84:	d9003717 	ldw	r4,220(sp)
 800bb88:	d8801f17 	ldw	r2,124(sp)
 800bb8c:	d9403417 	ldw	r5,208(sp)
 800bb90:	20c7883a 	add	r3,r4,r3
 800bb94:	10800044 	addi	r2,r2,1
 800bb98:	41000115 	stw	r4,4(r8)
 800bb9c:	41400015 	stw	r5,0(r8)
 800bba0:	d8c02015 	stw	r3,128(sp)
 800bba4:	d8801f15 	stw	r2,124(sp)
 800bba8:	010001c4 	movi	r4,7
 800bbac:	20812116 	blt	r4,r2,800c034 <___vfprintf_internal_r+0x1f28>
 800bbb0:	42000204 	addi	r8,r8,8
 800bbb4:	0463c83a 	sub	r17,zero,r17
 800bbb8:	0440730e 	bge	zero,r17,800bd88 <___vfprintf_internal_r+0x1c7c>
 800bbbc:	05800404 	movi	r22,16
 800bbc0:	b440860e 	bge	r22,r17,800bddc <___vfprintf_internal_r+0x1cd0>
 800bbc4:	014200b4 	movhi	r5,2050
 800bbc8:	2968d484 	addi	r5,r5,-23726
 800bbcc:	d9402c15 	stw	r5,176(sp)
 800bbd0:	070001c4 	movi	fp,7
 800bbd4:	dcc02d17 	ldw	r19,180(sp)
 800bbd8:	00000306 	br	800bbe8 <___vfprintf_internal_r+0x1adc>
 800bbdc:	42000204 	addi	r8,r8,8
 800bbe0:	8c7ffc04 	addi	r17,r17,-16
 800bbe4:	b440800e 	bge	r22,r17,800bde8 <___vfprintf_internal_r+0x1cdc>
 800bbe8:	18c00404 	addi	r3,r3,16
 800bbec:	10800044 	addi	r2,r2,1
 800bbf0:	45000015 	stw	r20,0(r8)
 800bbf4:	45800115 	stw	r22,4(r8)
 800bbf8:	d8c02015 	stw	r3,128(sp)
 800bbfc:	d8801f15 	stw	r2,124(sp)
 800bc00:	e0bff60e 	bge	fp,r2,800bbdc <___vfprintf_internal_r+0x1ad0>
 800bc04:	d9801e04 	addi	r6,sp,120
 800bc08:	b80b883a 	mov	r5,r23
 800bc0c:	9809883a 	mov	r4,r19
 800bc10:	8010d980 	call	8010d98 <__sprint_r>
 800bc14:	103a411e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bc18:	d8c02017 	ldw	r3,128(sp)
 800bc1c:	d8801f17 	ldw	r2,124(sp)
 800bc20:	da000404 	addi	r8,sp,16
 800bc24:	003fee06 	br	800bbe0 <___vfprintf_internal_r+0x1ad4>
 800bc28:	00bfffc4 	movi	r2,-1
 800bc2c:	003a3f06 	br	800a52c <___vfprintf_internal_r+0x420>
 800bc30:	008011c4 	movi	r2,71
 800bc34:	1440b816 	blt	r2,r17,800bf18 <___vfprintf_internal_r+0x1e0c>
 800bc38:	040200b4 	movhi	r16,2050
 800bc3c:	8428c604 	addi	r16,r16,-23784
 800bc40:	00c000c4 	movi	r3,3
 800bc44:	00bfdfc4 	movi	r2,-129
 800bc48:	d8c02915 	stw	r3,164(sp)
 800bc4c:	90a4703a 	and	r18,r18,r2
 800bc50:	df002783 	ldbu	fp,158(sp)
 800bc54:	d8c02b15 	stw	r3,172(sp)
 800bc58:	d8002a15 	stw	zero,168(sp)
 800bc5c:	d8003215 	stw	zero,200(sp)
 800bc60:	003b0706 	br	800a880 <___vfprintf_internal_r+0x774>
 800bc64:	d8c02e17 	ldw	r3,184(sp)
 800bc68:	1cc00017 	ldw	r19,0(r3)
 800bc6c:	18c00104 	addi	r3,r3,4
 800bc70:	d8c02e15 	stw	r3,184(sp)
 800bc74:	982dd7fa 	srai	r22,r19,31
 800bc78:	b005883a 	mov	r2,r22
 800bc7c:	003a7706 	br	800a65c <___vfprintf_internal_r+0x550>
 800bc80:	d8c02e17 	ldw	r3,184(sp)
 800bc84:	d9002f17 	ldw	r4,188(sp)
 800bc88:	18800017 	ldw	r2,0(r3)
 800bc8c:	18c00104 	addi	r3,r3,4
 800bc90:	d8c02e15 	stw	r3,184(sp)
 800bc94:	11000015 	stw	r4,0(r2)
 800bc98:	00395406 	br	800a1ec <___vfprintf_internal_r+0xe0>
 800bc9c:	d9002e17 	ldw	r4,184(sp)
 800bca0:	002d883a 	mov	r22,zero
 800bca4:	24c00017 	ldw	r19,0(r4)
 800bca8:	21000104 	addi	r4,r4,4
 800bcac:	d9002e15 	stw	r4,184(sp)
 800bcb0:	003c0706 	br	800acd0 <___vfprintf_internal_r+0xbc4>
 800bcb4:	d9402e17 	ldw	r5,184(sp)
 800bcb8:	d8c02a17 	ldw	r3,168(sp)
 800bcbc:	002d883a 	mov	r22,zero
 800bcc0:	28800104 	addi	r2,r5,4
 800bcc4:	2cc0000b 	ldhu	r19,0(r5)
 800bcc8:	183dc10e 	bge	r3,zero,800b3d0 <___vfprintf_internal_r+0x12c4>
 800bccc:	003f7506 	br	800baa4 <___vfprintf_internal_r+0x1998>
 800bcd0:	040200b4 	movhi	r16,2050
 800bcd4:	8428c404 	addi	r16,r16,-23792
 800bcd8:	003aa706 	br	800a778 <___vfprintf_internal_r+0x66c>
 800bcdc:	d9002d17 	ldw	r4,180(sp)
 800bce0:	d9801e04 	addi	r6,sp,120
 800bce4:	b80b883a 	mov	r5,r23
 800bce8:	8010d980 	call	8010d98 <__sprint_r>
 800bcec:	103a0b1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bcf0:	dc402617 	ldw	r17,152(sp)
 800bcf4:	d8c02017 	ldw	r3,128(sp)
 800bcf8:	da000404 	addi	r8,sp,16
 800bcfc:	003f9c06 	br	800bb70 <___vfprintf_internal_r+0x1a64>
 800bd00:	ac400043 	ldbu	r17,1(r21)
 800bd04:	84000814 	ori	r16,r16,32
 800bd08:	ad400044 	addi	r21,r21,1
 800bd0c:	8c403fcc 	andi	r17,r17,255
 800bd10:	8c40201c 	xori	r17,r17,128
 800bd14:	8c7fe004 	addi	r17,r17,-128
 800bd18:	00395e06 	br	800a294 <___vfprintf_internal_r+0x188>
 800bd1c:	d8c02e15 	stw	r3,184(sp)
 800bd20:	0039883a 	mov	fp,zero
 800bd24:	003e3506 	br	800b5fc <___vfprintf_internal_r+0x14f0>
 800bd28:	d9002d17 	ldw	r4,180(sp)
 800bd2c:	d9801e04 	addi	r6,sp,120
 800bd30:	b80b883a 	mov	r5,r23
 800bd34:	8010d980 	call	8010d98 <__sprint_r>
 800bd38:	1039f81e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bd3c:	d8c02017 	ldw	r3,128(sp)
 800bd40:	da000404 	addi	r8,sp,16
 800bd44:	003cd006 	br	800b088 <___vfprintf_internal_r+0xf7c>
 800bd48:	8009883a 	mov	r4,r16
 800bd4c:	df003d15 	stw	fp,244(sp)
 800bd50:	800a0740 	call	800a074 <strlen>
 800bd54:	d8802b15 	stw	r2,172(sp)
 800bd58:	da003d17 	ldw	r8,244(sp)
 800bd5c:	103c200e 	bge	r2,zero,800ade0 <___vfprintf_internal_r+0xcd4>
 800bd60:	0005883a 	mov	r2,zero
 800bd64:	003c1e06 	br	800ade0 <___vfprintf_internal_r+0xcd4>
 800bd68:	d9002d17 	ldw	r4,180(sp)
 800bd6c:	d9801e04 	addi	r6,sp,120
 800bd70:	b80b883a 	mov	r5,r23
 800bd74:	8010d980 	call	8010d98 <__sprint_r>
 800bd78:	1039e81e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bd7c:	d8c02017 	ldw	r3,128(sp)
 800bd80:	d8801f17 	ldw	r2,124(sp)
 800bd84:	da000404 	addi	r8,sp,16
 800bd88:	d9403317 	ldw	r5,204(sp)
 800bd8c:	10800044 	addi	r2,r2,1
 800bd90:	44000015 	stw	r16,0(r8)
 800bd94:	28c7883a 	add	r3,r5,r3
 800bd98:	003b5b06 	br	800ab08 <___vfprintf_internal_r+0x9fc>
 800bd9c:	010200b4 	movhi	r4,2050
 800bda0:	2128d884 	addi	r4,r4,-23710
 800bda4:	d9003515 	stw	r4,212(sp)
 800bda8:	003af206 	br	800a974 <___vfprintf_internal_r+0x868>
 800bdac:	013fffc4 	movi	r4,-1
 800bdb0:	003a0806 	br	800a5d4 <___vfprintf_internal_r+0x4c8>
 800bdb4:	0023883a 	mov	r17,zero
 800bdb8:	003d9d06 	br	800b430 <___vfprintf_internal_r+0x1324>
 800bdbc:	d9002d17 	ldw	r4,180(sp)
 800bdc0:	d9801e04 	addi	r6,sp,120
 800bdc4:	b80b883a 	mov	r5,r23
 800bdc8:	8010d980 	call	8010d98 <__sprint_r>
 800bdcc:	1039d31e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800bdd0:	d8c02017 	ldw	r3,128(sp)
 800bdd4:	da000404 	addi	r8,sp,16
 800bdd8:	003d9406 	br	800b42c <___vfprintf_internal_r+0x1320>
 800bddc:	010200b4 	movhi	r4,2050
 800bde0:	2128d484 	addi	r4,r4,-23726
 800bde4:	d9002c15 	stw	r4,176(sp)
 800bde8:	d9002c17 	ldw	r4,176(sp)
 800bdec:	1c47883a 	add	r3,r3,r17
 800bdf0:	10800044 	addi	r2,r2,1
 800bdf4:	41000015 	stw	r4,0(r8)
 800bdf8:	44400115 	stw	r17,4(r8)
 800bdfc:	d8c02015 	stw	r3,128(sp)
 800be00:	d8801f15 	stw	r2,124(sp)
 800be04:	010001c4 	movi	r4,7
 800be08:	20bfd716 	blt	r4,r2,800bd68 <___vfprintf_internal_r+0x1c5c>
 800be0c:	42000204 	addi	r8,r8,8
 800be10:	003fdd06 	br	800bd88 <___vfprintf_internal_r+0x1c7c>
 800be14:	d9002d17 	ldw	r4,180(sp)
 800be18:	d9801e04 	addi	r6,sp,120
 800be1c:	b80b883a 	mov	r5,r23
 800be20:	8010d980 	call	8010d98 <__sprint_r>
 800be24:	1039bd1e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800be28:	d8802617 	ldw	r2,152(sp)
 800be2c:	d8c02017 	ldw	r3,128(sp)
 800be30:	da000404 	addi	r8,sp,16
 800be34:	003e1006 	br	800b678 <___vfprintf_internal_r+0x156c>
 800be38:	00800044 	movi	r2,1
 800be3c:	10803fcc 	andi	r2,r2,255
 800be40:	00c00044 	movi	r3,1
 800be44:	10fa0d26 	beq	r2,r3,800a67c <___vfprintf_internal_r+0x570>
 800be48:	00c00084 	movi	r3,2
 800be4c:	10fbaf26 	beq	r2,r3,800ad0c <___vfprintf_internal_r+0xc00>
 800be50:	003a6d06 	br	800a808 <___vfprintf_internal_r+0x6fc>
 800be54:	010200b4 	movhi	r4,2050
 800be58:	2128d884 	addi	r4,r4,-23710
 800be5c:	d9003515 	stw	r4,212(sp)
 800be60:	003b5406 	br	800abb4 <___vfprintf_internal_r+0xaa8>
 800be64:	d8802a17 	ldw	r2,168(sp)
 800be68:	00c00184 	movi	r3,6
 800be6c:	1880012e 	bgeu	r3,r2,800be74 <___vfprintf_internal_r+0x1d68>
 800be70:	1805883a 	mov	r2,r3
 800be74:	d8802b15 	stw	r2,172(sp)
 800be78:	1000ef16 	blt	r2,zero,800c238 <___vfprintf_internal_r+0x212c>
 800be7c:	040200b4 	movhi	r16,2050
 800be80:	d8802915 	stw	r2,164(sp)
 800be84:	dcc02e15 	stw	r19,184(sp)
 800be88:	d8002a15 	stw	zero,168(sp)
 800be8c:	d8003215 	stw	zero,200(sp)
 800be90:	8428d204 	addi	r16,r16,-23736
 800be94:	0039883a 	mov	fp,zero
 800be98:	003a8006 	br	800a89c <___vfprintf_internal_r+0x790>
 800be9c:	0021883a 	mov	r16,zero
 800bea0:	003e0706 	br	800b6c0 <___vfprintf_internal_r+0x15b4>
 800bea4:	d9002d17 	ldw	r4,180(sp)
 800bea8:	d9801e04 	addi	r6,sp,120
 800beac:	b80b883a 	mov	r5,r23
 800beb0:	8010d980 	call	8010d98 <__sprint_r>
 800beb4:	1039991e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800beb8:	d8802617 	ldw	r2,152(sp)
 800bebc:	d9403317 	ldw	r5,204(sp)
 800bec0:	d8c02017 	ldw	r3,128(sp)
 800bec4:	da000404 	addi	r8,sp,16
 800bec8:	2885c83a 	sub	r2,r5,r2
 800becc:	003dfb06 	br	800b6bc <___vfprintf_internal_r+0x15b0>
 800bed0:	9080004c 	andi	r2,r18,1
 800bed4:	103e8f1e 	bne	r2,zero,800b914 <___vfprintf_internal_r+0x1808>
 800bed8:	d8802117 	ldw	r2,132(sp)
 800bedc:	003e9e06 	br	800b958 <___vfprintf_internal_r+0x184c>
 800bee0:	1025883a 	mov	r18,r2
 800bee4:	0039883a 	mov	fp,zero
 800bee8:	00800084 	movi	r2,2
 800beec:	003fd306 	br	800be3c <___vfprintf_internal_r+0x1d30>
 800bef0:	07000b44 	movi	fp,45
 800bef4:	df002785 	stb	fp,158(sp)
 800bef8:	003a1b06 	br	800a768 <___vfprintf_internal_r+0x65c>
 800befc:	00c00b44 	movi	r3,45
 800bf00:	d8c02785 	stb	r3,158(sp)
 800bf04:	d8802915 	stw	r2,164(sp)
 800bf08:	dc802c17 	ldw	r18,176(sp)
 800bf0c:	d8002a15 	stw	zero,168(sp)
 800bf10:	07000b44 	movi	fp,45
 800bf14:	003a5e06 	br	800a890 <___vfprintf_internal_r+0x784>
 800bf18:	040200b4 	movhi	r16,2050
 800bf1c:	8428c704 	addi	r16,r16,-23780
 800bf20:	003f4706 	br	800bc40 <___vfprintf_internal_r+0x1b34>
 800bf24:	d9002e17 	ldw	r4,184(sp)
 800bf28:	d9402f17 	ldw	r5,188(sp)
 800bf2c:	20800017 	ldw	r2,0(r4)
 800bf30:	21000104 	addi	r4,r4,4
 800bf34:	d9002e15 	stw	r4,184(sp)
 800bf38:	11400015 	stw	r5,0(r2)
 800bf3c:	0038ab06 	br	800a1ec <___vfprintf_internal_r+0xe0>
 800bf40:	dd802617 	ldw	r22,152(sp)
 800bf44:	00bfff44 	movi	r2,-3
 800bf48:	b0801c16 	blt	r22,r2,800bfbc <___vfprintf_internal_r+0x1eb0>
 800bf4c:	d9402a17 	ldw	r5,168(sp)
 800bf50:	2d801a16 	blt	r5,r22,800bfbc <___vfprintf_internal_r+0x1eb0>
 800bf54:	dd803215 	stw	r22,200(sp)
 800bf58:	003e8906 	br	800b980 <___vfprintf_internal_r+0x1874>
 800bf5c:	010200b4 	movhi	r4,2050
 800bf60:	2128d484 	addi	r4,r4,-23726
 800bf64:	d9002c15 	stw	r4,176(sp)
 800bf68:	003c9106 	br	800b1b0 <___vfprintf_internal_r+0x10a4>
 800bf6c:	e005883a 	mov	r2,fp
 800bf70:	003e7906 	br	800b958 <___vfprintf_internal_r+0x184c>
 800bf74:	d9002a17 	ldw	r4,168(sp)
 800bf78:	df002783 	ldbu	fp,158(sp)
 800bf7c:	dcc02e15 	stw	r19,184(sp)
 800bf80:	d9002915 	stw	r4,164(sp)
 800bf84:	d9002b15 	stw	r4,172(sp)
 800bf88:	d8002a15 	stw	zero,168(sp)
 800bf8c:	d8003215 	stw	zero,200(sp)
 800bf90:	003a3b06 	br	800a880 <___vfprintf_internal_r+0x774>
 800bf94:	9080004c 	andi	r2,r18,1
 800bf98:	0039883a 	mov	fp,zero
 800bf9c:	10000426 	beq	r2,zero,800bfb0 <___vfprintf_internal_r+0x1ea4>
 800bfa0:	00800c04 	movi	r2,48
 800bfa4:	dc001dc4 	addi	r16,sp,119
 800bfa8:	d8801dc5 	stb	r2,119(sp)
 800bfac:	003b6406 	br	800ad40 <___vfprintf_internal_r+0xc34>
 800bfb0:	d8002b15 	stw	zero,172(sp)
 800bfb4:	dc001e04 	addi	r16,sp,120
 800bfb8:	003a2b06 	br	800a868 <___vfprintf_internal_r+0x75c>
 800bfbc:	8c7fff84 	addi	r17,r17,-2
 800bfc0:	b5bfffc4 	addi	r22,r22,-1
 800bfc4:	dd802615 	stw	r22,152(sp)
 800bfc8:	dc4022c5 	stb	r17,139(sp)
 800bfcc:	b000bf16 	blt	r22,zero,800c2cc <___vfprintf_internal_r+0x21c0>
 800bfd0:	00800ac4 	movi	r2,43
 800bfd4:	d8802305 	stb	r2,140(sp)
 800bfd8:	00800244 	movi	r2,9
 800bfdc:	15807016 	blt	r2,r22,800c1a0 <___vfprintf_internal_r+0x2094>
 800bfe0:	00800c04 	movi	r2,48
 800bfe4:	b5800c04 	addi	r22,r22,48
 800bfe8:	d8802345 	stb	r2,141(sp)
 800bfec:	dd802385 	stb	r22,142(sp)
 800bff0:	d88023c4 	addi	r2,sp,143
 800bff4:	df0022c4 	addi	fp,sp,139
 800bff8:	d8c03317 	ldw	r3,204(sp)
 800bffc:	1739c83a 	sub	fp,r2,fp
 800c000:	d9003317 	ldw	r4,204(sp)
 800c004:	e0c7883a 	add	r3,fp,r3
 800c008:	df003a15 	stw	fp,232(sp)
 800c00c:	d8c02b15 	stw	r3,172(sp)
 800c010:	00800044 	movi	r2,1
 800c014:	1100b30e 	bge	r2,r4,800c2e4 <___vfprintf_internal_r+0x21d8>
 800c018:	d8c02b17 	ldw	r3,172(sp)
 800c01c:	18c00044 	addi	r3,r3,1
 800c020:	d8c02b15 	stw	r3,172(sp)
 800c024:	1805883a 	mov	r2,r3
 800c028:	1800ac16 	blt	r3,zero,800c2dc <___vfprintf_internal_r+0x21d0>
 800c02c:	d8003215 	stw	zero,200(sp)
 800c030:	003e5d06 	br	800b9a8 <___vfprintf_internal_r+0x189c>
 800c034:	d9002d17 	ldw	r4,180(sp)
 800c038:	d9801e04 	addi	r6,sp,120
 800c03c:	b80b883a 	mov	r5,r23
 800c040:	8010d980 	call	8010d98 <__sprint_r>
 800c044:	1039351e 	bne	r2,zero,800a51c <___vfprintf_internal_r+0x410>
 800c048:	dc402617 	ldw	r17,152(sp)
 800c04c:	d8c02017 	ldw	r3,128(sp)
 800c050:	d8801f17 	ldw	r2,124(sp)
 800c054:	da000404 	addi	r8,sp,16
 800c058:	003ed606 	br	800bbb4 <___vfprintf_internal_r+0x1aa8>
 800c05c:	182b883a 	mov	r21,r3
 800c060:	d8002a15 	stw	zero,168(sp)
 800c064:	00388c06 	br	800a298 <___vfprintf_internal_r+0x18c>
 800c068:	d8802a17 	ldw	r2,168(sp)
 800c06c:	103e071e 	bne	r2,zero,800b88c <___vfprintf_internal_r+0x1780>
 800c070:	dc002a15 	stw	r16,168(sp)
 800c074:	003e0506 	br	800b88c <___vfprintf_internal_r+0x1780>
 800c078:	d9002a17 	ldw	r4,168(sp)
 800c07c:	20c00044 	addi	r3,r4,1
 800c080:	003e0f06 	br	800b8c0 <___vfprintf_internal_r+0x17b4>
 800c084:	01400184 	movi	r5,6
 800c088:	d9402a15 	stw	r5,168(sp)
 800c08c:	003dff06 	br	800b88c <___vfprintf_internal_r+0x1780>
 800c090:	d8802104 	addi	r2,sp,132
 800c094:	d8800315 	stw	r2,12(sp)
 800c098:	d8802504 	addi	r2,sp,148
 800c09c:	d8800215 	stw	r2,8(sp)
 800c0a0:	d8802604 	addi	r2,sp,152
 800c0a4:	d8800115 	stw	r2,4(sp)
 800c0a8:	d8802a17 	ldw	r2,168(sp)
 800c0ac:	d9403617 	ldw	r5,216(sp)
 800c0b0:	d9002d17 	ldw	r4,180(sp)
 800c0b4:	d8800015 	stw	r2,0(sp)
 800c0b8:	01c000c4 	movi	r7,3
 800c0bc:	980d883a 	mov	r6,r19
 800c0c0:	da003d15 	stw	r8,244(sp)
 800c0c4:	800c8f00 	call	800c8f0 <_dtoa_r>
 800c0c8:	d8c02a17 	ldw	r3,168(sp)
 800c0cc:	da003d17 	ldw	r8,244(sp)
 800c0d0:	1021883a 	mov	r16,r2
 800c0d4:	10f9883a 	add	fp,r2,r3
 800c0d8:	81000007 	ldb	r4,0(r16)
 800c0dc:	00800c04 	movi	r2,48
 800c0e0:	20805e26 	beq	r4,r2,800c25c <___vfprintf_internal_r+0x2150>
 800c0e4:	d8c02617 	ldw	r3,152(sp)
 800c0e8:	e0f9883a 	add	fp,fp,r3
 800c0ec:	003e0a06 	br	800b918 <___vfprintf_internal_r+0x180c>
 800c0f0:	00c00b44 	movi	r3,45
 800c0f4:	24e0003c 	xorhi	r19,r4,32768
 800c0f8:	d8c02905 	stb	r3,164(sp)
 800c0fc:	003de906 	br	800b8a4 <___vfprintf_internal_r+0x1798>
 800c100:	d8c03217 	ldw	r3,200(sp)
 800c104:	00c07a0e 	bge	zero,r3,800c2f0 <___vfprintf_internal_r+0x21e4>
 800c108:	00800044 	movi	r2,1
 800c10c:	d9003317 	ldw	r4,204(sp)
 800c110:	1105883a 	add	r2,r2,r4
 800c114:	d8802b15 	stw	r2,172(sp)
 800c118:	10004e16 	blt	r2,zero,800c254 <___vfprintf_internal_r+0x2148>
 800c11c:	044019c4 	movi	r17,103
 800c120:	003e2106 	br	800b9a8 <___vfprintf_internal_r+0x189c>
 800c124:	d9002a17 	ldw	r4,168(sp)
 800c128:	d8802104 	addi	r2,sp,132
 800c12c:	d8800315 	stw	r2,12(sp)
 800c130:	d9000015 	stw	r4,0(sp)
 800c134:	d8802504 	addi	r2,sp,148
 800c138:	d9403617 	ldw	r5,216(sp)
 800c13c:	d9002d17 	ldw	r4,180(sp)
 800c140:	d8800215 	stw	r2,8(sp)
 800c144:	d8802604 	addi	r2,sp,152
 800c148:	d8800115 	stw	r2,4(sp)
 800c14c:	01c000c4 	movi	r7,3
 800c150:	980d883a 	mov	r6,r19
 800c154:	da003d15 	stw	r8,244(sp)
 800c158:	800c8f00 	call	800c8f0 <_dtoa_r>
 800c15c:	d8c02a17 	ldw	r3,168(sp)
 800c160:	da003d17 	ldw	r8,244(sp)
 800c164:	1021883a 	mov	r16,r2
 800c168:	00801184 	movi	r2,70
 800c16c:	80f9883a 	add	fp,r16,r3
 800c170:	88bfd926 	beq	r17,r2,800c0d8 <___vfprintf_internal_r+0x1fcc>
 800c174:	003de806 	br	800b918 <___vfprintf_internal_r+0x180c>
 800c178:	d9002a17 	ldw	r4,168(sp)
 800c17c:	00c04d0e 	bge	zero,r3,800c2b4 <___vfprintf_internal_r+0x21a8>
 800c180:	2000441e 	bne	r4,zero,800c294 <___vfprintf_internal_r+0x2188>
 800c184:	9480004c 	andi	r18,r18,1
 800c188:	9000421e 	bne	r18,zero,800c294 <___vfprintf_internal_r+0x2188>
 800c18c:	1805883a 	mov	r2,r3
 800c190:	18006f16 	blt	r3,zero,800c350 <___vfprintf_internal_r+0x2244>
 800c194:	d8c03217 	ldw	r3,200(sp)
 800c198:	d8c02b15 	stw	r3,172(sp)
 800c19c:	003e0206 	br	800b9a8 <___vfprintf_internal_r+0x189c>
 800c1a0:	df0022c4 	addi	fp,sp,139
 800c1a4:	dc002a15 	stw	r16,168(sp)
 800c1a8:	4027883a 	mov	r19,r8
 800c1ac:	e021883a 	mov	r16,fp
 800c1b0:	b009883a 	mov	r4,r22
 800c1b4:	01400284 	movi	r5,10
 800c1b8:	80086cc0 	call	80086cc <__modsi3>
 800c1bc:	10800c04 	addi	r2,r2,48
 800c1c0:	843fffc4 	addi	r16,r16,-1
 800c1c4:	b009883a 	mov	r4,r22
 800c1c8:	01400284 	movi	r5,10
 800c1cc:	80800005 	stb	r2,0(r16)
 800c1d0:	80086480 	call	8008648 <__divsi3>
 800c1d4:	102d883a 	mov	r22,r2
 800c1d8:	00800244 	movi	r2,9
 800c1dc:	15bff416 	blt	r2,r22,800c1b0 <___vfprintf_internal_r+0x20a4>
 800c1e0:	9811883a 	mov	r8,r19
 800c1e4:	b0800c04 	addi	r2,r22,48
 800c1e8:	8027883a 	mov	r19,r16
 800c1ec:	997fffc4 	addi	r5,r19,-1
 800c1f0:	98bfffc5 	stb	r2,-1(r19)
 800c1f4:	dc002a17 	ldw	r16,168(sp)
 800c1f8:	2f006d2e 	bgeu	r5,fp,800c3b0 <___vfprintf_internal_r+0x22a4>
 800c1fc:	d9c02384 	addi	r7,sp,142
 800c200:	3ccfc83a 	sub	r7,r7,r19
 800c204:	d9002344 	addi	r4,sp,141
 800c208:	e1cf883a 	add	r7,fp,r7
 800c20c:	00000106 	br	800c214 <___vfprintf_internal_r+0x2108>
 800c210:	28800003 	ldbu	r2,0(r5)
 800c214:	20800005 	stb	r2,0(r4)
 800c218:	21000044 	addi	r4,r4,1
 800c21c:	29400044 	addi	r5,r5,1
 800c220:	393ffb1e 	bne	r7,r4,800c210 <___vfprintf_internal_r+0x2104>
 800c224:	d8802304 	addi	r2,sp,140
 800c228:	14c5c83a 	sub	r2,r2,r19
 800c22c:	d8c02344 	addi	r3,sp,141
 800c230:	1885883a 	add	r2,r3,r2
 800c234:	003f7006 	br	800bff8 <___vfprintf_internal_r+0x1eec>
 800c238:	0005883a 	mov	r2,zero
 800c23c:	003f0f06 	br	800be7c <___vfprintf_internal_r+0x1d70>
 800c240:	d8c03217 	ldw	r3,200(sp)
 800c244:	18c00044 	addi	r3,r3,1
 800c248:	d8c02b15 	stw	r3,172(sp)
 800c24c:	1805883a 	mov	r2,r3
 800c250:	183fb20e 	bge	r3,zero,800c11c <___vfprintf_internal_r+0x2010>
 800c254:	0005883a 	mov	r2,zero
 800c258:	003fb006 	br	800c11c <___vfprintf_internal_r+0x2010>
 800c25c:	d9003617 	ldw	r4,216(sp)
 800c260:	000d883a 	mov	r6,zero
 800c264:	000f883a 	mov	r7,zero
 800c268:	980b883a 	mov	r5,r19
 800c26c:	d8c03c15 	stw	r3,240(sp)
 800c270:	da003d15 	stw	r8,244(sp)
 800c274:	80148f80 	call	80148f8 <__eqdf2>
 800c278:	d8c03c17 	ldw	r3,240(sp)
 800c27c:	da003d17 	ldw	r8,244(sp)
 800c280:	103f9826 	beq	r2,zero,800c0e4 <___vfprintf_internal_r+0x1fd8>
 800c284:	00800044 	movi	r2,1
 800c288:	10c7c83a 	sub	r3,r2,r3
 800c28c:	d8c02615 	stw	r3,152(sp)
 800c290:	003f9506 	br	800c0e8 <___vfprintf_internal_r+0x1fdc>
 800c294:	d9002a17 	ldw	r4,168(sp)
 800c298:	d8c03217 	ldw	r3,200(sp)
 800c29c:	20800044 	addi	r2,r4,1
 800c2a0:	1885883a 	add	r2,r3,r2
 800c2a4:	d8802b15 	stw	r2,172(sp)
 800c2a8:	103dbf0e 	bge	r2,zero,800b9a8 <___vfprintf_internal_r+0x189c>
 800c2ac:	0005883a 	mov	r2,zero
 800c2b0:	003dbd06 	br	800b9a8 <___vfprintf_internal_r+0x189c>
 800c2b4:	2000201e 	bne	r4,zero,800c338 <___vfprintf_internal_r+0x222c>
 800c2b8:	9480004c 	andi	r18,r18,1
 800c2bc:	90001e1e 	bne	r18,zero,800c338 <___vfprintf_internal_r+0x222c>
 800c2c0:	00800044 	movi	r2,1
 800c2c4:	d8802b15 	stw	r2,172(sp)
 800c2c8:	003db706 	br	800b9a8 <___vfprintf_internal_r+0x189c>
 800c2cc:	00800b44 	movi	r2,45
 800c2d0:	05adc83a 	sub	r22,zero,r22
 800c2d4:	d8802305 	stb	r2,140(sp)
 800c2d8:	003f3f06 	br	800bfd8 <___vfprintf_internal_r+0x1ecc>
 800c2dc:	0005883a 	mov	r2,zero
 800c2e0:	003f5206 	br	800c02c <___vfprintf_internal_r+0x1f20>
 800c2e4:	90a4703a 	and	r18,r18,r2
 800c2e8:	903f4e26 	beq	r18,zero,800c024 <___vfprintf_internal_r+0x1f18>
 800c2ec:	003f4a06 	br	800c018 <___vfprintf_internal_r+0x1f0c>
 800c2f0:	00800084 	movi	r2,2
 800c2f4:	10c5c83a 	sub	r2,r2,r3
 800c2f8:	003f8406 	br	800c10c <___vfprintf_internal_r+0x2000>
 800c2fc:	d9402e17 	ldw	r5,184(sp)
 800c300:	d9002e17 	ldw	r4,184(sp)
 800c304:	ac400043 	ldbu	r17,1(r21)
 800c308:	29400017 	ldw	r5,0(r5)
 800c30c:	20800104 	addi	r2,r4,4
 800c310:	d8802e15 	stw	r2,184(sp)
 800c314:	d9402a15 	stw	r5,168(sp)
 800c318:	182b883a 	mov	r21,r3
 800c31c:	283e7b0e 	bge	r5,zero,800bd0c <___vfprintf_internal_r+0x1c00>
 800c320:	8c403fcc 	andi	r17,r17,255
 800c324:	017fffc4 	movi	r5,-1
 800c328:	8c40201c 	xori	r17,r17,128
 800c32c:	d9402a15 	stw	r5,168(sp)
 800c330:	8c7fe004 	addi	r17,r17,-128
 800c334:	0037d706 	br	800a294 <___vfprintf_internal_r+0x188>
 800c338:	d8c02a17 	ldw	r3,168(sp)
 800c33c:	18c00084 	addi	r3,r3,2
 800c340:	d8c02b15 	stw	r3,172(sp)
 800c344:	1805883a 	mov	r2,r3
 800c348:	183d970e 	bge	r3,zero,800b9a8 <___vfprintf_internal_r+0x189c>
 800c34c:	003fd706 	br	800c2ac <___vfprintf_internal_r+0x21a0>
 800c350:	0005883a 	mov	r2,zero
 800c354:	003f8f06 	br	800c194 <___vfprintf_internal_r+0x2088>
 800c358:	9080004c 	andi	r2,r18,1
 800c35c:	103f821e 	bne	r2,zero,800c168 <___vfprintf_internal_r+0x205c>
 800c360:	d8802117 	ldw	r2,132(sp)
 800c364:	1405c83a 	sub	r2,r2,r16
 800c368:	d8803315 	stw	r2,204(sp)
 800c36c:	b47ef426 	beq	r22,r17,800bf40 <___vfprintf_internal_r+0x1e34>
 800c370:	dd802617 	ldw	r22,152(sp)
 800c374:	003f1206 	br	800bfc0 <___vfprintf_internal_r+0x1eb4>
 800c378:	d8c02b03 	ldbu	r3,172(sp)
 800c37c:	d8c02785 	stb	r3,158(sp)
 800c380:	0038df06 	br	800a700 <___vfprintf_internal_r+0x5f4>
 800c384:	d8c02b03 	ldbu	r3,172(sp)
 800c388:	d8c02785 	stb	r3,158(sp)
 800c38c:	0038aa06 	br	800a638 <___vfprintf_internal_r+0x52c>
 800c390:	d8c02b03 	ldbu	r3,172(sp)
 800c394:	d8c02785 	stb	r3,158(sp)
 800c398:	003a4306 	br	800aca8 <___vfprintf_internal_r+0xb9c>
 800c39c:	d8c02b03 	ldbu	r3,172(sp)
 800c3a0:	d8c02785 	stb	r3,158(sp)
 800c3a4:	003af506 	br	800af7c <___vfprintf_internal_r+0xe70>
 800c3a8:	0005883a 	mov	r2,zero
 800c3ac:	003d7b06 	br	800b99c <___vfprintf_internal_r+0x1890>
 800c3b0:	d8802344 	addi	r2,sp,141
 800c3b4:	003f1006 	br	800bff8 <___vfprintf_internal_r+0x1eec>
 800c3b8:	d8c02b03 	ldbu	r3,172(sp)
 800c3bc:	d8c02785 	stb	r3,158(sp)
 800c3c0:	0038fd06 	br	800a7b8 <___vfprintf_internal_r+0x6ac>
 800c3c4:	d8c02b03 	ldbu	r3,172(sp)
 800c3c8:	d8c02785 	stb	r3,158(sp)
 800c3cc:	003a9706 	br	800ae2c <___vfprintf_internal_r+0xd20>
 800c3d0:	d8c02b03 	ldbu	r3,172(sp)
 800c3d4:	d8c02785 	stb	r3,158(sp)
 800c3d8:	003a1806 	br	800ac3c <___vfprintf_internal_r+0xb30>
 800c3dc:	d8c02b03 	ldbu	r3,172(sp)
 800c3e0:	d8c02785 	stb	r3,158(sp)
 800c3e4:	003abe06 	br	800aee0 <___vfprintf_internal_r+0xdd4>

0800c3e8 <__vfprintf_internal>:
 800c3e8:	008200b4 	movhi	r2,2050
 800c3ec:	10b1bc04 	addi	r2,r2,-14608
 800c3f0:	300f883a 	mov	r7,r6
 800c3f4:	280d883a 	mov	r6,r5
 800c3f8:	200b883a 	mov	r5,r4
 800c3fc:	11000017 	ldw	r4,0(r2)
 800c400:	800a10c1 	jmpi	800a10c <___vfprintf_internal_r>

0800c404 <__sbprintf>:
 800c404:	2880030b 	ldhu	r2,12(r5)
 800c408:	2ac01917 	ldw	r11,100(r5)
 800c40c:	2a80038b 	ldhu	r10,14(r5)
 800c410:	2a400717 	ldw	r9,28(r5)
 800c414:	2a000917 	ldw	r8,36(r5)
 800c418:	defee204 	addi	sp,sp,-1144
 800c41c:	00c10004 	movi	r3,1024
 800c420:	dc011a15 	stw	r16,1128(sp)
 800c424:	10bfff4c 	andi	r2,r2,65533
 800c428:	2821883a 	mov	r16,r5
 800c42c:	d8cb883a 	add	r5,sp,r3
 800c430:	dc811c15 	stw	r18,1136(sp)
 800c434:	dc411b15 	stw	r17,1132(sp)
 800c438:	dfc11d15 	stw	ra,1140(sp)
 800c43c:	2025883a 	mov	r18,r4
 800c440:	d881030d 	sth	r2,1036(sp)
 800c444:	dac11915 	stw	r11,1124(sp)
 800c448:	da81038d 	sth	r10,1038(sp)
 800c44c:	da410715 	stw	r9,1052(sp)
 800c450:	da010915 	stw	r8,1060(sp)
 800c454:	dec10015 	stw	sp,1024(sp)
 800c458:	dec10415 	stw	sp,1040(sp)
 800c45c:	d8c10215 	stw	r3,1032(sp)
 800c460:	d8c10515 	stw	r3,1044(sp)
 800c464:	d8010615 	stw	zero,1048(sp)
 800c468:	800a10c0 	call	800a10c <___vfprintf_internal_r>
 800c46c:	1023883a 	mov	r17,r2
 800c470:	10000416 	blt	r2,zero,800c484 <__sbprintf+0x80>
 800c474:	d9410004 	addi	r5,sp,1024
 800c478:	9009883a 	mov	r4,r18
 800c47c:	800e1940 	call	800e194 <_fflush_r>
 800c480:	10000d1e 	bne	r2,zero,800c4b8 <__sbprintf+0xb4>
 800c484:	d881030b 	ldhu	r2,1036(sp)
 800c488:	1080100c 	andi	r2,r2,64
 800c48c:	10000326 	beq	r2,zero,800c49c <__sbprintf+0x98>
 800c490:	8080030b 	ldhu	r2,12(r16)
 800c494:	10801014 	ori	r2,r2,64
 800c498:	8080030d 	sth	r2,12(r16)
 800c49c:	8805883a 	mov	r2,r17
 800c4a0:	dfc11d17 	ldw	ra,1140(sp)
 800c4a4:	dc811c17 	ldw	r18,1136(sp)
 800c4a8:	dc411b17 	ldw	r17,1132(sp)
 800c4ac:	dc011a17 	ldw	r16,1128(sp)
 800c4b0:	dec11e04 	addi	sp,sp,1144
 800c4b4:	f800283a 	ret
 800c4b8:	047fffc4 	movi	r17,-1
 800c4bc:	003ff106 	br	800c484 <__sbprintf+0x80>

0800c4c0 <_write_r>:
 800c4c0:	defffd04 	addi	sp,sp,-12
 800c4c4:	2805883a 	mov	r2,r5
 800c4c8:	dc000015 	stw	r16,0(sp)
 800c4cc:	040200b4 	movhi	r16,2050
 800c4d0:	dc400115 	stw	r17,4(sp)
 800c4d4:	300b883a 	mov	r5,r6
 800c4d8:	843a6704 	addi	r16,r16,-5732
 800c4dc:	2023883a 	mov	r17,r4
 800c4e0:	380d883a 	mov	r6,r7
 800c4e4:	1009883a 	mov	r4,r2
 800c4e8:	dfc00215 	stw	ra,8(sp)
 800c4ec:	80000015 	stw	zero,0(r16)
 800c4f0:	8016e500 	call	8016e50 <write>
 800c4f4:	00ffffc4 	movi	r3,-1
 800c4f8:	10c00526 	beq	r2,r3,800c510 <_write_r+0x50>
 800c4fc:	dfc00217 	ldw	ra,8(sp)
 800c500:	dc400117 	ldw	r17,4(sp)
 800c504:	dc000017 	ldw	r16,0(sp)
 800c508:	dec00304 	addi	sp,sp,12
 800c50c:	f800283a 	ret
 800c510:	80c00017 	ldw	r3,0(r16)
 800c514:	183ff926 	beq	r3,zero,800c4fc <_write_r+0x3c>
 800c518:	88c00015 	stw	r3,0(r17)
 800c51c:	003ff706 	br	800c4fc <_write_r+0x3c>

0800c520 <__swsetup_r>:
 800c520:	008200b4 	movhi	r2,2050
 800c524:	defffd04 	addi	sp,sp,-12
 800c528:	10b1bc04 	addi	r2,r2,-14608
 800c52c:	dc400115 	stw	r17,4(sp)
 800c530:	2023883a 	mov	r17,r4
 800c534:	11000017 	ldw	r4,0(r2)
 800c538:	dc000015 	stw	r16,0(sp)
 800c53c:	dfc00215 	stw	ra,8(sp)
 800c540:	2821883a 	mov	r16,r5
 800c544:	20000226 	beq	r4,zero,800c550 <__swsetup_r+0x30>
 800c548:	20800e17 	ldw	r2,56(r4)
 800c54c:	10003126 	beq	r2,zero,800c614 <__swsetup_r+0xf4>
 800c550:	8080030b 	ldhu	r2,12(r16)
 800c554:	10c0020c 	andi	r3,r2,8
 800c558:	1009883a 	mov	r4,r2
 800c55c:	18000f26 	beq	r3,zero,800c59c <__swsetup_r+0x7c>
 800c560:	80c00417 	ldw	r3,16(r16)
 800c564:	18001526 	beq	r3,zero,800c5bc <__swsetup_r+0x9c>
 800c568:	1100004c 	andi	r4,r2,1
 800c56c:	20001c1e 	bne	r4,zero,800c5e0 <__swsetup_r+0xc0>
 800c570:	1080008c 	andi	r2,r2,2
 800c574:	1000291e 	bne	r2,zero,800c61c <__swsetup_r+0xfc>
 800c578:	80800517 	ldw	r2,20(r16)
 800c57c:	80800215 	stw	r2,8(r16)
 800c580:	18001c26 	beq	r3,zero,800c5f4 <__swsetup_r+0xd4>
 800c584:	0005883a 	mov	r2,zero
 800c588:	dfc00217 	ldw	ra,8(sp)
 800c58c:	dc400117 	ldw	r17,4(sp)
 800c590:	dc000017 	ldw	r16,0(sp)
 800c594:	dec00304 	addi	sp,sp,12
 800c598:	f800283a 	ret
 800c59c:	2080040c 	andi	r2,r4,16
 800c5a0:	10002e26 	beq	r2,zero,800c65c <__swsetup_r+0x13c>
 800c5a4:	2080010c 	andi	r2,r4,4
 800c5a8:	10001e1e 	bne	r2,zero,800c624 <__swsetup_r+0x104>
 800c5ac:	80c00417 	ldw	r3,16(r16)
 800c5b0:	20800214 	ori	r2,r4,8
 800c5b4:	8080030d 	sth	r2,12(r16)
 800c5b8:	183feb1e 	bne	r3,zero,800c568 <__swsetup_r+0x48>
 800c5bc:	1100a00c 	andi	r4,r2,640
 800c5c0:	01408004 	movi	r5,512
 800c5c4:	217fe826 	beq	r4,r5,800c568 <__swsetup_r+0x48>
 800c5c8:	800b883a 	mov	r5,r16
 800c5cc:	8809883a 	mov	r4,r17
 800c5d0:	8008f1c0 	call	8008f1c <__smakebuf_r>
 800c5d4:	8080030b 	ldhu	r2,12(r16)
 800c5d8:	80c00417 	ldw	r3,16(r16)
 800c5dc:	003fe206 	br	800c568 <__swsetup_r+0x48>
 800c5e0:	80800517 	ldw	r2,20(r16)
 800c5e4:	80000215 	stw	zero,8(r16)
 800c5e8:	0085c83a 	sub	r2,zero,r2
 800c5ec:	80800615 	stw	r2,24(r16)
 800c5f0:	183fe41e 	bne	r3,zero,800c584 <__swsetup_r+0x64>
 800c5f4:	80c0030b 	ldhu	r3,12(r16)
 800c5f8:	0005883a 	mov	r2,zero
 800c5fc:	1900200c 	andi	r4,r3,128
 800c600:	203fe126 	beq	r4,zero,800c588 <__swsetup_r+0x68>
 800c604:	18c01014 	ori	r3,r3,64
 800c608:	80c0030d 	sth	r3,12(r16)
 800c60c:	00bfffc4 	movi	r2,-1
 800c610:	003fdd06 	br	800c588 <__swsetup_r+0x68>
 800c614:	800e5800 	call	800e580 <__sinit>
 800c618:	003fcd06 	br	800c550 <__swsetup_r+0x30>
 800c61c:	0005883a 	mov	r2,zero
 800c620:	003fd606 	br	800c57c <__swsetup_r+0x5c>
 800c624:	81400c17 	ldw	r5,48(r16)
 800c628:	28000626 	beq	r5,zero,800c644 <__swsetup_r+0x124>
 800c62c:	80801004 	addi	r2,r16,64
 800c630:	28800326 	beq	r5,r2,800c640 <__swsetup_r+0x120>
 800c634:	8809883a 	mov	r4,r17
 800c638:	800e7a00 	call	800e7a0 <_free_r>
 800c63c:	8100030b 	ldhu	r4,12(r16)
 800c640:	80000c15 	stw	zero,48(r16)
 800c644:	80c00417 	ldw	r3,16(r16)
 800c648:	00bff6c4 	movi	r2,-37
 800c64c:	1108703a 	and	r4,r2,r4
 800c650:	80000115 	stw	zero,4(r16)
 800c654:	80c00015 	stw	r3,0(r16)
 800c658:	003fd506 	br	800c5b0 <__swsetup_r+0x90>
 800c65c:	00800244 	movi	r2,9
 800c660:	88800015 	stw	r2,0(r17)
 800c664:	20801014 	ori	r2,r4,64
 800c668:	8080030d 	sth	r2,12(r16)
 800c66c:	00bfffc4 	movi	r2,-1
 800c670:	003fc506 	br	800c588 <__swsetup_r+0x68>

0800c674 <_close_r>:
 800c674:	defffd04 	addi	sp,sp,-12
 800c678:	dc000015 	stw	r16,0(sp)
 800c67c:	040200b4 	movhi	r16,2050
 800c680:	dc400115 	stw	r17,4(sp)
 800c684:	843a6704 	addi	r16,r16,-5732
 800c688:	2023883a 	mov	r17,r4
 800c68c:	2809883a 	mov	r4,r5
 800c690:	dfc00215 	stw	ra,8(sp)
 800c694:	80000015 	stw	zero,0(r16)
 800c698:	8015f5c0 	call	8015f5c <close>
 800c69c:	00ffffc4 	movi	r3,-1
 800c6a0:	10c00526 	beq	r2,r3,800c6b8 <_close_r+0x44>
 800c6a4:	dfc00217 	ldw	ra,8(sp)
 800c6a8:	dc400117 	ldw	r17,4(sp)
 800c6ac:	dc000017 	ldw	r16,0(sp)
 800c6b0:	dec00304 	addi	sp,sp,12
 800c6b4:	f800283a 	ret
 800c6b8:	80c00017 	ldw	r3,0(r16)
 800c6bc:	183ff926 	beq	r3,zero,800c6a4 <_close_r+0x30>
 800c6c0:	88c00015 	stw	r3,0(r17)
 800c6c4:	003ff706 	br	800c6a4 <_close_r+0x30>

0800c6c8 <quorem>:
 800c6c8:	defff204 	addi	sp,sp,-56
 800c6cc:	ddc00b15 	stw	r23,44(sp)
 800c6d0:	20800417 	ldw	r2,16(r4)
 800c6d4:	2dc00417 	ldw	r23,16(r5)
 800c6d8:	dfc00d15 	stw	ra,52(sp)
 800c6dc:	df000c15 	stw	fp,48(sp)
 800c6e0:	dd800a15 	stw	r22,40(sp)
 800c6e4:	dd400915 	stw	r21,36(sp)
 800c6e8:	dd000815 	stw	r20,32(sp)
 800c6ec:	dcc00715 	stw	r19,28(sp)
 800c6f0:	dc800615 	stw	r18,24(sp)
 800c6f4:	dc400515 	stw	r17,20(sp)
 800c6f8:	dc000415 	stw	r16,16(sp)
 800c6fc:	15c07a16 	blt	r2,r23,800c8e8 <quorem+0x220>
 800c700:	bdffffc4 	addi	r23,r23,-1
 800c704:	bde9883a 	add	r20,r23,r23
 800c708:	28c00504 	addi	r3,r5,20
 800c70c:	a529883a 	add	r20,r20,r20
 800c710:	1d39883a 	add	fp,r3,r20
 800c714:	24c00504 	addi	r19,r4,20
 800c718:	d9400215 	stw	r5,8(sp)
 800c71c:	9d29883a 	add	r20,r19,r20
 800c720:	e1400017 	ldw	r5,0(fp)
 800c724:	d9000015 	stw	r4,0(sp)
 800c728:	a1000017 	ldw	r4,0(r20)
 800c72c:	29400044 	addi	r5,r5,1
 800c730:	d8c00115 	stw	r3,4(sp)
 800c734:	dd000315 	stw	r20,12(sp)
 800c738:	80087400 	call	8008740 <__udivsi3>
 800c73c:	1025883a 	mov	r18,r2
 800c740:	10003026 	beq	r2,zero,800c804 <quorem+0x13c>
 800c744:	dc400117 	ldw	r17,4(sp)
 800c748:	9829883a 	mov	r20,r19
 800c74c:	002d883a 	mov	r22,zero
 800c750:	0021883a 	mov	r16,zero
 800c754:	8d400017 	ldw	r21,0(r17)
 800c758:	900b883a 	mov	r5,r18
 800c75c:	8c400104 	addi	r17,r17,4
 800c760:	a93fffcc 	andi	r4,r21,65535
 800c764:	80087fc0 	call	80087fc <__mulsi3>
 800c768:	a808d43a 	srli	r4,r21,16
 800c76c:	900b883a 	mov	r5,r18
 800c770:	15ad883a 	add	r22,r2,r22
 800c774:	80087fc0 	call	80087fc <__mulsi3>
 800c778:	a1000017 	ldw	r4,0(r20)
 800c77c:	b00cd43a 	srli	r6,r22,16
 800c780:	b0ffffcc 	andi	r3,r22,65535
 800c784:	217fffcc 	andi	r5,r4,65535
 800c788:	2c21883a 	add	r16,r5,r16
 800c78c:	80c7c83a 	sub	r3,r16,r3
 800c790:	2008d43a 	srli	r4,r4,16
 800c794:	1185883a 	add	r2,r2,r6
 800c798:	1821d43a 	srai	r16,r3,16
 800c79c:	117fffcc 	andi	r5,r2,65535
 800c7a0:	2149c83a 	sub	r4,r4,r5
 800c7a4:	2421883a 	add	r16,r4,r16
 800c7a8:	8008943a 	slli	r4,r16,16
 800c7ac:	18ffffcc 	andi	r3,r3,65535
 800c7b0:	102cd43a 	srli	r22,r2,16
 800c7b4:	20c8b03a 	or	r4,r4,r3
 800c7b8:	a1000015 	stw	r4,0(r20)
 800c7bc:	8021d43a 	srai	r16,r16,16
 800c7c0:	a5000104 	addi	r20,r20,4
 800c7c4:	e47fe32e 	bgeu	fp,r17,800c754 <quorem+0x8c>
 800c7c8:	d8c00317 	ldw	r3,12(sp)
 800c7cc:	18800017 	ldw	r2,0(r3)
 800c7d0:	10000c1e 	bne	r2,zero,800c804 <quorem+0x13c>
 800c7d4:	18bfff04 	addi	r2,r3,-4
 800c7d8:	9880082e 	bgeu	r19,r2,800c7fc <quorem+0x134>
 800c7dc:	18ffff17 	ldw	r3,-4(r3)
 800c7e0:	18000326 	beq	r3,zero,800c7f0 <quorem+0x128>
 800c7e4:	00000506 	br	800c7fc <quorem+0x134>
 800c7e8:	10c00017 	ldw	r3,0(r2)
 800c7ec:	1800031e 	bne	r3,zero,800c7fc <quorem+0x134>
 800c7f0:	10bfff04 	addi	r2,r2,-4
 800c7f4:	bdffffc4 	addi	r23,r23,-1
 800c7f8:	98bffb36 	bltu	r19,r2,800c7e8 <quorem+0x120>
 800c7fc:	d8c00017 	ldw	r3,0(sp)
 800c800:	1dc00415 	stw	r23,16(r3)
 800c804:	d9400217 	ldw	r5,8(sp)
 800c808:	d9000017 	ldw	r4,0(sp)
 800c80c:	800fe540 	call	800fe54 <__mcmp>
 800c810:	10002816 	blt	r2,zero,800c8b4 <quorem+0x1ec>
 800c814:	dc400117 	ldw	r17,4(sp)
 800c818:	94800044 	addi	r18,r18,1
 800c81c:	980d883a 	mov	r6,r19
 800c820:	0007883a 	mov	r3,zero
 800c824:	31000017 	ldw	r4,0(r6)
 800c828:	89400017 	ldw	r5,0(r17)
 800c82c:	31800104 	addi	r6,r6,4
 800c830:	20bfffcc 	andi	r2,r4,65535
 800c834:	10c7883a 	add	r3,r2,r3
 800c838:	28bfffcc 	andi	r2,r5,65535
 800c83c:	1885c83a 	sub	r2,r3,r2
 800c840:	280ad43a 	srli	r5,r5,16
 800c844:	2008d43a 	srli	r4,r4,16
 800c848:	1007d43a 	srai	r3,r2,16
 800c84c:	10bfffcc 	andi	r2,r2,65535
 800c850:	2149c83a 	sub	r4,r4,r5
 800c854:	20c9883a 	add	r4,r4,r3
 800c858:	200a943a 	slli	r5,r4,16
 800c85c:	8c400104 	addi	r17,r17,4
 800c860:	2007d43a 	srai	r3,r4,16
 800c864:	2884b03a 	or	r2,r5,r2
 800c868:	30bfff15 	stw	r2,-4(r6)
 800c86c:	e47fed2e 	bgeu	fp,r17,800c824 <quorem+0x15c>
 800c870:	bdc5883a 	add	r2,r23,r23
 800c874:	1085883a 	add	r2,r2,r2
 800c878:	9887883a 	add	r3,r19,r2
 800c87c:	18800017 	ldw	r2,0(r3)
 800c880:	10000c1e 	bne	r2,zero,800c8b4 <quorem+0x1ec>
 800c884:	18bfff04 	addi	r2,r3,-4
 800c888:	9880082e 	bgeu	r19,r2,800c8ac <quorem+0x1e4>
 800c88c:	18ffff17 	ldw	r3,-4(r3)
 800c890:	18000326 	beq	r3,zero,800c8a0 <quorem+0x1d8>
 800c894:	00000506 	br	800c8ac <quorem+0x1e4>
 800c898:	10c00017 	ldw	r3,0(r2)
 800c89c:	1800031e 	bne	r3,zero,800c8ac <quorem+0x1e4>
 800c8a0:	10bfff04 	addi	r2,r2,-4
 800c8a4:	bdffffc4 	addi	r23,r23,-1
 800c8a8:	98bffb36 	bltu	r19,r2,800c898 <quorem+0x1d0>
 800c8ac:	d8c00017 	ldw	r3,0(sp)
 800c8b0:	1dc00415 	stw	r23,16(r3)
 800c8b4:	9005883a 	mov	r2,r18
 800c8b8:	dfc00d17 	ldw	ra,52(sp)
 800c8bc:	df000c17 	ldw	fp,48(sp)
 800c8c0:	ddc00b17 	ldw	r23,44(sp)
 800c8c4:	dd800a17 	ldw	r22,40(sp)
 800c8c8:	dd400917 	ldw	r21,36(sp)
 800c8cc:	dd000817 	ldw	r20,32(sp)
 800c8d0:	dcc00717 	ldw	r19,28(sp)
 800c8d4:	dc800617 	ldw	r18,24(sp)
 800c8d8:	dc400517 	ldw	r17,20(sp)
 800c8dc:	dc000417 	ldw	r16,16(sp)
 800c8e0:	dec00e04 	addi	sp,sp,56
 800c8e4:	f800283a 	ret
 800c8e8:	0005883a 	mov	r2,zero
 800c8ec:	003ff206 	br	800c8b8 <quorem+0x1f0>

0800c8f0 <_dtoa_r>:
 800c8f0:	20801017 	ldw	r2,64(r4)
 800c8f4:	deffde04 	addi	sp,sp,-136
 800c8f8:	df002015 	stw	fp,128(sp)
 800c8fc:	dcc01b15 	stw	r19,108(sp)
 800c900:	dc801a15 	stw	r18,104(sp)
 800c904:	dc401915 	stw	r17,100(sp)
 800c908:	dc001815 	stw	r16,96(sp)
 800c90c:	dfc02115 	stw	ra,132(sp)
 800c910:	ddc01f15 	stw	r23,124(sp)
 800c914:	dd801e15 	stw	r22,120(sp)
 800c918:	dd401d15 	stw	r21,116(sp)
 800c91c:	dd001c15 	stw	r20,112(sp)
 800c920:	d9c00315 	stw	r7,12(sp)
 800c924:	2039883a 	mov	fp,r4
 800c928:	3023883a 	mov	r17,r6
 800c92c:	2825883a 	mov	r18,r5
 800c930:	dc002417 	ldw	r16,144(sp)
 800c934:	3027883a 	mov	r19,r6
 800c938:	10000826 	beq	r2,zero,800c95c <_dtoa_r+0x6c>
 800c93c:	21801117 	ldw	r6,68(r4)
 800c940:	00c00044 	movi	r3,1
 800c944:	100b883a 	mov	r5,r2
 800c948:	1986983a 	sll	r3,r3,r6
 800c94c:	11800115 	stw	r6,4(r2)
 800c950:	10c00215 	stw	r3,8(r2)
 800c954:	800f5780 	call	800f578 <_Bfree>
 800c958:	e0001015 	stw	zero,64(fp)
 800c95c:	88002e16 	blt	r17,zero,800ca18 <_dtoa_r+0x128>
 800c960:	80000015 	stw	zero,0(r16)
 800c964:	889ffc2c 	andhi	r2,r17,32752
 800c968:	00dffc34 	movhi	r3,32752
 800c96c:	10c01c26 	beq	r2,r3,800c9e0 <_dtoa_r+0xf0>
 800c970:	000d883a 	mov	r6,zero
 800c974:	000f883a 	mov	r7,zero
 800c978:	9009883a 	mov	r4,r18
 800c97c:	980b883a 	mov	r5,r19
 800c980:	80148f80 	call	80148f8 <__eqdf2>
 800c984:	10002b1e 	bne	r2,zero,800ca34 <_dtoa_r+0x144>
 800c988:	d9c02317 	ldw	r7,140(sp)
 800c98c:	00800044 	movi	r2,1
 800c990:	38800015 	stw	r2,0(r7)
 800c994:	d8802517 	ldw	r2,148(sp)
 800c998:	10019e26 	beq	r2,zero,800d014 <_dtoa_r+0x724>
 800c99c:	d8c02517 	ldw	r3,148(sp)
 800c9a0:	008200b4 	movhi	r2,2050
 800c9a4:	10a8d444 	addi	r2,r2,-23727
 800c9a8:	18800015 	stw	r2,0(r3)
 800c9ac:	10bfffc4 	addi	r2,r2,-1
 800c9b0:	dfc02117 	ldw	ra,132(sp)
 800c9b4:	df002017 	ldw	fp,128(sp)
 800c9b8:	ddc01f17 	ldw	r23,124(sp)
 800c9bc:	dd801e17 	ldw	r22,120(sp)
 800c9c0:	dd401d17 	ldw	r21,116(sp)
 800c9c4:	dd001c17 	ldw	r20,112(sp)
 800c9c8:	dcc01b17 	ldw	r19,108(sp)
 800c9cc:	dc801a17 	ldw	r18,104(sp)
 800c9d0:	dc401917 	ldw	r17,100(sp)
 800c9d4:	dc001817 	ldw	r16,96(sp)
 800c9d8:	dec02204 	addi	sp,sp,136
 800c9dc:	f800283a 	ret
 800c9e0:	d8c02317 	ldw	r3,140(sp)
 800c9e4:	0089c3c4 	movi	r2,9999
 800c9e8:	18800015 	stw	r2,0(r3)
 800c9ec:	90017726 	beq	r18,zero,800cfcc <_dtoa_r+0x6dc>
 800c9f0:	008200b4 	movhi	r2,2050
 800c9f4:	10a8e004 	addi	r2,r2,-23680
 800c9f8:	d9002517 	ldw	r4,148(sp)
 800c9fc:	203fec26 	beq	r4,zero,800c9b0 <_dtoa_r+0xc0>
 800ca00:	10c000c7 	ldb	r3,3(r2)
 800ca04:	1801781e 	bne	r3,zero,800cfe8 <_dtoa_r+0x6f8>
 800ca08:	10c000c4 	addi	r3,r2,3
 800ca0c:	d9802517 	ldw	r6,148(sp)
 800ca10:	30c00015 	stw	r3,0(r6)
 800ca14:	003fe606 	br	800c9b0 <_dtoa_r+0xc0>
 800ca18:	04e00034 	movhi	r19,32768
 800ca1c:	9cffffc4 	addi	r19,r19,-1
 800ca20:	00800044 	movi	r2,1
 800ca24:	8ce6703a 	and	r19,r17,r19
 800ca28:	80800015 	stw	r2,0(r16)
 800ca2c:	9823883a 	mov	r17,r19
 800ca30:	003fcc06 	br	800c964 <_dtoa_r+0x74>
 800ca34:	d8800204 	addi	r2,sp,8
 800ca38:	d8800015 	stw	r2,0(sp)
 800ca3c:	d9c00104 	addi	r7,sp,4
 800ca40:	900b883a 	mov	r5,r18
 800ca44:	980d883a 	mov	r6,r19
 800ca48:	e009883a 	mov	r4,fp
 800ca4c:	8820d53a 	srli	r16,r17,20
 800ca50:	80102200 	call	8010220 <__d2b>
 800ca54:	d8800915 	stw	r2,36(sp)
 800ca58:	8001651e 	bne	r16,zero,800cff0 <_dtoa_r+0x700>
 800ca5c:	dd800217 	ldw	r22,8(sp)
 800ca60:	dc000117 	ldw	r16,4(sp)
 800ca64:	00800804 	movi	r2,32
 800ca68:	b421883a 	add	r16,r22,r16
 800ca6c:	80c10c84 	addi	r3,r16,1074
 800ca70:	10c2d10e 	bge	r2,r3,800d5b8 <_dtoa_r+0xcc8>
 800ca74:	00801004 	movi	r2,64
 800ca78:	81010484 	addi	r4,r16,1042
 800ca7c:	10c7c83a 	sub	r3,r2,r3
 800ca80:	9108d83a 	srl	r4,r18,r4
 800ca84:	88e2983a 	sll	r17,r17,r3
 800ca88:	2448b03a 	or	r4,r4,r17
 800ca8c:	8015e140 	call	8015e14 <__floatunsidf>
 800ca90:	017f8434 	movhi	r5,65040
 800ca94:	01800044 	movi	r6,1
 800ca98:	1009883a 	mov	r4,r2
 800ca9c:	194b883a 	add	r5,r3,r5
 800caa0:	843fffc4 	addi	r16,r16,-1
 800caa4:	d9801115 	stw	r6,68(sp)
 800caa8:	000d883a 	mov	r6,zero
 800caac:	01cffe34 	movhi	r7,16376
 800cab0:	80153bc0 	call	80153bc <__subdf3>
 800cab4:	0198dbf4 	movhi	r6,25455
 800cab8:	01cff4f4 	movhi	r7,16339
 800cabc:	3190d844 	addi	r6,r6,17249
 800cac0:	39e1e9c4 	addi	r7,r7,-30809
 800cac4:	1009883a 	mov	r4,r2
 800cac8:	180b883a 	mov	r5,r3
 800cacc:	8014b500 	call	8014b50 <__muldf3>
 800cad0:	01a2d874 	movhi	r6,35681
 800cad4:	01cff1f4 	movhi	r7,16327
 800cad8:	31b22cc4 	addi	r6,r6,-14157
 800cadc:	39e28a04 	addi	r7,r7,-30168
 800cae0:	180b883a 	mov	r5,r3
 800cae4:	1009883a 	mov	r4,r2
 800cae8:	801367c0 	call	801367c <__adddf3>
 800caec:	8009883a 	mov	r4,r16
 800caf0:	1029883a 	mov	r20,r2
 800caf4:	1823883a 	mov	r17,r3
 800caf8:	8015d380 	call	8015d38 <__floatsidf>
 800cafc:	019427f4 	movhi	r6,20639
 800cb00:	01cff4f4 	movhi	r7,16339
 800cb04:	319e7ec4 	addi	r6,r6,31227
 800cb08:	39d104c4 	addi	r7,r7,17427
 800cb0c:	1009883a 	mov	r4,r2
 800cb10:	180b883a 	mov	r5,r3
 800cb14:	8014b500 	call	8014b50 <__muldf3>
 800cb18:	100d883a 	mov	r6,r2
 800cb1c:	180f883a 	mov	r7,r3
 800cb20:	a009883a 	mov	r4,r20
 800cb24:	880b883a 	mov	r5,r17
 800cb28:	801367c0 	call	801367c <__adddf3>
 800cb2c:	1009883a 	mov	r4,r2
 800cb30:	180b883a 	mov	r5,r3
 800cb34:	1029883a 	mov	r20,r2
 800cb38:	1823883a 	mov	r17,r3
 800cb3c:	8015cb80 	call	8015cb8 <__fixdfsi>
 800cb40:	000d883a 	mov	r6,zero
 800cb44:	000f883a 	mov	r7,zero
 800cb48:	a009883a 	mov	r4,r20
 800cb4c:	880b883a 	mov	r5,r17
 800cb50:	d8800515 	stw	r2,20(sp)
 800cb54:	8014a5c0 	call	8014a5c <__ledf2>
 800cb58:	10028716 	blt	r2,zero,800d578 <_dtoa_r+0xc88>
 800cb5c:	d8c00517 	ldw	r3,20(sp)
 800cb60:	00800584 	movi	r2,22
 800cb64:	10c27536 	bltu	r2,r3,800d53c <_dtoa_r+0xc4c>
 800cb68:	180490fa 	slli	r2,r3,3
 800cb6c:	00c200b4 	movhi	r3,2050
 800cb70:	18e8fb04 	addi	r3,r3,-23572
 800cb74:	1885883a 	add	r2,r3,r2
 800cb78:	11000017 	ldw	r4,0(r2)
 800cb7c:	11400117 	ldw	r5,4(r2)
 800cb80:	900d883a 	mov	r6,r18
 800cb84:	980f883a 	mov	r7,r19
 800cb88:	80149800 	call	8014980 <__gedf2>
 800cb8c:	00828d0e 	bge	zero,r2,800d5c4 <_dtoa_r+0xcd4>
 800cb90:	d9000517 	ldw	r4,20(sp)
 800cb94:	d8000e15 	stw	zero,56(sp)
 800cb98:	213fffc4 	addi	r4,r4,-1
 800cb9c:	d9000515 	stw	r4,20(sp)
 800cba0:	b42dc83a 	sub	r22,r22,r16
 800cba4:	b5bfffc4 	addi	r22,r22,-1
 800cba8:	b0026f16 	blt	r22,zero,800d568 <_dtoa_r+0xc78>
 800cbac:	d8000815 	stw	zero,32(sp)
 800cbb0:	d9c00517 	ldw	r7,20(sp)
 800cbb4:	38026416 	blt	r7,zero,800d548 <_dtoa_r+0xc58>
 800cbb8:	b1ed883a 	add	r22,r22,r7
 800cbbc:	d9c00d15 	stw	r7,52(sp)
 800cbc0:	d8000a15 	stw	zero,40(sp)
 800cbc4:	d9800317 	ldw	r6,12(sp)
 800cbc8:	00800244 	movi	r2,9
 800cbcc:	11811436 	bltu	r2,r6,800d020 <_dtoa_r+0x730>
 800cbd0:	00800144 	movi	r2,5
 800cbd4:	1184e10e 	bge	r2,r6,800df5c <_dtoa_r+0x166c>
 800cbd8:	31bfff04 	addi	r6,r6,-4
 800cbdc:	d9800315 	stw	r6,12(sp)
 800cbe0:	0023883a 	mov	r17,zero
 800cbe4:	d9800317 	ldw	r6,12(sp)
 800cbe8:	008000c4 	movi	r2,3
 800cbec:	30836726 	beq	r6,r2,800d98c <_dtoa_r+0x109c>
 800cbf0:	1183410e 	bge	r2,r6,800d8f8 <_dtoa_r+0x1008>
 800cbf4:	d9c00317 	ldw	r7,12(sp)
 800cbf8:	00800104 	movi	r2,4
 800cbfc:	38827c26 	beq	r7,r2,800d5f0 <_dtoa_r+0xd00>
 800cc00:	00800144 	movi	r2,5
 800cc04:	3884c41e 	bne	r7,r2,800df18 <_dtoa_r+0x1628>
 800cc08:	00800044 	movi	r2,1
 800cc0c:	d8800b15 	stw	r2,44(sp)
 800cc10:	d8c00517 	ldw	r3,20(sp)
 800cc14:	d9002217 	ldw	r4,136(sp)
 800cc18:	1907883a 	add	r3,r3,r4
 800cc1c:	19800044 	addi	r6,r3,1
 800cc20:	d8c00c15 	stw	r3,48(sp)
 800cc24:	d9800615 	stw	r6,24(sp)
 800cc28:	0183a40e 	bge	zero,r6,800dabc <_dtoa_r+0x11cc>
 800cc2c:	d9800617 	ldw	r6,24(sp)
 800cc30:	3021883a 	mov	r16,r6
 800cc34:	e0001115 	stw	zero,68(fp)
 800cc38:	008005c4 	movi	r2,23
 800cc3c:	1184c92e 	bgeu	r2,r6,800df64 <_dtoa_r+0x1674>
 800cc40:	00c00044 	movi	r3,1
 800cc44:	00800104 	movi	r2,4
 800cc48:	1085883a 	add	r2,r2,r2
 800cc4c:	11000504 	addi	r4,r2,20
 800cc50:	180b883a 	mov	r5,r3
 800cc54:	18c00044 	addi	r3,r3,1
 800cc58:	313ffb2e 	bgeu	r6,r4,800cc48 <_dtoa_r+0x358>
 800cc5c:	e1401115 	stw	r5,68(fp)
 800cc60:	e009883a 	mov	r4,fp
 800cc64:	800f4d00 	call	800f4d0 <_Balloc>
 800cc68:	d8800715 	stw	r2,28(sp)
 800cc6c:	e0801015 	stw	r2,64(fp)
 800cc70:	00800384 	movi	r2,14
 800cc74:	1400f736 	bltu	r2,r16,800d054 <_dtoa_r+0x764>
 800cc78:	8800f626 	beq	r17,zero,800d054 <_dtoa_r+0x764>
 800cc7c:	d9c00517 	ldw	r7,20(sp)
 800cc80:	01c39a0e 	bge	zero,r7,800daec <_dtoa_r+0x11fc>
 800cc84:	388003cc 	andi	r2,r7,15
 800cc88:	100490fa 	slli	r2,r2,3
 800cc8c:	382bd13a 	srai	r21,r7,4
 800cc90:	00c200b4 	movhi	r3,2050
 800cc94:	18e8fb04 	addi	r3,r3,-23572
 800cc98:	1885883a 	add	r2,r3,r2
 800cc9c:	a8c0040c 	andi	r3,r21,16
 800cca0:	12400017 	ldw	r9,0(r2)
 800cca4:	12000117 	ldw	r8,4(r2)
 800cca8:	18037926 	beq	r3,zero,800da90 <_dtoa_r+0x11a0>
 800ccac:	008200b4 	movhi	r2,2050
 800ccb0:	10a8f104 	addi	r2,r2,-23612
 800ccb4:	11800817 	ldw	r6,32(r2)
 800ccb8:	11c00917 	ldw	r7,36(r2)
 800ccbc:	9009883a 	mov	r4,r18
 800ccc0:	980b883a 	mov	r5,r19
 800ccc4:	da001715 	stw	r8,92(sp)
 800ccc8:	da401615 	stw	r9,88(sp)
 800cccc:	8013f280 	call	8013f28 <__divdf3>
 800ccd0:	da001717 	ldw	r8,92(sp)
 800ccd4:	da401617 	ldw	r9,88(sp)
 800ccd8:	ad4003cc 	andi	r21,r21,15
 800ccdc:	040000c4 	movi	r16,3
 800cce0:	1023883a 	mov	r17,r2
 800cce4:	1829883a 	mov	r20,r3
 800cce8:	a8001126 	beq	r21,zero,800cd30 <_dtoa_r+0x440>
 800ccec:	05c200b4 	movhi	r23,2050
 800ccf0:	bde8f104 	addi	r23,r23,-23612
 800ccf4:	4805883a 	mov	r2,r9
 800ccf8:	4007883a 	mov	r3,r8
 800ccfc:	a980004c 	andi	r6,r21,1
 800cd00:	1009883a 	mov	r4,r2
 800cd04:	a82bd07a 	srai	r21,r21,1
 800cd08:	180b883a 	mov	r5,r3
 800cd0c:	30000426 	beq	r6,zero,800cd20 <_dtoa_r+0x430>
 800cd10:	b9800017 	ldw	r6,0(r23)
 800cd14:	b9c00117 	ldw	r7,4(r23)
 800cd18:	84000044 	addi	r16,r16,1
 800cd1c:	8014b500 	call	8014b50 <__muldf3>
 800cd20:	bdc00204 	addi	r23,r23,8
 800cd24:	a83ff51e 	bne	r21,zero,800ccfc <_dtoa_r+0x40c>
 800cd28:	1013883a 	mov	r9,r2
 800cd2c:	1811883a 	mov	r8,r3
 800cd30:	480d883a 	mov	r6,r9
 800cd34:	400f883a 	mov	r7,r8
 800cd38:	8809883a 	mov	r4,r17
 800cd3c:	a00b883a 	mov	r5,r20
 800cd40:	8013f280 	call	8013f28 <__divdf3>
 800cd44:	d8800f15 	stw	r2,60(sp)
 800cd48:	d8c01015 	stw	r3,64(sp)
 800cd4c:	d8c00e17 	ldw	r3,56(sp)
 800cd50:	18000626 	beq	r3,zero,800cd6c <_dtoa_r+0x47c>
 800cd54:	d9000f17 	ldw	r4,60(sp)
 800cd58:	d9401017 	ldw	r5,64(sp)
 800cd5c:	000d883a 	mov	r6,zero
 800cd60:	01cffc34 	movhi	r7,16368
 800cd64:	8014a5c0 	call	8014a5c <__ledf2>
 800cd68:	10040b16 	blt	r2,zero,800dd98 <_dtoa_r+0x14a8>
 800cd6c:	8009883a 	mov	r4,r16
 800cd70:	8015d380 	call	8015d38 <__floatsidf>
 800cd74:	d9800f17 	ldw	r6,60(sp)
 800cd78:	d9c01017 	ldw	r7,64(sp)
 800cd7c:	1009883a 	mov	r4,r2
 800cd80:	180b883a 	mov	r5,r3
 800cd84:	8014b500 	call	8014b50 <__muldf3>
 800cd88:	000d883a 	mov	r6,zero
 800cd8c:	01d00734 	movhi	r7,16412
 800cd90:	1009883a 	mov	r4,r2
 800cd94:	180b883a 	mov	r5,r3
 800cd98:	801367c0 	call	801367c <__adddf3>
 800cd9c:	1021883a 	mov	r16,r2
 800cda0:	d8800617 	ldw	r2,24(sp)
 800cda4:	047f3034 	movhi	r17,64704
 800cda8:	1c63883a 	add	r17,r3,r17
 800cdac:	10031826 	beq	r2,zero,800da10 <_dtoa_r+0x1120>
 800cdb0:	d8c00517 	ldw	r3,20(sp)
 800cdb4:	db000617 	ldw	r12,24(sp)
 800cdb8:	d8c01315 	stw	r3,76(sp)
 800cdbc:	d9000b17 	ldw	r4,44(sp)
 800cdc0:	20038f26 	beq	r4,zero,800dc00 <_dtoa_r+0x1310>
 800cdc4:	60bfffc4 	addi	r2,r12,-1
 800cdc8:	100490fa 	slli	r2,r2,3
 800cdcc:	00c200b4 	movhi	r3,2050
 800cdd0:	18e8fb04 	addi	r3,r3,-23572
 800cdd4:	1885883a 	add	r2,r3,r2
 800cdd8:	11800017 	ldw	r6,0(r2)
 800cddc:	11c00117 	ldw	r7,4(r2)
 800cde0:	d8800717 	ldw	r2,28(sp)
 800cde4:	0009883a 	mov	r4,zero
 800cde8:	014ff834 	movhi	r5,16352
 800cdec:	db001615 	stw	r12,88(sp)
 800cdf0:	15c00044 	addi	r23,r2,1
 800cdf4:	8013f280 	call	8013f28 <__divdf3>
 800cdf8:	800d883a 	mov	r6,r16
 800cdfc:	880f883a 	mov	r7,r17
 800ce00:	1009883a 	mov	r4,r2
 800ce04:	180b883a 	mov	r5,r3
 800ce08:	80153bc0 	call	80153bc <__subdf3>
 800ce0c:	d9401017 	ldw	r5,64(sp)
 800ce10:	d9000f17 	ldw	r4,60(sp)
 800ce14:	102b883a 	mov	r21,r2
 800ce18:	d8c01215 	stw	r3,72(sp)
 800ce1c:	8015cb80 	call	8015cb8 <__fixdfsi>
 800ce20:	1009883a 	mov	r4,r2
 800ce24:	1029883a 	mov	r20,r2
 800ce28:	8015d380 	call	8015d38 <__floatsidf>
 800ce2c:	d9000f17 	ldw	r4,60(sp)
 800ce30:	d9401017 	ldw	r5,64(sp)
 800ce34:	100d883a 	mov	r6,r2
 800ce38:	180f883a 	mov	r7,r3
 800ce3c:	80153bc0 	call	80153bc <__subdf3>
 800ce40:	1823883a 	mov	r17,r3
 800ce44:	d8c00717 	ldw	r3,28(sp)
 800ce48:	d9401217 	ldw	r5,72(sp)
 800ce4c:	a2000c04 	addi	r8,r20,48
 800ce50:	1021883a 	mov	r16,r2
 800ce54:	1a000005 	stb	r8,0(r3)
 800ce58:	800d883a 	mov	r6,r16
 800ce5c:	880f883a 	mov	r7,r17
 800ce60:	a809883a 	mov	r4,r21
 800ce64:	4029883a 	mov	r20,r8
 800ce68:	80149800 	call	8014980 <__gedf2>
 800ce6c:	00841d16 	blt	zero,r2,800dee4 <_dtoa_r+0x15f4>
 800ce70:	800d883a 	mov	r6,r16
 800ce74:	880f883a 	mov	r7,r17
 800ce78:	0009883a 	mov	r4,zero
 800ce7c:	014ffc34 	movhi	r5,16368
 800ce80:	80153bc0 	call	80153bc <__subdf3>
 800ce84:	d9401217 	ldw	r5,72(sp)
 800ce88:	100d883a 	mov	r6,r2
 800ce8c:	180f883a 	mov	r7,r3
 800ce90:	a809883a 	mov	r4,r21
 800ce94:	80149800 	call	8014980 <__gedf2>
 800ce98:	db001617 	ldw	r12,88(sp)
 800ce9c:	00840e16 	blt	zero,r2,800ded8 <_dtoa_r+0x15e8>
 800cea0:	00800044 	movi	r2,1
 800cea4:	13006b0e 	bge	r2,r12,800d054 <_dtoa_r+0x764>
 800cea8:	d9000717 	ldw	r4,28(sp)
 800ceac:	dd800f15 	stw	r22,60(sp)
 800ceb0:	dcc01015 	stw	r19,64(sp)
 800ceb4:	2319883a 	add	r12,r4,r12
 800ceb8:	dcc01217 	ldw	r19,72(sp)
 800cebc:	602d883a 	mov	r22,r12
 800cec0:	dc801215 	stw	r18,72(sp)
 800cec4:	b825883a 	mov	r18,r23
 800cec8:	00000906 	br	800cef0 <_dtoa_r+0x600>
 800cecc:	80153bc0 	call	80153bc <__subdf3>
 800ced0:	a80d883a 	mov	r6,r21
 800ced4:	980f883a 	mov	r7,r19
 800ced8:	1009883a 	mov	r4,r2
 800cedc:	180b883a 	mov	r5,r3
 800cee0:	8014a5c0 	call	8014a5c <__ledf2>
 800cee4:	1003e816 	blt	r2,zero,800de88 <_dtoa_r+0x1598>
 800cee8:	b825883a 	mov	r18,r23
 800ceec:	bd83e926 	beq	r23,r22,800de94 <_dtoa_r+0x15a4>
 800cef0:	a809883a 	mov	r4,r21
 800cef4:	980b883a 	mov	r5,r19
 800cef8:	000d883a 	mov	r6,zero
 800cefc:	01d00934 	movhi	r7,16420
 800cf00:	8014b500 	call	8014b50 <__muldf3>
 800cf04:	000d883a 	mov	r6,zero
 800cf08:	01d00934 	movhi	r7,16420
 800cf0c:	8009883a 	mov	r4,r16
 800cf10:	880b883a 	mov	r5,r17
 800cf14:	102b883a 	mov	r21,r2
 800cf18:	1827883a 	mov	r19,r3
 800cf1c:	8014b500 	call	8014b50 <__muldf3>
 800cf20:	180b883a 	mov	r5,r3
 800cf24:	1009883a 	mov	r4,r2
 800cf28:	1821883a 	mov	r16,r3
 800cf2c:	1023883a 	mov	r17,r2
 800cf30:	8015cb80 	call	8015cb8 <__fixdfsi>
 800cf34:	1009883a 	mov	r4,r2
 800cf38:	1029883a 	mov	r20,r2
 800cf3c:	8015d380 	call	8015d38 <__floatsidf>
 800cf40:	8809883a 	mov	r4,r17
 800cf44:	800b883a 	mov	r5,r16
 800cf48:	100d883a 	mov	r6,r2
 800cf4c:	180f883a 	mov	r7,r3
 800cf50:	80153bc0 	call	80153bc <__subdf3>
 800cf54:	a5000c04 	addi	r20,r20,48
 800cf58:	a80d883a 	mov	r6,r21
 800cf5c:	980f883a 	mov	r7,r19
 800cf60:	1009883a 	mov	r4,r2
 800cf64:	180b883a 	mov	r5,r3
 800cf68:	95000005 	stb	r20,0(r18)
 800cf6c:	1021883a 	mov	r16,r2
 800cf70:	1823883a 	mov	r17,r3
 800cf74:	8014a5c0 	call	8014a5c <__ledf2>
 800cf78:	bdc00044 	addi	r23,r23,1
 800cf7c:	800d883a 	mov	r6,r16
 800cf80:	880f883a 	mov	r7,r17
 800cf84:	0009883a 	mov	r4,zero
 800cf88:	014ffc34 	movhi	r5,16368
 800cf8c:	103fcf0e 	bge	r2,zero,800cecc <_dtoa_r+0x5dc>
 800cf90:	d8c01317 	ldw	r3,76(sp)
 800cf94:	d8c00515 	stw	r3,20(sp)
 800cf98:	d9400917 	ldw	r5,36(sp)
 800cf9c:	e009883a 	mov	r4,fp
 800cfa0:	800f5780 	call	800f578 <_Bfree>
 800cfa4:	d9000517 	ldw	r4,20(sp)
 800cfa8:	d9802317 	ldw	r6,140(sp)
 800cfac:	d9c02517 	ldw	r7,148(sp)
 800cfb0:	b8000005 	stb	zero,0(r23)
 800cfb4:	20800044 	addi	r2,r4,1
 800cfb8:	30800015 	stw	r2,0(r6)
 800cfbc:	3802aa26 	beq	r7,zero,800da68 <_dtoa_r+0x1178>
 800cfc0:	3dc00015 	stw	r23,0(r7)
 800cfc4:	d8800717 	ldw	r2,28(sp)
 800cfc8:	003e7906 	br	800c9b0 <_dtoa_r+0xc0>
 800cfcc:	00800434 	movhi	r2,16
 800cfd0:	10bfffc4 	addi	r2,r2,-1
 800cfd4:	88a2703a 	and	r17,r17,r2
 800cfd8:	883e851e 	bne	r17,zero,800c9f0 <_dtoa_r+0x100>
 800cfdc:	008200b4 	movhi	r2,2050
 800cfe0:	10a8dd04 	addi	r2,r2,-23692
 800cfe4:	003e8406 	br	800c9f8 <_dtoa_r+0x108>
 800cfe8:	10c00204 	addi	r3,r2,8
 800cfec:	003e8706 	br	800ca0c <_dtoa_r+0x11c>
 800cff0:	01400434 	movhi	r5,16
 800cff4:	297fffc4 	addi	r5,r5,-1
 800cff8:	994a703a 	and	r5,r19,r5
 800cffc:	9009883a 	mov	r4,r18
 800d000:	843f0044 	addi	r16,r16,-1023
 800d004:	294ffc34 	orhi	r5,r5,16368
 800d008:	dd800217 	ldw	r22,8(sp)
 800d00c:	d8001115 	stw	zero,68(sp)
 800d010:	003ea506 	br	800caa8 <_dtoa_r+0x1b8>
 800d014:	008200b4 	movhi	r2,2050
 800d018:	10a8d404 	addi	r2,r2,-23728
 800d01c:	003e6406 	br	800c9b0 <_dtoa_r+0xc0>
 800d020:	e0001115 	stw	zero,68(fp)
 800d024:	000b883a 	mov	r5,zero
 800d028:	e009883a 	mov	r4,fp
 800d02c:	800f4d00 	call	800f4d0 <_Balloc>
 800d030:	01bfffc4 	movi	r6,-1
 800d034:	01c00044 	movi	r7,1
 800d038:	d8800715 	stw	r2,28(sp)
 800d03c:	d9800c15 	stw	r6,48(sp)
 800d040:	e0801015 	stw	r2,64(fp)
 800d044:	d8000315 	stw	zero,12(sp)
 800d048:	d9c00b15 	stw	r7,44(sp)
 800d04c:	d9800615 	stw	r6,24(sp)
 800d050:	d8002215 	stw	zero,136(sp)
 800d054:	d8800117 	ldw	r2,4(sp)
 800d058:	10008916 	blt	r2,zero,800d280 <_dtoa_r+0x990>
 800d05c:	d9000517 	ldw	r4,20(sp)
 800d060:	00c00384 	movi	r3,14
 800d064:	19008616 	blt	r3,r4,800d280 <_dtoa_r+0x990>
 800d068:	200490fa 	slli	r2,r4,3
 800d06c:	00c200b4 	movhi	r3,2050
 800d070:	d9802217 	ldw	r6,136(sp)
 800d074:	18e8fb04 	addi	r3,r3,-23572
 800d078:	1885883a 	add	r2,r3,r2
 800d07c:	14000017 	ldw	r16,0(r2)
 800d080:	14400117 	ldw	r17,4(r2)
 800d084:	30016316 	blt	r6,zero,800d614 <_dtoa_r+0xd24>
 800d088:	800d883a 	mov	r6,r16
 800d08c:	880f883a 	mov	r7,r17
 800d090:	9009883a 	mov	r4,r18
 800d094:	980b883a 	mov	r5,r19
 800d098:	8013f280 	call	8013f28 <__divdf3>
 800d09c:	180b883a 	mov	r5,r3
 800d0a0:	1009883a 	mov	r4,r2
 800d0a4:	8015cb80 	call	8015cb8 <__fixdfsi>
 800d0a8:	1009883a 	mov	r4,r2
 800d0ac:	102b883a 	mov	r21,r2
 800d0b0:	8015d380 	call	8015d38 <__floatsidf>
 800d0b4:	800d883a 	mov	r6,r16
 800d0b8:	880f883a 	mov	r7,r17
 800d0bc:	1009883a 	mov	r4,r2
 800d0c0:	180b883a 	mov	r5,r3
 800d0c4:	8014b500 	call	8014b50 <__muldf3>
 800d0c8:	100d883a 	mov	r6,r2
 800d0cc:	180f883a 	mov	r7,r3
 800d0d0:	9009883a 	mov	r4,r18
 800d0d4:	980b883a 	mov	r5,r19
 800d0d8:	80153bc0 	call	80153bc <__subdf3>
 800d0dc:	d9c00717 	ldw	r7,28(sp)
 800d0e0:	1009883a 	mov	r4,r2
 800d0e4:	a8800c04 	addi	r2,r21,48
 800d0e8:	38800005 	stb	r2,0(r7)
 800d0ec:	3dc00044 	addi	r23,r7,1
 800d0f0:	d9c00617 	ldw	r7,24(sp)
 800d0f4:	01800044 	movi	r6,1
 800d0f8:	180b883a 	mov	r5,r3
 800d0fc:	2005883a 	mov	r2,r4
 800d100:	39803826 	beq	r7,r6,800d1e4 <_dtoa_r+0x8f4>
 800d104:	000d883a 	mov	r6,zero
 800d108:	01d00934 	movhi	r7,16420
 800d10c:	8014b500 	call	8014b50 <__muldf3>
 800d110:	000d883a 	mov	r6,zero
 800d114:	000f883a 	mov	r7,zero
 800d118:	1009883a 	mov	r4,r2
 800d11c:	180b883a 	mov	r5,r3
 800d120:	1025883a 	mov	r18,r2
 800d124:	1827883a 	mov	r19,r3
 800d128:	80148f80 	call	80148f8 <__eqdf2>
 800d12c:	103f9a26 	beq	r2,zero,800cf98 <_dtoa_r+0x6a8>
 800d130:	d9c00617 	ldw	r7,24(sp)
 800d134:	d8c00717 	ldw	r3,28(sp)
 800d138:	b829883a 	mov	r20,r23
 800d13c:	38bfffc4 	addi	r2,r7,-1
 800d140:	18ad883a 	add	r22,r3,r2
 800d144:	00000a06 	br	800d170 <_dtoa_r+0x880>
 800d148:	8014b500 	call	8014b50 <__muldf3>
 800d14c:	000d883a 	mov	r6,zero
 800d150:	000f883a 	mov	r7,zero
 800d154:	1009883a 	mov	r4,r2
 800d158:	180b883a 	mov	r5,r3
 800d15c:	1025883a 	mov	r18,r2
 800d160:	1827883a 	mov	r19,r3
 800d164:	b829883a 	mov	r20,r23
 800d168:	80148f80 	call	80148f8 <__eqdf2>
 800d16c:	103f8a26 	beq	r2,zero,800cf98 <_dtoa_r+0x6a8>
 800d170:	800d883a 	mov	r6,r16
 800d174:	880f883a 	mov	r7,r17
 800d178:	9009883a 	mov	r4,r18
 800d17c:	980b883a 	mov	r5,r19
 800d180:	8013f280 	call	8013f28 <__divdf3>
 800d184:	180b883a 	mov	r5,r3
 800d188:	1009883a 	mov	r4,r2
 800d18c:	8015cb80 	call	8015cb8 <__fixdfsi>
 800d190:	1009883a 	mov	r4,r2
 800d194:	102b883a 	mov	r21,r2
 800d198:	8015d380 	call	8015d38 <__floatsidf>
 800d19c:	800d883a 	mov	r6,r16
 800d1a0:	880f883a 	mov	r7,r17
 800d1a4:	1009883a 	mov	r4,r2
 800d1a8:	180b883a 	mov	r5,r3
 800d1ac:	8014b500 	call	8014b50 <__muldf3>
 800d1b0:	100d883a 	mov	r6,r2
 800d1b4:	180f883a 	mov	r7,r3
 800d1b8:	9009883a 	mov	r4,r18
 800d1bc:	980b883a 	mov	r5,r19
 800d1c0:	80153bc0 	call	80153bc <__subdf3>
 800d1c4:	aa000c04 	addi	r8,r21,48
 800d1c8:	a2000005 	stb	r8,0(r20)
 800d1cc:	000d883a 	mov	r6,zero
 800d1d0:	01d00934 	movhi	r7,16420
 800d1d4:	1009883a 	mov	r4,r2
 800d1d8:	180b883a 	mov	r5,r3
 800d1dc:	a5c00044 	addi	r23,r20,1
 800d1e0:	b53fd91e 	bne	r22,r20,800d148 <_dtoa_r+0x858>
 800d1e4:	100d883a 	mov	r6,r2
 800d1e8:	180f883a 	mov	r7,r3
 800d1ec:	1009883a 	mov	r4,r2
 800d1f0:	180b883a 	mov	r5,r3
 800d1f4:	801367c0 	call	801367c <__adddf3>
 800d1f8:	100d883a 	mov	r6,r2
 800d1fc:	180f883a 	mov	r7,r3
 800d200:	8009883a 	mov	r4,r16
 800d204:	880b883a 	mov	r5,r17
 800d208:	1027883a 	mov	r19,r2
 800d20c:	1825883a 	mov	r18,r3
 800d210:	8014a5c0 	call	8014a5c <__ledf2>
 800d214:	10000816 	blt	r2,zero,800d238 <_dtoa_r+0x948>
 800d218:	980d883a 	mov	r6,r19
 800d21c:	900f883a 	mov	r7,r18
 800d220:	8009883a 	mov	r4,r16
 800d224:	880b883a 	mov	r5,r17
 800d228:	80148f80 	call	80148f8 <__eqdf2>
 800d22c:	103f5a1e 	bne	r2,zero,800cf98 <_dtoa_r+0x6a8>
 800d230:	ad40004c 	andi	r21,r21,1
 800d234:	a83f5826 	beq	r21,zero,800cf98 <_dtoa_r+0x6a8>
 800d238:	bd3fffc3 	ldbu	r20,-1(r23)
 800d23c:	b8bfffc4 	addi	r2,r23,-1
 800d240:	1007883a 	mov	r3,r2
 800d244:	01400e44 	movi	r5,57
 800d248:	d9800717 	ldw	r6,28(sp)
 800d24c:	00000506 	br	800d264 <_dtoa_r+0x974>
 800d250:	18ffffc4 	addi	r3,r3,-1
 800d254:	11824726 	beq	r2,r6,800db74 <_dtoa_r+0x1284>
 800d258:	1d000003 	ldbu	r20,0(r3)
 800d25c:	102f883a 	mov	r23,r2
 800d260:	10bfffc4 	addi	r2,r2,-1
 800d264:	a1003fcc 	andi	r4,r20,255
 800d268:	2100201c 	xori	r4,r4,128
 800d26c:	213fe004 	addi	r4,r4,-128
 800d270:	217ff726 	beq	r4,r5,800d250 <_dtoa_r+0x960>
 800d274:	a2000044 	addi	r8,r20,1
 800d278:	12000005 	stb	r8,0(r2)
 800d27c:	003f4606 	br	800cf98 <_dtoa_r+0x6a8>
 800d280:	d9000b17 	ldw	r4,44(sp)
 800d284:	2000c826 	beq	r4,zero,800d5a8 <_dtoa_r+0xcb8>
 800d288:	d9800317 	ldw	r6,12(sp)
 800d28c:	00c00044 	movi	r3,1
 800d290:	1980f90e 	bge	r3,r6,800d678 <_dtoa_r+0xd88>
 800d294:	d8800617 	ldw	r2,24(sp)
 800d298:	d8c00a17 	ldw	r3,40(sp)
 800d29c:	157fffc4 	addi	r21,r2,-1
 800d2a0:	1d41f316 	blt	r3,r21,800da70 <_dtoa_r+0x1180>
 800d2a4:	1d6bc83a 	sub	r21,r3,r21
 800d2a8:	d9c00617 	ldw	r7,24(sp)
 800d2ac:	3802aa16 	blt	r7,zero,800dd58 <_dtoa_r+0x1468>
 800d2b0:	dd000817 	ldw	r20,32(sp)
 800d2b4:	d8800617 	ldw	r2,24(sp)
 800d2b8:	d8c00817 	ldw	r3,32(sp)
 800d2bc:	01400044 	movi	r5,1
 800d2c0:	e009883a 	mov	r4,fp
 800d2c4:	1887883a 	add	r3,r3,r2
 800d2c8:	d8c00815 	stw	r3,32(sp)
 800d2cc:	b0ad883a 	add	r22,r22,r2
 800d2d0:	800f9040 	call	800f904 <__i2b>
 800d2d4:	1023883a 	mov	r17,r2
 800d2d8:	a0000826 	beq	r20,zero,800d2fc <_dtoa_r+0xa0c>
 800d2dc:	0580070e 	bge	zero,r22,800d2fc <_dtoa_r+0xa0c>
 800d2e0:	a005883a 	mov	r2,r20
 800d2e4:	b500b916 	blt	r22,r20,800d5cc <_dtoa_r+0xcdc>
 800d2e8:	d9000817 	ldw	r4,32(sp)
 800d2ec:	a0a9c83a 	sub	r20,r20,r2
 800d2f0:	b0adc83a 	sub	r22,r22,r2
 800d2f4:	2089c83a 	sub	r4,r4,r2
 800d2f8:	d9000815 	stw	r4,32(sp)
 800d2fc:	d9800a17 	ldw	r6,40(sp)
 800d300:	0181810e 	bge	zero,r6,800d908 <_dtoa_r+0x1018>
 800d304:	d9c00b17 	ldw	r7,44(sp)
 800d308:	3800b326 	beq	r7,zero,800d5d8 <_dtoa_r+0xce8>
 800d30c:	a800b226 	beq	r21,zero,800d5d8 <_dtoa_r+0xce8>
 800d310:	880b883a 	mov	r5,r17
 800d314:	a80d883a 	mov	r6,r21
 800d318:	e009883a 	mov	r4,fp
 800d31c:	800fbcc0 	call	800fbcc <__pow5mult>
 800d320:	d9800917 	ldw	r6,36(sp)
 800d324:	100b883a 	mov	r5,r2
 800d328:	e009883a 	mov	r4,fp
 800d32c:	1023883a 	mov	r17,r2
 800d330:	800f9400 	call	800f940 <__multiply>
 800d334:	1021883a 	mov	r16,r2
 800d338:	d8800a17 	ldw	r2,40(sp)
 800d33c:	d9400917 	ldw	r5,36(sp)
 800d340:	e009883a 	mov	r4,fp
 800d344:	1545c83a 	sub	r2,r2,r21
 800d348:	d8800a15 	stw	r2,40(sp)
 800d34c:	800f5780 	call	800f578 <_Bfree>
 800d350:	d8c00a17 	ldw	r3,40(sp)
 800d354:	18009f1e 	bne	r3,zero,800d5d4 <_dtoa_r+0xce4>
 800d358:	05c00044 	movi	r23,1
 800d35c:	e009883a 	mov	r4,fp
 800d360:	b80b883a 	mov	r5,r23
 800d364:	800f9040 	call	800f904 <__i2b>
 800d368:	d9000d17 	ldw	r4,52(sp)
 800d36c:	102b883a 	mov	r21,r2
 800d370:	2000ce26 	beq	r4,zero,800d6ac <_dtoa_r+0xdbc>
 800d374:	200d883a 	mov	r6,r4
 800d378:	100b883a 	mov	r5,r2
 800d37c:	e009883a 	mov	r4,fp
 800d380:	800fbcc0 	call	800fbcc <__pow5mult>
 800d384:	d9800317 	ldw	r6,12(sp)
 800d388:	102b883a 	mov	r21,r2
 800d38c:	b981810e 	bge	r23,r6,800d994 <_dtoa_r+0x10a4>
 800d390:	0027883a 	mov	r19,zero
 800d394:	a8800417 	ldw	r2,16(r21)
 800d398:	05c00804 	movi	r23,32
 800d39c:	10800104 	addi	r2,r2,4
 800d3a0:	1085883a 	add	r2,r2,r2
 800d3a4:	1085883a 	add	r2,r2,r2
 800d3a8:	a885883a 	add	r2,r21,r2
 800d3ac:	11000017 	ldw	r4,0(r2)
 800d3b0:	800f7ec0 	call	800f7ec <__hi0bits>
 800d3b4:	b885c83a 	sub	r2,r23,r2
 800d3b8:	1585883a 	add	r2,r2,r22
 800d3bc:	108007cc 	andi	r2,r2,31
 800d3c0:	1000b326 	beq	r2,zero,800d690 <_dtoa_r+0xda0>
 800d3c4:	00c00804 	movi	r3,32
 800d3c8:	1887c83a 	sub	r3,r3,r2
 800d3cc:	01000104 	movi	r4,4
 800d3d0:	20c2cd0e 	bge	r4,r3,800df08 <_dtoa_r+0x1618>
 800d3d4:	00c00704 	movi	r3,28
 800d3d8:	1885c83a 	sub	r2,r3,r2
 800d3dc:	d8c00817 	ldw	r3,32(sp)
 800d3e0:	a0a9883a 	add	r20,r20,r2
 800d3e4:	b0ad883a 	add	r22,r22,r2
 800d3e8:	1887883a 	add	r3,r3,r2
 800d3ec:	d8c00815 	stw	r3,32(sp)
 800d3f0:	d9800817 	ldw	r6,32(sp)
 800d3f4:	0180040e 	bge	zero,r6,800d408 <_dtoa_r+0xb18>
 800d3f8:	800b883a 	mov	r5,r16
 800d3fc:	e009883a 	mov	r4,fp
 800d400:	800fd0c0 	call	800fd0c <__lshift>
 800d404:	1021883a 	mov	r16,r2
 800d408:	0580050e 	bge	zero,r22,800d420 <_dtoa_r+0xb30>
 800d40c:	a80b883a 	mov	r5,r21
 800d410:	b00d883a 	mov	r6,r22
 800d414:	e009883a 	mov	r4,fp
 800d418:	800fd0c0 	call	800fd0c <__lshift>
 800d41c:	102b883a 	mov	r21,r2
 800d420:	d9c00e17 	ldw	r7,56(sp)
 800d424:	3801211e 	bne	r7,zero,800d8ac <_dtoa_r+0xfbc>
 800d428:	d9800617 	ldw	r6,24(sp)
 800d42c:	0181380e 	bge	zero,r6,800d910 <_dtoa_r+0x1020>
 800d430:	d8c00b17 	ldw	r3,44(sp)
 800d434:	1800ab1e 	bne	r3,zero,800d6e4 <_dtoa_r+0xdf4>
 800d438:	dc800717 	ldw	r18,28(sp)
 800d43c:	dcc00617 	ldw	r19,24(sp)
 800d440:	9029883a 	mov	r20,r18
 800d444:	00000206 	br	800d450 <_dtoa_r+0xb60>
 800d448:	800f5a00 	call	800f5a0 <__multadd>
 800d44c:	1021883a 	mov	r16,r2
 800d450:	a80b883a 	mov	r5,r21
 800d454:	8009883a 	mov	r4,r16
 800d458:	800c6c80 	call	800c6c8 <quorem>
 800d45c:	10800c04 	addi	r2,r2,48
 800d460:	90800005 	stb	r2,0(r18)
 800d464:	94800044 	addi	r18,r18,1
 800d468:	9507c83a 	sub	r3,r18,r20
 800d46c:	000f883a 	mov	r7,zero
 800d470:	01800284 	movi	r6,10
 800d474:	800b883a 	mov	r5,r16
 800d478:	e009883a 	mov	r4,fp
 800d47c:	1cfff216 	blt	r3,r19,800d448 <_dtoa_r+0xb58>
 800d480:	1011883a 	mov	r8,r2
 800d484:	d8800617 	ldw	r2,24(sp)
 800d488:	0082370e 	bge	zero,r2,800dd68 <_dtoa_r+0x1478>
 800d48c:	d9000717 	ldw	r4,28(sp)
 800d490:	0025883a 	mov	r18,zero
 800d494:	20af883a 	add	r23,r4,r2
 800d498:	01800044 	movi	r6,1
 800d49c:	800b883a 	mov	r5,r16
 800d4a0:	e009883a 	mov	r4,fp
 800d4a4:	da001715 	stw	r8,92(sp)
 800d4a8:	800fd0c0 	call	800fd0c <__lshift>
 800d4ac:	a80b883a 	mov	r5,r21
 800d4b0:	1009883a 	mov	r4,r2
 800d4b4:	d8800915 	stw	r2,36(sp)
 800d4b8:	800fe540 	call	800fe54 <__mcmp>
 800d4bc:	da001717 	ldw	r8,92(sp)
 800d4c0:	0081800e 	bge	zero,r2,800dac4 <_dtoa_r+0x11d4>
 800d4c4:	b93fffc3 	ldbu	r4,-1(r23)
 800d4c8:	b8bfffc4 	addi	r2,r23,-1
 800d4cc:	1007883a 	mov	r3,r2
 800d4d0:	01800e44 	movi	r6,57
 800d4d4:	d9c00717 	ldw	r7,28(sp)
 800d4d8:	00000506 	br	800d4f0 <_dtoa_r+0xc00>
 800d4dc:	18ffffc4 	addi	r3,r3,-1
 800d4e0:	11c12326 	beq	r2,r7,800d970 <_dtoa_r+0x1080>
 800d4e4:	19000003 	ldbu	r4,0(r3)
 800d4e8:	102f883a 	mov	r23,r2
 800d4ec:	10bfffc4 	addi	r2,r2,-1
 800d4f0:	21403fcc 	andi	r5,r4,255
 800d4f4:	2940201c 	xori	r5,r5,128
 800d4f8:	297fe004 	addi	r5,r5,-128
 800d4fc:	29bff726 	beq	r5,r6,800d4dc <_dtoa_r+0xbec>
 800d500:	21000044 	addi	r4,r4,1
 800d504:	11000005 	stb	r4,0(r2)
 800d508:	a80b883a 	mov	r5,r21
 800d50c:	e009883a 	mov	r4,fp
 800d510:	800f5780 	call	800f578 <_Bfree>
 800d514:	883ea026 	beq	r17,zero,800cf98 <_dtoa_r+0x6a8>
 800d518:	90000426 	beq	r18,zero,800d52c <_dtoa_r+0xc3c>
 800d51c:	94400326 	beq	r18,r17,800d52c <_dtoa_r+0xc3c>
 800d520:	900b883a 	mov	r5,r18
 800d524:	e009883a 	mov	r4,fp
 800d528:	800f5780 	call	800f578 <_Bfree>
 800d52c:	880b883a 	mov	r5,r17
 800d530:	e009883a 	mov	r4,fp
 800d534:	800f5780 	call	800f578 <_Bfree>
 800d538:	003e9706 	br	800cf98 <_dtoa_r+0x6a8>
 800d53c:	01800044 	movi	r6,1
 800d540:	d9800e15 	stw	r6,56(sp)
 800d544:	003d9606 	br	800cba0 <_dtoa_r+0x2b0>
 800d548:	d8800817 	ldw	r2,32(sp)
 800d54c:	d8c00517 	ldw	r3,20(sp)
 800d550:	d8000d15 	stw	zero,52(sp)
 800d554:	10c5c83a 	sub	r2,r2,r3
 800d558:	00c9c83a 	sub	r4,zero,r3
 800d55c:	d8800815 	stw	r2,32(sp)
 800d560:	d9000a15 	stw	r4,40(sp)
 800d564:	003d9706 	br	800cbc4 <_dtoa_r+0x2d4>
 800d568:	05adc83a 	sub	r22,zero,r22
 800d56c:	dd800815 	stw	r22,32(sp)
 800d570:	002d883a 	mov	r22,zero
 800d574:	003d8e06 	br	800cbb0 <_dtoa_r+0x2c0>
 800d578:	d9000517 	ldw	r4,20(sp)
 800d57c:	8015d380 	call	8015d38 <__floatsidf>
 800d580:	100d883a 	mov	r6,r2
 800d584:	180f883a 	mov	r7,r3
 800d588:	a009883a 	mov	r4,r20
 800d58c:	880b883a 	mov	r5,r17
 800d590:	80148f80 	call	80148f8 <__eqdf2>
 800d594:	103d7126 	beq	r2,zero,800cb5c <_dtoa_r+0x26c>
 800d598:	d9c00517 	ldw	r7,20(sp)
 800d59c:	39ffffc4 	addi	r7,r7,-1
 800d5a0:	d9c00515 	stw	r7,20(sp)
 800d5a4:	003d6d06 	br	800cb5c <_dtoa_r+0x26c>
 800d5a8:	dd400a17 	ldw	r21,40(sp)
 800d5ac:	dd000817 	ldw	r20,32(sp)
 800d5b0:	0023883a 	mov	r17,zero
 800d5b4:	003f4806 	br	800d2d8 <_dtoa_r+0x9e8>
 800d5b8:	10e3c83a 	sub	r17,r2,r3
 800d5bc:	9448983a 	sll	r4,r18,r17
 800d5c0:	003d3206 	br	800ca8c <_dtoa_r+0x19c>
 800d5c4:	d8000e15 	stw	zero,56(sp)
 800d5c8:	003d7506 	br	800cba0 <_dtoa_r+0x2b0>
 800d5cc:	b005883a 	mov	r2,r22
 800d5d0:	003f4506 	br	800d2e8 <_dtoa_r+0x9f8>
 800d5d4:	dc000915 	stw	r16,36(sp)
 800d5d8:	d9800a17 	ldw	r6,40(sp)
 800d5dc:	d9400917 	ldw	r5,36(sp)
 800d5e0:	e009883a 	mov	r4,fp
 800d5e4:	800fbcc0 	call	800fbcc <__pow5mult>
 800d5e8:	1021883a 	mov	r16,r2
 800d5ec:	003f5a06 	br	800d358 <_dtoa_r+0xa68>
 800d5f0:	01c00044 	movi	r7,1
 800d5f4:	d9c00b15 	stw	r7,44(sp)
 800d5f8:	d8802217 	ldw	r2,136(sp)
 800d5fc:	0081280e 	bge	zero,r2,800daa0 <_dtoa_r+0x11b0>
 800d600:	100d883a 	mov	r6,r2
 800d604:	1021883a 	mov	r16,r2
 800d608:	d8800c15 	stw	r2,48(sp)
 800d60c:	d8800615 	stw	r2,24(sp)
 800d610:	003d8806 	br	800cc34 <_dtoa_r+0x344>
 800d614:	d8800617 	ldw	r2,24(sp)
 800d618:	00be9b16 	blt	zero,r2,800d088 <_dtoa_r+0x798>
 800d61c:	10010f1e 	bne	r2,zero,800da5c <_dtoa_r+0x116c>
 800d620:	880b883a 	mov	r5,r17
 800d624:	000d883a 	mov	r6,zero
 800d628:	01d00534 	movhi	r7,16404
 800d62c:	8009883a 	mov	r4,r16
 800d630:	8014b500 	call	8014b50 <__muldf3>
 800d634:	900d883a 	mov	r6,r18
 800d638:	980f883a 	mov	r7,r19
 800d63c:	1009883a 	mov	r4,r2
 800d640:	180b883a 	mov	r5,r3
 800d644:	80149800 	call	8014980 <__gedf2>
 800d648:	002b883a 	mov	r21,zero
 800d64c:	0023883a 	mov	r17,zero
 800d650:	1000bf16 	blt	r2,zero,800d950 <_dtoa_r+0x1060>
 800d654:	d9802217 	ldw	r6,136(sp)
 800d658:	ddc00717 	ldw	r23,28(sp)
 800d65c:	018c303a 	nor	r6,zero,r6
 800d660:	d9800515 	stw	r6,20(sp)
 800d664:	a80b883a 	mov	r5,r21
 800d668:	e009883a 	mov	r4,fp
 800d66c:	800f5780 	call	800f578 <_Bfree>
 800d670:	883e4926 	beq	r17,zero,800cf98 <_dtoa_r+0x6a8>
 800d674:	003fad06 	br	800d52c <_dtoa_r+0xc3c>
 800d678:	d9c01117 	ldw	r7,68(sp)
 800d67c:	3801bc26 	beq	r7,zero,800dd70 <_dtoa_r+0x1480>
 800d680:	10810cc4 	addi	r2,r2,1075
 800d684:	dd400a17 	ldw	r21,40(sp)
 800d688:	dd000817 	ldw	r20,32(sp)
 800d68c:	003f0a06 	br	800d2b8 <_dtoa_r+0x9c8>
 800d690:	00800704 	movi	r2,28
 800d694:	d9000817 	ldw	r4,32(sp)
 800d698:	a0a9883a 	add	r20,r20,r2
 800d69c:	b0ad883a 	add	r22,r22,r2
 800d6a0:	2089883a 	add	r4,r4,r2
 800d6a4:	d9000815 	stw	r4,32(sp)
 800d6a8:	003f5106 	br	800d3f0 <_dtoa_r+0xb00>
 800d6ac:	d8c00317 	ldw	r3,12(sp)
 800d6b0:	b8c1fc0e 	bge	r23,r3,800dea4 <_dtoa_r+0x15b4>
 800d6b4:	0027883a 	mov	r19,zero
 800d6b8:	b805883a 	mov	r2,r23
 800d6bc:	003f3e06 	br	800d3b8 <_dtoa_r+0xac8>
 800d6c0:	880b883a 	mov	r5,r17
 800d6c4:	e009883a 	mov	r4,fp
 800d6c8:	000f883a 	mov	r7,zero
 800d6cc:	01800284 	movi	r6,10
 800d6d0:	800f5a00 	call	800f5a0 <__multadd>
 800d6d4:	d9000c17 	ldw	r4,48(sp)
 800d6d8:	1023883a 	mov	r17,r2
 800d6dc:	0102040e 	bge	zero,r4,800def0 <_dtoa_r+0x1600>
 800d6e0:	d9000615 	stw	r4,24(sp)
 800d6e4:	0500050e 	bge	zero,r20,800d6fc <_dtoa_r+0xe0c>
 800d6e8:	880b883a 	mov	r5,r17
 800d6ec:	a00d883a 	mov	r6,r20
 800d6f0:	e009883a 	mov	r4,fp
 800d6f4:	800fd0c0 	call	800fd0c <__lshift>
 800d6f8:	1023883a 	mov	r17,r2
 800d6fc:	9801241e 	bne	r19,zero,800db90 <_dtoa_r+0x12a0>
 800d700:	8829883a 	mov	r20,r17
 800d704:	d9000617 	ldw	r4,24(sp)
 800d708:	dcc00717 	ldw	r19,28(sp)
 800d70c:	9480004c 	andi	r18,r18,1
 800d710:	20bfffc4 	addi	r2,r4,-1
 800d714:	9885883a 	add	r2,r19,r2
 800d718:	d8800415 	stw	r2,16(sp)
 800d71c:	dc800615 	stw	r18,24(sp)
 800d720:	a80b883a 	mov	r5,r21
 800d724:	8009883a 	mov	r4,r16
 800d728:	800c6c80 	call	800c6c8 <quorem>
 800d72c:	880b883a 	mov	r5,r17
 800d730:	8009883a 	mov	r4,r16
 800d734:	102f883a 	mov	r23,r2
 800d738:	800fe540 	call	800fe54 <__mcmp>
 800d73c:	a80b883a 	mov	r5,r21
 800d740:	a00d883a 	mov	r6,r20
 800d744:	e009883a 	mov	r4,fp
 800d748:	102d883a 	mov	r22,r2
 800d74c:	800feb40 	call	800feb4 <__mdiff>
 800d750:	1007883a 	mov	r3,r2
 800d754:	10800317 	ldw	r2,12(r2)
 800d758:	bc800c04 	addi	r18,r23,48
 800d75c:	180b883a 	mov	r5,r3
 800d760:	10004e1e 	bne	r2,zero,800d89c <_dtoa_r+0xfac>
 800d764:	8009883a 	mov	r4,r16
 800d768:	d8c01615 	stw	r3,88(sp)
 800d76c:	800fe540 	call	800fe54 <__mcmp>
 800d770:	d8c01617 	ldw	r3,88(sp)
 800d774:	e009883a 	mov	r4,fp
 800d778:	d8801615 	stw	r2,88(sp)
 800d77c:	180b883a 	mov	r5,r3
 800d780:	800f5780 	call	800f578 <_Bfree>
 800d784:	d8801617 	ldw	r2,88(sp)
 800d788:	1000041e 	bne	r2,zero,800d79c <_dtoa_r+0xeac>
 800d78c:	d9800317 	ldw	r6,12(sp)
 800d790:	3000021e 	bne	r6,zero,800d79c <_dtoa_r+0xeac>
 800d794:	d8c00617 	ldw	r3,24(sp)
 800d798:	18003726 	beq	r3,zero,800d878 <_dtoa_r+0xf88>
 800d79c:	b0002016 	blt	r22,zero,800d820 <_dtoa_r+0xf30>
 800d7a0:	b000041e 	bne	r22,zero,800d7b4 <_dtoa_r+0xec4>
 800d7a4:	d9000317 	ldw	r4,12(sp)
 800d7a8:	2000021e 	bne	r4,zero,800d7b4 <_dtoa_r+0xec4>
 800d7ac:	d8c00617 	ldw	r3,24(sp)
 800d7b0:	18001b26 	beq	r3,zero,800d820 <_dtoa_r+0xf30>
 800d7b4:	00810716 	blt	zero,r2,800dbd4 <_dtoa_r+0x12e4>
 800d7b8:	d8c00417 	ldw	r3,16(sp)
 800d7bc:	9d800044 	addi	r22,r19,1
 800d7c0:	9c800005 	stb	r18,0(r19)
 800d7c4:	b02f883a 	mov	r23,r22
 800d7c8:	98c10626 	beq	r19,r3,800dbe4 <_dtoa_r+0x12f4>
 800d7cc:	800b883a 	mov	r5,r16
 800d7d0:	000f883a 	mov	r7,zero
 800d7d4:	01800284 	movi	r6,10
 800d7d8:	e009883a 	mov	r4,fp
 800d7dc:	800f5a00 	call	800f5a0 <__multadd>
 800d7e0:	1021883a 	mov	r16,r2
 800d7e4:	000f883a 	mov	r7,zero
 800d7e8:	01800284 	movi	r6,10
 800d7ec:	880b883a 	mov	r5,r17
 800d7f0:	e009883a 	mov	r4,fp
 800d7f4:	8d002526 	beq	r17,r20,800d88c <_dtoa_r+0xf9c>
 800d7f8:	800f5a00 	call	800f5a0 <__multadd>
 800d7fc:	a00b883a 	mov	r5,r20
 800d800:	000f883a 	mov	r7,zero
 800d804:	01800284 	movi	r6,10
 800d808:	e009883a 	mov	r4,fp
 800d80c:	1023883a 	mov	r17,r2
 800d810:	800f5a00 	call	800f5a0 <__multadd>
 800d814:	1029883a 	mov	r20,r2
 800d818:	b027883a 	mov	r19,r22
 800d81c:	003fc006 	br	800d720 <_dtoa_r+0xe30>
 800d820:	9011883a 	mov	r8,r18
 800d824:	00800e0e 	bge	zero,r2,800d860 <_dtoa_r+0xf70>
 800d828:	800b883a 	mov	r5,r16
 800d82c:	01800044 	movi	r6,1
 800d830:	e009883a 	mov	r4,fp
 800d834:	da001715 	stw	r8,92(sp)
 800d838:	800fd0c0 	call	800fd0c <__lshift>
 800d83c:	a80b883a 	mov	r5,r21
 800d840:	1009883a 	mov	r4,r2
 800d844:	1021883a 	mov	r16,r2
 800d848:	800fe540 	call	800fe54 <__mcmp>
 800d84c:	da001717 	ldw	r8,92(sp)
 800d850:	0081960e 	bge	zero,r2,800deac <_dtoa_r+0x15bc>
 800d854:	00800e44 	movi	r2,57
 800d858:	40817026 	beq	r8,r2,800de1c <_dtoa_r+0x152c>
 800d85c:	ba000c44 	addi	r8,r23,49
 800d860:	8825883a 	mov	r18,r17
 800d864:	9dc00044 	addi	r23,r19,1
 800d868:	9a000005 	stb	r8,0(r19)
 800d86c:	a023883a 	mov	r17,r20
 800d870:	dc000915 	stw	r16,36(sp)
 800d874:	003f2406 	br	800d508 <_dtoa_r+0xc18>
 800d878:	00800e44 	movi	r2,57
 800d87c:	9011883a 	mov	r8,r18
 800d880:	90816626 	beq	r18,r2,800de1c <_dtoa_r+0x152c>
 800d884:	05bff516 	blt	zero,r22,800d85c <_dtoa_r+0xf6c>
 800d888:	003ff506 	br	800d860 <_dtoa_r+0xf70>
 800d88c:	800f5a00 	call	800f5a0 <__multadd>
 800d890:	1023883a 	mov	r17,r2
 800d894:	1029883a 	mov	r20,r2
 800d898:	003fdf06 	br	800d818 <_dtoa_r+0xf28>
 800d89c:	e009883a 	mov	r4,fp
 800d8a0:	800f5780 	call	800f578 <_Bfree>
 800d8a4:	00800044 	movi	r2,1
 800d8a8:	003fbc06 	br	800d79c <_dtoa_r+0xeac>
 800d8ac:	a80b883a 	mov	r5,r21
 800d8b0:	8009883a 	mov	r4,r16
 800d8b4:	800fe540 	call	800fe54 <__mcmp>
 800d8b8:	103edb0e 	bge	r2,zero,800d428 <_dtoa_r+0xb38>
 800d8bc:	800b883a 	mov	r5,r16
 800d8c0:	000f883a 	mov	r7,zero
 800d8c4:	01800284 	movi	r6,10
 800d8c8:	e009883a 	mov	r4,fp
 800d8cc:	800f5a00 	call	800f5a0 <__multadd>
 800d8d0:	1021883a 	mov	r16,r2
 800d8d4:	d8800517 	ldw	r2,20(sp)
 800d8d8:	d8c00b17 	ldw	r3,44(sp)
 800d8dc:	10bfffc4 	addi	r2,r2,-1
 800d8e0:	d8800515 	stw	r2,20(sp)
 800d8e4:	183f761e 	bne	r3,zero,800d6c0 <_dtoa_r+0xdd0>
 800d8e8:	d9000c17 	ldw	r4,48(sp)
 800d8ec:	0101730e 	bge	zero,r4,800debc <_dtoa_r+0x15cc>
 800d8f0:	d9000615 	stw	r4,24(sp)
 800d8f4:	003ed006 	br	800d438 <_dtoa_r+0xb48>
 800d8f8:	00800084 	movi	r2,2
 800d8fc:	3081861e 	bne	r6,r2,800df18 <_dtoa_r+0x1628>
 800d900:	d8000b15 	stw	zero,44(sp)
 800d904:	003f3c06 	br	800d5f8 <_dtoa_r+0xd08>
 800d908:	dc000917 	ldw	r16,36(sp)
 800d90c:	003e9206 	br	800d358 <_dtoa_r+0xa68>
 800d910:	d9c00317 	ldw	r7,12(sp)
 800d914:	00800084 	movi	r2,2
 800d918:	11fec50e 	bge	r2,r7,800d430 <_dtoa_r+0xb40>
 800d91c:	d9000617 	ldw	r4,24(sp)
 800d920:	20013c1e 	bne	r4,zero,800de14 <_dtoa_r+0x1524>
 800d924:	a80b883a 	mov	r5,r21
 800d928:	000f883a 	mov	r7,zero
 800d92c:	01800144 	movi	r6,5
 800d930:	e009883a 	mov	r4,fp
 800d934:	800f5a00 	call	800f5a0 <__multadd>
 800d938:	100b883a 	mov	r5,r2
 800d93c:	8009883a 	mov	r4,r16
 800d940:	102b883a 	mov	r21,r2
 800d944:	800fe540 	call	800fe54 <__mcmp>
 800d948:	dc000915 	stw	r16,36(sp)
 800d94c:	00bf410e 	bge	zero,r2,800d654 <_dtoa_r+0xd64>
 800d950:	d9c00717 	ldw	r7,28(sp)
 800d954:	00800c44 	movi	r2,49
 800d958:	38800005 	stb	r2,0(r7)
 800d95c:	d8800517 	ldw	r2,20(sp)
 800d960:	3dc00044 	addi	r23,r7,1
 800d964:	10800044 	addi	r2,r2,1
 800d968:	d8800515 	stw	r2,20(sp)
 800d96c:	003f3d06 	br	800d664 <_dtoa_r+0xd74>
 800d970:	d9800517 	ldw	r6,20(sp)
 800d974:	d9c00717 	ldw	r7,28(sp)
 800d978:	00800c44 	movi	r2,49
 800d97c:	31800044 	addi	r6,r6,1
 800d980:	d9800515 	stw	r6,20(sp)
 800d984:	38800005 	stb	r2,0(r7)
 800d988:	003edf06 	br	800d508 <_dtoa_r+0xc18>
 800d98c:	d8000b15 	stw	zero,44(sp)
 800d990:	003c9f06 	br	800cc10 <_dtoa_r+0x320>
 800d994:	903e7e1e 	bne	r18,zero,800d390 <_dtoa_r+0xaa0>
 800d998:	00800434 	movhi	r2,16
 800d99c:	10bfffc4 	addi	r2,r2,-1
 800d9a0:	9884703a 	and	r2,r19,r2
 800d9a4:	1000ea1e 	bne	r2,zero,800dd50 <_dtoa_r+0x1460>
 800d9a8:	9cdffc2c 	andhi	r19,r19,32752
 800d9ac:	9800e826 	beq	r19,zero,800dd50 <_dtoa_r+0x1460>
 800d9b0:	d9c00817 	ldw	r7,32(sp)
 800d9b4:	b5800044 	addi	r22,r22,1
 800d9b8:	04c00044 	movi	r19,1
 800d9bc:	39c00044 	addi	r7,r7,1
 800d9c0:	d9c00815 	stw	r7,32(sp)
 800d9c4:	d8800d17 	ldw	r2,52(sp)
 800d9c8:	103e721e 	bne	r2,zero,800d394 <_dtoa_r+0xaa4>
 800d9cc:	00800044 	movi	r2,1
 800d9d0:	003e7906 	br	800d3b8 <_dtoa_r+0xac8>
 800d9d4:	8009883a 	mov	r4,r16
 800d9d8:	8015d380 	call	8015d38 <__floatsidf>
 800d9dc:	d9800f17 	ldw	r6,60(sp)
 800d9e0:	d9c01017 	ldw	r7,64(sp)
 800d9e4:	1009883a 	mov	r4,r2
 800d9e8:	180b883a 	mov	r5,r3
 800d9ec:	8014b500 	call	8014b50 <__muldf3>
 800d9f0:	000d883a 	mov	r6,zero
 800d9f4:	01d00734 	movhi	r7,16412
 800d9f8:	1009883a 	mov	r4,r2
 800d9fc:	180b883a 	mov	r5,r3
 800da00:	801367c0 	call	801367c <__adddf3>
 800da04:	047f3034 	movhi	r17,64704
 800da08:	1021883a 	mov	r16,r2
 800da0c:	1c63883a 	add	r17,r3,r17
 800da10:	d9000f17 	ldw	r4,60(sp)
 800da14:	d9401017 	ldw	r5,64(sp)
 800da18:	000d883a 	mov	r6,zero
 800da1c:	01d00534 	movhi	r7,16404
 800da20:	80153bc0 	call	80153bc <__subdf3>
 800da24:	800d883a 	mov	r6,r16
 800da28:	880f883a 	mov	r7,r17
 800da2c:	1009883a 	mov	r4,r2
 800da30:	180b883a 	mov	r5,r3
 800da34:	102b883a 	mov	r21,r2
 800da38:	1829883a 	mov	r20,r3
 800da3c:	80149800 	call	8014980 <__gedf2>
 800da40:	00806c16 	blt	zero,r2,800dbf4 <_dtoa_r+0x1304>
 800da44:	89e0003c 	xorhi	r7,r17,32768
 800da48:	800d883a 	mov	r6,r16
 800da4c:	a809883a 	mov	r4,r21
 800da50:	a00b883a 	mov	r5,r20
 800da54:	8014a5c0 	call	8014a5c <__ledf2>
 800da58:	103d7e0e 	bge	r2,zero,800d054 <_dtoa_r+0x764>
 800da5c:	002b883a 	mov	r21,zero
 800da60:	0023883a 	mov	r17,zero
 800da64:	003efb06 	br	800d654 <_dtoa_r+0xd64>
 800da68:	d8800717 	ldw	r2,28(sp)
 800da6c:	003bd006 	br	800c9b0 <_dtoa_r+0xc0>
 800da70:	d9000a17 	ldw	r4,40(sp)
 800da74:	d9800d17 	ldw	r6,52(sp)
 800da78:	dd400a15 	stw	r21,40(sp)
 800da7c:	a905c83a 	sub	r2,r21,r4
 800da80:	308d883a 	add	r6,r6,r2
 800da84:	d9800d15 	stw	r6,52(sp)
 800da88:	002b883a 	mov	r21,zero
 800da8c:	003e0606 	br	800d2a8 <_dtoa_r+0x9b8>
 800da90:	9023883a 	mov	r17,r18
 800da94:	9829883a 	mov	r20,r19
 800da98:	04000084 	movi	r16,2
 800da9c:	003c9206 	br	800cce8 <_dtoa_r+0x3f8>
 800daa0:	04000044 	movi	r16,1
 800daa4:	dc000c15 	stw	r16,48(sp)
 800daa8:	dc000615 	stw	r16,24(sp)
 800daac:	dc002215 	stw	r16,136(sp)
 800dab0:	e0001115 	stw	zero,68(fp)
 800dab4:	000b883a 	mov	r5,zero
 800dab8:	003c6906 	br	800cc60 <_dtoa_r+0x370>
 800dabc:	3021883a 	mov	r16,r6
 800dac0:	003ffb06 	br	800dab0 <_dtoa_r+0x11c0>
 800dac4:	1000021e 	bne	r2,zero,800dad0 <_dtoa_r+0x11e0>
 800dac8:	4200004c 	andi	r8,r8,1
 800dacc:	403e7d1e 	bne	r8,zero,800d4c4 <_dtoa_r+0xbd4>
 800dad0:	01000c04 	movi	r4,48
 800dad4:	00000106 	br	800dadc <_dtoa_r+0x11ec>
 800dad8:	102f883a 	mov	r23,r2
 800dadc:	b8bfffc4 	addi	r2,r23,-1
 800dae0:	10c00007 	ldb	r3,0(r2)
 800dae4:	193ffc26 	beq	r3,r4,800dad8 <_dtoa_r+0x11e8>
 800dae8:	003e8706 	br	800d508 <_dtoa_r+0xc18>
 800daec:	d8800517 	ldw	r2,20(sp)
 800daf0:	00a3c83a 	sub	r17,zero,r2
 800daf4:	8800a426 	beq	r17,zero,800dd88 <_dtoa_r+0x1498>
 800daf8:	888003cc 	andi	r2,r17,15
 800dafc:	100490fa 	slli	r2,r2,3
 800db00:	00c200b4 	movhi	r3,2050
 800db04:	18e8fb04 	addi	r3,r3,-23572
 800db08:	1885883a 	add	r2,r3,r2
 800db0c:	11800017 	ldw	r6,0(r2)
 800db10:	11c00117 	ldw	r7,4(r2)
 800db14:	9009883a 	mov	r4,r18
 800db18:	980b883a 	mov	r5,r19
 800db1c:	8823d13a 	srai	r17,r17,4
 800db20:	8014b500 	call	8014b50 <__muldf3>
 800db24:	d8800f15 	stw	r2,60(sp)
 800db28:	d8c01015 	stw	r3,64(sp)
 800db2c:	8800e826 	beq	r17,zero,800ded0 <_dtoa_r+0x15e0>
 800db30:	050200b4 	movhi	r20,2050
 800db34:	a528f104 	addi	r20,r20,-23612
 800db38:	04000084 	movi	r16,2
 800db3c:	8980004c 	andi	r6,r17,1
 800db40:	1009883a 	mov	r4,r2
 800db44:	8823d07a 	srai	r17,r17,1
 800db48:	180b883a 	mov	r5,r3
 800db4c:	30000426 	beq	r6,zero,800db60 <_dtoa_r+0x1270>
 800db50:	a1800017 	ldw	r6,0(r20)
 800db54:	a1c00117 	ldw	r7,4(r20)
 800db58:	84000044 	addi	r16,r16,1
 800db5c:	8014b500 	call	8014b50 <__muldf3>
 800db60:	a5000204 	addi	r20,r20,8
 800db64:	883ff51e 	bne	r17,zero,800db3c <_dtoa_r+0x124c>
 800db68:	d8800f15 	stw	r2,60(sp)
 800db6c:	d8c01015 	stw	r3,64(sp)
 800db70:	003c7606 	br	800cd4c <_dtoa_r+0x45c>
 800db74:	00c00c04 	movi	r3,48
 800db78:	10c00005 	stb	r3,0(r2)
 800db7c:	d8c00517 	ldw	r3,20(sp)
 800db80:	bd3fffc3 	ldbu	r20,-1(r23)
 800db84:	18c00044 	addi	r3,r3,1
 800db88:	d8c00515 	stw	r3,20(sp)
 800db8c:	003db906 	br	800d274 <_dtoa_r+0x984>
 800db90:	89400117 	ldw	r5,4(r17)
 800db94:	e009883a 	mov	r4,fp
 800db98:	800f4d00 	call	800f4d0 <_Balloc>
 800db9c:	89800417 	ldw	r6,16(r17)
 800dba0:	89400304 	addi	r5,r17,12
 800dba4:	11000304 	addi	r4,r2,12
 800dba8:	31800084 	addi	r6,r6,2
 800dbac:	318d883a 	add	r6,r6,r6
 800dbb0:	318d883a 	add	r6,r6,r6
 800dbb4:	1027883a 	mov	r19,r2
 800dbb8:	80098e40 	call	80098e4 <memcpy>
 800dbbc:	01800044 	movi	r6,1
 800dbc0:	980b883a 	mov	r5,r19
 800dbc4:	e009883a 	mov	r4,fp
 800dbc8:	800fd0c0 	call	800fd0c <__lshift>
 800dbcc:	1029883a 	mov	r20,r2
 800dbd0:	003ecc06 	br	800d704 <_dtoa_r+0xe14>
 800dbd4:	00800e44 	movi	r2,57
 800dbd8:	90809026 	beq	r18,r2,800de1c <_dtoa_r+0x152c>
 800dbdc:	92000044 	addi	r8,r18,1
 800dbe0:	003f1f06 	br	800d860 <_dtoa_r+0xf70>
 800dbe4:	9011883a 	mov	r8,r18
 800dbe8:	8825883a 	mov	r18,r17
 800dbec:	a023883a 	mov	r17,r20
 800dbf0:	003e2906 	br	800d498 <_dtoa_r+0xba8>
 800dbf4:	002b883a 	mov	r21,zero
 800dbf8:	0023883a 	mov	r17,zero
 800dbfc:	003f5406 	br	800d950 <_dtoa_r+0x1060>
 800dc00:	61bfffc4 	addi	r6,r12,-1
 800dc04:	300490fa 	slli	r2,r6,3
 800dc08:	00c200b4 	movhi	r3,2050
 800dc0c:	18e8fb04 	addi	r3,r3,-23572
 800dc10:	1885883a 	add	r2,r3,r2
 800dc14:	11000017 	ldw	r4,0(r2)
 800dc18:	11400117 	ldw	r5,4(r2)
 800dc1c:	d8800717 	ldw	r2,28(sp)
 800dc20:	880f883a 	mov	r7,r17
 800dc24:	d9801215 	stw	r6,72(sp)
 800dc28:	800d883a 	mov	r6,r16
 800dc2c:	db001615 	stw	r12,88(sp)
 800dc30:	15c00044 	addi	r23,r2,1
 800dc34:	8014b500 	call	8014b50 <__muldf3>
 800dc38:	d9401017 	ldw	r5,64(sp)
 800dc3c:	d9000f17 	ldw	r4,60(sp)
 800dc40:	d8c01515 	stw	r3,84(sp)
 800dc44:	d8801415 	stw	r2,80(sp)
 800dc48:	8015cb80 	call	8015cb8 <__fixdfsi>
 800dc4c:	1009883a 	mov	r4,r2
 800dc50:	1021883a 	mov	r16,r2
 800dc54:	8015d380 	call	8015d38 <__floatsidf>
 800dc58:	d9000f17 	ldw	r4,60(sp)
 800dc5c:	d9401017 	ldw	r5,64(sp)
 800dc60:	100d883a 	mov	r6,r2
 800dc64:	180f883a 	mov	r7,r3
 800dc68:	80153bc0 	call	80153bc <__subdf3>
 800dc6c:	1829883a 	mov	r20,r3
 800dc70:	d8c00717 	ldw	r3,28(sp)
 800dc74:	84000c04 	addi	r16,r16,48
 800dc78:	1023883a 	mov	r17,r2
 800dc7c:	1c000005 	stb	r16,0(r3)
 800dc80:	db001617 	ldw	r12,88(sp)
 800dc84:	00800044 	movi	r2,1
 800dc88:	60802226 	beq	r12,r2,800dd14 <_dtoa_r+0x1424>
 800dc8c:	d9c00717 	ldw	r7,28(sp)
 800dc90:	8805883a 	mov	r2,r17
 800dc94:	b82b883a 	mov	r21,r23
 800dc98:	3b19883a 	add	r12,r7,r12
 800dc9c:	6023883a 	mov	r17,r12
 800dca0:	a007883a 	mov	r3,r20
 800dca4:	dc800f15 	stw	r18,60(sp)
 800dca8:	000d883a 	mov	r6,zero
 800dcac:	01d00934 	movhi	r7,16420
 800dcb0:	1009883a 	mov	r4,r2
 800dcb4:	180b883a 	mov	r5,r3
 800dcb8:	8014b500 	call	8014b50 <__muldf3>
 800dcbc:	180b883a 	mov	r5,r3
 800dcc0:	1009883a 	mov	r4,r2
 800dcc4:	1829883a 	mov	r20,r3
 800dcc8:	1025883a 	mov	r18,r2
 800dccc:	8015cb80 	call	8015cb8 <__fixdfsi>
 800dcd0:	1009883a 	mov	r4,r2
 800dcd4:	1021883a 	mov	r16,r2
 800dcd8:	8015d380 	call	8015d38 <__floatsidf>
 800dcdc:	100d883a 	mov	r6,r2
 800dce0:	180f883a 	mov	r7,r3
 800dce4:	9009883a 	mov	r4,r18
 800dce8:	a00b883a 	mov	r5,r20
 800dcec:	84000c04 	addi	r16,r16,48
 800dcf0:	80153bc0 	call	80153bc <__subdf3>
 800dcf4:	ad400044 	addi	r21,r21,1
 800dcf8:	ac3fffc5 	stb	r16,-1(r21)
 800dcfc:	ac7fea1e 	bne	r21,r17,800dca8 <_dtoa_r+0x13b8>
 800dd00:	1023883a 	mov	r17,r2
 800dd04:	d8801217 	ldw	r2,72(sp)
 800dd08:	dc800f17 	ldw	r18,60(sp)
 800dd0c:	1829883a 	mov	r20,r3
 800dd10:	b8af883a 	add	r23,r23,r2
 800dd14:	d9001417 	ldw	r4,80(sp)
 800dd18:	d9401517 	ldw	r5,84(sp)
 800dd1c:	000d883a 	mov	r6,zero
 800dd20:	01cff834 	movhi	r7,16352
 800dd24:	801367c0 	call	801367c <__adddf3>
 800dd28:	880d883a 	mov	r6,r17
 800dd2c:	a00f883a 	mov	r7,r20
 800dd30:	1009883a 	mov	r4,r2
 800dd34:	180b883a 	mov	r5,r3
 800dd38:	8014a5c0 	call	8014a5c <__ledf2>
 800dd3c:	10003e0e 	bge	r2,zero,800de38 <_dtoa_r+0x1548>
 800dd40:	d9001317 	ldw	r4,76(sp)
 800dd44:	bd3fffc3 	ldbu	r20,-1(r23)
 800dd48:	d9000515 	stw	r4,20(sp)
 800dd4c:	003d3b06 	br	800d23c <_dtoa_r+0x94c>
 800dd50:	0027883a 	mov	r19,zero
 800dd54:	003f1b06 	br	800d9c4 <_dtoa_r+0x10d4>
 800dd58:	d8800817 	ldw	r2,32(sp)
 800dd5c:	11e9c83a 	sub	r20,r2,r7
 800dd60:	0005883a 	mov	r2,zero
 800dd64:	003d5406 	br	800d2b8 <_dtoa_r+0x9c8>
 800dd68:	00800044 	movi	r2,1
 800dd6c:	003dc706 	br	800d48c <_dtoa_r+0xb9c>
 800dd70:	d8c00217 	ldw	r3,8(sp)
 800dd74:	00800d84 	movi	r2,54
 800dd78:	dd400a17 	ldw	r21,40(sp)
 800dd7c:	10c5c83a 	sub	r2,r2,r3
 800dd80:	dd000817 	ldw	r20,32(sp)
 800dd84:	003d4c06 	br	800d2b8 <_dtoa_r+0x9c8>
 800dd88:	dc800f15 	stw	r18,60(sp)
 800dd8c:	dcc01015 	stw	r19,64(sp)
 800dd90:	04000084 	movi	r16,2
 800dd94:	003bed06 	br	800cd4c <_dtoa_r+0x45c>
 800dd98:	d9000617 	ldw	r4,24(sp)
 800dd9c:	203f0d26 	beq	r4,zero,800d9d4 <_dtoa_r+0x10e4>
 800dda0:	d9800c17 	ldw	r6,48(sp)
 800dda4:	01bcab0e 	bge	zero,r6,800d054 <_dtoa_r+0x764>
 800dda8:	d9401017 	ldw	r5,64(sp)
 800ddac:	d9000f17 	ldw	r4,60(sp)
 800ddb0:	000d883a 	mov	r6,zero
 800ddb4:	01d00934 	movhi	r7,16420
 800ddb8:	8014b500 	call	8014b50 <__muldf3>
 800ddbc:	81000044 	addi	r4,r16,1
 800ddc0:	d8800f15 	stw	r2,60(sp)
 800ddc4:	d8c01015 	stw	r3,64(sp)
 800ddc8:	8015d380 	call	8015d38 <__floatsidf>
 800ddcc:	d9800f17 	ldw	r6,60(sp)
 800ddd0:	d9c01017 	ldw	r7,64(sp)
 800ddd4:	1009883a 	mov	r4,r2
 800ddd8:	180b883a 	mov	r5,r3
 800dddc:	8014b500 	call	8014b50 <__muldf3>
 800dde0:	01d00734 	movhi	r7,16412
 800dde4:	000d883a 	mov	r6,zero
 800dde8:	1009883a 	mov	r4,r2
 800ddec:	180b883a 	mov	r5,r3
 800ddf0:	801367c0 	call	801367c <__adddf3>
 800ddf4:	d9c00517 	ldw	r7,20(sp)
 800ddf8:	047f3034 	movhi	r17,64704
 800ddfc:	1021883a 	mov	r16,r2
 800de00:	39ffffc4 	addi	r7,r7,-1
 800de04:	d9c01315 	stw	r7,76(sp)
 800de08:	1c63883a 	add	r17,r3,r17
 800de0c:	db000c17 	ldw	r12,48(sp)
 800de10:	003bea06 	br	800cdbc <_dtoa_r+0x4cc>
 800de14:	dc000915 	stw	r16,36(sp)
 800de18:	003e0e06 	br	800d654 <_dtoa_r+0xd64>
 800de1c:	01000e44 	movi	r4,57
 800de20:	8825883a 	mov	r18,r17
 800de24:	9dc00044 	addi	r23,r19,1
 800de28:	99000005 	stb	r4,0(r19)
 800de2c:	a023883a 	mov	r17,r20
 800de30:	dc000915 	stw	r16,36(sp)
 800de34:	003da406 	br	800d4c8 <_dtoa_r+0xbd8>
 800de38:	d9801417 	ldw	r6,80(sp)
 800de3c:	d9c01517 	ldw	r7,84(sp)
 800de40:	0009883a 	mov	r4,zero
 800de44:	014ff834 	movhi	r5,16352
 800de48:	80153bc0 	call	80153bc <__subdf3>
 800de4c:	880d883a 	mov	r6,r17
 800de50:	a00f883a 	mov	r7,r20
 800de54:	1009883a 	mov	r4,r2
 800de58:	180b883a 	mov	r5,r3
 800de5c:	80149800 	call	8014980 <__gedf2>
 800de60:	00bc7c0e 	bge	zero,r2,800d054 <_dtoa_r+0x764>
 800de64:	01000c04 	movi	r4,48
 800de68:	00000106 	br	800de70 <_dtoa_r+0x1580>
 800de6c:	102f883a 	mov	r23,r2
 800de70:	b8bfffc4 	addi	r2,r23,-1
 800de74:	10c00007 	ldb	r3,0(r2)
 800de78:	193ffc26 	beq	r3,r4,800de6c <_dtoa_r+0x157c>
 800de7c:	d9801317 	ldw	r6,76(sp)
 800de80:	d9800515 	stw	r6,20(sp)
 800de84:	003c4406 	br	800cf98 <_dtoa_r+0x6a8>
 800de88:	d9801317 	ldw	r6,76(sp)
 800de8c:	d9800515 	stw	r6,20(sp)
 800de90:	003cea06 	br	800d23c <_dtoa_r+0x94c>
 800de94:	dd800f17 	ldw	r22,60(sp)
 800de98:	dcc01017 	ldw	r19,64(sp)
 800de9c:	dc801217 	ldw	r18,72(sp)
 800dea0:	003c6c06 	br	800d054 <_dtoa_r+0x764>
 800dea4:	903e031e 	bne	r18,zero,800d6b4 <_dtoa_r+0xdc4>
 800dea8:	003ebb06 	br	800d998 <_dtoa_r+0x10a8>
 800deac:	103e6c1e 	bne	r2,zero,800d860 <_dtoa_r+0xf70>
 800deb0:	4080004c 	andi	r2,r8,1
 800deb4:	103e6a26 	beq	r2,zero,800d860 <_dtoa_r+0xf70>
 800deb8:	003e6606 	br	800d854 <_dtoa_r+0xf64>
 800debc:	d8c00317 	ldw	r3,12(sp)
 800dec0:	00800084 	movi	r2,2
 800dec4:	10c02916 	blt	r2,r3,800df6c <_dtoa_r+0x167c>
 800dec8:	d9000c17 	ldw	r4,48(sp)
 800decc:	003e8806 	br	800d8f0 <_dtoa_r+0x1000>
 800ded0:	04000084 	movi	r16,2
 800ded4:	003b9d06 	br	800cd4c <_dtoa_r+0x45c>
 800ded8:	d9001317 	ldw	r4,76(sp)
 800dedc:	d9000515 	stw	r4,20(sp)
 800dee0:	003cd606 	br	800d23c <_dtoa_r+0x94c>
 800dee4:	d8801317 	ldw	r2,76(sp)
 800dee8:	d8800515 	stw	r2,20(sp)
 800deec:	003c2a06 	br	800cf98 <_dtoa_r+0x6a8>
 800def0:	d9800317 	ldw	r6,12(sp)
 800def4:	00800084 	movi	r2,2
 800def8:	11801516 	blt	r2,r6,800df50 <_dtoa_r+0x1660>
 800defc:	d9c00c17 	ldw	r7,48(sp)
 800df00:	d9c00615 	stw	r7,24(sp)
 800df04:	003df706 	br	800d6e4 <_dtoa_r+0xdf4>
 800df08:	193d3926 	beq	r3,r4,800d3f0 <_dtoa_r+0xb00>
 800df0c:	00c00f04 	movi	r3,60
 800df10:	1885c83a 	sub	r2,r3,r2
 800df14:	003ddf06 	br	800d694 <_dtoa_r+0xda4>
 800df18:	e009883a 	mov	r4,fp
 800df1c:	e0001115 	stw	zero,68(fp)
 800df20:	000b883a 	mov	r5,zero
 800df24:	800f4d00 	call	800f4d0 <_Balloc>
 800df28:	d8800715 	stw	r2,28(sp)
 800df2c:	d8c00717 	ldw	r3,28(sp)
 800df30:	00bfffc4 	movi	r2,-1
 800df34:	01000044 	movi	r4,1
 800df38:	d8800c15 	stw	r2,48(sp)
 800df3c:	e0c01015 	stw	r3,64(fp)
 800df40:	d9000b15 	stw	r4,44(sp)
 800df44:	d8800615 	stw	r2,24(sp)
 800df48:	d8002215 	stw	zero,136(sp)
 800df4c:	003c4106 	br	800d054 <_dtoa_r+0x764>
 800df50:	d8c00c17 	ldw	r3,48(sp)
 800df54:	d8c00615 	stw	r3,24(sp)
 800df58:	003e7006 	br	800d91c <_dtoa_r+0x102c>
 800df5c:	04400044 	movi	r17,1
 800df60:	003b2006 	br	800cbe4 <_dtoa_r+0x2f4>
 800df64:	000b883a 	mov	r5,zero
 800df68:	003b3d06 	br	800cc60 <_dtoa_r+0x370>
 800df6c:	d8800c17 	ldw	r2,48(sp)
 800df70:	d8800615 	stw	r2,24(sp)
 800df74:	003e6906 	br	800d91c <_dtoa_r+0x102c>

0800df78 <__sflush_r>:
 800df78:	2880030b 	ldhu	r2,12(r5)
 800df7c:	defffb04 	addi	sp,sp,-20
 800df80:	dcc00315 	stw	r19,12(sp)
 800df84:	dc400115 	stw	r17,4(sp)
 800df88:	dfc00415 	stw	ra,16(sp)
 800df8c:	dc800215 	stw	r18,8(sp)
 800df90:	dc000015 	stw	r16,0(sp)
 800df94:	10c0020c 	andi	r3,r2,8
 800df98:	2823883a 	mov	r17,r5
 800df9c:	2027883a 	mov	r19,r4
 800dfa0:	1800311e 	bne	r3,zero,800e068 <__sflush_r+0xf0>
 800dfa4:	28c00117 	ldw	r3,4(r5)
 800dfa8:	10820014 	ori	r2,r2,2048
 800dfac:	2880030d 	sth	r2,12(r5)
 800dfb0:	00c04b0e 	bge	zero,r3,800e0e0 <__sflush_r+0x168>
 800dfb4:	8a000a17 	ldw	r8,40(r17)
 800dfb8:	40002326 	beq	r8,zero,800e048 <__sflush_r+0xd0>
 800dfbc:	9c000017 	ldw	r16,0(r19)
 800dfc0:	10c4000c 	andi	r3,r2,4096
 800dfc4:	98000015 	stw	zero,0(r19)
 800dfc8:	18004826 	beq	r3,zero,800e0ec <__sflush_r+0x174>
 800dfcc:	89801417 	ldw	r6,80(r17)
 800dfd0:	10c0010c 	andi	r3,r2,4
 800dfd4:	18000626 	beq	r3,zero,800dff0 <__sflush_r+0x78>
 800dfd8:	88c00117 	ldw	r3,4(r17)
 800dfdc:	88800c17 	ldw	r2,48(r17)
 800dfe0:	30cdc83a 	sub	r6,r6,r3
 800dfe4:	10000226 	beq	r2,zero,800dff0 <__sflush_r+0x78>
 800dfe8:	88800f17 	ldw	r2,60(r17)
 800dfec:	308dc83a 	sub	r6,r6,r2
 800dff0:	89400717 	ldw	r5,28(r17)
 800dff4:	000f883a 	mov	r7,zero
 800dff8:	9809883a 	mov	r4,r19
 800dffc:	403ee83a 	callr	r8
 800e000:	00ffffc4 	movi	r3,-1
 800e004:	10c04426 	beq	r2,r3,800e118 <__sflush_r+0x1a0>
 800e008:	88c0030b 	ldhu	r3,12(r17)
 800e00c:	89000417 	ldw	r4,16(r17)
 800e010:	88000115 	stw	zero,4(r17)
 800e014:	197dffcc 	andi	r5,r3,63487
 800e018:	8940030d 	sth	r5,12(r17)
 800e01c:	89000015 	stw	r4,0(r17)
 800e020:	18c4000c 	andi	r3,r3,4096
 800e024:	18002c1e 	bne	r3,zero,800e0d8 <__sflush_r+0x160>
 800e028:	89400c17 	ldw	r5,48(r17)
 800e02c:	9c000015 	stw	r16,0(r19)
 800e030:	28000526 	beq	r5,zero,800e048 <__sflush_r+0xd0>
 800e034:	88801004 	addi	r2,r17,64
 800e038:	28800226 	beq	r5,r2,800e044 <__sflush_r+0xcc>
 800e03c:	9809883a 	mov	r4,r19
 800e040:	800e7a00 	call	800e7a0 <_free_r>
 800e044:	88000c15 	stw	zero,48(r17)
 800e048:	0005883a 	mov	r2,zero
 800e04c:	dfc00417 	ldw	ra,16(sp)
 800e050:	dcc00317 	ldw	r19,12(sp)
 800e054:	dc800217 	ldw	r18,8(sp)
 800e058:	dc400117 	ldw	r17,4(sp)
 800e05c:	dc000017 	ldw	r16,0(sp)
 800e060:	dec00504 	addi	sp,sp,20
 800e064:	f800283a 	ret
 800e068:	2c800417 	ldw	r18,16(r5)
 800e06c:	903ff626 	beq	r18,zero,800e048 <__sflush_r+0xd0>
 800e070:	2c000017 	ldw	r16,0(r5)
 800e074:	108000cc 	andi	r2,r2,3
 800e078:	2c800015 	stw	r18,0(r5)
 800e07c:	84a1c83a 	sub	r16,r16,r18
 800e080:	1000131e 	bne	r2,zero,800e0d0 <__sflush_r+0x158>
 800e084:	28800517 	ldw	r2,20(r5)
 800e088:	88800215 	stw	r2,8(r17)
 800e08c:	04000316 	blt	zero,r16,800e09c <__sflush_r+0x124>
 800e090:	003fed06 	br	800e048 <__sflush_r+0xd0>
 800e094:	90a5883a 	add	r18,r18,r2
 800e098:	043feb0e 	bge	zero,r16,800e048 <__sflush_r+0xd0>
 800e09c:	88800917 	ldw	r2,36(r17)
 800e0a0:	89400717 	ldw	r5,28(r17)
 800e0a4:	800f883a 	mov	r7,r16
 800e0a8:	900d883a 	mov	r6,r18
 800e0ac:	9809883a 	mov	r4,r19
 800e0b0:	103ee83a 	callr	r2
 800e0b4:	80a1c83a 	sub	r16,r16,r2
 800e0b8:	00bff616 	blt	zero,r2,800e094 <__sflush_r+0x11c>
 800e0bc:	88c0030b 	ldhu	r3,12(r17)
 800e0c0:	00bfffc4 	movi	r2,-1
 800e0c4:	18c01014 	ori	r3,r3,64
 800e0c8:	88c0030d 	sth	r3,12(r17)
 800e0cc:	003fdf06 	br	800e04c <__sflush_r+0xd4>
 800e0d0:	0005883a 	mov	r2,zero
 800e0d4:	003fec06 	br	800e088 <__sflush_r+0x110>
 800e0d8:	88801415 	stw	r2,80(r17)
 800e0dc:	003fd206 	br	800e028 <__sflush_r+0xb0>
 800e0e0:	28c00f17 	ldw	r3,60(r5)
 800e0e4:	00ffb316 	blt	zero,r3,800dfb4 <__sflush_r+0x3c>
 800e0e8:	003fd706 	br	800e048 <__sflush_r+0xd0>
 800e0ec:	89400717 	ldw	r5,28(r17)
 800e0f0:	000d883a 	mov	r6,zero
 800e0f4:	01c00044 	movi	r7,1
 800e0f8:	9809883a 	mov	r4,r19
 800e0fc:	403ee83a 	callr	r8
 800e100:	100d883a 	mov	r6,r2
 800e104:	00bfffc4 	movi	r2,-1
 800e108:	30801426 	beq	r6,r2,800e15c <__sflush_r+0x1e4>
 800e10c:	8880030b 	ldhu	r2,12(r17)
 800e110:	8a000a17 	ldw	r8,40(r17)
 800e114:	003fae06 	br	800dfd0 <__sflush_r+0x58>
 800e118:	98c00017 	ldw	r3,0(r19)
 800e11c:	183fba26 	beq	r3,zero,800e008 <__sflush_r+0x90>
 800e120:	01000744 	movi	r4,29
 800e124:	19000626 	beq	r3,r4,800e140 <__sflush_r+0x1c8>
 800e128:	01000584 	movi	r4,22
 800e12c:	19000426 	beq	r3,r4,800e140 <__sflush_r+0x1c8>
 800e130:	88c0030b 	ldhu	r3,12(r17)
 800e134:	18c01014 	ori	r3,r3,64
 800e138:	88c0030d 	sth	r3,12(r17)
 800e13c:	003fc306 	br	800e04c <__sflush_r+0xd4>
 800e140:	8880030b 	ldhu	r2,12(r17)
 800e144:	88c00417 	ldw	r3,16(r17)
 800e148:	88000115 	stw	zero,4(r17)
 800e14c:	10bdffcc 	andi	r2,r2,63487
 800e150:	8880030d 	sth	r2,12(r17)
 800e154:	88c00015 	stw	r3,0(r17)
 800e158:	003fb306 	br	800e028 <__sflush_r+0xb0>
 800e15c:	98800017 	ldw	r2,0(r19)
 800e160:	103fea26 	beq	r2,zero,800e10c <__sflush_r+0x194>
 800e164:	00c00744 	movi	r3,29
 800e168:	10c00226 	beq	r2,r3,800e174 <__sflush_r+0x1fc>
 800e16c:	00c00584 	movi	r3,22
 800e170:	10c0031e 	bne	r2,r3,800e180 <__sflush_r+0x208>
 800e174:	9c000015 	stw	r16,0(r19)
 800e178:	0005883a 	mov	r2,zero
 800e17c:	003fb306 	br	800e04c <__sflush_r+0xd4>
 800e180:	88c0030b 	ldhu	r3,12(r17)
 800e184:	3005883a 	mov	r2,r6
 800e188:	18c01014 	ori	r3,r3,64
 800e18c:	88c0030d 	sth	r3,12(r17)
 800e190:	003fae06 	br	800e04c <__sflush_r+0xd4>

0800e194 <_fflush_r>:
 800e194:	defffd04 	addi	sp,sp,-12
 800e198:	dc000115 	stw	r16,4(sp)
 800e19c:	dfc00215 	stw	ra,8(sp)
 800e1a0:	2021883a 	mov	r16,r4
 800e1a4:	20000226 	beq	r4,zero,800e1b0 <_fflush_r+0x1c>
 800e1a8:	20800e17 	ldw	r2,56(r4)
 800e1ac:	10000c26 	beq	r2,zero,800e1e0 <_fflush_r+0x4c>
 800e1b0:	2880030f 	ldh	r2,12(r5)
 800e1b4:	1000051e 	bne	r2,zero,800e1cc <_fflush_r+0x38>
 800e1b8:	0005883a 	mov	r2,zero
 800e1bc:	dfc00217 	ldw	ra,8(sp)
 800e1c0:	dc000117 	ldw	r16,4(sp)
 800e1c4:	dec00304 	addi	sp,sp,12
 800e1c8:	f800283a 	ret
 800e1cc:	8009883a 	mov	r4,r16
 800e1d0:	dfc00217 	ldw	ra,8(sp)
 800e1d4:	dc000117 	ldw	r16,4(sp)
 800e1d8:	dec00304 	addi	sp,sp,12
 800e1dc:	800df781 	jmpi	800df78 <__sflush_r>
 800e1e0:	d9400015 	stw	r5,0(sp)
 800e1e4:	800e5800 	call	800e580 <__sinit>
 800e1e8:	d9400017 	ldw	r5,0(sp)
 800e1ec:	003ff006 	br	800e1b0 <_fflush_r+0x1c>

0800e1f0 <fflush>:
 800e1f0:	20000526 	beq	r4,zero,800e208 <fflush+0x18>
 800e1f4:	008200b4 	movhi	r2,2050
 800e1f8:	10b1bc04 	addi	r2,r2,-14608
 800e1fc:	200b883a 	mov	r5,r4
 800e200:	11000017 	ldw	r4,0(r2)
 800e204:	800e1941 	jmpi	800e194 <_fflush_r>
 800e208:	008200b4 	movhi	r2,2050
 800e20c:	10b1bb04 	addi	r2,r2,-14612
 800e210:	11000017 	ldw	r4,0(r2)
 800e214:	01420074 	movhi	r5,2049
 800e218:	29786504 	addi	r5,r5,-7788
 800e21c:	800f03c1 	jmpi	800f03c <_fwalk_reent>

0800e220 <__fp_unlock>:
 800e220:	0005883a 	mov	r2,zero
 800e224:	f800283a 	ret

0800e228 <_cleanup_r>:
 800e228:	01420074 	movhi	r5,2049
 800e22c:	29491c04 	addi	r5,r5,9328
 800e230:	800f03c1 	jmpi	800f03c <_fwalk_reent>

0800e234 <__sinit.part.1>:
 800e234:	defff704 	addi	sp,sp,-36
 800e238:	00c20074 	movhi	r3,2049
 800e23c:	dfc00815 	stw	ra,32(sp)
 800e240:	ddc00715 	stw	r23,28(sp)
 800e244:	dd800615 	stw	r22,24(sp)
 800e248:	dd400515 	stw	r21,20(sp)
 800e24c:	dd000415 	stw	r20,16(sp)
 800e250:	dcc00315 	stw	r19,12(sp)
 800e254:	dc800215 	stw	r18,8(sp)
 800e258:	dc400115 	stw	r17,4(sp)
 800e25c:	dc000015 	stw	r16,0(sp)
 800e260:	18f88a04 	addi	r3,r3,-7640
 800e264:	24000117 	ldw	r16,4(r4)
 800e268:	20c00f15 	stw	r3,60(r4)
 800e26c:	2080bb04 	addi	r2,r4,748
 800e270:	00c000c4 	movi	r3,3
 800e274:	20c0b915 	stw	r3,740(r4)
 800e278:	2080ba15 	stw	r2,744(r4)
 800e27c:	2000b815 	stw	zero,736(r4)
 800e280:	05c00204 	movi	r23,8
 800e284:	00800104 	movi	r2,4
 800e288:	2025883a 	mov	r18,r4
 800e28c:	b80d883a 	mov	r6,r23
 800e290:	81001704 	addi	r4,r16,92
 800e294:	000b883a 	mov	r5,zero
 800e298:	80000015 	stw	zero,0(r16)
 800e29c:	80000115 	stw	zero,4(r16)
 800e2a0:	80000215 	stw	zero,8(r16)
 800e2a4:	8080030d 	sth	r2,12(r16)
 800e2a8:	80001915 	stw	zero,100(r16)
 800e2ac:	8000038d 	sth	zero,14(r16)
 800e2b0:	80000415 	stw	zero,16(r16)
 800e2b4:	80000515 	stw	zero,20(r16)
 800e2b8:	80000615 	stw	zero,24(r16)
 800e2bc:	8009a2c0 	call	8009a2c <memset>
 800e2c0:	05820074 	movhi	r22,2049
 800e2c4:	94400217 	ldw	r17,8(r18)
 800e2c8:	05420074 	movhi	r21,2049
 800e2cc:	05020074 	movhi	r20,2049
 800e2d0:	04c20074 	movhi	r19,2049
 800e2d4:	b5a7ce04 	addi	r22,r22,-24776
 800e2d8:	ad67e504 	addi	r21,r21,-24684
 800e2dc:	a5280404 	addi	r20,r20,-24560
 800e2e0:	9ce81b04 	addi	r19,r19,-24468
 800e2e4:	85800815 	stw	r22,32(r16)
 800e2e8:	85400915 	stw	r21,36(r16)
 800e2ec:	85000a15 	stw	r20,40(r16)
 800e2f0:	84c00b15 	stw	r19,44(r16)
 800e2f4:	84000715 	stw	r16,28(r16)
 800e2f8:	00800284 	movi	r2,10
 800e2fc:	8880030d 	sth	r2,12(r17)
 800e300:	00800044 	movi	r2,1
 800e304:	b80d883a 	mov	r6,r23
 800e308:	89001704 	addi	r4,r17,92
 800e30c:	000b883a 	mov	r5,zero
 800e310:	88000015 	stw	zero,0(r17)
 800e314:	88000115 	stw	zero,4(r17)
 800e318:	88000215 	stw	zero,8(r17)
 800e31c:	88001915 	stw	zero,100(r17)
 800e320:	8880038d 	sth	r2,14(r17)
 800e324:	88000415 	stw	zero,16(r17)
 800e328:	88000515 	stw	zero,20(r17)
 800e32c:	88000615 	stw	zero,24(r17)
 800e330:	8009a2c0 	call	8009a2c <memset>
 800e334:	94000317 	ldw	r16,12(r18)
 800e338:	00800484 	movi	r2,18
 800e33c:	8c400715 	stw	r17,28(r17)
 800e340:	8d800815 	stw	r22,32(r17)
 800e344:	8d400915 	stw	r21,36(r17)
 800e348:	8d000a15 	stw	r20,40(r17)
 800e34c:	8cc00b15 	stw	r19,44(r17)
 800e350:	8080030d 	sth	r2,12(r16)
 800e354:	00800084 	movi	r2,2
 800e358:	80000015 	stw	zero,0(r16)
 800e35c:	80000115 	stw	zero,4(r16)
 800e360:	80000215 	stw	zero,8(r16)
 800e364:	80001915 	stw	zero,100(r16)
 800e368:	8080038d 	sth	r2,14(r16)
 800e36c:	80000415 	stw	zero,16(r16)
 800e370:	80000515 	stw	zero,20(r16)
 800e374:	80000615 	stw	zero,24(r16)
 800e378:	b80d883a 	mov	r6,r23
 800e37c:	000b883a 	mov	r5,zero
 800e380:	81001704 	addi	r4,r16,92
 800e384:	8009a2c0 	call	8009a2c <memset>
 800e388:	00800044 	movi	r2,1
 800e38c:	84000715 	stw	r16,28(r16)
 800e390:	85800815 	stw	r22,32(r16)
 800e394:	85400915 	stw	r21,36(r16)
 800e398:	85000a15 	stw	r20,40(r16)
 800e39c:	84c00b15 	stw	r19,44(r16)
 800e3a0:	90800e15 	stw	r2,56(r18)
 800e3a4:	dfc00817 	ldw	ra,32(sp)
 800e3a8:	ddc00717 	ldw	r23,28(sp)
 800e3ac:	dd800617 	ldw	r22,24(sp)
 800e3b0:	dd400517 	ldw	r21,20(sp)
 800e3b4:	dd000417 	ldw	r20,16(sp)
 800e3b8:	dcc00317 	ldw	r19,12(sp)
 800e3bc:	dc800217 	ldw	r18,8(sp)
 800e3c0:	dc400117 	ldw	r17,4(sp)
 800e3c4:	dc000017 	ldw	r16,0(sp)
 800e3c8:	dec00904 	addi	sp,sp,36
 800e3cc:	f800283a 	ret

0800e3d0 <__fp_lock>:
 800e3d0:	0005883a 	mov	r2,zero
 800e3d4:	f800283a 	ret

0800e3d8 <__sfmoreglue>:
 800e3d8:	defffc04 	addi	sp,sp,-16
 800e3dc:	dc800215 	stw	r18,8(sp)
 800e3e0:	2825883a 	mov	r18,r5
 800e3e4:	dc000015 	stw	r16,0(sp)
 800e3e8:	01401a04 	movi	r5,104
 800e3ec:	2021883a 	mov	r16,r4
 800e3f0:	913fffc4 	addi	r4,r18,-1
 800e3f4:	dfc00315 	stw	ra,12(sp)
 800e3f8:	dc400115 	stw	r17,4(sp)
 800e3fc:	80087fc0 	call	80087fc <__mulsi3>
 800e400:	8009883a 	mov	r4,r16
 800e404:	11401d04 	addi	r5,r2,116
 800e408:	1023883a 	mov	r17,r2
 800e40c:	80090d80 	call	80090d8 <_malloc_r>
 800e410:	1021883a 	mov	r16,r2
 800e414:	10000726 	beq	r2,zero,800e434 <__sfmoreglue+0x5c>
 800e418:	11000304 	addi	r4,r2,12
 800e41c:	10000015 	stw	zero,0(r2)
 800e420:	14800115 	stw	r18,4(r2)
 800e424:	11000215 	stw	r4,8(r2)
 800e428:	89801a04 	addi	r6,r17,104
 800e42c:	000b883a 	mov	r5,zero
 800e430:	8009a2c0 	call	8009a2c <memset>
 800e434:	8005883a 	mov	r2,r16
 800e438:	dfc00317 	ldw	ra,12(sp)
 800e43c:	dc800217 	ldw	r18,8(sp)
 800e440:	dc400117 	ldw	r17,4(sp)
 800e444:	dc000017 	ldw	r16,0(sp)
 800e448:	dec00404 	addi	sp,sp,16
 800e44c:	f800283a 	ret

0800e450 <__sfp>:
 800e450:	defffb04 	addi	sp,sp,-20
 800e454:	dc000015 	stw	r16,0(sp)
 800e458:	040200b4 	movhi	r16,2050
 800e45c:	8431bb04 	addi	r16,r16,-14612
 800e460:	dcc00315 	stw	r19,12(sp)
 800e464:	2027883a 	mov	r19,r4
 800e468:	81000017 	ldw	r4,0(r16)
 800e46c:	dfc00415 	stw	ra,16(sp)
 800e470:	dc800215 	stw	r18,8(sp)
 800e474:	20800e17 	ldw	r2,56(r4)
 800e478:	dc400115 	stw	r17,4(sp)
 800e47c:	1000021e 	bne	r2,zero,800e488 <__sfp+0x38>
 800e480:	800e2340 	call	800e234 <__sinit.part.1>
 800e484:	81000017 	ldw	r4,0(r16)
 800e488:	2480b804 	addi	r18,r4,736
 800e48c:	047fffc4 	movi	r17,-1
 800e490:	91000117 	ldw	r4,4(r18)
 800e494:	94000217 	ldw	r16,8(r18)
 800e498:	213fffc4 	addi	r4,r4,-1
 800e49c:	20000a16 	blt	r4,zero,800e4c8 <__sfp+0x78>
 800e4a0:	8080030f 	ldh	r2,12(r16)
 800e4a4:	10000c26 	beq	r2,zero,800e4d8 <__sfp+0x88>
 800e4a8:	80c01d04 	addi	r3,r16,116
 800e4ac:	00000206 	br	800e4b8 <__sfp+0x68>
 800e4b0:	18bfe60f 	ldh	r2,-104(r3)
 800e4b4:	10000826 	beq	r2,zero,800e4d8 <__sfp+0x88>
 800e4b8:	213fffc4 	addi	r4,r4,-1
 800e4bc:	1c3ffd04 	addi	r16,r3,-12
 800e4c0:	18c01a04 	addi	r3,r3,104
 800e4c4:	247ffa1e 	bne	r4,r17,800e4b0 <__sfp+0x60>
 800e4c8:	90800017 	ldw	r2,0(r18)
 800e4cc:	10001d26 	beq	r2,zero,800e544 <__sfp+0xf4>
 800e4d0:	1025883a 	mov	r18,r2
 800e4d4:	003fee06 	br	800e490 <__sfp+0x40>
 800e4d8:	00bfffc4 	movi	r2,-1
 800e4dc:	8080038d 	sth	r2,14(r16)
 800e4e0:	00800044 	movi	r2,1
 800e4e4:	8080030d 	sth	r2,12(r16)
 800e4e8:	80001915 	stw	zero,100(r16)
 800e4ec:	80000015 	stw	zero,0(r16)
 800e4f0:	80000215 	stw	zero,8(r16)
 800e4f4:	80000115 	stw	zero,4(r16)
 800e4f8:	80000415 	stw	zero,16(r16)
 800e4fc:	80000515 	stw	zero,20(r16)
 800e500:	80000615 	stw	zero,24(r16)
 800e504:	01800204 	movi	r6,8
 800e508:	000b883a 	mov	r5,zero
 800e50c:	81001704 	addi	r4,r16,92
 800e510:	8009a2c0 	call	8009a2c <memset>
 800e514:	8005883a 	mov	r2,r16
 800e518:	80000c15 	stw	zero,48(r16)
 800e51c:	80000d15 	stw	zero,52(r16)
 800e520:	80001115 	stw	zero,68(r16)
 800e524:	80001215 	stw	zero,72(r16)
 800e528:	dfc00417 	ldw	ra,16(sp)
 800e52c:	dcc00317 	ldw	r19,12(sp)
 800e530:	dc800217 	ldw	r18,8(sp)
 800e534:	dc400117 	ldw	r17,4(sp)
 800e538:	dc000017 	ldw	r16,0(sp)
 800e53c:	dec00504 	addi	sp,sp,20
 800e540:	f800283a 	ret
 800e544:	01400104 	movi	r5,4
 800e548:	9809883a 	mov	r4,r19
 800e54c:	800e3d80 	call	800e3d8 <__sfmoreglue>
 800e550:	90800015 	stw	r2,0(r18)
 800e554:	103fde1e 	bne	r2,zero,800e4d0 <__sfp+0x80>
 800e558:	00800304 	movi	r2,12
 800e55c:	98800015 	stw	r2,0(r19)
 800e560:	0005883a 	mov	r2,zero
 800e564:	003ff006 	br	800e528 <__sfp+0xd8>

0800e568 <_cleanup>:
 800e568:	008200b4 	movhi	r2,2050
 800e56c:	10b1bb04 	addi	r2,r2,-14612
 800e570:	11000017 	ldw	r4,0(r2)
 800e574:	01420074 	movhi	r5,2049
 800e578:	29491c04 	addi	r5,r5,9328
 800e57c:	800f03c1 	jmpi	800f03c <_fwalk_reent>

0800e580 <__sinit>:
 800e580:	20800e17 	ldw	r2,56(r4)
 800e584:	10000126 	beq	r2,zero,800e58c <__sinit+0xc>
 800e588:	f800283a 	ret
 800e58c:	800e2341 	jmpi	800e234 <__sinit.part.1>

0800e590 <__sfp_lock_acquire>:
 800e590:	f800283a 	ret

0800e594 <__sfp_lock_release>:
 800e594:	f800283a 	ret

0800e598 <__sinit_lock_acquire>:
 800e598:	f800283a 	ret

0800e59c <__sinit_lock_release>:
 800e59c:	f800283a 	ret

0800e5a0 <__fp_lock_all>:
 800e5a0:	008200b4 	movhi	r2,2050
 800e5a4:	10b1bc04 	addi	r2,r2,-14608
 800e5a8:	11000017 	ldw	r4,0(r2)
 800e5ac:	01420074 	movhi	r5,2049
 800e5b0:	2978f404 	addi	r5,r5,-7216
 800e5b4:	800ef781 	jmpi	800ef78 <_fwalk>

0800e5b8 <__fp_unlock_all>:
 800e5b8:	008200b4 	movhi	r2,2050
 800e5bc:	10b1bc04 	addi	r2,r2,-14608
 800e5c0:	11000017 	ldw	r4,0(r2)
 800e5c4:	01420074 	movhi	r5,2049
 800e5c8:	29788804 	addi	r5,r5,-7648
 800e5cc:	800ef781 	jmpi	800ef78 <_fwalk>

0800e5d0 <__sflags>:
 800e5d0:	28800007 	ldb	r2,0(r5)
 800e5d4:	00c01c84 	movi	r3,114
 800e5d8:	10c02426 	beq	r2,r3,800e66c <__sflags+0x9c>
 800e5dc:	00c01dc4 	movi	r3,119
 800e5e0:	10c01e26 	beq	r2,r3,800e65c <__sflags+0x8c>
 800e5e4:	00c01844 	movi	r3,97
 800e5e8:	10c00426 	beq	r2,r3,800e5fc <__sflags+0x2c>
 800e5ec:	00800584 	movi	r2,22
 800e5f0:	20800015 	stw	r2,0(r4)
 800e5f4:	0005883a 	mov	r2,zero
 800e5f8:	f800283a 	ret
 800e5fc:	02c08204 	movi	r11,520
 800e600:	01000044 	movi	r4,1
 800e604:	00804204 	movi	r2,264
 800e608:	01c00ac4 	movi	r7,43
 800e60c:	02bff8c4 	movi	r10,-29
 800e610:	027fff04 	movi	r9,-4
 800e614:	02001e04 	movi	r8,120
 800e618:	29400044 	addi	r5,r5,1
 800e61c:	28c00007 	ldb	r3,0(r5)
 800e620:	18000626 	beq	r3,zero,800e63c <__sflags+0x6c>
 800e624:	19c00826 	beq	r3,r7,800e648 <__sflags+0x78>
 800e628:	1a3ffb1e 	bne	r3,r8,800e618 <__sflags+0x48>
 800e62c:	29400044 	addi	r5,r5,1
 800e630:	28c00007 	ldb	r3,0(r5)
 800e634:	21020014 	ori	r4,r4,2048
 800e638:	183ffa1e 	bne	r3,zero,800e624 <__sflags+0x54>
 800e63c:	22c8b03a 	or	r4,r4,r11
 800e640:	31000015 	stw	r4,0(r6)
 800e644:	f800283a 	ret
 800e648:	1284703a 	and	r2,r2,r10
 800e64c:	2248703a 	and	r4,r4,r9
 800e650:	10800414 	ori	r2,r2,16
 800e654:	21000094 	ori	r4,r4,2
 800e658:	003fef06 	br	800e618 <__sflags+0x48>
 800e65c:	02c18004 	movi	r11,1536
 800e660:	01000044 	movi	r4,1
 800e664:	00800204 	movi	r2,8
 800e668:	003fe706 	br	800e608 <__sflags+0x38>
 800e66c:	0017883a 	mov	r11,zero
 800e670:	0009883a 	mov	r4,zero
 800e674:	00800104 	movi	r2,4
 800e678:	003fe306 	br	800e608 <__sflags+0x38>

0800e67c <_malloc_trim_r>:
 800e67c:	defffb04 	addi	sp,sp,-20
 800e680:	dcc00315 	stw	r19,12(sp)
 800e684:	04c200b4 	movhi	r19,2050
 800e688:	dc800215 	stw	r18,8(sp)
 800e68c:	dc400115 	stw	r17,4(sp)
 800e690:	dc000015 	stw	r16,0(sp)
 800e694:	dfc00415 	stw	ra,16(sp)
 800e698:	2821883a 	mov	r16,r5
 800e69c:	9ceba104 	addi	r19,r19,-20860
 800e6a0:	2025883a 	mov	r18,r4
 800e6a4:	801666c0 	call	801666c <__malloc_lock>
 800e6a8:	98800217 	ldw	r2,8(r19)
 800e6ac:	14400117 	ldw	r17,4(r2)
 800e6b0:	00bfff04 	movi	r2,-4
 800e6b4:	88a2703a 	and	r17,r17,r2
 800e6b8:	8c21c83a 	sub	r16,r17,r16
 800e6bc:	8403fbc4 	addi	r16,r16,4079
 800e6c0:	8020d33a 	srli	r16,r16,12
 800e6c4:	0083ffc4 	movi	r2,4095
 800e6c8:	843fffc4 	addi	r16,r16,-1
 800e6cc:	8020933a 	slli	r16,r16,12
 800e6d0:	1400060e 	bge	r2,r16,800e6ec <_malloc_trim_r+0x70>
 800e6d4:	000b883a 	mov	r5,zero
 800e6d8:	9009883a 	mov	r4,r18
 800e6dc:	8009ee40 	call	8009ee4 <_sbrk_r>
 800e6e0:	98c00217 	ldw	r3,8(r19)
 800e6e4:	1c47883a 	add	r3,r3,r17
 800e6e8:	10c00a26 	beq	r2,r3,800e714 <_malloc_trim_r+0x98>
 800e6ec:	9009883a 	mov	r4,r18
 800e6f0:	80166900 	call	8016690 <__malloc_unlock>
 800e6f4:	0005883a 	mov	r2,zero
 800e6f8:	dfc00417 	ldw	ra,16(sp)
 800e6fc:	dcc00317 	ldw	r19,12(sp)
 800e700:	dc800217 	ldw	r18,8(sp)
 800e704:	dc400117 	ldw	r17,4(sp)
 800e708:	dc000017 	ldw	r16,0(sp)
 800e70c:	dec00504 	addi	sp,sp,20
 800e710:	f800283a 	ret
 800e714:	040bc83a 	sub	r5,zero,r16
 800e718:	9009883a 	mov	r4,r18
 800e71c:	8009ee40 	call	8009ee4 <_sbrk_r>
 800e720:	00ffffc4 	movi	r3,-1
 800e724:	10c00d26 	beq	r2,r3,800e75c <_malloc_trim_r+0xe0>
 800e728:	00c220b4 	movhi	r3,2178
 800e72c:	18fcac04 	addi	r3,r3,-3408
 800e730:	18800017 	ldw	r2,0(r3)
 800e734:	99000217 	ldw	r4,8(r19)
 800e738:	8c23c83a 	sub	r17,r17,r16
 800e73c:	8c400054 	ori	r17,r17,1
 800e740:	1421c83a 	sub	r16,r2,r16
 800e744:	24400115 	stw	r17,4(r4)
 800e748:	9009883a 	mov	r4,r18
 800e74c:	1c000015 	stw	r16,0(r3)
 800e750:	80166900 	call	8016690 <__malloc_unlock>
 800e754:	00800044 	movi	r2,1
 800e758:	003fe706 	br	800e6f8 <_malloc_trim_r+0x7c>
 800e75c:	000b883a 	mov	r5,zero
 800e760:	9009883a 	mov	r4,r18
 800e764:	8009ee40 	call	8009ee4 <_sbrk_r>
 800e768:	99000217 	ldw	r4,8(r19)
 800e76c:	014003c4 	movi	r5,15
 800e770:	1107c83a 	sub	r3,r2,r4
 800e774:	28ffdd0e 	bge	r5,r3,800e6ec <_malloc_trim_r+0x70>
 800e778:	014200b4 	movhi	r5,2050
 800e77c:	2971bd04 	addi	r5,r5,-14604
 800e780:	29400017 	ldw	r5,0(r5)
 800e784:	18c00054 	ori	r3,r3,1
 800e788:	20c00115 	stw	r3,4(r4)
 800e78c:	00c220b4 	movhi	r3,2178
 800e790:	1145c83a 	sub	r2,r2,r5
 800e794:	18fcac04 	addi	r3,r3,-3408
 800e798:	18800015 	stw	r2,0(r3)
 800e79c:	003fd306 	br	800e6ec <_malloc_trim_r+0x70>

0800e7a0 <_free_r>:
 800e7a0:	28004126 	beq	r5,zero,800e8a8 <_free_r+0x108>
 800e7a4:	defffd04 	addi	sp,sp,-12
 800e7a8:	dc400115 	stw	r17,4(sp)
 800e7ac:	dc000015 	stw	r16,0(sp)
 800e7b0:	2023883a 	mov	r17,r4
 800e7b4:	2821883a 	mov	r16,r5
 800e7b8:	dfc00215 	stw	ra,8(sp)
 800e7bc:	801666c0 	call	801666c <__malloc_lock>
 800e7c0:	81ffff17 	ldw	r7,-4(r16)
 800e7c4:	00bfff84 	movi	r2,-2
 800e7c8:	010200b4 	movhi	r4,2050
 800e7cc:	81bffe04 	addi	r6,r16,-8
 800e7d0:	3884703a 	and	r2,r7,r2
 800e7d4:	212ba104 	addi	r4,r4,-20860
 800e7d8:	308b883a 	add	r5,r6,r2
 800e7dc:	2a400117 	ldw	r9,4(r5)
 800e7e0:	22000217 	ldw	r8,8(r4)
 800e7e4:	00ffff04 	movi	r3,-4
 800e7e8:	48c6703a 	and	r3,r9,r3
 800e7ec:	2a005726 	beq	r5,r8,800e94c <_free_r+0x1ac>
 800e7f0:	28c00115 	stw	r3,4(r5)
 800e7f4:	39c0004c 	andi	r7,r7,1
 800e7f8:	3800091e 	bne	r7,zero,800e820 <_free_r+0x80>
 800e7fc:	823ffe17 	ldw	r8,-8(r16)
 800e800:	22400204 	addi	r9,r4,8
 800e804:	320dc83a 	sub	r6,r6,r8
 800e808:	31c00217 	ldw	r7,8(r6)
 800e80c:	1205883a 	add	r2,r2,r8
 800e810:	3a406526 	beq	r7,r9,800e9a8 <_free_r+0x208>
 800e814:	32000317 	ldw	r8,12(r6)
 800e818:	3a000315 	stw	r8,12(r7)
 800e81c:	41c00215 	stw	r7,8(r8)
 800e820:	28cf883a 	add	r7,r5,r3
 800e824:	39c00117 	ldw	r7,4(r7)
 800e828:	39c0004c 	andi	r7,r7,1
 800e82c:	38003a26 	beq	r7,zero,800e918 <_free_r+0x178>
 800e830:	10c00054 	ori	r3,r2,1
 800e834:	30c00115 	stw	r3,4(r6)
 800e838:	3087883a 	add	r3,r6,r2
 800e83c:	18800015 	stw	r2,0(r3)
 800e840:	00c07fc4 	movi	r3,511
 800e844:	18801936 	bltu	r3,r2,800e8ac <_free_r+0x10c>
 800e848:	1004d0fa 	srli	r2,r2,3
 800e84c:	01c00044 	movi	r7,1
 800e850:	21400117 	ldw	r5,4(r4)
 800e854:	10c00044 	addi	r3,r2,1
 800e858:	18c7883a 	add	r3,r3,r3
 800e85c:	1005d0ba 	srai	r2,r2,2
 800e860:	18c7883a 	add	r3,r3,r3
 800e864:	18c7883a 	add	r3,r3,r3
 800e868:	1907883a 	add	r3,r3,r4
 800e86c:	3884983a 	sll	r2,r7,r2
 800e870:	19c00017 	ldw	r7,0(r3)
 800e874:	1a3ffe04 	addi	r8,r3,-8
 800e878:	1144b03a 	or	r2,r2,r5
 800e87c:	32000315 	stw	r8,12(r6)
 800e880:	31c00215 	stw	r7,8(r6)
 800e884:	20800115 	stw	r2,4(r4)
 800e888:	19800015 	stw	r6,0(r3)
 800e88c:	39800315 	stw	r6,12(r7)
 800e890:	8809883a 	mov	r4,r17
 800e894:	dfc00217 	ldw	ra,8(sp)
 800e898:	dc400117 	ldw	r17,4(sp)
 800e89c:	dc000017 	ldw	r16,0(sp)
 800e8a0:	dec00304 	addi	sp,sp,12
 800e8a4:	80166901 	jmpi	8016690 <__malloc_unlock>
 800e8a8:	f800283a 	ret
 800e8ac:	100ad27a 	srli	r5,r2,9
 800e8b0:	00c00104 	movi	r3,4
 800e8b4:	19404a36 	bltu	r3,r5,800e9e0 <_free_r+0x240>
 800e8b8:	100ad1ba 	srli	r5,r2,6
 800e8bc:	28c00e44 	addi	r3,r5,57
 800e8c0:	18c7883a 	add	r3,r3,r3
 800e8c4:	29400e04 	addi	r5,r5,56
 800e8c8:	18c7883a 	add	r3,r3,r3
 800e8cc:	18c7883a 	add	r3,r3,r3
 800e8d0:	1909883a 	add	r4,r3,r4
 800e8d4:	20c00017 	ldw	r3,0(r4)
 800e8d8:	01c200b4 	movhi	r7,2050
 800e8dc:	213ffe04 	addi	r4,r4,-8
 800e8e0:	39eba104 	addi	r7,r7,-20860
 800e8e4:	20c04426 	beq	r4,r3,800e9f8 <_free_r+0x258>
 800e8e8:	01ffff04 	movi	r7,-4
 800e8ec:	19400117 	ldw	r5,4(r3)
 800e8f0:	29ca703a 	and	r5,r5,r7
 800e8f4:	1140022e 	bgeu	r2,r5,800e900 <_free_r+0x160>
 800e8f8:	18c00217 	ldw	r3,8(r3)
 800e8fc:	20fffb1e 	bne	r4,r3,800e8ec <_free_r+0x14c>
 800e900:	19000317 	ldw	r4,12(r3)
 800e904:	31000315 	stw	r4,12(r6)
 800e908:	30c00215 	stw	r3,8(r6)
 800e90c:	21800215 	stw	r6,8(r4)
 800e910:	19800315 	stw	r6,12(r3)
 800e914:	003fde06 	br	800e890 <_free_r+0xf0>
 800e918:	29c00217 	ldw	r7,8(r5)
 800e91c:	10c5883a 	add	r2,r2,r3
 800e920:	00c200b4 	movhi	r3,2050
 800e924:	18eba304 	addi	r3,r3,-20852
 800e928:	38c03b26 	beq	r7,r3,800ea18 <_free_r+0x278>
 800e92c:	2a000317 	ldw	r8,12(r5)
 800e930:	11400054 	ori	r5,r2,1
 800e934:	3087883a 	add	r3,r6,r2
 800e938:	3a000315 	stw	r8,12(r7)
 800e93c:	41c00215 	stw	r7,8(r8)
 800e940:	31400115 	stw	r5,4(r6)
 800e944:	18800015 	stw	r2,0(r3)
 800e948:	003fbd06 	br	800e840 <_free_r+0xa0>
 800e94c:	39c0004c 	andi	r7,r7,1
 800e950:	10c5883a 	add	r2,r2,r3
 800e954:	3800071e 	bne	r7,zero,800e974 <_free_r+0x1d4>
 800e958:	81fffe17 	ldw	r7,-8(r16)
 800e95c:	31cdc83a 	sub	r6,r6,r7
 800e960:	30c00317 	ldw	r3,12(r6)
 800e964:	31400217 	ldw	r5,8(r6)
 800e968:	11c5883a 	add	r2,r2,r7
 800e96c:	28c00315 	stw	r3,12(r5)
 800e970:	19400215 	stw	r5,8(r3)
 800e974:	10c00054 	ori	r3,r2,1
 800e978:	30c00115 	stw	r3,4(r6)
 800e97c:	00c200b4 	movhi	r3,2050
 800e980:	18f1be04 	addi	r3,r3,-14600
 800e984:	18c00017 	ldw	r3,0(r3)
 800e988:	21800215 	stw	r6,8(r4)
 800e98c:	10ffc036 	bltu	r2,r3,800e890 <_free_r+0xf0>
 800e990:	008200b4 	movhi	r2,2050
 800e994:	10ba6a04 	addi	r2,r2,-5720
 800e998:	11400017 	ldw	r5,0(r2)
 800e99c:	8809883a 	mov	r4,r17
 800e9a0:	800e67c0 	call	800e67c <_malloc_trim_r>
 800e9a4:	003fba06 	br	800e890 <_free_r+0xf0>
 800e9a8:	28c9883a 	add	r4,r5,r3
 800e9ac:	21000117 	ldw	r4,4(r4)
 800e9b0:	2100004c 	andi	r4,r4,1
 800e9b4:	2000391e 	bne	r4,zero,800ea9c <_free_r+0x2fc>
 800e9b8:	29c00217 	ldw	r7,8(r5)
 800e9bc:	29000317 	ldw	r4,12(r5)
 800e9c0:	1885883a 	add	r2,r3,r2
 800e9c4:	10c00054 	ori	r3,r2,1
 800e9c8:	39000315 	stw	r4,12(r7)
 800e9cc:	21c00215 	stw	r7,8(r4)
 800e9d0:	30c00115 	stw	r3,4(r6)
 800e9d4:	308d883a 	add	r6,r6,r2
 800e9d8:	30800015 	stw	r2,0(r6)
 800e9dc:	003fac06 	br	800e890 <_free_r+0xf0>
 800e9e0:	00c00504 	movi	r3,20
 800e9e4:	19401536 	bltu	r3,r5,800ea3c <_free_r+0x29c>
 800e9e8:	28c01704 	addi	r3,r5,92
 800e9ec:	18c7883a 	add	r3,r3,r3
 800e9f0:	294016c4 	addi	r5,r5,91
 800e9f4:	003fb406 	br	800e8c8 <_free_r+0x128>
 800e9f8:	280bd0ba 	srai	r5,r5,2
 800e9fc:	00c00044 	movi	r3,1
 800ea00:	38800117 	ldw	r2,4(r7)
 800ea04:	194a983a 	sll	r5,r3,r5
 800ea08:	2007883a 	mov	r3,r4
 800ea0c:	2884b03a 	or	r2,r5,r2
 800ea10:	38800115 	stw	r2,4(r7)
 800ea14:	003fbb06 	br	800e904 <_free_r+0x164>
 800ea18:	21800515 	stw	r6,20(r4)
 800ea1c:	21800415 	stw	r6,16(r4)
 800ea20:	10c00054 	ori	r3,r2,1
 800ea24:	31c00315 	stw	r7,12(r6)
 800ea28:	31c00215 	stw	r7,8(r6)
 800ea2c:	30c00115 	stw	r3,4(r6)
 800ea30:	308d883a 	add	r6,r6,r2
 800ea34:	30800015 	stw	r2,0(r6)
 800ea38:	003f9506 	br	800e890 <_free_r+0xf0>
 800ea3c:	00c01504 	movi	r3,84
 800ea40:	19400536 	bltu	r3,r5,800ea58 <_free_r+0x2b8>
 800ea44:	100ad33a 	srli	r5,r2,12
 800ea48:	28c01bc4 	addi	r3,r5,111
 800ea4c:	18c7883a 	add	r3,r3,r3
 800ea50:	29401b84 	addi	r5,r5,110
 800ea54:	003f9c06 	br	800e8c8 <_free_r+0x128>
 800ea58:	00c05504 	movi	r3,340
 800ea5c:	19400536 	bltu	r3,r5,800ea74 <_free_r+0x2d4>
 800ea60:	100ad3fa 	srli	r5,r2,15
 800ea64:	28c01e04 	addi	r3,r5,120
 800ea68:	18c7883a 	add	r3,r3,r3
 800ea6c:	29401dc4 	addi	r5,r5,119
 800ea70:	003f9506 	br	800e8c8 <_free_r+0x128>
 800ea74:	00c15504 	movi	r3,1364
 800ea78:	19400536 	bltu	r3,r5,800ea90 <_free_r+0x2f0>
 800ea7c:	100ad4ba 	srli	r5,r2,18
 800ea80:	28c01f44 	addi	r3,r5,125
 800ea84:	18c7883a 	add	r3,r3,r3
 800ea88:	29401f04 	addi	r5,r5,124
 800ea8c:	003f8e06 	br	800e8c8 <_free_r+0x128>
 800ea90:	00c03f84 	movi	r3,254
 800ea94:	01401f84 	movi	r5,126
 800ea98:	003f8b06 	br	800e8c8 <_free_r+0x128>
 800ea9c:	10c00054 	ori	r3,r2,1
 800eaa0:	30c00115 	stw	r3,4(r6)
 800eaa4:	308d883a 	add	r6,r6,r2
 800eaa8:	30800015 	stw	r2,0(r6)
 800eaac:	003f7806 	br	800e890 <_free_r+0xf0>

0800eab0 <__sfvwrite_r>:
 800eab0:	30800217 	ldw	r2,8(r6)
 800eab4:	10006726 	beq	r2,zero,800ec54 <__sfvwrite_r+0x1a4>
 800eab8:	28c0030b 	ldhu	r3,12(r5)
 800eabc:	defff404 	addi	sp,sp,-48
 800eac0:	dd400715 	stw	r21,28(sp)
 800eac4:	dd000615 	stw	r20,24(sp)
 800eac8:	dc000215 	stw	r16,8(sp)
 800eacc:	dfc00b15 	stw	ra,44(sp)
 800ead0:	df000a15 	stw	fp,40(sp)
 800ead4:	ddc00915 	stw	r23,36(sp)
 800ead8:	dd800815 	stw	r22,32(sp)
 800eadc:	dcc00515 	stw	r19,20(sp)
 800eae0:	dc800415 	stw	r18,16(sp)
 800eae4:	dc400315 	stw	r17,12(sp)
 800eae8:	1880020c 	andi	r2,r3,8
 800eaec:	2821883a 	mov	r16,r5
 800eaf0:	202b883a 	mov	r21,r4
 800eaf4:	3029883a 	mov	r20,r6
 800eaf8:	10002726 	beq	r2,zero,800eb98 <__sfvwrite_r+0xe8>
 800eafc:	28800417 	ldw	r2,16(r5)
 800eb00:	10002526 	beq	r2,zero,800eb98 <__sfvwrite_r+0xe8>
 800eb04:	1880008c 	andi	r2,r3,2
 800eb08:	a4400017 	ldw	r17,0(r20)
 800eb0c:	10002a26 	beq	r2,zero,800ebb8 <__sfvwrite_r+0x108>
 800eb10:	05a00034 	movhi	r22,32768
 800eb14:	0027883a 	mov	r19,zero
 800eb18:	0025883a 	mov	r18,zero
 800eb1c:	b5bf0004 	addi	r22,r22,-1024
 800eb20:	980d883a 	mov	r6,r19
 800eb24:	a809883a 	mov	r4,r21
 800eb28:	90004626 	beq	r18,zero,800ec44 <__sfvwrite_r+0x194>
 800eb2c:	900f883a 	mov	r7,r18
 800eb30:	b480022e 	bgeu	r22,r18,800eb3c <__sfvwrite_r+0x8c>
 800eb34:	01e00034 	movhi	r7,32768
 800eb38:	39ff0004 	addi	r7,r7,-1024
 800eb3c:	80800917 	ldw	r2,36(r16)
 800eb40:	81400717 	ldw	r5,28(r16)
 800eb44:	103ee83a 	callr	r2
 800eb48:	00805a0e 	bge	zero,r2,800ecb4 <__sfvwrite_r+0x204>
 800eb4c:	a0c00217 	ldw	r3,8(r20)
 800eb50:	98a7883a 	add	r19,r19,r2
 800eb54:	90a5c83a 	sub	r18,r18,r2
 800eb58:	1885c83a 	sub	r2,r3,r2
 800eb5c:	a0800215 	stw	r2,8(r20)
 800eb60:	103fef1e 	bne	r2,zero,800eb20 <__sfvwrite_r+0x70>
 800eb64:	0005883a 	mov	r2,zero
 800eb68:	dfc00b17 	ldw	ra,44(sp)
 800eb6c:	df000a17 	ldw	fp,40(sp)
 800eb70:	ddc00917 	ldw	r23,36(sp)
 800eb74:	dd800817 	ldw	r22,32(sp)
 800eb78:	dd400717 	ldw	r21,28(sp)
 800eb7c:	dd000617 	ldw	r20,24(sp)
 800eb80:	dcc00517 	ldw	r19,20(sp)
 800eb84:	dc800417 	ldw	r18,16(sp)
 800eb88:	dc400317 	ldw	r17,12(sp)
 800eb8c:	dc000217 	ldw	r16,8(sp)
 800eb90:	dec00c04 	addi	sp,sp,48
 800eb94:	f800283a 	ret
 800eb98:	800b883a 	mov	r5,r16
 800eb9c:	a809883a 	mov	r4,r21
 800eba0:	800c5200 	call	800c520 <__swsetup_r>
 800eba4:	1000ee1e 	bne	r2,zero,800ef60 <__sfvwrite_r+0x4b0>
 800eba8:	80c0030b 	ldhu	r3,12(r16)
 800ebac:	a4400017 	ldw	r17,0(r20)
 800ebb0:	1880008c 	andi	r2,r3,2
 800ebb4:	103fd61e 	bne	r2,zero,800eb10 <__sfvwrite_r+0x60>
 800ebb8:	1880004c 	andi	r2,r3,1
 800ebbc:	1000421e 	bne	r2,zero,800ecc8 <__sfvwrite_r+0x218>
 800ebc0:	0039883a 	mov	fp,zero
 800ebc4:	0025883a 	mov	r18,zero
 800ebc8:	90001a26 	beq	r18,zero,800ec34 <__sfvwrite_r+0x184>
 800ebcc:	1880800c 	andi	r2,r3,512
 800ebd0:	84c00217 	ldw	r19,8(r16)
 800ebd4:	10002126 	beq	r2,zero,800ec5c <__sfvwrite_r+0x1ac>
 800ebd8:	982f883a 	mov	r23,r19
 800ebdc:	94c09636 	bltu	r18,r19,800ee38 <__sfvwrite_r+0x388>
 800ebe0:	1881200c 	andi	r2,r3,1152
 800ebe4:	1000a11e 	bne	r2,zero,800ee6c <__sfvwrite_r+0x3bc>
 800ebe8:	81000017 	ldw	r4,0(r16)
 800ebec:	b80d883a 	mov	r6,r23
 800ebf0:	e00b883a 	mov	r5,fp
 800ebf4:	800f3740 	call	800f374 <memmove>
 800ebf8:	80c00217 	ldw	r3,8(r16)
 800ebfc:	81000017 	ldw	r4,0(r16)
 800ec00:	9005883a 	mov	r2,r18
 800ec04:	1ce7c83a 	sub	r19,r3,r19
 800ec08:	25cf883a 	add	r7,r4,r23
 800ec0c:	84c00215 	stw	r19,8(r16)
 800ec10:	81c00015 	stw	r7,0(r16)
 800ec14:	a0c00217 	ldw	r3,8(r20)
 800ec18:	e0b9883a 	add	fp,fp,r2
 800ec1c:	90a5c83a 	sub	r18,r18,r2
 800ec20:	18a7c83a 	sub	r19,r3,r2
 800ec24:	a4c00215 	stw	r19,8(r20)
 800ec28:	983fce26 	beq	r19,zero,800eb64 <__sfvwrite_r+0xb4>
 800ec2c:	80c0030b 	ldhu	r3,12(r16)
 800ec30:	903fe61e 	bne	r18,zero,800ebcc <__sfvwrite_r+0x11c>
 800ec34:	8f000017 	ldw	fp,0(r17)
 800ec38:	8c800117 	ldw	r18,4(r17)
 800ec3c:	8c400204 	addi	r17,r17,8
 800ec40:	003fe106 	br	800ebc8 <__sfvwrite_r+0x118>
 800ec44:	8cc00017 	ldw	r19,0(r17)
 800ec48:	8c800117 	ldw	r18,4(r17)
 800ec4c:	8c400204 	addi	r17,r17,8
 800ec50:	003fb306 	br	800eb20 <__sfvwrite_r+0x70>
 800ec54:	0005883a 	mov	r2,zero
 800ec58:	f800283a 	ret
 800ec5c:	81000017 	ldw	r4,0(r16)
 800ec60:	80800417 	ldw	r2,16(r16)
 800ec64:	11005a36 	bltu	r2,r4,800edd0 <__sfvwrite_r+0x320>
 800ec68:	85c00517 	ldw	r23,20(r16)
 800ec6c:	95c05836 	bltu	r18,r23,800edd0 <__sfvwrite_r+0x320>
 800ec70:	00a00034 	movhi	r2,32768
 800ec74:	10bfffc4 	addi	r2,r2,-1
 800ec78:	9009883a 	mov	r4,r18
 800ec7c:	1480012e 	bgeu	r2,r18,800ec84 <__sfvwrite_r+0x1d4>
 800ec80:	1009883a 	mov	r4,r2
 800ec84:	b80b883a 	mov	r5,r23
 800ec88:	80086480 	call	8008648 <__divsi3>
 800ec8c:	b80b883a 	mov	r5,r23
 800ec90:	1009883a 	mov	r4,r2
 800ec94:	80087fc0 	call	80087fc <__mulsi3>
 800ec98:	81400717 	ldw	r5,28(r16)
 800ec9c:	80c00917 	ldw	r3,36(r16)
 800eca0:	100f883a 	mov	r7,r2
 800eca4:	e00d883a 	mov	r6,fp
 800eca8:	a809883a 	mov	r4,r21
 800ecac:	183ee83a 	callr	r3
 800ecb0:	00bfd816 	blt	zero,r2,800ec14 <__sfvwrite_r+0x164>
 800ecb4:	8080030b 	ldhu	r2,12(r16)
 800ecb8:	10801014 	ori	r2,r2,64
 800ecbc:	8080030d 	sth	r2,12(r16)
 800ecc0:	00bfffc4 	movi	r2,-1
 800ecc4:	003fa806 	br	800eb68 <__sfvwrite_r+0xb8>
 800ecc8:	0027883a 	mov	r19,zero
 800eccc:	0011883a 	mov	r8,zero
 800ecd0:	0039883a 	mov	fp,zero
 800ecd4:	0025883a 	mov	r18,zero
 800ecd8:	90001f26 	beq	r18,zero,800ed58 <__sfvwrite_r+0x2a8>
 800ecdc:	40005a26 	beq	r8,zero,800ee48 <__sfvwrite_r+0x398>
 800ece0:	982d883a 	mov	r22,r19
 800ece4:	94c0012e 	bgeu	r18,r19,800ecec <__sfvwrite_r+0x23c>
 800ece8:	902d883a 	mov	r22,r18
 800ecec:	81000017 	ldw	r4,0(r16)
 800ecf0:	80800417 	ldw	r2,16(r16)
 800ecf4:	b02f883a 	mov	r23,r22
 800ecf8:	81c00517 	ldw	r7,20(r16)
 800ecfc:	1100032e 	bgeu	r2,r4,800ed0c <__sfvwrite_r+0x25c>
 800ed00:	80c00217 	ldw	r3,8(r16)
 800ed04:	38c7883a 	add	r3,r7,r3
 800ed08:	1d801816 	blt	r3,r22,800ed6c <__sfvwrite_r+0x2bc>
 800ed0c:	b1c03e16 	blt	r22,r7,800ee08 <__sfvwrite_r+0x358>
 800ed10:	80800917 	ldw	r2,36(r16)
 800ed14:	81400717 	ldw	r5,28(r16)
 800ed18:	e00d883a 	mov	r6,fp
 800ed1c:	da000115 	stw	r8,4(sp)
 800ed20:	a809883a 	mov	r4,r21
 800ed24:	103ee83a 	callr	r2
 800ed28:	102f883a 	mov	r23,r2
 800ed2c:	da000117 	ldw	r8,4(sp)
 800ed30:	00bfe00e 	bge	zero,r2,800ecb4 <__sfvwrite_r+0x204>
 800ed34:	9de7c83a 	sub	r19,r19,r23
 800ed38:	98001f26 	beq	r19,zero,800edb8 <__sfvwrite_r+0x308>
 800ed3c:	a0800217 	ldw	r2,8(r20)
 800ed40:	e5f9883a 	add	fp,fp,r23
 800ed44:	95e5c83a 	sub	r18,r18,r23
 800ed48:	15efc83a 	sub	r23,r2,r23
 800ed4c:	a5c00215 	stw	r23,8(r20)
 800ed50:	b83f8426 	beq	r23,zero,800eb64 <__sfvwrite_r+0xb4>
 800ed54:	903fe11e 	bne	r18,zero,800ecdc <__sfvwrite_r+0x22c>
 800ed58:	8f000017 	ldw	fp,0(r17)
 800ed5c:	8c800117 	ldw	r18,4(r17)
 800ed60:	0011883a 	mov	r8,zero
 800ed64:	8c400204 	addi	r17,r17,8
 800ed68:	003fdb06 	br	800ecd8 <__sfvwrite_r+0x228>
 800ed6c:	180d883a 	mov	r6,r3
 800ed70:	e00b883a 	mov	r5,fp
 800ed74:	da000115 	stw	r8,4(sp)
 800ed78:	d8c00015 	stw	r3,0(sp)
 800ed7c:	800f3740 	call	800f374 <memmove>
 800ed80:	d8c00017 	ldw	r3,0(sp)
 800ed84:	80800017 	ldw	r2,0(r16)
 800ed88:	800b883a 	mov	r5,r16
 800ed8c:	a809883a 	mov	r4,r21
 800ed90:	10c5883a 	add	r2,r2,r3
 800ed94:	80800015 	stw	r2,0(r16)
 800ed98:	d8c00015 	stw	r3,0(sp)
 800ed9c:	800e1940 	call	800e194 <_fflush_r>
 800eda0:	d8c00017 	ldw	r3,0(sp)
 800eda4:	da000117 	ldw	r8,4(sp)
 800eda8:	103fc21e 	bne	r2,zero,800ecb4 <__sfvwrite_r+0x204>
 800edac:	182f883a 	mov	r23,r3
 800edb0:	9de7c83a 	sub	r19,r19,r23
 800edb4:	983fe11e 	bne	r19,zero,800ed3c <__sfvwrite_r+0x28c>
 800edb8:	800b883a 	mov	r5,r16
 800edbc:	a809883a 	mov	r4,r21
 800edc0:	800e1940 	call	800e194 <_fflush_r>
 800edc4:	103fbb1e 	bne	r2,zero,800ecb4 <__sfvwrite_r+0x204>
 800edc8:	0011883a 	mov	r8,zero
 800edcc:	003fdb06 	br	800ed3c <__sfvwrite_r+0x28c>
 800edd0:	94c0012e 	bgeu	r18,r19,800edd8 <__sfvwrite_r+0x328>
 800edd4:	9027883a 	mov	r19,r18
 800edd8:	980d883a 	mov	r6,r19
 800eddc:	e00b883a 	mov	r5,fp
 800ede0:	800f3740 	call	800f374 <memmove>
 800ede4:	80800217 	ldw	r2,8(r16)
 800ede8:	80c00017 	ldw	r3,0(r16)
 800edec:	14c5c83a 	sub	r2,r2,r19
 800edf0:	1cc7883a 	add	r3,r3,r19
 800edf4:	80800215 	stw	r2,8(r16)
 800edf8:	80c00015 	stw	r3,0(r16)
 800edfc:	10004326 	beq	r2,zero,800ef0c <__sfvwrite_r+0x45c>
 800ee00:	9805883a 	mov	r2,r19
 800ee04:	003f8306 	br	800ec14 <__sfvwrite_r+0x164>
 800ee08:	b00d883a 	mov	r6,r22
 800ee0c:	e00b883a 	mov	r5,fp
 800ee10:	da000115 	stw	r8,4(sp)
 800ee14:	800f3740 	call	800f374 <memmove>
 800ee18:	80800217 	ldw	r2,8(r16)
 800ee1c:	80c00017 	ldw	r3,0(r16)
 800ee20:	da000117 	ldw	r8,4(sp)
 800ee24:	1585c83a 	sub	r2,r2,r22
 800ee28:	1dad883a 	add	r22,r3,r22
 800ee2c:	80800215 	stw	r2,8(r16)
 800ee30:	85800015 	stw	r22,0(r16)
 800ee34:	003fbf06 	br	800ed34 <__sfvwrite_r+0x284>
 800ee38:	81000017 	ldw	r4,0(r16)
 800ee3c:	9027883a 	mov	r19,r18
 800ee40:	902f883a 	mov	r23,r18
 800ee44:	003f6906 	br	800ebec <__sfvwrite_r+0x13c>
 800ee48:	900d883a 	mov	r6,r18
 800ee4c:	01400284 	movi	r5,10
 800ee50:	e009883a 	mov	r4,fp
 800ee54:	800f2900 	call	800f290 <memchr>
 800ee58:	10003e26 	beq	r2,zero,800ef54 <__sfvwrite_r+0x4a4>
 800ee5c:	10800044 	addi	r2,r2,1
 800ee60:	1727c83a 	sub	r19,r2,fp
 800ee64:	02000044 	movi	r8,1
 800ee68:	003f9d06 	br	800ece0 <__sfvwrite_r+0x230>
 800ee6c:	80800517 	ldw	r2,20(r16)
 800ee70:	81400417 	ldw	r5,16(r16)
 800ee74:	81c00017 	ldw	r7,0(r16)
 800ee78:	10a7883a 	add	r19,r2,r2
 800ee7c:	9885883a 	add	r2,r19,r2
 800ee80:	1026d7fa 	srli	r19,r2,31
 800ee84:	396dc83a 	sub	r22,r7,r5
 800ee88:	b1000044 	addi	r4,r22,1
 800ee8c:	9885883a 	add	r2,r19,r2
 800ee90:	1027d07a 	srai	r19,r2,1
 800ee94:	2485883a 	add	r2,r4,r18
 800ee98:	980d883a 	mov	r6,r19
 800ee9c:	9880022e 	bgeu	r19,r2,800eea8 <__sfvwrite_r+0x3f8>
 800eea0:	1027883a 	mov	r19,r2
 800eea4:	100d883a 	mov	r6,r2
 800eea8:	18c1000c 	andi	r3,r3,1024
 800eeac:	18001c26 	beq	r3,zero,800ef20 <__sfvwrite_r+0x470>
 800eeb0:	300b883a 	mov	r5,r6
 800eeb4:	a809883a 	mov	r4,r21
 800eeb8:	80090d80 	call	80090d8 <_malloc_r>
 800eebc:	102f883a 	mov	r23,r2
 800eec0:	10002926 	beq	r2,zero,800ef68 <__sfvwrite_r+0x4b8>
 800eec4:	81400417 	ldw	r5,16(r16)
 800eec8:	b00d883a 	mov	r6,r22
 800eecc:	1009883a 	mov	r4,r2
 800eed0:	80098e40 	call	80098e4 <memcpy>
 800eed4:	8080030b 	ldhu	r2,12(r16)
 800eed8:	00fedfc4 	movi	r3,-1153
 800eedc:	10c4703a 	and	r2,r2,r3
 800eee0:	10802014 	ori	r2,r2,128
 800eee4:	8080030d 	sth	r2,12(r16)
 800eee8:	bd89883a 	add	r4,r23,r22
 800eeec:	9d8fc83a 	sub	r7,r19,r22
 800eef0:	85c00415 	stw	r23,16(r16)
 800eef4:	84c00515 	stw	r19,20(r16)
 800eef8:	81000015 	stw	r4,0(r16)
 800eefc:	9027883a 	mov	r19,r18
 800ef00:	81c00215 	stw	r7,8(r16)
 800ef04:	902f883a 	mov	r23,r18
 800ef08:	003f3806 	br	800ebec <__sfvwrite_r+0x13c>
 800ef0c:	800b883a 	mov	r5,r16
 800ef10:	a809883a 	mov	r4,r21
 800ef14:	800e1940 	call	800e194 <_fflush_r>
 800ef18:	103fb926 	beq	r2,zero,800ee00 <__sfvwrite_r+0x350>
 800ef1c:	003f6506 	br	800ecb4 <__sfvwrite_r+0x204>
 800ef20:	a809883a 	mov	r4,r21
 800ef24:	80105e80 	call	80105e8 <_realloc_r>
 800ef28:	102f883a 	mov	r23,r2
 800ef2c:	103fee1e 	bne	r2,zero,800eee8 <__sfvwrite_r+0x438>
 800ef30:	81400417 	ldw	r5,16(r16)
 800ef34:	a809883a 	mov	r4,r21
 800ef38:	800e7a00 	call	800e7a0 <_free_r>
 800ef3c:	8080030b 	ldhu	r2,12(r16)
 800ef40:	00ffdfc4 	movi	r3,-129
 800ef44:	1884703a 	and	r2,r3,r2
 800ef48:	00c00304 	movi	r3,12
 800ef4c:	a8c00015 	stw	r3,0(r21)
 800ef50:	003f5906 	br	800ecb8 <__sfvwrite_r+0x208>
 800ef54:	94c00044 	addi	r19,r18,1
 800ef58:	02000044 	movi	r8,1
 800ef5c:	003f6006 	br	800ece0 <__sfvwrite_r+0x230>
 800ef60:	00bfffc4 	movi	r2,-1
 800ef64:	003f0006 	br	800eb68 <__sfvwrite_r+0xb8>
 800ef68:	00800304 	movi	r2,12
 800ef6c:	a8800015 	stw	r2,0(r21)
 800ef70:	8080030b 	ldhu	r2,12(r16)
 800ef74:	003f5006 	br	800ecb8 <__sfvwrite_r+0x208>

0800ef78 <_fwalk>:
 800ef78:	defff704 	addi	sp,sp,-36
 800ef7c:	dd000415 	stw	r20,16(sp)
 800ef80:	dfc00815 	stw	ra,32(sp)
 800ef84:	ddc00715 	stw	r23,28(sp)
 800ef88:	dd800615 	stw	r22,24(sp)
 800ef8c:	dd400515 	stw	r21,20(sp)
 800ef90:	dcc00315 	stw	r19,12(sp)
 800ef94:	dc800215 	stw	r18,8(sp)
 800ef98:	dc400115 	stw	r17,4(sp)
 800ef9c:	dc000015 	stw	r16,0(sp)
 800efa0:	2500b804 	addi	r20,r4,736
 800efa4:	a0002326 	beq	r20,zero,800f034 <_fwalk+0xbc>
 800efa8:	282b883a 	mov	r21,r5
 800efac:	002f883a 	mov	r23,zero
 800efb0:	05800044 	movi	r22,1
 800efb4:	04ffffc4 	movi	r19,-1
 800efb8:	a4400117 	ldw	r17,4(r20)
 800efbc:	a4800217 	ldw	r18,8(r20)
 800efc0:	8c7fffc4 	addi	r17,r17,-1
 800efc4:	88000d16 	blt	r17,zero,800effc <_fwalk+0x84>
 800efc8:	94000304 	addi	r16,r18,12
 800efcc:	94800384 	addi	r18,r18,14
 800efd0:	8080000b 	ldhu	r2,0(r16)
 800efd4:	8c7fffc4 	addi	r17,r17,-1
 800efd8:	813ffd04 	addi	r4,r16,-12
 800efdc:	b080042e 	bgeu	r22,r2,800eff0 <_fwalk+0x78>
 800efe0:	9080000f 	ldh	r2,0(r18)
 800efe4:	14c00226 	beq	r2,r19,800eff0 <_fwalk+0x78>
 800efe8:	a83ee83a 	callr	r21
 800efec:	b8aeb03a 	or	r23,r23,r2
 800eff0:	84001a04 	addi	r16,r16,104
 800eff4:	94801a04 	addi	r18,r18,104
 800eff8:	8cfff51e 	bne	r17,r19,800efd0 <_fwalk+0x58>
 800effc:	a5000017 	ldw	r20,0(r20)
 800f000:	a03fed1e 	bne	r20,zero,800efb8 <_fwalk+0x40>
 800f004:	b805883a 	mov	r2,r23
 800f008:	dfc00817 	ldw	ra,32(sp)
 800f00c:	ddc00717 	ldw	r23,28(sp)
 800f010:	dd800617 	ldw	r22,24(sp)
 800f014:	dd400517 	ldw	r21,20(sp)
 800f018:	dd000417 	ldw	r20,16(sp)
 800f01c:	dcc00317 	ldw	r19,12(sp)
 800f020:	dc800217 	ldw	r18,8(sp)
 800f024:	dc400117 	ldw	r17,4(sp)
 800f028:	dc000017 	ldw	r16,0(sp)
 800f02c:	dec00904 	addi	sp,sp,36
 800f030:	f800283a 	ret
 800f034:	002f883a 	mov	r23,zero
 800f038:	003ff206 	br	800f004 <_fwalk+0x8c>

0800f03c <_fwalk_reent>:
 800f03c:	defff704 	addi	sp,sp,-36
 800f040:	dd000415 	stw	r20,16(sp)
 800f044:	dfc00815 	stw	ra,32(sp)
 800f048:	ddc00715 	stw	r23,28(sp)
 800f04c:	dd800615 	stw	r22,24(sp)
 800f050:	dd400515 	stw	r21,20(sp)
 800f054:	dcc00315 	stw	r19,12(sp)
 800f058:	dc800215 	stw	r18,8(sp)
 800f05c:	dc400115 	stw	r17,4(sp)
 800f060:	dc000015 	stw	r16,0(sp)
 800f064:	2500b804 	addi	r20,r4,736
 800f068:	a0002326 	beq	r20,zero,800f0f8 <_fwalk_reent+0xbc>
 800f06c:	282b883a 	mov	r21,r5
 800f070:	2027883a 	mov	r19,r4
 800f074:	002f883a 	mov	r23,zero
 800f078:	05800044 	movi	r22,1
 800f07c:	04bfffc4 	movi	r18,-1
 800f080:	a4400117 	ldw	r17,4(r20)
 800f084:	a4000217 	ldw	r16,8(r20)
 800f088:	8c7fffc4 	addi	r17,r17,-1
 800f08c:	88000c16 	blt	r17,zero,800f0c0 <_fwalk_reent+0x84>
 800f090:	84000304 	addi	r16,r16,12
 800f094:	8080000b 	ldhu	r2,0(r16)
 800f098:	8c7fffc4 	addi	r17,r17,-1
 800f09c:	817ffd04 	addi	r5,r16,-12
 800f0a0:	b080052e 	bgeu	r22,r2,800f0b8 <_fwalk_reent+0x7c>
 800f0a4:	8080008f 	ldh	r2,2(r16)
 800f0a8:	9809883a 	mov	r4,r19
 800f0ac:	14800226 	beq	r2,r18,800f0b8 <_fwalk_reent+0x7c>
 800f0b0:	a83ee83a 	callr	r21
 800f0b4:	b8aeb03a 	or	r23,r23,r2
 800f0b8:	84001a04 	addi	r16,r16,104
 800f0bc:	8cbff51e 	bne	r17,r18,800f094 <_fwalk_reent+0x58>
 800f0c0:	a5000017 	ldw	r20,0(r20)
 800f0c4:	a03fee1e 	bne	r20,zero,800f080 <_fwalk_reent+0x44>
 800f0c8:	b805883a 	mov	r2,r23
 800f0cc:	dfc00817 	ldw	ra,32(sp)
 800f0d0:	ddc00717 	ldw	r23,28(sp)
 800f0d4:	dd800617 	ldw	r22,24(sp)
 800f0d8:	dd400517 	ldw	r21,20(sp)
 800f0dc:	dd000417 	ldw	r20,16(sp)
 800f0e0:	dcc00317 	ldw	r19,12(sp)
 800f0e4:	dc800217 	ldw	r18,8(sp)
 800f0e8:	dc400117 	ldw	r17,4(sp)
 800f0ec:	dc000017 	ldw	r16,0(sp)
 800f0f0:	dec00904 	addi	sp,sp,36
 800f0f4:	f800283a 	ret
 800f0f8:	002f883a 	mov	r23,zero
 800f0fc:	003ff206 	br	800f0c8 <_fwalk_reent+0x8c>

0800f100 <_isatty_r>:
 800f100:	defffd04 	addi	sp,sp,-12
 800f104:	dc000015 	stw	r16,0(sp)
 800f108:	040200b4 	movhi	r16,2050
 800f10c:	dc400115 	stw	r17,4(sp)
 800f110:	843a6704 	addi	r16,r16,-5732
 800f114:	2023883a 	mov	r17,r4
 800f118:	2809883a 	mov	r4,r5
 800f11c:	dfc00215 	stw	ra,8(sp)
 800f120:	80000015 	stw	zero,0(r16)
 800f124:	80163400 	call	8016340 <isatty>
 800f128:	00ffffc4 	movi	r3,-1
 800f12c:	10c00526 	beq	r2,r3,800f144 <_isatty_r+0x44>
 800f130:	dfc00217 	ldw	ra,8(sp)
 800f134:	dc400117 	ldw	r17,4(sp)
 800f138:	dc000017 	ldw	r16,0(sp)
 800f13c:	dec00304 	addi	sp,sp,12
 800f140:	f800283a 	ret
 800f144:	80c00017 	ldw	r3,0(r16)
 800f148:	183ff926 	beq	r3,zero,800f130 <_isatty_r+0x30>
 800f14c:	88c00015 	stw	r3,0(r17)
 800f150:	003ff706 	br	800f130 <_isatty_r+0x30>

0800f154 <_setlocale_r>:
 800f154:	30001b26 	beq	r6,zero,800f1c4 <_setlocale_r+0x70>
 800f158:	014200b4 	movhi	r5,2050
 800f15c:	defffe04 	addi	sp,sp,-8
 800f160:	2968e104 	addi	r5,r5,-23676
 800f164:	3009883a 	mov	r4,r6
 800f168:	dc000015 	stw	r16,0(sp)
 800f16c:	dfc00115 	stw	ra,4(sp)
 800f170:	3021883a 	mov	r16,r6
 800f174:	8010bc00 	call	8010bc0 <strcmp>
 800f178:	1000061e 	bne	r2,zero,800f194 <_setlocale_r+0x40>
 800f17c:	008200b4 	movhi	r2,2050
 800f180:	10a8c204 	addi	r2,r2,-23800
 800f184:	dfc00117 	ldw	ra,4(sp)
 800f188:	dc000017 	ldw	r16,0(sp)
 800f18c:	dec00204 	addi	sp,sp,8
 800f190:	f800283a 	ret
 800f194:	014200b4 	movhi	r5,2050
 800f198:	2968c204 	addi	r5,r5,-23800
 800f19c:	8009883a 	mov	r4,r16
 800f1a0:	8010bc00 	call	8010bc0 <strcmp>
 800f1a4:	103ff526 	beq	r2,zero,800f17c <_setlocale_r+0x28>
 800f1a8:	014200b4 	movhi	r5,2050
 800f1ac:	2968cc04 	addi	r5,r5,-23760
 800f1b0:	8009883a 	mov	r4,r16
 800f1b4:	8010bc00 	call	8010bc0 <strcmp>
 800f1b8:	103ff026 	beq	r2,zero,800f17c <_setlocale_r+0x28>
 800f1bc:	0005883a 	mov	r2,zero
 800f1c0:	003ff006 	br	800f184 <_setlocale_r+0x30>
 800f1c4:	008200b4 	movhi	r2,2050
 800f1c8:	10a8c204 	addi	r2,r2,-23800
 800f1cc:	f800283a 	ret

0800f1d0 <__locale_charset>:
 800f1d0:	008200b4 	movhi	r2,2050
 800f1d4:	10acab04 	addi	r2,r2,-19796
 800f1d8:	f800283a 	ret

0800f1dc <__locale_mb_cur_max>:
 800f1dc:	008200b4 	movhi	r2,2050
 800f1e0:	10b1bf04 	addi	r2,r2,-14596
 800f1e4:	10800017 	ldw	r2,0(r2)
 800f1e8:	f800283a 	ret

0800f1ec <__locale_msgcharset>:
 800f1ec:	008200b4 	movhi	r2,2050
 800f1f0:	10aca304 	addi	r2,r2,-19828
 800f1f4:	f800283a 	ret

0800f1f8 <__locale_cjk_lang>:
 800f1f8:	0005883a 	mov	r2,zero
 800f1fc:	f800283a 	ret

0800f200 <_localeconv_r>:
 800f200:	008200b4 	movhi	r2,2050
 800f204:	10acb304 	addi	r2,r2,-19764
 800f208:	f800283a 	ret

0800f20c <setlocale>:
 800f20c:	008200b4 	movhi	r2,2050
 800f210:	10b1bc04 	addi	r2,r2,-14608
 800f214:	280d883a 	mov	r6,r5
 800f218:	200b883a 	mov	r5,r4
 800f21c:	11000017 	ldw	r4,0(r2)
 800f220:	800f1541 	jmpi	800f154 <_setlocale_r>

0800f224 <localeconv>:
 800f224:	008200b4 	movhi	r2,2050
 800f228:	10acb304 	addi	r2,r2,-19764
 800f22c:	f800283a 	ret

0800f230 <_lseek_r>:
 800f230:	defffd04 	addi	sp,sp,-12
 800f234:	2805883a 	mov	r2,r5
 800f238:	dc000015 	stw	r16,0(sp)
 800f23c:	040200b4 	movhi	r16,2050
 800f240:	dc400115 	stw	r17,4(sp)
 800f244:	300b883a 	mov	r5,r6
 800f248:	843a6704 	addi	r16,r16,-5732
 800f24c:	2023883a 	mov	r17,r4
 800f250:	380d883a 	mov	r6,r7
 800f254:	1009883a 	mov	r4,r2
 800f258:	dfc00215 	stw	ra,8(sp)
 800f25c:	80000015 	stw	zero,0(r16)
 800f260:	80165140 	call	8016514 <lseek>
 800f264:	00ffffc4 	movi	r3,-1
 800f268:	10c00526 	beq	r2,r3,800f280 <_lseek_r+0x50>
 800f26c:	dfc00217 	ldw	ra,8(sp)
 800f270:	dc400117 	ldw	r17,4(sp)
 800f274:	dc000017 	ldw	r16,0(sp)
 800f278:	dec00304 	addi	sp,sp,12
 800f27c:	f800283a 	ret
 800f280:	80c00017 	ldw	r3,0(r16)
 800f284:	183ff926 	beq	r3,zero,800f26c <_lseek_r+0x3c>
 800f288:	88c00015 	stw	r3,0(r17)
 800f28c:	003ff706 	br	800f26c <_lseek_r+0x3c>

0800f290 <memchr>:
 800f290:	208000cc 	andi	r2,r4,3
 800f294:	280f883a 	mov	r7,r5
 800f298:	10003426 	beq	r2,zero,800f36c <memchr+0xdc>
 800f29c:	30bfffc4 	addi	r2,r6,-1
 800f2a0:	30001a26 	beq	r6,zero,800f30c <memchr+0x7c>
 800f2a4:	20c00003 	ldbu	r3,0(r4)
 800f2a8:	29803fcc 	andi	r6,r5,255
 800f2ac:	30c0051e 	bne	r6,r3,800f2c4 <memchr+0x34>
 800f2b0:	00001806 	br	800f314 <memchr+0x84>
 800f2b4:	10001526 	beq	r2,zero,800f30c <memchr+0x7c>
 800f2b8:	20c00003 	ldbu	r3,0(r4)
 800f2bc:	10bfffc4 	addi	r2,r2,-1
 800f2c0:	30c01426 	beq	r6,r3,800f314 <memchr+0x84>
 800f2c4:	21000044 	addi	r4,r4,1
 800f2c8:	20c000cc 	andi	r3,r4,3
 800f2cc:	183ff91e 	bne	r3,zero,800f2b4 <memchr+0x24>
 800f2d0:	020000c4 	movi	r8,3
 800f2d4:	40801136 	bltu	r8,r2,800f31c <memchr+0x8c>
 800f2d8:	10000c26 	beq	r2,zero,800f30c <memchr+0x7c>
 800f2dc:	20c00003 	ldbu	r3,0(r4)
 800f2e0:	29403fcc 	andi	r5,r5,255
 800f2e4:	28c00b26 	beq	r5,r3,800f314 <memchr+0x84>
 800f2e8:	20c00044 	addi	r3,r4,1
 800f2ec:	39803fcc 	andi	r6,r7,255
 800f2f0:	2089883a 	add	r4,r4,r2
 800f2f4:	00000306 	br	800f304 <memchr+0x74>
 800f2f8:	18c00044 	addi	r3,r3,1
 800f2fc:	197fffc3 	ldbu	r5,-1(r3)
 800f300:	31400526 	beq	r6,r5,800f318 <memchr+0x88>
 800f304:	1805883a 	mov	r2,r3
 800f308:	20fffb1e 	bne	r4,r3,800f2f8 <memchr+0x68>
 800f30c:	0005883a 	mov	r2,zero
 800f310:	f800283a 	ret
 800f314:	2005883a 	mov	r2,r4
 800f318:	f800283a 	ret
 800f31c:	28c03fcc 	andi	r3,r5,255
 800f320:	1812923a 	slli	r9,r3,8
 800f324:	02ffbff4 	movhi	r11,65279
 800f328:	02a02074 	movhi	r10,32897
 800f32c:	48d2b03a 	or	r9,r9,r3
 800f330:	4806943a 	slli	r3,r9,16
 800f334:	5affbfc4 	addi	r11,r11,-257
 800f338:	52a02004 	addi	r10,r10,-32640
 800f33c:	48d2b03a 	or	r9,r9,r3
 800f340:	20c00017 	ldw	r3,0(r4)
 800f344:	48c6f03a 	xor	r3,r9,r3
 800f348:	1acd883a 	add	r6,r3,r11
 800f34c:	00c6303a 	nor	r3,zero,r3
 800f350:	30c6703a 	and	r3,r6,r3
 800f354:	1a86703a 	and	r3,r3,r10
 800f358:	183fe01e 	bne	r3,zero,800f2dc <memchr+0x4c>
 800f35c:	10bfff04 	addi	r2,r2,-4
 800f360:	21000104 	addi	r4,r4,4
 800f364:	40bff636 	bltu	r8,r2,800f340 <memchr+0xb0>
 800f368:	003fdb06 	br	800f2d8 <memchr+0x48>
 800f36c:	3005883a 	mov	r2,r6
 800f370:	003fd706 	br	800f2d0 <memchr+0x40>

0800f374 <memmove>:
 800f374:	2005883a 	mov	r2,r4
 800f378:	29000b2e 	bgeu	r5,r4,800f3a8 <memmove+0x34>
 800f37c:	298f883a 	add	r7,r5,r6
 800f380:	21c0092e 	bgeu	r4,r7,800f3a8 <memmove+0x34>
 800f384:	2187883a 	add	r3,r4,r6
 800f388:	198bc83a 	sub	r5,r3,r6
 800f38c:	30004826 	beq	r6,zero,800f4b0 <memmove+0x13c>
 800f390:	39ffffc4 	addi	r7,r7,-1
 800f394:	39000003 	ldbu	r4,0(r7)
 800f398:	18ffffc4 	addi	r3,r3,-1
 800f39c:	19000005 	stb	r4,0(r3)
 800f3a0:	28fffb1e 	bne	r5,r3,800f390 <memmove+0x1c>
 800f3a4:	f800283a 	ret
 800f3a8:	00c003c4 	movi	r3,15
 800f3ac:	1980412e 	bgeu	r3,r6,800f4b4 <memmove+0x140>
 800f3b0:	2886b03a 	or	r3,r5,r2
 800f3b4:	18c000cc 	andi	r3,r3,3
 800f3b8:	1800401e 	bne	r3,zero,800f4bc <memmove+0x148>
 800f3bc:	33fffc04 	addi	r15,r6,-16
 800f3c0:	781ed13a 	srli	r15,r15,4
 800f3c4:	28c00104 	addi	r3,r5,4
 800f3c8:	13400104 	addi	r13,r2,4
 800f3cc:	781c913a 	slli	r14,r15,4
 800f3d0:	2b000204 	addi	r12,r5,8
 800f3d4:	12c00204 	addi	r11,r2,8
 800f3d8:	73800504 	addi	r14,r14,20
 800f3dc:	2a800304 	addi	r10,r5,12
 800f3e0:	12400304 	addi	r9,r2,12
 800f3e4:	2b9d883a 	add	r14,r5,r14
 800f3e8:	2811883a 	mov	r8,r5
 800f3ec:	100f883a 	mov	r7,r2
 800f3f0:	41000017 	ldw	r4,0(r8)
 800f3f4:	39c00404 	addi	r7,r7,16
 800f3f8:	18c00404 	addi	r3,r3,16
 800f3fc:	393ffc15 	stw	r4,-16(r7)
 800f400:	193ffc17 	ldw	r4,-16(r3)
 800f404:	6b400404 	addi	r13,r13,16
 800f408:	5ac00404 	addi	r11,r11,16
 800f40c:	693ffc15 	stw	r4,-16(r13)
 800f410:	61000017 	ldw	r4,0(r12)
 800f414:	4a400404 	addi	r9,r9,16
 800f418:	42000404 	addi	r8,r8,16
 800f41c:	593ffc15 	stw	r4,-16(r11)
 800f420:	51000017 	ldw	r4,0(r10)
 800f424:	63000404 	addi	r12,r12,16
 800f428:	52800404 	addi	r10,r10,16
 800f42c:	493ffc15 	stw	r4,-16(r9)
 800f430:	1bbfef1e 	bne	r3,r14,800f3f0 <memmove+0x7c>
 800f434:	79000044 	addi	r4,r15,1
 800f438:	2008913a 	slli	r4,r4,4
 800f43c:	328003cc 	andi	r10,r6,15
 800f440:	02c000c4 	movi	r11,3
 800f444:	1107883a 	add	r3,r2,r4
 800f448:	290b883a 	add	r5,r5,r4
 800f44c:	5a801e2e 	bgeu	r11,r10,800f4c8 <memmove+0x154>
 800f450:	1813883a 	mov	r9,r3
 800f454:	2811883a 	mov	r8,r5
 800f458:	500f883a 	mov	r7,r10
 800f45c:	41000017 	ldw	r4,0(r8)
 800f460:	4a400104 	addi	r9,r9,4
 800f464:	39ffff04 	addi	r7,r7,-4
 800f468:	493fff15 	stw	r4,-4(r9)
 800f46c:	42000104 	addi	r8,r8,4
 800f470:	59fffa36 	bltu	r11,r7,800f45c <memmove+0xe8>
 800f474:	513fff04 	addi	r4,r10,-4
 800f478:	2008d0ba 	srli	r4,r4,2
 800f47c:	318000cc 	andi	r6,r6,3
 800f480:	21000044 	addi	r4,r4,1
 800f484:	2109883a 	add	r4,r4,r4
 800f488:	2109883a 	add	r4,r4,r4
 800f48c:	1907883a 	add	r3,r3,r4
 800f490:	290b883a 	add	r5,r5,r4
 800f494:	30000b26 	beq	r6,zero,800f4c4 <memmove+0x150>
 800f498:	198d883a 	add	r6,r3,r6
 800f49c:	29c00003 	ldbu	r7,0(r5)
 800f4a0:	18c00044 	addi	r3,r3,1
 800f4a4:	29400044 	addi	r5,r5,1
 800f4a8:	19ffffc5 	stb	r7,-1(r3)
 800f4ac:	19bffb1e 	bne	r3,r6,800f49c <memmove+0x128>
 800f4b0:	f800283a 	ret
 800f4b4:	1007883a 	mov	r3,r2
 800f4b8:	003ff606 	br	800f494 <memmove+0x120>
 800f4bc:	1007883a 	mov	r3,r2
 800f4c0:	003ff506 	br	800f498 <memmove+0x124>
 800f4c4:	f800283a 	ret
 800f4c8:	500d883a 	mov	r6,r10
 800f4cc:	003ff106 	br	800f494 <memmove+0x120>

0800f4d0 <_Balloc>:
 800f4d0:	20801317 	ldw	r2,76(r4)
 800f4d4:	defffc04 	addi	sp,sp,-16
 800f4d8:	dc400115 	stw	r17,4(sp)
 800f4dc:	dc000015 	stw	r16,0(sp)
 800f4e0:	dfc00315 	stw	ra,12(sp)
 800f4e4:	dc800215 	stw	r18,8(sp)
 800f4e8:	2023883a 	mov	r17,r4
 800f4ec:	2821883a 	mov	r16,r5
 800f4f0:	10000f26 	beq	r2,zero,800f530 <_Balloc+0x60>
 800f4f4:	8407883a 	add	r3,r16,r16
 800f4f8:	18c7883a 	add	r3,r3,r3
 800f4fc:	10c7883a 	add	r3,r2,r3
 800f500:	18800017 	ldw	r2,0(r3)
 800f504:	10001126 	beq	r2,zero,800f54c <_Balloc+0x7c>
 800f508:	11000017 	ldw	r4,0(r2)
 800f50c:	19000015 	stw	r4,0(r3)
 800f510:	10000415 	stw	zero,16(r2)
 800f514:	10000315 	stw	zero,12(r2)
 800f518:	dfc00317 	ldw	ra,12(sp)
 800f51c:	dc800217 	ldw	r18,8(sp)
 800f520:	dc400117 	ldw	r17,4(sp)
 800f524:	dc000017 	ldw	r16,0(sp)
 800f528:	dec00404 	addi	sp,sp,16
 800f52c:	f800283a 	ret
 800f530:	01800844 	movi	r6,33
 800f534:	01400104 	movi	r5,4
 800f538:	80123940 	call	8012394 <_calloc_r>
 800f53c:	88801315 	stw	r2,76(r17)
 800f540:	103fec1e 	bne	r2,zero,800f4f4 <_Balloc+0x24>
 800f544:	0005883a 	mov	r2,zero
 800f548:	003ff306 	br	800f518 <_Balloc+0x48>
 800f54c:	01400044 	movi	r5,1
 800f550:	2c24983a 	sll	r18,r5,r16
 800f554:	8809883a 	mov	r4,r17
 800f558:	91800144 	addi	r6,r18,5
 800f55c:	318d883a 	add	r6,r6,r6
 800f560:	318d883a 	add	r6,r6,r6
 800f564:	80123940 	call	8012394 <_calloc_r>
 800f568:	103ff626 	beq	r2,zero,800f544 <_Balloc+0x74>
 800f56c:	14000115 	stw	r16,4(r2)
 800f570:	14800215 	stw	r18,8(r2)
 800f574:	003fe606 	br	800f510 <_Balloc+0x40>

0800f578 <_Bfree>:
 800f578:	28000826 	beq	r5,zero,800f59c <_Bfree+0x24>
 800f57c:	28c00117 	ldw	r3,4(r5)
 800f580:	20801317 	ldw	r2,76(r4)
 800f584:	18c7883a 	add	r3,r3,r3
 800f588:	18c7883a 	add	r3,r3,r3
 800f58c:	10c5883a 	add	r2,r2,r3
 800f590:	10c00017 	ldw	r3,0(r2)
 800f594:	28c00015 	stw	r3,0(r5)
 800f598:	11400015 	stw	r5,0(r2)
 800f59c:	f800283a 	ret

0800f5a0 <__multadd>:
 800f5a0:	defff704 	addi	sp,sp,-36
 800f5a4:	dc800215 	stw	r18,8(sp)
 800f5a8:	2c800417 	ldw	r18,16(r5)
 800f5ac:	dd800615 	stw	r22,24(sp)
 800f5b0:	dd400515 	stw	r21,20(sp)
 800f5b4:	dd000415 	stw	r20,16(sp)
 800f5b8:	dcc00315 	stw	r19,12(sp)
 800f5bc:	dc400115 	stw	r17,4(sp)
 800f5c0:	dc000015 	stw	r16,0(sp)
 800f5c4:	dfc00815 	stw	ra,32(sp)
 800f5c8:	ddc00715 	stw	r23,28(sp)
 800f5cc:	2827883a 	mov	r19,r5
 800f5d0:	2029883a 	mov	r20,r4
 800f5d4:	3023883a 	mov	r17,r6
 800f5d8:	3821883a 	mov	r16,r7
 800f5dc:	2d400504 	addi	r21,r5,20
 800f5e0:	002d883a 	mov	r22,zero
 800f5e4:	adc00017 	ldw	r23,0(r21)
 800f5e8:	880b883a 	mov	r5,r17
 800f5ec:	ad400104 	addi	r21,r21,4
 800f5f0:	b93fffcc 	andi	r4,r23,65535
 800f5f4:	80087fc0 	call	80087fc <__mulsi3>
 800f5f8:	b808d43a 	srli	r4,r23,16
 800f5fc:	880b883a 	mov	r5,r17
 800f600:	1421883a 	add	r16,r2,r16
 800f604:	80087fc0 	call	80087fc <__mulsi3>
 800f608:	800ed43a 	srli	r7,r16,16
 800f60c:	80ffffcc 	andi	r3,r16,65535
 800f610:	b5800044 	addi	r22,r22,1
 800f614:	11c5883a 	add	r2,r2,r7
 800f618:	100e943a 	slli	r7,r2,16
 800f61c:	1020d43a 	srli	r16,r2,16
 800f620:	38c7883a 	add	r3,r7,r3
 800f624:	a8ffff15 	stw	r3,-4(r21)
 800f628:	b4bfee16 	blt	r22,r18,800f5e4 <__multadd+0x44>
 800f62c:	80000926 	beq	r16,zero,800f654 <__multadd+0xb4>
 800f630:	98800217 	ldw	r2,8(r19)
 800f634:	9080130e 	bge	r18,r2,800f684 <__multadd+0xe4>
 800f638:	90800144 	addi	r2,r18,5
 800f63c:	1085883a 	add	r2,r2,r2
 800f640:	1085883a 	add	r2,r2,r2
 800f644:	9885883a 	add	r2,r19,r2
 800f648:	14000015 	stw	r16,0(r2)
 800f64c:	94800044 	addi	r18,r18,1
 800f650:	9c800415 	stw	r18,16(r19)
 800f654:	9805883a 	mov	r2,r19
 800f658:	dfc00817 	ldw	ra,32(sp)
 800f65c:	ddc00717 	ldw	r23,28(sp)
 800f660:	dd800617 	ldw	r22,24(sp)
 800f664:	dd400517 	ldw	r21,20(sp)
 800f668:	dd000417 	ldw	r20,16(sp)
 800f66c:	dcc00317 	ldw	r19,12(sp)
 800f670:	dc800217 	ldw	r18,8(sp)
 800f674:	dc400117 	ldw	r17,4(sp)
 800f678:	dc000017 	ldw	r16,0(sp)
 800f67c:	dec00904 	addi	sp,sp,36
 800f680:	f800283a 	ret
 800f684:	99400117 	ldw	r5,4(r19)
 800f688:	a009883a 	mov	r4,r20
 800f68c:	29400044 	addi	r5,r5,1
 800f690:	800f4d00 	call	800f4d0 <_Balloc>
 800f694:	99800417 	ldw	r6,16(r19)
 800f698:	99400304 	addi	r5,r19,12
 800f69c:	11000304 	addi	r4,r2,12
 800f6a0:	31800084 	addi	r6,r6,2
 800f6a4:	318d883a 	add	r6,r6,r6
 800f6a8:	318d883a 	add	r6,r6,r6
 800f6ac:	1023883a 	mov	r17,r2
 800f6b0:	80098e40 	call	80098e4 <memcpy>
 800f6b4:	98000a26 	beq	r19,zero,800f6e0 <__multadd+0x140>
 800f6b8:	98c00117 	ldw	r3,4(r19)
 800f6bc:	a0801317 	ldw	r2,76(r20)
 800f6c0:	18c7883a 	add	r3,r3,r3
 800f6c4:	18c7883a 	add	r3,r3,r3
 800f6c8:	10c5883a 	add	r2,r2,r3
 800f6cc:	10c00017 	ldw	r3,0(r2)
 800f6d0:	98c00015 	stw	r3,0(r19)
 800f6d4:	14c00015 	stw	r19,0(r2)
 800f6d8:	8827883a 	mov	r19,r17
 800f6dc:	003fd606 	br	800f638 <__multadd+0x98>
 800f6e0:	8827883a 	mov	r19,r17
 800f6e4:	003fd406 	br	800f638 <__multadd+0x98>

0800f6e8 <__s2b>:
 800f6e8:	defff904 	addi	sp,sp,-28
 800f6ec:	dc400115 	stw	r17,4(sp)
 800f6f0:	dc000015 	stw	r16,0(sp)
 800f6f4:	2023883a 	mov	r17,r4
 800f6f8:	2821883a 	mov	r16,r5
 800f6fc:	39000204 	addi	r4,r7,8
 800f700:	01400244 	movi	r5,9
 800f704:	dcc00315 	stw	r19,12(sp)
 800f708:	dc800215 	stw	r18,8(sp)
 800f70c:	dfc00615 	stw	ra,24(sp)
 800f710:	dd400515 	stw	r21,20(sp)
 800f714:	dd000415 	stw	r20,16(sp)
 800f718:	3825883a 	mov	r18,r7
 800f71c:	3027883a 	mov	r19,r6
 800f720:	80086480 	call	8008648 <__divsi3>
 800f724:	00c00044 	movi	r3,1
 800f728:	000b883a 	mov	r5,zero
 800f72c:	1880030e 	bge	r3,r2,800f73c <__s2b+0x54>
 800f730:	18c7883a 	add	r3,r3,r3
 800f734:	29400044 	addi	r5,r5,1
 800f738:	18bffd16 	blt	r3,r2,800f730 <__s2b+0x48>
 800f73c:	8809883a 	mov	r4,r17
 800f740:	800f4d00 	call	800f4d0 <_Balloc>
 800f744:	d8c00717 	ldw	r3,28(sp)
 800f748:	10c00515 	stw	r3,20(r2)
 800f74c:	00c00044 	movi	r3,1
 800f750:	10c00415 	stw	r3,16(r2)
 800f754:	00c00244 	movi	r3,9
 800f758:	1cc0210e 	bge	r3,r19,800f7e0 <__s2b+0xf8>
 800f75c:	80eb883a 	add	r21,r16,r3
 800f760:	a829883a 	mov	r20,r21
 800f764:	84e1883a 	add	r16,r16,r19
 800f768:	a1c00007 	ldb	r7,0(r20)
 800f76c:	01800284 	movi	r6,10
 800f770:	a5000044 	addi	r20,r20,1
 800f774:	100b883a 	mov	r5,r2
 800f778:	39fff404 	addi	r7,r7,-48
 800f77c:	8809883a 	mov	r4,r17
 800f780:	800f5a00 	call	800f5a0 <__multadd>
 800f784:	a43ff81e 	bne	r20,r16,800f768 <__s2b+0x80>
 800f788:	ace1883a 	add	r16,r21,r19
 800f78c:	843ffe04 	addi	r16,r16,-8
 800f790:	9c800a0e 	bge	r19,r18,800f7bc <__s2b+0xd4>
 800f794:	94e5c83a 	sub	r18,r18,r19
 800f798:	84a5883a 	add	r18,r16,r18
 800f79c:	81c00007 	ldb	r7,0(r16)
 800f7a0:	01800284 	movi	r6,10
 800f7a4:	84000044 	addi	r16,r16,1
 800f7a8:	100b883a 	mov	r5,r2
 800f7ac:	39fff404 	addi	r7,r7,-48
 800f7b0:	8809883a 	mov	r4,r17
 800f7b4:	800f5a00 	call	800f5a0 <__multadd>
 800f7b8:	84bff81e 	bne	r16,r18,800f79c <__s2b+0xb4>
 800f7bc:	dfc00617 	ldw	ra,24(sp)
 800f7c0:	dd400517 	ldw	r21,20(sp)
 800f7c4:	dd000417 	ldw	r20,16(sp)
 800f7c8:	dcc00317 	ldw	r19,12(sp)
 800f7cc:	dc800217 	ldw	r18,8(sp)
 800f7d0:	dc400117 	ldw	r17,4(sp)
 800f7d4:	dc000017 	ldw	r16,0(sp)
 800f7d8:	dec00704 	addi	sp,sp,28
 800f7dc:	f800283a 	ret
 800f7e0:	84000284 	addi	r16,r16,10
 800f7e4:	1827883a 	mov	r19,r3
 800f7e8:	003fe906 	br	800f790 <__s2b+0xa8>

0800f7ec <__hi0bits>:
 800f7ec:	20bfffec 	andhi	r2,r4,65535
 800f7f0:	1000141e 	bne	r2,zero,800f844 <__hi0bits+0x58>
 800f7f4:	2008943a 	slli	r4,r4,16
 800f7f8:	00800404 	movi	r2,16
 800f7fc:	20ffc02c 	andhi	r3,r4,65280
 800f800:	1800021e 	bne	r3,zero,800f80c <__hi0bits+0x20>
 800f804:	2008923a 	slli	r4,r4,8
 800f808:	10800204 	addi	r2,r2,8
 800f80c:	20fc002c 	andhi	r3,r4,61440
 800f810:	1800021e 	bne	r3,zero,800f81c <__hi0bits+0x30>
 800f814:	2008913a 	slli	r4,r4,4
 800f818:	10800104 	addi	r2,r2,4
 800f81c:	20f0002c 	andhi	r3,r4,49152
 800f820:	1800031e 	bne	r3,zero,800f830 <__hi0bits+0x44>
 800f824:	2109883a 	add	r4,r4,r4
 800f828:	10800084 	addi	r2,r2,2
 800f82c:	2109883a 	add	r4,r4,r4
 800f830:	20000316 	blt	r4,zero,800f840 <__hi0bits+0x54>
 800f834:	2110002c 	andhi	r4,r4,16384
 800f838:	2000041e 	bne	r4,zero,800f84c <__hi0bits+0x60>
 800f83c:	00800804 	movi	r2,32
 800f840:	f800283a 	ret
 800f844:	0005883a 	mov	r2,zero
 800f848:	003fec06 	br	800f7fc <__hi0bits+0x10>
 800f84c:	10800044 	addi	r2,r2,1
 800f850:	f800283a 	ret

0800f854 <__lo0bits>:
 800f854:	20c00017 	ldw	r3,0(r4)
 800f858:	188001cc 	andi	r2,r3,7
 800f85c:	10000826 	beq	r2,zero,800f880 <__lo0bits+0x2c>
 800f860:	1880004c 	andi	r2,r3,1
 800f864:	1000211e 	bne	r2,zero,800f8ec <__lo0bits+0x98>
 800f868:	1880008c 	andi	r2,r3,2
 800f86c:	1000211e 	bne	r2,zero,800f8f4 <__lo0bits+0xa0>
 800f870:	1806d0ba 	srli	r3,r3,2
 800f874:	00800084 	movi	r2,2
 800f878:	20c00015 	stw	r3,0(r4)
 800f87c:	f800283a 	ret
 800f880:	18bfffcc 	andi	r2,r3,65535
 800f884:	10001326 	beq	r2,zero,800f8d4 <__lo0bits+0x80>
 800f888:	0005883a 	mov	r2,zero
 800f88c:	19403fcc 	andi	r5,r3,255
 800f890:	2800021e 	bne	r5,zero,800f89c <__lo0bits+0x48>
 800f894:	1806d23a 	srli	r3,r3,8
 800f898:	10800204 	addi	r2,r2,8
 800f89c:	194003cc 	andi	r5,r3,15
 800f8a0:	2800021e 	bne	r5,zero,800f8ac <__lo0bits+0x58>
 800f8a4:	1806d13a 	srli	r3,r3,4
 800f8a8:	10800104 	addi	r2,r2,4
 800f8ac:	194000cc 	andi	r5,r3,3
 800f8b0:	2800021e 	bne	r5,zero,800f8bc <__lo0bits+0x68>
 800f8b4:	1806d0ba 	srli	r3,r3,2
 800f8b8:	10800084 	addi	r2,r2,2
 800f8bc:	1940004c 	andi	r5,r3,1
 800f8c0:	2800081e 	bne	r5,zero,800f8e4 <__lo0bits+0x90>
 800f8c4:	1806d07a 	srli	r3,r3,1
 800f8c8:	1800051e 	bne	r3,zero,800f8e0 <__lo0bits+0x8c>
 800f8cc:	00800804 	movi	r2,32
 800f8d0:	f800283a 	ret
 800f8d4:	1806d43a 	srli	r3,r3,16
 800f8d8:	00800404 	movi	r2,16
 800f8dc:	003feb06 	br	800f88c <__lo0bits+0x38>
 800f8e0:	10800044 	addi	r2,r2,1
 800f8e4:	20c00015 	stw	r3,0(r4)
 800f8e8:	f800283a 	ret
 800f8ec:	0005883a 	mov	r2,zero
 800f8f0:	f800283a 	ret
 800f8f4:	1806d07a 	srli	r3,r3,1
 800f8f8:	00800044 	movi	r2,1
 800f8fc:	20c00015 	stw	r3,0(r4)
 800f900:	f800283a 	ret

0800f904 <__i2b>:
 800f904:	defffd04 	addi	sp,sp,-12
 800f908:	dc000015 	stw	r16,0(sp)
 800f90c:	04000044 	movi	r16,1
 800f910:	dc400115 	stw	r17,4(sp)
 800f914:	2823883a 	mov	r17,r5
 800f918:	800b883a 	mov	r5,r16
 800f91c:	dfc00215 	stw	ra,8(sp)
 800f920:	800f4d00 	call	800f4d0 <_Balloc>
 800f924:	14400515 	stw	r17,20(r2)
 800f928:	14000415 	stw	r16,16(r2)
 800f92c:	dfc00217 	ldw	ra,8(sp)
 800f930:	dc400117 	ldw	r17,4(sp)
 800f934:	dc000017 	ldw	r16,0(sp)
 800f938:	dec00304 	addi	sp,sp,12
 800f93c:	f800283a 	ret

0800f940 <__multiply>:
 800f940:	deffef04 	addi	sp,sp,-68
 800f944:	dc400815 	stw	r17,32(sp)
 800f948:	dc000715 	stw	r16,28(sp)
 800f94c:	34400417 	ldw	r17,16(r6)
 800f950:	2c000417 	ldw	r16,16(r5)
 800f954:	dd800d15 	stw	r22,52(sp)
 800f958:	dc800915 	stw	r18,36(sp)
 800f95c:	dfc01015 	stw	ra,64(sp)
 800f960:	df000f15 	stw	fp,60(sp)
 800f964:	ddc00e15 	stw	r23,56(sp)
 800f968:	dd400c15 	stw	r21,48(sp)
 800f96c:	dd000b15 	stw	r20,44(sp)
 800f970:	dcc00a15 	stw	r19,40(sp)
 800f974:	2825883a 	mov	r18,r5
 800f978:	302d883a 	mov	r22,r6
 800f97c:	8440050e 	bge	r16,r17,800f994 <__multiply+0x54>
 800f980:	8007883a 	mov	r3,r16
 800f984:	3025883a 	mov	r18,r6
 800f988:	8821883a 	mov	r16,r17
 800f98c:	282d883a 	mov	r22,r5
 800f990:	1823883a 	mov	r17,r3
 800f994:	90800217 	ldw	r2,8(r18)
 800f998:	8447883a 	add	r3,r16,r17
 800f99c:	d8c00215 	stw	r3,8(sp)
 800f9a0:	91400117 	ldw	r5,4(r18)
 800f9a4:	10c0010e 	bge	r2,r3,800f9ac <__multiply+0x6c>
 800f9a8:	29400044 	addi	r5,r5,1
 800f9ac:	800f4d00 	call	800f4d0 <_Balloc>
 800f9b0:	d8c00217 	ldw	r3,8(sp)
 800f9b4:	d8800615 	stw	r2,24(sp)
 800f9b8:	18eb883a 	add	r21,r3,r3
 800f9bc:	ad6b883a 	add	r21,r21,r21
 800f9c0:	10c00504 	addi	r3,r2,20
 800f9c4:	1d6b883a 	add	r21,r3,r21
 800f9c8:	d8c00115 	stw	r3,4(sp)
 800f9cc:	dd400315 	stw	r21,12(sp)
 800f9d0:	1805883a 	mov	r2,r3
 800f9d4:	1d40042e 	bgeu	r3,r21,800f9e8 <__multiply+0xa8>
 800f9d8:	d8c00317 	ldw	r3,12(sp)
 800f9dc:	10000015 	stw	zero,0(r2)
 800f9e0:	10800104 	addi	r2,r2,4
 800f9e4:	10fffc36 	bltu	r2,r3,800f9d8 <__multiply+0x98>
 800f9e8:	8c63883a 	add	r17,r17,r17
 800f9ec:	b5800504 	addi	r22,r22,20
 800f9f0:	8c63883a 	add	r17,r17,r17
 800f9f4:	94800504 	addi	r18,r18,20
 800f9f8:	8421883a 	add	r16,r16,r16
 800f9fc:	b463883a 	add	r17,r22,r17
 800fa00:	8421883a 	add	r16,r16,r16
 800fa04:	dd800015 	stw	r22,0(sp)
 800fa08:	dc800415 	stw	r18,16(sp)
 800fa0c:	dc400515 	stw	r17,20(sp)
 800fa10:	9429883a 	add	r20,r18,r16
 800fa14:	b4404f2e 	bgeu	r22,r17,800fb54 <__multiply+0x214>
 800fa18:	d8c00017 	ldw	r3,0(sp)
 800fa1c:	1c800017 	ldw	r18,0(r3)
 800fa20:	947fffcc 	andi	r17,r18,65535
 800fa24:	88001e26 	beq	r17,zero,800faa0 <__multiply+0x160>
 800fa28:	dd800117 	ldw	r22,4(sp)
 800fa2c:	dd400417 	ldw	r21,16(sp)
 800fa30:	0027883a 	mov	r19,zero
 800fa34:	ac800017 	ldw	r18,0(r21)
 800fa38:	b4000017 	ldw	r16,0(r22)
 800fa3c:	880b883a 	mov	r5,r17
 800fa40:	913fffcc 	andi	r4,r18,65535
 800fa44:	80087fc0 	call	80087fc <__mulsi3>
 800fa48:	9008d43a 	srli	r4,r18,16
 800fa4c:	84bfffcc 	andi	r18,r16,65535
 800fa50:	1485883a 	add	r2,r2,r18
 800fa54:	14e5883a 	add	r18,r2,r19
 800fa58:	8020d43a 	srli	r16,r16,16
 800fa5c:	9026d43a 	srli	r19,r18,16
 800fa60:	880b883a 	mov	r5,r17
 800fa64:	80087fc0 	call	80087fc <__mulsi3>
 800fa68:	1405883a 	add	r2,r2,r16
 800fa6c:	14e1883a 	add	r16,r2,r19
 800fa70:	90ffffcc 	andi	r3,r18,65535
 800fa74:	8024943a 	slli	r18,r16,16
 800fa78:	ad400104 	addi	r21,r21,4
 800fa7c:	b005883a 	mov	r2,r22
 800fa80:	90c6b03a 	or	r3,r18,r3
 800fa84:	b0c00015 	stw	r3,0(r22)
 800fa88:	8026d43a 	srli	r19,r16,16
 800fa8c:	b5800104 	addi	r22,r22,4
 800fa90:	ad3fe836 	bltu	r21,r20,800fa34 <__multiply+0xf4>
 800fa94:	d8c00017 	ldw	r3,0(sp)
 800fa98:	14c00115 	stw	r19,4(r2)
 800fa9c:	1c800017 	ldw	r18,0(r3)
 800faa0:	9024d43a 	srli	r18,r18,16
 800faa4:	90002226 	beq	r18,zero,800fb30 <__multiply+0x1f0>
 800faa8:	d8c00117 	ldw	r3,4(sp)
 800faac:	dd800417 	ldw	r22,16(sp)
 800fab0:	002f883a 	mov	r23,zero
 800fab4:	1f000017 	ldw	fp,0(r3)
 800fab8:	1823883a 	mov	r17,r3
 800fabc:	182b883a 	mov	r21,r3
 800fac0:	e021883a 	mov	r16,fp
 800fac4:	00000106 	br	800facc <__multiply+0x18c>
 800fac8:	982b883a 	mov	r21,r19
 800facc:	b100000b 	ldhu	r4,0(r22)
 800fad0:	8020d43a 	srli	r16,r16,16
 800fad4:	900b883a 	mov	r5,r18
 800fad8:	80087fc0 	call	80087fc <__mulsi3>
 800fadc:	1405883a 	add	r2,r2,r16
 800fae0:	15ef883a 	add	r23,r2,r23
 800fae4:	b804943a 	slli	r2,r23,16
 800fae8:	e0ffffcc 	andi	r3,fp,65535
 800faec:	8c400104 	addi	r17,r17,4
 800faf0:	10c6b03a 	or	r3,r2,r3
 800faf4:	88ffff15 	stw	r3,-4(r17)
 800faf8:	b5800104 	addi	r22,r22,4
 800fafc:	b13fff17 	ldw	r4,-4(r22)
 800fb00:	acc00104 	addi	r19,r21,4
 800fb04:	900b883a 	mov	r5,r18
 800fb08:	2008d43a 	srli	r4,r4,16
 800fb0c:	9c000017 	ldw	r16,0(r19)
 800fb10:	80087fc0 	call	80087fc <__mulsi3>
 800fb14:	b806d43a 	srli	r3,r23,16
 800fb18:	813fffcc 	andi	r4,r16,65535
 800fb1c:	1105883a 	add	r2,r2,r4
 800fb20:	10f9883a 	add	fp,r2,r3
 800fb24:	e02ed43a 	srli	r23,fp,16
 800fb28:	b53fe736 	bltu	r22,r20,800fac8 <__multiply+0x188>
 800fb2c:	af000115 	stw	fp,4(r21)
 800fb30:	d8c00017 	ldw	r3,0(sp)
 800fb34:	d9000517 	ldw	r4,20(sp)
 800fb38:	18c00104 	addi	r3,r3,4
 800fb3c:	d8c00015 	stw	r3,0(sp)
 800fb40:	d8c00117 	ldw	r3,4(sp)
 800fb44:	18c00104 	addi	r3,r3,4
 800fb48:	d8c00115 	stw	r3,4(sp)
 800fb4c:	d8c00017 	ldw	r3,0(sp)
 800fb50:	193fb136 	bltu	r3,r4,800fa18 <__multiply+0xd8>
 800fb54:	d8c00217 	ldw	r3,8(sp)
 800fb58:	00c00c0e 	bge	zero,r3,800fb8c <__multiply+0x24c>
 800fb5c:	d8c00317 	ldw	r3,12(sp)
 800fb60:	18bfff17 	ldw	r2,-4(r3)
 800fb64:	1d7fff04 	addi	r21,r3,-4
 800fb68:	10000326 	beq	r2,zero,800fb78 <__multiply+0x238>
 800fb6c:	00000706 	br	800fb8c <__multiply+0x24c>
 800fb70:	a8800017 	ldw	r2,0(r21)
 800fb74:	1000051e 	bne	r2,zero,800fb8c <__multiply+0x24c>
 800fb78:	d8c00217 	ldw	r3,8(sp)
 800fb7c:	ad7fff04 	addi	r21,r21,-4
 800fb80:	18ffffc4 	addi	r3,r3,-1
 800fb84:	d8c00215 	stw	r3,8(sp)
 800fb88:	183ff91e 	bne	r3,zero,800fb70 <__multiply+0x230>
 800fb8c:	d8c00617 	ldw	r3,24(sp)
 800fb90:	d9000217 	ldw	r4,8(sp)
 800fb94:	1805883a 	mov	r2,r3
 800fb98:	19000415 	stw	r4,16(r3)
 800fb9c:	dfc01017 	ldw	ra,64(sp)
 800fba0:	df000f17 	ldw	fp,60(sp)
 800fba4:	ddc00e17 	ldw	r23,56(sp)
 800fba8:	dd800d17 	ldw	r22,52(sp)
 800fbac:	dd400c17 	ldw	r21,48(sp)
 800fbb0:	dd000b17 	ldw	r20,44(sp)
 800fbb4:	dcc00a17 	ldw	r19,40(sp)
 800fbb8:	dc800917 	ldw	r18,36(sp)
 800fbbc:	dc400817 	ldw	r17,32(sp)
 800fbc0:	dc000717 	ldw	r16,28(sp)
 800fbc4:	dec01104 	addi	sp,sp,68
 800fbc8:	f800283a 	ret

0800fbcc <__pow5mult>:
 800fbcc:	defffa04 	addi	sp,sp,-24
 800fbd0:	dcc00315 	stw	r19,12(sp)
 800fbd4:	dc000015 	stw	r16,0(sp)
 800fbd8:	dfc00515 	stw	ra,20(sp)
 800fbdc:	dd000415 	stw	r20,16(sp)
 800fbe0:	dc800215 	stw	r18,8(sp)
 800fbe4:	dc400115 	stw	r17,4(sp)
 800fbe8:	308000cc 	andi	r2,r6,3
 800fbec:	3021883a 	mov	r16,r6
 800fbf0:	2027883a 	mov	r19,r4
 800fbf4:	10002f1e 	bne	r2,zero,800fcb4 <__pow5mult+0xe8>
 800fbf8:	2825883a 	mov	r18,r5
 800fbfc:	8021d0ba 	srai	r16,r16,2
 800fc00:	80001a26 	beq	r16,zero,800fc6c <__pow5mult+0xa0>
 800fc04:	9c401217 	ldw	r17,72(r19)
 800fc08:	8800061e 	bne	r17,zero,800fc24 <__pow5mult+0x58>
 800fc0c:	00003406 	br	800fce0 <__pow5mult+0x114>
 800fc10:	8021d07a 	srai	r16,r16,1
 800fc14:	80001526 	beq	r16,zero,800fc6c <__pow5mult+0xa0>
 800fc18:	88800017 	ldw	r2,0(r17)
 800fc1c:	10001c26 	beq	r2,zero,800fc90 <__pow5mult+0xc4>
 800fc20:	1023883a 	mov	r17,r2
 800fc24:	8080004c 	andi	r2,r16,1
 800fc28:	103ff926 	beq	r2,zero,800fc10 <__pow5mult+0x44>
 800fc2c:	880d883a 	mov	r6,r17
 800fc30:	900b883a 	mov	r5,r18
 800fc34:	9809883a 	mov	r4,r19
 800fc38:	800f9400 	call	800f940 <__multiply>
 800fc3c:	90001b26 	beq	r18,zero,800fcac <__pow5mult+0xe0>
 800fc40:	91000117 	ldw	r4,4(r18)
 800fc44:	98c01317 	ldw	r3,76(r19)
 800fc48:	8021d07a 	srai	r16,r16,1
 800fc4c:	2109883a 	add	r4,r4,r4
 800fc50:	2109883a 	add	r4,r4,r4
 800fc54:	1907883a 	add	r3,r3,r4
 800fc58:	19000017 	ldw	r4,0(r3)
 800fc5c:	91000015 	stw	r4,0(r18)
 800fc60:	1c800015 	stw	r18,0(r3)
 800fc64:	1025883a 	mov	r18,r2
 800fc68:	803feb1e 	bne	r16,zero,800fc18 <__pow5mult+0x4c>
 800fc6c:	9005883a 	mov	r2,r18
 800fc70:	dfc00517 	ldw	ra,20(sp)
 800fc74:	dd000417 	ldw	r20,16(sp)
 800fc78:	dcc00317 	ldw	r19,12(sp)
 800fc7c:	dc800217 	ldw	r18,8(sp)
 800fc80:	dc400117 	ldw	r17,4(sp)
 800fc84:	dc000017 	ldw	r16,0(sp)
 800fc88:	dec00604 	addi	sp,sp,24
 800fc8c:	f800283a 	ret
 800fc90:	880d883a 	mov	r6,r17
 800fc94:	880b883a 	mov	r5,r17
 800fc98:	9809883a 	mov	r4,r19
 800fc9c:	800f9400 	call	800f940 <__multiply>
 800fca0:	88800015 	stw	r2,0(r17)
 800fca4:	10000015 	stw	zero,0(r2)
 800fca8:	003fdd06 	br	800fc20 <__pow5mult+0x54>
 800fcac:	1025883a 	mov	r18,r2
 800fcb0:	003fd706 	br	800fc10 <__pow5mult+0x44>
 800fcb4:	10bfffc4 	addi	r2,r2,-1
 800fcb8:	1085883a 	add	r2,r2,r2
 800fcbc:	00c200b4 	movhi	r3,2050
 800fcc0:	18e8e404 	addi	r3,r3,-23664
 800fcc4:	1085883a 	add	r2,r2,r2
 800fcc8:	1885883a 	add	r2,r3,r2
 800fccc:	11800017 	ldw	r6,0(r2)
 800fcd0:	000f883a 	mov	r7,zero
 800fcd4:	800f5a00 	call	800f5a0 <__multadd>
 800fcd8:	1025883a 	mov	r18,r2
 800fcdc:	003fc706 	br	800fbfc <__pow5mult+0x30>
 800fce0:	05000044 	movi	r20,1
 800fce4:	a00b883a 	mov	r5,r20
 800fce8:	9809883a 	mov	r4,r19
 800fcec:	800f4d00 	call	800f4d0 <_Balloc>
 800fcf0:	1023883a 	mov	r17,r2
 800fcf4:	00809c44 	movi	r2,625
 800fcf8:	88800515 	stw	r2,20(r17)
 800fcfc:	8d000415 	stw	r20,16(r17)
 800fd00:	9c401215 	stw	r17,72(r19)
 800fd04:	88000015 	stw	zero,0(r17)
 800fd08:	003fc606 	br	800fc24 <__pow5mult+0x58>

0800fd0c <__lshift>:
 800fd0c:	defff904 	addi	sp,sp,-28
 800fd10:	dd400515 	stw	r21,20(sp)
 800fd14:	dcc00315 	stw	r19,12(sp)
 800fd18:	302bd17a 	srai	r21,r6,5
 800fd1c:	2cc00417 	ldw	r19,16(r5)
 800fd20:	28800217 	ldw	r2,8(r5)
 800fd24:	dd000415 	stw	r20,16(sp)
 800fd28:	ace7883a 	add	r19,r21,r19
 800fd2c:	dc800215 	stw	r18,8(sp)
 800fd30:	dc400115 	stw	r17,4(sp)
 800fd34:	dc000015 	stw	r16,0(sp)
 800fd38:	dfc00615 	stw	ra,24(sp)
 800fd3c:	9c000044 	addi	r16,r19,1
 800fd40:	2823883a 	mov	r17,r5
 800fd44:	3029883a 	mov	r20,r6
 800fd48:	2025883a 	mov	r18,r4
 800fd4c:	29400117 	ldw	r5,4(r5)
 800fd50:	1400030e 	bge	r2,r16,800fd60 <__lshift+0x54>
 800fd54:	1085883a 	add	r2,r2,r2
 800fd58:	29400044 	addi	r5,r5,1
 800fd5c:	143ffd16 	blt	r2,r16,800fd54 <__lshift+0x48>
 800fd60:	9009883a 	mov	r4,r18
 800fd64:	800f4d00 	call	800f4d0 <_Balloc>
 800fd68:	10c00504 	addi	r3,r2,20
 800fd6c:	0540070e 	bge	zero,r21,800fd8c <__lshift+0x80>
 800fd70:	ad6b883a 	add	r21,r21,r21
 800fd74:	ad6b883a 	add	r21,r21,r21
 800fd78:	1809883a 	mov	r4,r3
 800fd7c:	1d47883a 	add	r3,r3,r21
 800fd80:	20000015 	stw	zero,0(r4)
 800fd84:	21000104 	addi	r4,r4,4
 800fd88:	193ffd1e 	bne	r3,r4,800fd80 <__lshift+0x74>
 800fd8c:	8a000417 	ldw	r8,16(r17)
 800fd90:	89000504 	addi	r4,r17,20
 800fd94:	a18007cc 	andi	r6,r20,31
 800fd98:	4211883a 	add	r8,r8,r8
 800fd9c:	4211883a 	add	r8,r8,r8
 800fda0:	2211883a 	add	r8,r4,r8
 800fda4:	30002326 	beq	r6,zero,800fe34 <__lshift+0x128>
 800fda8:	02400804 	movi	r9,32
 800fdac:	4993c83a 	sub	r9,r9,r6
 800fdb0:	000b883a 	mov	r5,zero
 800fdb4:	21c00017 	ldw	r7,0(r4)
 800fdb8:	1815883a 	mov	r10,r3
 800fdbc:	18c00104 	addi	r3,r3,4
 800fdc0:	398e983a 	sll	r7,r7,r6
 800fdc4:	21000104 	addi	r4,r4,4
 800fdc8:	394ab03a 	or	r5,r7,r5
 800fdcc:	197fff15 	stw	r5,-4(r3)
 800fdd0:	217fff17 	ldw	r5,-4(r4)
 800fdd4:	2a4ad83a 	srl	r5,r5,r9
 800fdd8:	223ff636 	bltu	r4,r8,800fdb4 <__lshift+0xa8>
 800fddc:	51400115 	stw	r5,4(r10)
 800fde0:	28001a1e 	bne	r5,zero,800fe4c <__lshift+0x140>
 800fde4:	843fffc4 	addi	r16,r16,-1
 800fde8:	14000415 	stw	r16,16(r2)
 800fdec:	88000826 	beq	r17,zero,800fe10 <__lshift+0x104>
 800fdf0:	89000117 	ldw	r4,4(r17)
 800fdf4:	90c01317 	ldw	r3,76(r18)
 800fdf8:	2109883a 	add	r4,r4,r4
 800fdfc:	2109883a 	add	r4,r4,r4
 800fe00:	1907883a 	add	r3,r3,r4
 800fe04:	19000017 	ldw	r4,0(r3)
 800fe08:	89000015 	stw	r4,0(r17)
 800fe0c:	1c400015 	stw	r17,0(r3)
 800fe10:	dfc00617 	ldw	ra,24(sp)
 800fe14:	dd400517 	ldw	r21,20(sp)
 800fe18:	dd000417 	ldw	r20,16(sp)
 800fe1c:	dcc00317 	ldw	r19,12(sp)
 800fe20:	dc800217 	ldw	r18,8(sp)
 800fe24:	dc400117 	ldw	r17,4(sp)
 800fe28:	dc000017 	ldw	r16,0(sp)
 800fe2c:	dec00704 	addi	sp,sp,28
 800fe30:	f800283a 	ret
 800fe34:	21400017 	ldw	r5,0(r4)
 800fe38:	18c00104 	addi	r3,r3,4
 800fe3c:	21000104 	addi	r4,r4,4
 800fe40:	197fff15 	stw	r5,-4(r3)
 800fe44:	223ffb36 	bltu	r4,r8,800fe34 <__lshift+0x128>
 800fe48:	003fe606 	br	800fde4 <__lshift+0xd8>
 800fe4c:	9c000084 	addi	r16,r19,2
 800fe50:	003fe406 	br	800fde4 <__lshift+0xd8>

0800fe54 <__mcmp>:
 800fe54:	20800417 	ldw	r2,16(r4)
 800fe58:	28c00417 	ldw	r3,16(r5)
 800fe5c:	10c5c83a 	sub	r2,r2,r3
 800fe60:	1000111e 	bne	r2,zero,800fea8 <__mcmp+0x54>
 800fe64:	18c7883a 	add	r3,r3,r3
 800fe68:	18c7883a 	add	r3,r3,r3
 800fe6c:	21000504 	addi	r4,r4,20
 800fe70:	29400504 	addi	r5,r5,20
 800fe74:	20c5883a 	add	r2,r4,r3
 800fe78:	28cb883a 	add	r5,r5,r3
 800fe7c:	00000106 	br	800fe84 <__mcmp+0x30>
 800fe80:	20800a2e 	bgeu	r4,r2,800feac <__mcmp+0x58>
 800fe84:	10bfff04 	addi	r2,r2,-4
 800fe88:	297fff04 	addi	r5,r5,-4
 800fe8c:	11800017 	ldw	r6,0(r2)
 800fe90:	28c00017 	ldw	r3,0(r5)
 800fe94:	30fffa26 	beq	r6,r3,800fe80 <__mcmp+0x2c>
 800fe98:	30c00236 	bltu	r6,r3,800fea4 <__mcmp+0x50>
 800fe9c:	00800044 	movi	r2,1
 800fea0:	f800283a 	ret
 800fea4:	00bfffc4 	movi	r2,-1
 800fea8:	f800283a 	ret
 800feac:	0005883a 	mov	r2,zero
 800feb0:	f800283a 	ret

0800feb4 <__mdiff>:
 800feb4:	28c00417 	ldw	r3,16(r5)
 800feb8:	30800417 	ldw	r2,16(r6)
 800febc:	defffa04 	addi	sp,sp,-24
 800fec0:	dcc00315 	stw	r19,12(sp)
 800fec4:	dc800215 	stw	r18,8(sp)
 800fec8:	dfc00515 	stw	ra,20(sp)
 800fecc:	dd000415 	stw	r20,16(sp)
 800fed0:	dc400115 	stw	r17,4(sp)
 800fed4:	dc000015 	stw	r16,0(sp)
 800fed8:	1887c83a 	sub	r3,r3,r2
 800fedc:	2825883a 	mov	r18,r5
 800fee0:	3027883a 	mov	r19,r6
 800fee4:	1800141e 	bne	r3,zero,800ff38 <__mdiff+0x84>
 800fee8:	1085883a 	add	r2,r2,r2
 800feec:	1085883a 	add	r2,r2,r2
 800fef0:	2a000504 	addi	r8,r5,20
 800fef4:	34000504 	addi	r16,r6,20
 800fef8:	4087883a 	add	r3,r8,r2
 800fefc:	8085883a 	add	r2,r16,r2
 800ff00:	00000106 	br	800ff08 <__mdiff+0x54>
 800ff04:	40c0592e 	bgeu	r8,r3,801006c <__mdiff+0x1b8>
 800ff08:	18ffff04 	addi	r3,r3,-4
 800ff0c:	10bfff04 	addi	r2,r2,-4
 800ff10:	19c00017 	ldw	r7,0(r3)
 800ff14:	11400017 	ldw	r5,0(r2)
 800ff18:	397ffa26 	beq	r7,r5,800ff04 <__mdiff+0x50>
 800ff1c:	3940592e 	bgeu	r7,r5,8010084 <__mdiff+0x1d0>
 800ff20:	9005883a 	mov	r2,r18
 800ff24:	4023883a 	mov	r17,r8
 800ff28:	9825883a 	mov	r18,r19
 800ff2c:	05000044 	movi	r20,1
 800ff30:	1027883a 	mov	r19,r2
 800ff34:	00000406 	br	800ff48 <__mdiff+0x94>
 800ff38:	18005616 	blt	r3,zero,8010094 <__mdiff+0x1e0>
 800ff3c:	34400504 	addi	r17,r6,20
 800ff40:	2c000504 	addi	r16,r5,20
 800ff44:	0029883a 	mov	r20,zero
 800ff48:	91400117 	ldw	r5,4(r18)
 800ff4c:	800f4d00 	call	800f4d0 <_Balloc>
 800ff50:	92400417 	ldw	r9,16(r18)
 800ff54:	9b000417 	ldw	r12,16(r19)
 800ff58:	12c00504 	addi	r11,r2,20
 800ff5c:	4a51883a 	add	r8,r9,r9
 800ff60:	6319883a 	add	r12,r12,r12
 800ff64:	4211883a 	add	r8,r8,r8
 800ff68:	6319883a 	add	r12,r12,r12
 800ff6c:	15000315 	stw	r20,12(r2)
 800ff70:	8211883a 	add	r8,r16,r8
 800ff74:	8b19883a 	add	r12,r17,r12
 800ff78:	0007883a 	mov	r3,zero
 800ff7c:	81400017 	ldw	r5,0(r16)
 800ff80:	89c00017 	ldw	r7,0(r17)
 800ff84:	59800104 	addi	r6,r11,4
 800ff88:	293fffcc 	andi	r4,r5,65535
 800ff8c:	20c7883a 	add	r3,r4,r3
 800ff90:	393fffcc 	andi	r4,r7,65535
 800ff94:	1909c83a 	sub	r4,r3,r4
 800ff98:	280ad43a 	srli	r5,r5,16
 800ff9c:	380ed43a 	srli	r7,r7,16
 800ffa0:	2007d43a 	srai	r3,r4,16
 800ffa4:	213fffcc 	andi	r4,r4,65535
 800ffa8:	29cbc83a 	sub	r5,r5,r7
 800ffac:	28c7883a 	add	r3,r5,r3
 800ffb0:	180a943a 	slli	r5,r3,16
 800ffb4:	8c400104 	addi	r17,r17,4
 800ffb8:	84000104 	addi	r16,r16,4
 800ffbc:	2908b03a 	or	r4,r5,r4
 800ffc0:	59000015 	stw	r4,0(r11)
 800ffc4:	1807d43a 	srai	r3,r3,16
 800ffc8:	3015883a 	mov	r10,r6
 800ffcc:	3017883a 	mov	r11,r6
 800ffd0:	8b3fea36 	bltu	r17,r12,800ff7c <__mdiff+0xc8>
 800ffd4:	8200162e 	bgeu	r16,r8,8010030 <__mdiff+0x17c>
 800ffd8:	8017883a 	mov	r11,r16
 800ffdc:	59400017 	ldw	r5,0(r11)
 800ffe0:	31800104 	addi	r6,r6,4
 800ffe4:	5ac00104 	addi	r11,r11,4
 800ffe8:	293fffcc 	andi	r4,r5,65535
 800ffec:	20c7883a 	add	r3,r4,r3
 800fff0:	280ed43a 	srli	r7,r5,16
 800fff4:	180bd43a 	srai	r5,r3,16
 800fff8:	193fffcc 	andi	r4,r3,65535
 800fffc:	3947883a 	add	r3,r7,r5
 8010000:	180a943a 	slli	r5,r3,16
 8010004:	1807d43a 	srai	r3,r3,16
 8010008:	2908b03a 	or	r4,r5,r4
 801000c:	313fff15 	stw	r4,-4(r6)
 8010010:	5a3ff236 	bltu	r11,r8,800ffdc <__mdiff+0x128>
 8010014:	0406303a 	nor	r3,zero,r16
 8010018:	1a07883a 	add	r3,r3,r8
 801001c:	1806d0ba 	srli	r3,r3,2
 8010020:	18c00044 	addi	r3,r3,1
 8010024:	18c7883a 	add	r3,r3,r3
 8010028:	18c7883a 	add	r3,r3,r3
 801002c:	50d5883a 	add	r10,r10,r3
 8010030:	50ffff04 	addi	r3,r10,-4
 8010034:	2000041e 	bne	r4,zero,8010048 <__mdiff+0x194>
 8010038:	18ffff04 	addi	r3,r3,-4
 801003c:	19000017 	ldw	r4,0(r3)
 8010040:	4a7fffc4 	addi	r9,r9,-1
 8010044:	203ffc26 	beq	r4,zero,8010038 <__mdiff+0x184>
 8010048:	12400415 	stw	r9,16(r2)
 801004c:	dfc00517 	ldw	ra,20(sp)
 8010050:	dd000417 	ldw	r20,16(sp)
 8010054:	dcc00317 	ldw	r19,12(sp)
 8010058:	dc800217 	ldw	r18,8(sp)
 801005c:	dc400117 	ldw	r17,4(sp)
 8010060:	dc000017 	ldw	r16,0(sp)
 8010064:	dec00604 	addi	sp,sp,24
 8010068:	f800283a 	ret
 801006c:	000b883a 	mov	r5,zero
 8010070:	800f4d00 	call	800f4d0 <_Balloc>
 8010074:	00c00044 	movi	r3,1
 8010078:	10c00415 	stw	r3,16(r2)
 801007c:	10000515 	stw	zero,20(r2)
 8010080:	003ff206 	br	801004c <__mdiff+0x198>
 8010084:	8023883a 	mov	r17,r16
 8010088:	0029883a 	mov	r20,zero
 801008c:	4021883a 	mov	r16,r8
 8010090:	003fad06 	br	800ff48 <__mdiff+0x94>
 8010094:	9005883a 	mov	r2,r18
 8010098:	94400504 	addi	r17,r18,20
 801009c:	9c000504 	addi	r16,r19,20
 80100a0:	9825883a 	mov	r18,r19
 80100a4:	05000044 	movi	r20,1
 80100a8:	1027883a 	mov	r19,r2
 80100ac:	003fa606 	br	800ff48 <__mdiff+0x94>

080100b0 <__ulp>:
 80100b0:	295ffc2c 	andhi	r5,r5,32752
 80100b4:	00bf3034 	movhi	r2,64704
 80100b8:	2887883a 	add	r3,r5,r2
 80100bc:	00c0020e 	bge	zero,r3,80100c8 <__ulp+0x18>
 80100c0:	0005883a 	mov	r2,zero
 80100c4:	f800283a 	ret
 80100c8:	00c7c83a 	sub	r3,zero,r3
 80100cc:	1807d53a 	srai	r3,r3,20
 80100d0:	008004c4 	movi	r2,19
 80100d4:	10c00b0e 	bge	r2,r3,8010104 <__ulp+0x54>
 80100d8:	18bffb04 	addi	r2,r3,-20
 80100dc:	01000784 	movi	r4,30
 80100e0:	0007883a 	mov	r3,zero
 80100e4:	20800516 	blt	r4,r2,80100fc <__ulp+0x4c>
 80100e8:	010007c4 	movi	r4,31
 80100ec:	2089c83a 	sub	r4,r4,r2
 80100f0:	00800044 	movi	r2,1
 80100f4:	1104983a 	sll	r2,r2,r4
 80100f8:	f800283a 	ret
 80100fc:	00800044 	movi	r2,1
 8010100:	f800283a 	ret
 8010104:	01400234 	movhi	r5,8
 8010108:	28c7d83a 	sra	r3,r5,r3
 801010c:	0005883a 	mov	r2,zero
 8010110:	f800283a 	ret

08010114 <__b2d>:
 8010114:	defffa04 	addi	sp,sp,-24
 8010118:	dc000015 	stw	r16,0(sp)
 801011c:	24000417 	ldw	r16,16(r4)
 8010120:	dc400115 	stw	r17,4(sp)
 8010124:	24400504 	addi	r17,r4,20
 8010128:	8421883a 	add	r16,r16,r16
 801012c:	8421883a 	add	r16,r16,r16
 8010130:	8c21883a 	add	r16,r17,r16
 8010134:	dc800215 	stw	r18,8(sp)
 8010138:	84bfff17 	ldw	r18,-4(r16)
 801013c:	dd000415 	stw	r20,16(sp)
 8010140:	dcc00315 	stw	r19,12(sp)
 8010144:	9009883a 	mov	r4,r18
 8010148:	2829883a 	mov	r20,r5
 801014c:	dfc00515 	stw	ra,20(sp)
 8010150:	800f7ec0 	call	800f7ec <__hi0bits>
 8010154:	00c00804 	movi	r3,32
 8010158:	1889c83a 	sub	r4,r3,r2
 801015c:	a1000015 	stw	r4,0(r20)
 8010160:	01000284 	movi	r4,10
 8010164:	84ffff04 	addi	r19,r16,-4
 8010168:	20801216 	blt	r4,r2,80101b4 <__b2d+0xa0>
 801016c:	018002c4 	movi	r6,11
 8010170:	308dc83a 	sub	r6,r6,r2
 8010174:	9186d83a 	srl	r3,r18,r6
 8010178:	18cffc34 	orhi	r3,r3,16368
 801017c:	8cc0212e 	bgeu	r17,r19,8010204 <__b2d+0xf0>
 8010180:	813ffe17 	ldw	r4,-8(r16)
 8010184:	218cd83a 	srl	r6,r4,r6
 8010188:	10800544 	addi	r2,r2,21
 801018c:	9084983a 	sll	r2,r18,r2
 8010190:	1184b03a 	or	r2,r2,r6
 8010194:	dfc00517 	ldw	ra,20(sp)
 8010198:	dd000417 	ldw	r20,16(sp)
 801019c:	dcc00317 	ldw	r19,12(sp)
 80101a0:	dc800217 	ldw	r18,8(sp)
 80101a4:	dc400117 	ldw	r17,4(sp)
 80101a8:	dc000017 	ldw	r16,0(sp)
 80101ac:	dec00604 	addi	sp,sp,24
 80101b0:	f800283a 	ret
 80101b4:	8cc00f2e 	bgeu	r17,r19,80101f4 <__b2d+0xe0>
 80101b8:	117ffd44 	addi	r5,r2,-11
 80101bc:	80bffe17 	ldw	r2,-8(r16)
 80101c0:	28000e26 	beq	r5,zero,80101fc <__b2d+0xe8>
 80101c4:	1949c83a 	sub	r4,r3,r5
 80101c8:	9164983a 	sll	r18,r18,r5
 80101cc:	1106d83a 	srl	r3,r2,r4
 80101d0:	81bffe04 	addi	r6,r16,-8
 80101d4:	948ffc34 	orhi	r18,r18,16368
 80101d8:	90c6b03a 	or	r3,r18,r3
 80101dc:	89800e2e 	bgeu	r17,r6,8010218 <__b2d+0x104>
 80101e0:	81bffd17 	ldw	r6,-12(r16)
 80101e4:	1144983a 	sll	r2,r2,r5
 80101e8:	310ad83a 	srl	r5,r6,r4
 80101ec:	2884b03a 	or	r2,r5,r2
 80101f0:	003fe806 	br	8010194 <__b2d+0x80>
 80101f4:	10bffd44 	addi	r2,r2,-11
 80101f8:	1000041e 	bne	r2,zero,801020c <__b2d+0xf8>
 80101fc:	90cffc34 	orhi	r3,r18,16368
 8010200:	003fe406 	br	8010194 <__b2d+0x80>
 8010204:	000d883a 	mov	r6,zero
 8010208:	003fdf06 	br	8010188 <__b2d+0x74>
 801020c:	90a4983a 	sll	r18,r18,r2
 8010210:	0005883a 	mov	r2,zero
 8010214:	003ff906 	br	80101fc <__b2d+0xe8>
 8010218:	1144983a 	sll	r2,r2,r5
 801021c:	003fdd06 	br	8010194 <__b2d+0x80>

08010220 <__d2b>:
 8010220:	defff804 	addi	sp,sp,-32
 8010224:	dc000215 	stw	r16,8(sp)
 8010228:	3021883a 	mov	r16,r6
 801022c:	dc400315 	stw	r17,12(sp)
 8010230:	8022907a 	slli	r17,r16,1
 8010234:	dd000615 	stw	r20,24(sp)
 8010238:	2829883a 	mov	r20,r5
 801023c:	01400044 	movi	r5,1
 8010240:	dcc00515 	stw	r19,20(sp)
 8010244:	dc800415 	stw	r18,16(sp)
 8010248:	dfc00715 	stw	ra,28(sp)
 801024c:	3825883a 	mov	r18,r7
 8010250:	8822d57a 	srli	r17,r17,21
 8010254:	800f4d00 	call	800f4d0 <_Balloc>
 8010258:	1027883a 	mov	r19,r2
 801025c:	00800434 	movhi	r2,16
 8010260:	10bfffc4 	addi	r2,r2,-1
 8010264:	808c703a 	and	r6,r16,r2
 8010268:	88000126 	beq	r17,zero,8010270 <__d2b+0x50>
 801026c:	31800434 	orhi	r6,r6,16
 8010270:	d9800015 	stw	r6,0(sp)
 8010274:	a0002426 	beq	r20,zero,8010308 <__d2b+0xe8>
 8010278:	d9000104 	addi	r4,sp,4
 801027c:	dd000115 	stw	r20,4(sp)
 8010280:	800f8540 	call	800f854 <__lo0bits>
 8010284:	d8c00017 	ldw	r3,0(sp)
 8010288:	10002f1e 	bne	r2,zero,8010348 <__d2b+0x128>
 801028c:	d9000117 	ldw	r4,4(sp)
 8010290:	99000515 	stw	r4,20(r19)
 8010294:	1821003a 	cmpeq	r16,r3,zero
 8010298:	01000084 	movi	r4,2
 801029c:	2421c83a 	sub	r16,r4,r16
 80102a0:	98c00615 	stw	r3,24(r19)
 80102a4:	9c000415 	stw	r16,16(r19)
 80102a8:	88001f1e 	bne	r17,zero,8010328 <__d2b+0x108>
 80102ac:	10bef384 	addi	r2,r2,-1074
 80102b0:	90800015 	stw	r2,0(r18)
 80102b4:	00900034 	movhi	r2,16384
 80102b8:	10bfffc4 	addi	r2,r2,-1
 80102bc:	8085883a 	add	r2,r16,r2
 80102c0:	1085883a 	add	r2,r2,r2
 80102c4:	1085883a 	add	r2,r2,r2
 80102c8:	9885883a 	add	r2,r19,r2
 80102cc:	11000517 	ldw	r4,20(r2)
 80102d0:	8020917a 	slli	r16,r16,5
 80102d4:	800f7ec0 	call	800f7ec <__hi0bits>
 80102d8:	d8c00817 	ldw	r3,32(sp)
 80102dc:	8085c83a 	sub	r2,r16,r2
 80102e0:	18800015 	stw	r2,0(r3)
 80102e4:	9805883a 	mov	r2,r19
 80102e8:	dfc00717 	ldw	ra,28(sp)
 80102ec:	dd000617 	ldw	r20,24(sp)
 80102f0:	dcc00517 	ldw	r19,20(sp)
 80102f4:	dc800417 	ldw	r18,16(sp)
 80102f8:	dc400317 	ldw	r17,12(sp)
 80102fc:	dc000217 	ldw	r16,8(sp)
 8010300:	dec00804 	addi	sp,sp,32
 8010304:	f800283a 	ret
 8010308:	d809883a 	mov	r4,sp
 801030c:	800f8540 	call	800f854 <__lo0bits>
 8010310:	d8c00017 	ldw	r3,0(sp)
 8010314:	04000044 	movi	r16,1
 8010318:	9c000415 	stw	r16,16(r19)
 801031c:	98c00515 	stw	r3,20(r19)
 8010320:	10800804 	addi	r2,r2,32
 8010324:	883fe126 	beq	r17,zero,80102ac <__d2b+0x8c>
 8010328:	00c00d44 	movi	r3,53
 801032c:	8c7ef344 	addi	r17,r17,-1075
 8010330:	88a3883a 	add	r17,r17,r2
 8010334:	1885c83a 	sub	r2,r3,r2
 8010338:	d8c00817 	ldw	r3,32(sp)
 801033c:	94400015 	stw	r17,0(r18)
 8010340:	18800015 	stw	r2,0(r3)
 8010344:	003fe706 	br	80102e4 <__d2b+0xc4>
 8010348:	01000804 	movi	r4,32
 801034c:	2089c83a 	sub	r4,r4,r2
 8010350:	1908983a 	sll	r4,r3,r4
 8010354:	d9400117 	ldw	r5,4(sp)
 8010358:	1886d83a 	srl	r3,r3,r2
 801035c:	2148b03a 	or	r4,r4,r5
 8010360:	99000515 	stw	r4,20(r19)
 8010364:	d8c00015 	stw	r3,0(sp)
 8010368:	003fca06 	br	8010294 <__d2b+0x74>

0801036c <__ratio>:
 801036c:	defff904 	addi	sp,sp,-28
 8010370:	dc400315 	stw	r17,12(sp)
 8010374:	2823883a 	mov	r17,r5
 8010378:	d9400104 	addi	r5,sp,4
 801037c:	dfc00615 	stw	ra,24(sp)
 8010380:	dcc00515 	stw	r19,20(sp)
 8010384:	dc800415 	stw	r18,16(sp)
 8010388:	2027883a 	mov	r19,r4
 801038c:	dc000215 	stw	r16,8(sp)
 8010390:	80101140 	call	8010114 <__b2d>
 8010394:	d80b883a 	mov	r5,sp
 8010398:	8809883a 	mov	r4,r17
 801039c:	1025883a 	mov	r18,r2
 80103a0:	1821883a 	mov	r16,r3
 80103a4:	80101140 	call	8010114 <__b2d>
 80103a8:	8a000417 	ldw	r8,16(r17)
 80103ac:	99000417 	ldw	r4,16(r19)
 80103b0:	d9400117 	ldw	r5,4(sp)
 80103b4:	2209c83a 	sub	r4,r4,r8
 80103b8:	2010917a 	slli	r8,r4,5
 80103bc:	d9000017 	ldw	r4,0(sp)
 80103c0:	2909c83a 	sub	r4,r5,r4
 80103c4:	4109883a 	add	r4,r8,r4
 80103c8:	01000e0e 	bge	zero,r4,8010404 <__ratio+0x98>
 80103cc:	2008953a 	slli	r4,r4,20
 80103d0:	2421883a 	add	r16,r4,r16
 80103d4:	100d883a 	mov	r6,r2
 80103d8:	180f883a 	mov	r7,r3
 80103dc:	9009883a 	mov	r4,r18
 80103e0:	800b883a 	mov	r5,r16
 80103e4:	8013f280 	call	8013f28 <__divdf3>
 80103e8:	dfc00617 	ldw	ra,24(sp)
 80103ec:	dcc00517 	ldw	r19,20(sp)
 80103f0:	dc800417 	ldw	r18,16(sp)
 80103f4:	dc400317 	ldw	r17,12(sp)
 80103f8:	dc000217 	ldw	r16,8(sp)
 80103fc:	dec00704 	addi	sp,sp,28
 8010400:	f800283a 	ret
 8010404:	2008953a 	slli	r4,r4,20
 8010408:	1907c83a 	sub	r3,r3,r4
 801040c:	003ff106 	br	80103d4 <__ratio+0x68>

08010410 <_mprec_log10>:
 8010410:	defffe04 	addi	sp,sp,-8
 8010414:	dc000015 	stw	r16,0(sp)
 8010418:	dfc00115 	stw	ra,4(sp)
 801041c:	008005c4 	movi	r2,23
 8010420:	2021883a 	mov	r16,r4
 8010424:	11000d0e 	bge	r2,r4,801045c <_mprec_log10+0x4c>
 8010428:	0005883a 	mov	r2,zero
 801042c:	00cffc34 	movhi	r3,16368
 8010430:	843fffc4 	addi	r16,r16,-1
 8010434:	000d883a 	mov	r6,zero
 8010438:	01d00934 	movhi	r7,16420
 801043c:	1009883a 	mov	r4,r2
 8010440:	180b883a 	mov	r5,r3
 8010444:	8014b500 	call	8014b50 <__muldf3>
 8010448:	803ff91e 	bne	r16,zero,8010430 <_mprec_log10+0x20>
 801044c:	dfc00117 	ldw	ra,4(sp)
 8010450:	dc000017 	ldw	r16,0(sp)
 8010454:	dec00204 	addi	sp,sp,8
 8010458:	f800283a 	ret
 801045c:	202090fa 	slli	r16,r4,3
 8010460:	008200b4 	movhi	r2,2050
 8010464:	10a8fb04 	addi	r2,r2,-23572
 8010468:	1421883a 	add	r16,r2,r16
 801046c:	80800017 	ldw	r2,0(r16)
 8010470:	80c00117 	ldw	r3,4(r16)
 8010474:	dfc00117 	ldw	ra,4(sp)
 8010478:	dc000017 	ldw	r16,0(sp)
 801047c:	dec00204 	addi	sp,sp,8
 8010480:	f800283a 	ret

08010484 <__copybits>:
 8010484:	297fffc4 	addi	r5,r5,-1
 8010488:	280fd17a 	srai	r7,r5,5
 801048c:	30c00417 	ldw	r3,16(r6)
 8010490:	30800504 	addi	r2,r6,20
 8010494:	39c00044 	addi	r7,r7,1
 8010498:	18c7883a 	add	r3,r3,r3
 801049c:	39cf883a 	add	r7,r7,r7
 80104a0:	18c7883a 	add	r3,r3,r3
 80104a4:	39cf883a 	add	r7,r7,r7
 80104a8:	10c7883a 	add	r3,r2,r3
 80104ac:	21cf883a 	add	r7,r4,r7
 80104b0:	10c00d2e 	bgeu	r2,r3,80104e8 <__copybits+0x64>
 80104b4:	200b883a 	mov	r5,r4
 80104b8:	12000017 	ldw	r8,0(r2)
 80104bc:	29400104 	addi	r5,r5,4
 80104c0:	10800104 	addi	r2,r2,4
 80104c4:	2a3fff15 	stw	r8,-4(r5)
 80104c8:	10fffb36 	bltu	r2,r3,80104b8 <__copybits+0x34>
 80104cc:	1985c83a 	sub	r2,r3,r6
 80104d0:	10bffac4 	addi	r2,r2,-21
 80104d4:	1004d0ba 	srli	r2,r2,2
 80104d8:	10800044 	addi	r2,r2,1
 80104dc:	1085883a 	add	r2,r2,r2
 80104e0:	1085883a 	add	r2,r2,r2
 80104e4:	2089883a 	add	r4,r4,r2
 80104e8:	21c0032e 	bgeu	r4,r7,80104f8 <__copybits+0x74>
 80104ec:	20000015 	stw	zero,0(r4)
 80104f0:	21000104 	addi	r4,r4,4
 80104f4:	21fffd36 	bltu	r4,r7,80104ec <__copybits+0x68>
 80104f8:	f800283a 	ret

080104fc <__any_on>:
 80104fc:	20c00417 	ldw	r3,16(r4)
 8010500:	2805d17a 	srai	r2,r5,5
 8010504:	21000504 	addi	r4,r4,20
 8010508:	18800d0e 	bge	r3,r2,8010540 <__any_on+0x44>
 801050c:	18c7883a 	add	r3,r3,r3
 8010510:	18c7883a 	add	r3,r3,r3
 8010514:	20c7883a 	add	r3,r4,r3
 8010518:	20c0192e 	bgeu	r4,r3,8010580 <__any_on+0x84>
 801051c:	18bfff17 	ldw	r2,-4(r3)
 8010520:	18ffff04 	addi	r3,r3,-4
 8010524:	1000041e 	bne	r2,zero,8010538 <__any_on+0x3c>
 8010528:	20c0142e 	bgeu	r4,r3,801057c <__any_on+0x80>
 801052c:	18ffff04 	addi	r3,r3,-4
 8010530:	19400017 	ldw	r5,0(r3)
 8010534:	283ffc26 	beq	r5,zero,8010528 <__any_on+0x2c>
 8010538:	00800044 	movi	r2,1
 801053c:	f800283a 	ret
 8010540:	10c00a0e 	bge	r2,r3,801056c <__any_on+0x70>
 8010544:	1085883a 	add	r2,r2,r2
 8010548:	1085883a 	add	r2,r2,r2
 801054c:	294007cc 	andi	r5,r5,31
 8010550:	2087883a 	add	r3,r4,r2
 8010554:	283ff026 	beq	r5,zero,8010518 <__any_on+0x1c>
 8010558:	19800017 	ldw	r6,0(r3)
 801055c:	3144d83a 	srl	r2,r6,r5
 8010560:	114a983a 	sll	r5,r2,r5
 8010564:	317ff41e 	bne	r6,r5,8010538 <__any_on+0x3c>
 8010568:	003feb06 	br	8010518 <__any_on+0x1c>
 801056c:	1085883a 	add	r2,r2,r2
 8010570:	1085883a 	add	r2,r2,r2
 8010574:	2087883a 	add	r3,r4,r2
 8010578:	003fe706 	br	8010518 <__any_on+0x1c>
 801057c:	f800283a 	ret
 8010580:	0005883a 	mov	r2,zero
 8010584:	f800283a 	ret

08010588 <_read_r>:
 8010588:	defffd04 	addi	sp,sp,-12
 801058c:	2805883a 	mov	r2,r5
 8010590:	dc000015 	stw	r16,0(sp)
 8010594:	040200b4 	movhi	r16,2050
 8010598:	dc400115 	stw	r17,4(sp)
 801059c:	300b883a 	mov	r5,r6
 80105a0:	843a6704 	addi	r16,r16,-5732
 80105a4:	2023883a 	mov	r17,r4
 80105a8:	380d883a 	mov	r6,r7
 80105ac:	1009883a 	mov	r4,r2
 80105b0:	dfc00215 	stw	ra,8(sp)
 80105b4:	80000015 	stw	zero,0(r16)
 80105b8:	8016bdc0 	call	8016bdc <read>
 80105bc:	00ffffc4 	movi	r3,-1
 80105c0:	10c00526 	beq	r2,r3,80105d8 <_read_r+0x50>
 80105c4:	dfc00217 	ldw	ra,8(sp)
 80105c8:	dc400117 	ldw	r17,4(sp)
 80105cc:	dc000017 	ldw	r16,0(sp)
 80105d0:	dec00304 	addi	sp,sp,12
 80105d4:	f800283a 	ret
 80105d8:	80c00017 	ldw	r3,0(r16)
 80105dc:	183ff926 	beq	r3,zero,80105c4 <_read_r+0x3c>
 80105e0:	88c00015 	stw	r3,0(r17)
 80105e4:	003ff706 	br	80105c4 <_read_r+0x3c>

080105e8 <_realloc_r>:
 80105e8:	defff604 	addi	sp,sp,-40
 80105ec:	dc800215 	stw	r18,8(sp)
 80105f0:	dfc00915 	stw	ra,36(sp)
 80105f4:	df000815 	stw	fp,32(sp)
 80105f8:	ddc00715 	stw	r23,28(sp)
 80105fc:	dd800615 	stw	r22,24(sp)
 8010600:	dd400515 	stw	r21,20(sp)
 8010604:	dd000415 	stw	r20,16(sp)
 8010608:	dcc00315 	stw	r19,12(sp)
 801060c:	dc400115 	stw	r17,4(sp)
 8010610:	dc000015 	stw	r16,0(sp)
 8010614:	3025883a 	mov	r18,r6
 8010618:	2800b726 	beq	r5,zero,80108f8 <_realloc_r+0x310>
 801061c:	282b883a 	mov	r21,r5
 8010620:	2029883a 	mov	r20,r4
 8010624:	801666c0 	call	801666c <__malloc_lock>
 8010628:	a8bfff17 	ldw	r2,-4(r21)
 801062c:	043fff04 	movi	r16,-4
 8010630:	90c002c4 	addi	r3,r18,11
 8010634:	01000584 	movi	r4,22
 8010638:	acfffe04 	addi	r19,r21,-8
 801063c:	1420703a 	and	r16,r2,r16
 8010640:	20c0332e 	bgeu	r4,r3,8010710 <_realloc_r+0x128>
 8010644:	047ffe04 	movi	r17,-8
 8010648:	1c62703a 	and	r17,r3,r17
 801064c:	8807883a 	mov	r3,r17
 8010650:	88005816 	blt	r17,zero,80107b4 <_realloc_r+0x1cc>
 8010654:	8c805736 	bltu	r17,r18,80107b4 <_realloc_r+0x1cc>
 8010658:	80c0300e 	bge	r16,r3,801071c <_realloc_r+0x134>
 801065c:	070200b4 	movhi	fp,2050
 8010660:	e72ba104 	addi	fp,fp,-20860
 8010664:	e1c00217 	ldw	r7,8(fp)
 8010668:	9c09883a 	add	r4,r19,r16
 801066c:	22000117 	ldw	r8,4(r4)
 8010670:	21c06326 	beq	r4,r7,8010800 <_realloc_r+0x218>
 8010674:	017fff84 	movi	r5,-2
 8010678:	414a703a 	and	r5,r8,r5
 801067c:	214b883a 	add	r5,r4,r5
 8010680:	29800117 	ldw	r6,4(r5)
 8010684:	3180004c 	andi	r6,r6,1
 8010688:	30003f26 	beq	r6,zero,8010788 <_realloc_r+0x1a0>
 801068c:	1080004c 	andi	r2,r2,1
 8010690:	10008326 	beq	r2,zero,80108a0 <_realloc_r+0x2b8>
 8010694:	900b883a 	mov	r5,r18
 8010698:	a009883a 	mov	r4,r20
 801069c:	80090d80 	call	80090d8 <_malloc_r>
 80106a0:	1025883a 	mov	r18,r2
 80106a4:	10011e26 	beq	r2,zero,8010b20 <_realloc_r+0x538>
 80106a8:	a93fff17 	ldw	r4,-4(r21)
 80106ac:	10fffe04 	addi	r3,r2,-8
 80106b0:	00bfff84 	movi	r2,-2
 80106b4:	2084703a 	and	r2,r4,r2
 80106b8:	9885883a 	add	r2,r19,r2
 80106bc:	1880ee26 	beq	r3,r2,8010a78 <_realloc_r+0x490>
 80106c0:	81bfff04 	addi	r6,r16,-4
 80106c4:	00800904 	movi	r2,36
 80106c8:	1180b836 	bltu	r2,r6,80109ac <_realloc_r+0x3c4>
 80106cc:	00c004c4 	movi	r3,19
 80106d0:	19809636 	bltu	r3,r6,801092c <_realloc_r+0x344>
 80106d4:	9005883a 	mov	r2,r18
 80106d8:	a807883a 	mov	r3,r21
 80106dc:	19000017 	ldw	r4,0(r3)
 80106e0:	11000015 	stw	r4,0(r2)
 80106e4:	19000117 	ldw	r4,4(r3)
 80106e8:	11000115 	stw	r4,4(r2)
 80106ec:	18c00217 	ldw	r3,8(r3)
 80106f0:	10c00215 	stw	r3,8(r2)
 80106f4:	a80b883a 	mov	r5,r21
 80106f8:	a009883a 	mov	r4,r20
 80106fc:	800e7a00 	call	800e7a0 <_free_r>
 8010700:	a009883a 	mov	r4,r20
 8010704:	80166900 	call	8016690 <__malloc_unlock>
 8010708:	9005883a 	mov	r2,r18
 801070c:	00001206 	br	8010758 <_realloc_r+0x170>
 8010710:	00c00404 	movi	r3,16
 8010714:	1823883a 	mov	r17,r3
 8010718:	003fce06 	br	8010654 <_realloc_r+0x6c>
 801071c:	a825883a 	mov	r18,r21
 8010720:	8445c83a 	sub	r2,r16,r17
 8010724:	00c003c4 	movi	r3,15
 8010728:	18802636 	bltu	r3,r2,80107c4 <_realloc_r+0x1dc>
 801072c:	99800117 	ldw	r6,4(r19)
 8010730:	9c07883a 	add	r3,r19,r16
 8010734:	3180004c 	andi	r6,r6,1
 8010738:	3420b03a 	or	r16,r6,r16
 801073c:	9c000115 	stw	r16,4(r19)
 8010740:	18800117 	ldw	r2,4(r3)
 8010744:	10800054 	ori	r2,r2,1
 8010748:	18800115 	stw	r2,4(r3)
 801074c:	a009883a 	mov	r4,r20
 8010750:	80166900 	call	8016690 <__malloc_unlock>
 8010754:	9005883a 	mov	r2,r18
 8010758:	dfc00917 	ldw	ra,36(sp)
 801075c:	df000817 	ldw	fp,32(sp)
 8010760:	ddc00717 	ldw	r23,28(sp)
 8010764:	dd800617 	ldw	r22,24(sp)
 8010768:	dd400517 	ldw	r21,20(sp)
 801076c:	dd000417 	ldw	r20,16(sp)
 8010770:	dcc00317 	ldw	r19,12(sp)
 8010774:	dc800217 	ldw	r18,8(sp)
 8010778:	dc400117 	ldw	r17,4(sp)
 801077c:	dc000017 	ldw	r16,0(sp)
 8010780:	dec00a04 	addi	sp,sp,40
 8010784:	f800283a 	ret
 8010788:	017fff04 	movi	r5,-4
 801078c:	414a703a 	and	r5,r8,r5
 8010790:	814d883a 	add	r6,r16,r5
 8010794:	30c01f16 	blt	r6,r3,8010814 <_realloc_r+0x22c>
 8010798:	20800317 	ldw	r2,12(r4)
 801079c:	20c00217 	ldw	r3,8(r4)
 80107a0:	a825883a 	mov	r18,r21
 80107a4:	3021883a 	mov	r16,r6
 80107a8:	18800315 	stw	r2,12(r3)
 80107ac:	10c00215 	stw	r3,8(r2)
 80107b0:	003fdb06 	br	8010720 <_realloc_r+0x138>
 80107b4:	00800304 	movi	r2,12
 80107b8:	a0800015 	stw	r2,0(r20)
 80107bc:	0005883a 	mov	r2,zero
 80107c0:	003fe506 	br	8010758 <_realloc_r+0x170>
 80107c4:	98c00117 	ldw	r3,4(r19)
 80107c8:	9c4b883a 	add	r5,r19,r17
 80107cc:	11000054 	ori	r4,r2,1
 80107d0:	18c0004c 	andi	r3,r3,1
 80107d4:	1c62b03a 	or	r17,r3,r17
 80107d8:	9c400115 	stw	r17,4(r19)
 80107dc:	29000115 	stw	r4,4(r5)
 80107e0:	2885883a 	add	r2,r5,r2
 80107e4:	10c00117 	ldw	r3,4(r2)
 80107e8:	29400204 	addi	r5,r5,8
 80107ec:	a009883a 	mov	r4,r20
 80107f0:	18c00054 	ori	r3,r3,1
 80107f4:	10c00115 	stw	r3,4(r2)
 80107f8:	800e7a00 	call	800e7a0 <_free_r>
 80107fc:	003fd306 	br	801074c <_realloc_r+0x164>
 8010800:	017fff04 	movi	r5,-4
 8010804:	414a703a 	and	r5,r8,r5
 8010808:	89800404 	addi	r6,r17,16
 801080c:	8151883a 	add	r8,r16,r5
 8010810:	4180590e 	bge	r8,r6,8010978 <_realloc_r+0x390>
 8010814:	1080004c 	andi	r2,r2,1
 8010818:	103f9e1e 	bne	r2,zero,8010694 <_realloc_r+0xac>
 801081c:	adbffe17 	ldw	r22,-8(r21)
 8010820:	00bfff04 	movi	r2,-4
 8010824:	9dadc83a 	sub	r22,r19,r22
 8010828:	b1800117 	ldw	r6,4(r22)
 801082c:	3084703a 	and	r2,r6,r2
 8010830:	20002026 	beq	r4,zero,80108b4 <_realloc_r+0x2cc>
 8010834:	80af883a 	add	r23,r16,r2
 8010838:	b96f883a 	add	r23,r23,r5
 801083c:	21c05f26 	beq	r4,r7,80109bc <_realloc_r+0x3d4>
 8010840:	b8c01c16 	blt	r23,r3,80108b4 <_realloc_r+0x2cc>
 8010844:	20800317 	ldw	r2,12(r4)
 8010848:	20c00217 	ldw	r3,8(r4)
 801084c:	81bfff04 	addi	r6,r16,-4
 8010850:	01000904 	movi	r4,36
 8010854:	18800315 	stw	r2,12(r3)
 8010858:	10c00215 	stw	r3,8(r2)
 801085c:	b0c00217 	ldw	r3,8(r22)
 8010860:	b0800317 	ldw	r2,12(r22)
 8010864:	b4800204 	addi	r18,r22,8
 8010868:	18800315 	stw	r2,12(r3)
 801086c:	10c00215 	stw	r3,8(r2)
 8010870:	21801b36 	bltu	r4,r6,80108e0 <_realloc_r+0x2f8>
 8010874:	008004c4 	movi	r2,19
 8010878:	1180352e 	bgeu	r2,r6,8010950 <_realloc_r+0x368>
 801087c:	a8800017 	ldw	r2,0(r21)
 8010880:	b0800215 	stw	r2,8(r22)
 8010884:	a8800117 	ldw	r2,4(r21)
 8010888:	b0800315 	stw	r2,12(r22)
 801088c:	008006c4 	movi	r2,27
 8010890:	11807f36 	bltu	r2,r6,8010a90 <_realloc_r+0x4a8>
 8010894:	b0800404 	addi	r2,r22,16
 8010898:	ad400204 	addi	r21,r21,8
 801089c:	00002d06 	br	8010954 <_realloc_r+0x36c>
 80108a0:	adbffe17 	ldw	r22,-8(r21)
 80108a4:	00bfff04 	movi	r2,-4
 80108a8:	9dadc83a 	sub	r22,r19,r22
 80108ac:	b1000117 	ldw	r4,4(r22)
 80108b0:	2084703a 	and	r2,r4,r2
 80108b4:	b03f7726 	beq	r22,zero,8010694 <_realloc_r+0xac>
 80108b8:	80af883a 	add	r23,r16,r2
 80108bc:	b8ff7516 	blt	r23,r3,8010694 <_realloc_r+0xac>
 80108c0:	b0800317 	ldw	r2,12(r22)
 80108c4:	b0c00217 	ldw	r3,8(r22)
 80108c8:	81bfff04 	addi	r6,r16,-4
 80108cc:	01000904 	movi	r4,36
 80108d0:	18800315 	stw	r2,12(r3)
 80108d4:	10c00215 	stw	r3,8(r2)
 80108d8:	b4800204 	addi	r18,r22,8
 80108dc:	21bfe52e 	bgeu	r4,r6,8010874 <_realloc_r+0x28c>
 80108e0:	a80b883a 	mov	r5,r21
 80108e4:	9009883a 	mov	r4,r18
 80108e8:	800f3740 	call	800f374 <memmove>
 80108ec:	b821883a 	mov	r16,r23
 80108f0:	b027883a 	mov	r19,r22
 80108f4:	003f8a06 	br	8010720 <_realloc_r+0x138>
 80108f8:	300b883a 	mov	r5,r6
 80108fc:	dfc00917 	ldw	ra,36(sp)
 8010900:	df000817 	ldw	fp,32(sp)
 8010904:	ddc00717 	ldw	r23,28(sp)
 8010908:	dd800617 	ldw	r22,24(sp)
 801090c:	dd400517 	ldw	r21,20(sp)
 8010910:	dd000417 	ldw	r20,16(sp)
 8010914:	dcc00317 	ldw	r19,12(sp)
 8010918:	dc800217 	ldw	r18,8(sp)
 801091c:	dc400117 	ldw	r17,4(sp)
 8010920:	dc000017 	ldw	r16,0(sp)
 8010924:	dec00a04 	addi	sp,sp,40
 8010928:	80090d81 	jmpi	80090d8 <_malloc_r>
 801092c:	a8c00017 	ldw	r3,0(r21)
 8010930:	90c00015 	stw	r3,0(r18)
 8010934:	a8c00117 	ldw	r3,4(r21)
 8010938:	90c00115 	stw	r3,4(r18)
 801093c:	00c006c4 	movi	r3,27
 8010940:	19804536 	bltu	r3,r6,8010a58 <_realloc_r+0x470>
 8010944:	90800204 	addi	r2,r18,8
 8010948:	a8c00204 	addi	r3,r21,8
 801094c:	003f6306 	br	80106dc <_realloc_r+0xf4>
 8010950:	9005883a 	mov	r2,r18
 8010954:	a8c00017 	ldw	r3,0(r21)
 8010958:	b821883a 	mov	r16,r23
 801095c:	b027883a 	mov	r19,r22
 8010960:	10c00015 	stw	r3,0(r2)
 8010964:	a8c00117 	ldw	r3,4(r21)
 8010968:	10c00115 	stw	r3,4(r2)
 801096c:	a8c00217 	ldw	r3,8(r21)
 8010970:	10c00215 	stw	r3,8(r2)
 8010974:	003f6a06 	br	8010720 <_realloc_r+0x138>
 8010978:	9c67883a 	add	r19,r19,r17
 801097c:	4445c83a 	sub	r2,r8,r17
 8010980:	e4c00215 	stw	r19,8(fp)
 8010984:	10800054 	ori	r2,r2,1
 8010988:	98800115 	stw	r2,4(r19)
 801098c:	a8bfff17 	ldw	r2,-4(r21)
 8010990:	a009883a 	mov	r4,r20
 8010994:	1080004c 	andi	r2,r2,1
 8010998:	1462b03a 	or	r17,r2,r17
 801099c:	ac7fff15 	stw	r17,-4(r21)
 80109a0:	80166900 	call	8016690 <__malloc_unlock>
 80109a4:	a805883a 	mov	r2,r21
 80109a8:	003f6b06 	br	8010758 <_realloc_r+0x170>
 80109ac:	a80b883a 	mov	r5,r21
 80109b0:	9009883a 	mov	r4,r18
 80109b4:	800f3740 	call	800f374 <memmove>
 80109b8:	003f4e06 	br	80106f4 <_realloc_r+0x10c>
 80109bc:	89000404 	addi	r4,r17,16
 80109c0:	b93fbc16 	blt	r23,r4,80108b4 <_realloc_r+0x2cc>
 80109c4:	b0800317 	ldw	r2,12(r22)
 80109c8:	b0c00217 	ldw	r3,8(r22)
 80109cc:	81bfff04 	addi	r6,r16,-4
 80109d0:	01000904 	movi	r4,36
 80109d4:	18800315 	stw	r2,12(r3)
 80109d8:	10c00215 	stw	r3,8(r2)
 80109dc:	b4800204 	addi	r18,r22,8
 80109e0:	21804336 	bltu	r4,r6,8010af0 <_realloc_r+0x508>
 80109e4:	008004c4 	movi	r2,19
 80109e8:	11803f2e 	bgeu	r2,r6,8010ae8 <_realloc_r+0x500>
 80109ec:	a8800017 	ldw	r2,0(r21)
 80109f0:	b0800215 	stw	r2,8(r22)
 80109f4:	a8800117 	ldw	r2,4(r21)
 80109f8:	b0800315 	stw	r2,12(r22)
 80109fc:	008006c4 	movi	r2,27
 8010a00:	11803f36 	bltu	r2,r6,8010b00 <_realloc_r+0x518>
 8010a04:	b0800404 	addi	r2,r22,16
 8010a08:	ad400204 	addi	r21,r21,8
 8010a0c:	a8c00017 	ldw	r3,0(r21)
 8010a10:	10c00015 	stw	r3,0(r2)
 8010a14:	a8c00117 	ldw	r3,4(r21)
 8010a18:	10c00115 	stw	r3,4(r2)
 8010a1c:	a8c00217 	ldw	r3,8(r21)
 8010a20:	10c00215 	stw	r3,8(r2)
 8010a24:	b447883a 	add	r3,r22,r17
 8010a28:	bc45c83a 	sub	r2,r23,r17
 8010a2c:	e0c00215 	stw	r3,8(fp)
 8010a30:	10800054 	ori	r2,r2,1
 8010a34:	18800115 	stw	r2,4(r3)
 8010a38:	b0800117 	ldw	r2,4(r22)
 8010a3c:	a009883a 	mov	r4,r20
 8010a40:	1080004c 	andi	r2,r2,1
 8010a44:	1462b03a 	or	r17,r2,r17
 8010a48:	b4400115 	stw	r17,4(r22)
 8010a4c:	80166900 	call	8016690 <__malloc_unlock>
 8010a50:	9005883a 	mov	r2,r18
 8010a54:	003f4006 	br	8010758 <_realloc_r+0x170>
 8010a58:	a8c00217 	ldw	r3,8(r21)
 8010a5c:	90c00215 	stw	r3,8(r18)
 8010a60:	a8c00317 	ldw	r3,12(r21)
 8010a64:	90c00315 	stw	r3,12(r18)
 8010a68:	30801126 	beq	r6,r2,8010ab0 <_realloc_r+0x4c8>
 8010a6c:	90800404 	addi	r2,r18,16
 8010a70:	a8c00404 	addi	r3,r21,16
 8010a74:	003f1906 	br	80106dc <_realloc_r+0xf4>
 8010a78:	90ffff17 	ldw	r3,-4(r18)
 8010a7c:	00bfff04 	movi	r2,-4
 8010a80:	a825883a 	mov	r18,r21
 8010a84:	1884703a 	and	r2,r3,r2
 8010a88:	80a1883a 	add	r16,r16,r2
 8010a8c:	003f2406 	br	8010720 <_realloc_r+0x138>
 8010a90:	a8800217 	ldw	r2,8(r21)
 8010a94:	b0800415 	stw	r2,16(r22)
 8010a98:	a8800317 	ldw	r2,12(r21)
 8010a9c:	b0800515 	stw	r2,20(r22)
 8010aa0:	31000a26 	beq	r6,r4,8010acc <_realloc_r+0x4e4>
 8010aa4:	b0800604 	addi	r2,r22,24
 8010aa8:	ad400404 	addi	r21,r21,16
 8010aac:	003fa906 	br	8010954 <_realloc_r+0x36c>
 8010ab0:	a9000417 	ldw	r4,16(r21)
 8010ab4:	90800604 	addi	r2,r18,24
 8010ab8:	a8c00604 	addi	r3,r21,24
 8010abc:	91000415 	stw	r4,16(r18)
 8010ac0:	a9000517 	ldw	r4,20(r21)
 8010ac4:	91000515 	stw	r4,20(r18)
 8010ac8:	003f0406 	br	80106dc <_realloc_r+0xf4>
 8010acc:	a8c00417 	ldw	r3,16(r21)
 8010ad0:	ad400604 	addi	r21,r21,24
 8010ad4:	b0800804 	addi	r2,r22,32
 8010ad8:	b0c00615 	stw	r3,24(r22)
 8010adc:	a8ffff17 	ldw	r3,-4(r21)
 8010ae0:	b0c00715 	stw	r3,28(r22)
 8010ae4:	003f9b06 	br	8010954 <_realloc_r+0x36c>
 8010ae8:	9005883a 	mov	r2,r18
 8010aec:	003fc706 	br	8010a0c <_realloc_r+0x424>
 8010af0:	a80b883a 	mov	r5,r21
 8010af4:	9009883a 	mov	r4,r18
 8010af8:	800f3740 	call	800f374 <memmove>
 8010afc:	003fc906 	br	8010a24 <_realloc_r+0x43c>
 8010b00:	a8800217 	ldw	r2,8(r21)
 8010b04:	b0800415 	stw	r2,16(r22)
 8010b08:	a8800317 	ldw	r2,12(r21)
 8010b0c:	b0800515 	stw	r2,20(r22)
 8010b10:	31000726 	beq	r6,r4,8010b30 <_realloc_r+0x548>
 8010b14:	b0800604 	addi	r2,r22,24
 8010b18:	ad400404 	addi	r21,r21,16
 8010b1c:	003fbb06 	br	8010a0c <_realloc_r+0x424>
 8010b20:	a009883a 	mov	r4,r20
 8010b24:	80166900 	call	8016690 <__malloc_unlock>
 8010b28:	0005883a 	mov	r2,zero
 8010b2c:	003f0a06 	br	8010758 <_realloc_r+0x170>
 8010b30:	a8c00417 	ldw	r3,16(r21)
 8010b34:	ad400604 	addi	r21,r21,24
 8010b38:	b0800804 	addi	r2,r22,32
 8010b3c:	b0c00615 	stw	r3,24(r22)
 8010b40:	a8ffff17 	ldw	r3,-4(r21)
 8010b44:	b0c00715 	stw	r3,28(r22)
 8010b48:	003fb006 	br	8010a0c <_realloc_r+0x424>

08010b4c <__fpclassifyd>:
 8010b4c:	00a00034 	movhi	r2,32768
 8010b50:	10bfffc4 	addi	r2,r2,-1
 8010b54:	2884703a 	and	r2,r5,r2
 8010b58:	10000726 	beq	r2,zero,8010b78 <__fpclassifyd+0x2c>
 8010b5c:	00fffc34 	movhi	r3,65520
 8010b60:	019ff834 	movhi	r6,32736
 8010b64:	28c7883a 	add	r3,r5,r3
 8010b68:	31bfffc4 	addi	r6,r6,-1
 8010b6c:	30c00536 	bltu	r6,r3,8010b84 <__fpclassifyd+0x38>
 8010b70:	00800104 	movi	r2,4
 8010b74:	f800283a 	ret
 8010b78:	2000021e 	bne	r4,zero,8010b84 <__fpclassifyd+0x38>
 8010b7c:	00800084 	movi	r2,2
 8010b80:	f800283a 	ret
 8010b84:	00dffc34 	movhi	r3,32752
 8010b88:	019ff834 	movhi	r6,32736
 8010b8c:	28cb883a 	add	r5,r5,r3
 8010b90:	31bfffc4 	addi	r6,r6,-1
 8010b94:	317ff62e 	bgeu	r6,r5,8010b70 <__fpclassifyd+0x24>
 8010b98:	01400434 	movhi	r5,16
 8010b9c:	297fffc4 	addi	r5,r5,-1
 8010ba0:	28800236 	bltu	r5,r2,8010bac <__fpclassifyd+0x60>
 8010ba4:	008000c4 	movi	r2,3
 8010ba8:	f800283a 	ret
 8010bac:	10c00226 	beq	r2,r3,8010bb8 <__fpclassifyd+0x6c>
 8010bb0:	0005883a 	mov	r2,zero
 8010bb4:	f800283a 	ret
 8010bb8:	2005003a 	cmpeq	r2,r4,zero
 8010bbc:	f800283a 	ret

08010bc0 <strcmp>:
 8010bc0:	2144b03a 	or	r2,r4,r5
 8010bc4:	108000cc 	andi	r2,r2,3
 8010bc8:	1000171e 	bne	r2,zero,8010c28 <strcmp+0x68>
 8010bcc:	20800017 	ldw	r2,0(r4)
 8010bd0:	28c00017 	ldw	r3,0(r5)
 8010bd4:	10c0141e 	bne	r2,r3,8010c28 <strcmp+0x68>
 8010bd8:	027fbff4 	movhi	r9,65279
 8010bdc:	4a7fbfc4 	addi	r9,r9,-257
 8010be0:	0086303a 	nor	r3,zero,r2
 8010be4:	02202074 	movhi	r8,32897
 8010be8:	1245883a 	add	r2,r2,r9
 8010bec:	42202004 	addi	r8,r8,-32640
 8010bf0:	10c4703a 	and	r2,r2,r3
 8010bf4:	1204703a 	and	r2,r2,r8
 8010bf8:	10000226 	beq	r2,zero,8010c04 <strcmp+0x44>
 8010bfc:	00002306 	br	8010c8c <strcmp+0xcc>
 8010c00:	1000221e 	bne	r2,zero,8010c8c <strcmp+0xcc>
 8010c04:	21000104 	addi	r4,r4,4
 8010c08:	20c00017 	ldw	r3,0(r4)
 8010c0c:	29400104 	addi	r5,r5,4
 8010c10:	29800017 	ldw	r6,0(r5)
 8010c14:	1a4f883a 	add	r7,r3,r9
 8010c18:	00c4303a 	nor	r2,zero,r3
 8010c1c:	3884703a 	and	r2,r7,r2
 8010c20:	1204703a 	and	r2,r2,r8
 8010c24:	19bff626 	beq	r3,r6,8010c00 <strcmp+0x40>
 8010c28:	20800003 	ldbu	r2,0(r4)
 8010c2c:	10c03fcc 	andi	r3,r2,255
 8010c30:	18c0201c 	xori	r3,r3,128
 8010c34:	18ffe004 	addi	r3,r3,-128
 8010c38:	18000c26 	beq	r3,zero,8010c6c <strcmp+0xac>
 8010c3c:	29800007 	ldb	r6,0(r5)
 8010c40:	19800326 	beq	r3,r6,8010c50 <strcmp+0x90>
 8010c44:	00001306 	br	8010c94 <strcmp+0xd4>
 8010c48:	29800007 	ldb	r6,0(r5)
 8010c4c:	11800b1e 	bne	r2,r6,8010c7c <strcmp+0xbc>
 8010c50:	21000044 	addi	r4,r4,1
 8010c54:	20c00003 	ldbu	r3,0(r4)
 8010c58:	29400044 	addi	r5,r5,1
 8010c5c:	18803fcc 	andi	r2,r3,255
 8010c60:	1080201c 	xori	r2,r2,128
 8010c64:	10bfe004 	addi	r2,r2,-128
 8010c68:	103ff71e 	bne	r2,zero,8010c48 <strcmp+0x88>
 8010c6c:	0007883a 	mov	r3,zero
 8010c70:	28800003 	ldbu	r2,0(r5)
 8010c74:	1885c83a 	sub	r2,r3,r2
 8010c78:	f800283a 	ret
 8010c7c:	28800003 	ldbu	r2,0(r5)
 8010c80:	18c03fcc 	andi	r3,r3,255
 8010c84:	1885c83a 	sub	r2,r3,r2
 8010c88:	f800283a 	ret
 8010c8c:	0005883a 	mov	r2,zero
 8010c90:	f800283a 	ret
 8010c94:	10c03fcc 	andi	r3,r2,255
 8010c98:	003ff506 	br	8010c70 <strcmp+0xb0>

08010c9c <__sprint_r.part.0>:
 8010c9c:	28801917 	ldw	r2,100(r5)
 8010ca0:	defff604 	addi	sp,sp,-40
 8010ca4:	dd400515 	stw	r21,20(sp)
 8010ca8:	dfc00915 	stw	ra,36(sp)
 8010cac:	df000815 	stw	fp,32(sp)
 8010cb0:	ddc00715 	stw	r23,28(sp)
 8010cb4:	dd800615 	stw	r22,24(sp)
 8010cb8:	dd000415 	stw	r20,16(sp)
 8010cbc:	dcc00315 	stw	r19,12(sp)
 8010cc0:	dc800215 	stw	r18,8(sp)
 8010cc4:	dc400115 	stw	r17,4(sp)
 8010cc8:	dc000015 	stw	r16,0(sp)
 8010ccc:	1088000c 	andi	r2,r2,8192
 8010cd0:	302b883a 	mov	r21,r6
 8010cd4:	10002e26 	beq	r2,zero,8010d90 <__sprint_r.part.0+0xf4>
 8010cd8:	30800217 	ldw	r2,8(r6)
 8010cdc:	35800017 	ldw	r22,0(r6)
 8010ce0:	10002926 	beq	r2,zero,8010d88 <__sprint_r.part.0+0xec>
 8010ce4:	2827883a 	mov	r19,r5
 8010ce8:	2029883a 	mov	r20,r4
 8010cec:	b5c00104 	addi	r23,r22,4
 8010cf0:	04bfffc4 	movi	r18,-1
 8010cf4:	bc400017 	ldw	r17,0(r23)
 8010cf8:	b4000017 	ldw	r16,0(r22)
 8010cfc:	0039883a 	mov	fp,zero
 8010d00:	8822d0ba 	srli	r17,r17,2
 8010d04:	8800031e 	bne	r17,zero,8010d14 <__sprint_r.part.0+0x78>
 8010d08:	00001806 	br	8010d6c <__sprint_r.part.0+0xd0>
 8010d0c:	84000104 	addi	r16,r16,4
 8010d10:	8f001526 	beq	r17,fp,8010d68 <__sprint_r.part.0+0xcc>
 8010d14:	81400017 	ldw	r5,0(r16)
 8010d18:	980d883a 	mov	r6,r19
 8010d1c:	a009883a 	mov	r4,r20
 8010d20:	80126d80 	call	80126d8 <_fputwc_r>
 8010d24:	e7000044 	addi	fp,fp,1
 8010d28:	14bff81e 	bne	r2,r18,8010d0c <__sprint_r.part.0+0x70>
 8010d2c:	9005883a 	mov	r2,r18
 8010d30:	a8000215 	stw	zero,8(r21)
 8010d34:	a8000115 	stw	zero,4(r21)
 8010d38:	dfc00917 	ldw	ra,36(sp)
 8010d3c:	df000817 	ldw	fp,32(sp)
 8010d40:	ddc00717 	ldw	r23,28(sp)
 8010d44:	dd800617 	ldw	r22,24(sp)
 8010d48:	dd400517 	ldw	r21,20(sp)
 8010d4c:	dd000417 	ldw	r20,16(sp)
 8010d50:	dcc00317 	ldw	r19,12(sp)
 8010d54:	dc800217 	ldw	r18,8(sp)
 8010d58:	dc400117 	ldw	r17,4(sp)
 8010d5c:	dc000017 	ldw	r16,0(sp)
 8010d60:	dec00a04 	addi	sp,sp,40
 8010d64:	f800283a 	ret
 8010d68:	a8800217 	ldw	r2,8(r21)
 8010d6c:	8c63883a 	add	r17,r17,r17
 8010d70:	8c63883a 	add	r17,r17,r17
 8010d74:	1445c83a 	sub	r2,r2,r17
 8010d78:	a8800215 	stw	r2,8(r21)
 8010d7c:	b5800204 	addi	r22,r22,8
 8010d80:	bdc00204 	addi	r23,r23,8
 8010d84:	103fdb1e 	bne	r2,zero,8010cf4 <__sprint_r.part.0+0x58>
 8010d88:	0005883a 	mov	r2,zero
 8010d8c:	003fe806 	br	8010d30 <__sprint_r.part.0+0x94>
 8010d90:	800eab00 	call	800eab0 <__sfvwrite_r>
 8010d94:	003fe606 	br	8010d30 <__sprint_r.part.0+0x94>

08010d98 <__sprint_r>:
 8010d98:	30c00217 	ldw	r3,8(r6)
 8010d9c:	18000126 	beq	r3,zero,8010da4 <__sprint_r+0xc>
 8010da0:	8010c9c1 	jmpi	8010c9c <__sprint_r.part.0>
 8010da4:	30000115 	stw	zero,4(r6)
 8010da8:	0005883a 	mov	r2,zero
 8010dac:	f800283a 	ret

08010db0 <___vfiprintf_internal_r>:
 8010db0:	deffca04 	addi	sp,sp,-216
 8010db4:	dd403115 	stw	r21,196(sp)
 8010db8:	dfc03515 	stw	ra,212(sp)
 8010dbc:	df003415 	stw	fp,208(sp)
 8010dc0:	ddc03315 	stw	r23,204(sp)
 8010dc4:	dd803215 	stw	r22,200(sp)
 8010dc8:	dd003015 	stw	r20,192(sp)
 8010dcc:	dcc02f15 	stw	r19,188(sp)
 8010dd0:	dc802e15 	stw	r18,184(sp)
 8010dd4:	dc402d15 	stw	r17,180(sp)
 8010dd8:	dc002c15 	stw	r16,176(sp)
 8010ddc:	d9002115 	stw	r4,132(sp)
 8010de0:	d9402015 	stw	r5,128(sp)
 8010de4:	d9c02215 	stw	r7,136(sp)
 8010de8:	302b883a 	mov	r21,r6
 8010dec:	20000226 	beq	r4,zero,8010df8 <___vfiprintf_internal_r+0x48>
 8010df0:	20800e17 	ldw	r2,56(r4)
 8010df4:	1000cf26 	beq	r2,zero,8011134 <___vfiprintf_internal_r+0x384>
 8010df8:	d8c02017 	ldw	r3,128(sp)
 8010dfc:	1880030b 	ldhu	r2,12(r3)
 8010e00:	10c8000c 	andi	r3,r2,8192
 8010e04:	1800071e 	bne	r3,zero,8010e24 <___vfiprintf_internal_r+0x74>
 8010e08:	d9402017 	ldw	r5,128(sp)
 8010e0c:	00f7ffc4 	movi	r3,-8193
 8010e10:	10880014 	ori	r2,r2,8192
 8010e14:	29001917 	ldw	r4,100(r5)
 8010e18:	2880030d 	sth	r2,12(r5)
 8010e1c:	20c6703a 	and	r3,r4,r3
 8010e20:	28c01915 	stw	r3,100(r5)
 8010e24:	10c0020c 	andi	r3,r2,8
 8010e28:	1800a526 	beq	r3,zero,80110c0 <___vfiprintf_internal_r+0x310>
 8010e2c:	d9002017 	ldw	r4,128(sp)
 8010e30:	20c00417 	ldw	r3,16(r4)
 8010e34:	1800a226 	beq	r3,zero,80110c0 <___vfiprintf_internal_r+0x310>
 8010e38:	1080068c 	andi	r2,r2,26
 8010e3c:	00c00284 	movi	r3,10
 8010e40:	10c0a826 	beq	r2,r3,80110e4 <___vfiprintf_internal_r+0x334>
 8010e44:	d9001a04 	addi	r4,sp,104
 8010e48:	d94019c4 	addi	r5,sp,103
 8010e4c:	048200b4 	movhi	r18,2050
 8010e50:	2145c83a 	sub	r2,r4,r5
 8010e54:	94a92d04 	addi	r18,r18,-23372
 8010e58:	d9001e15 	stw	r4,120(sp)
 8010e5c:	d9401f15 	stw	r5,124(sp)
 8010e60:	dec01a15 	stw	sp,104(sp)
 8010e64:	d8001c15 	stw	zero,112(sp)
 8010e68:	d8001b15 	stw	zero,108(sp)
 8010e6c:	d811883a 	mov	r8,sp
 8010e70:	d8002615 	stw	zero,152(sp)
 8010e74:	d8002415 	stw	zero,144(sp)
 8010e78:	d8802815 	stw	r2,160(sp)
 8010e7c:	a82d883a 	mov	r22,r21
 8010e80:	b0800007 	ldb	r2,0(r22)
 8010e84:	10040d26 	beq	r2,zero,8011ebc <___vfiprintf_internal_r+0x110c>
 8010e88:	00c00944 	movi	r3,37
 8010e8c:	b029883a 	mov	r20,r22
 8010e90:	10c0021e 	bne	r2,r3,8010e9c <___vfiprintf_internal_r+0xec>
 8010e94:	00001606 	br	8010ef0 <___vfiprintf_internal_r+0x140>
 8010e98:	10c00326 	beq	r2,r3,8010ea8 <___vfiprintf_internal_r+0xf8>
 8010e9c:	a5000044 	addi	r20,r20,1
 8010ea0:	a0800007 	ldb	r2,0(r20)
 8010ea4:	103ffc1e 	bne	r2,zero,8010e98 <___vfiprintf_internal_r+0xe8>
 8010ea8:	a5a1c83a 	sub	r16,r20,r22
 8010eac:	80001026 	beq	r16,zero,8010ef0 <___vfiprintf_internal_r+0x140>
 8010eb0:	d8c01c17 	ldw	r3,112(sp)
 8010eb4:	d8801b17 	ldw	r2,108(sp)
 8010eb8:	45800015 	stw	r22,0(r8)
 8010ebc:	80c7883a 	add	r3,r16,r3
 8010ec0:	10800044 	addi	r2,r2,1
 8010ec4:	44000115 	stw	r16,4(r8)
 8010ec8:	d8c01c15 	stw	r3,112(sp)
 8010ecc:	d8801b15 	stw	r2,108(sp)
 8010ed0:	010001c4 	movi	r4,7
 8010ed4:	2080750e 	bge	r4,r2,80110ac <___vfiprintf_internal_r+0x2fc>
 8010ed8:	1803951e 	bne	r3,zero,8011d30 <___vfiprintf_internal_r+0xf80>
 8010edc:	d8c02417 	ldw	r3,144(sp)
 8010ee0:	d8001b15 	stw	zero,108(sp)
 8010ee4:	d811883a 	mov	r8,sp
 8010ee8:	1c07883a 	add	r3,r3,r16
 8010eec:	d8c02415 	stw	r3,144(sp)
 8010ef0:	a0800007 	ldb	r2,0(r20)
 8010ef4:	1002e026 	beq	r2,zero,8011a78 <___vfiprintf_internal_r+0xcc8>
 8010ef8:	a5800044 	addi	r22,r20,1
 8010efc:	a0c00047 	ldb	r3,1(r20)
 8010f00:	d8001d85 	stb	zero,118(sp)
 8010f04:	0027883a 	mov	r19,zero
 8010f08:	d8002305 	stb	zero,140(sp)
 8010f0c:	043fffc4 	movi	r16,-1
 8010f10:	d8002515 	stw	zero,148(sp)
 8010f14:	0023883a 	mov	r17,zero
 8010f18:	05001604 	movi	r20,88
 8010f1c:	05400244 	movi	r21,9
 8010f20:	402f883a 	mov	r23,r8
 8010f24:	b5800044 	addi	r22,r22,1
 8010f28:	18bff804 	addi	r2,r3,-32
 8010f2c:	a0827736 	bltu	r20,r2,801190c <___vfiprintf_internal_r+0xb5c>
 8010f30:	100490ba 	slli	r2,r2,2
 8010f34:	01020074 	movhi	r4,2049
 8010f38:	2103d204 	addi	r4,r4,3912
 8010f3c:	1105883a 	add	r2,r2,r4
 8010f40:	10800017 	ldw	r2,0(r2)
 8010f44:	1000683a 	jmp	r2
 8010f48:	0801160c 	andi	zero,at,1112
 8010f4c:	0801190c 	andi	zero,at,1124
 8010f50:	0801190c 	andi	zero,at,1124
 8010f54:	08011628 	cmpgeui	zero,at,1112
 8010f58:	0801190c 	andi	zero,at,1124
 8010f5c:	0801190c 	andi	zero,at,1124
 8010f60:	0801190c 	andi	zero,at,1124
 8010f64:	0801190c 	andi	zero,at,1124
 8010f68:	0801190c 	andi	zero,at,1124
 8010f6c:	0801190c 	andi	zero,at,1124
 8010f70:	08011830 	cmpltui	zero,at,1120
 8010f74:	08011854 	ori	zero,at,1121
 8010f78:	0801190c 	andi	zero,at,1124
 8010f7c:	0801114c 	andi	zero,at,1093
 8010f80:	08011868 	cmpgeui	zero,at,1121
 8010f84:	0801190c 	andi	zero,at,1124
 8010f88:	08011634 	orhi	zero,at,1112
 8010f8c:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010f90:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010f94:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010f98:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010f9c:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010fa0:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010fa4:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010fa8:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010fac:	08011640 	call	801164 <__alt_mem_sdram-0x77fee9c>
 8010fb0:	0801190c 	andi	zero,at,1124
 8010fb4:	0801190c 	andi	zero,at,1124
 8010fb8:	0801190c 	andi	zero,at,1124
 8010fbc:	0801190c 	andi	zero,at,1124
 8010fc0:	0801190c 	andi	zero,at,1124
 8010fc4:	0801190c 	andi	zero,at,1124
 8010fc8:	0801190c 	andi	zero,at,1124
 8010fcc:	0801190c 	andi	zero,at,1124
 8010fd0:	0801190c 	andi	zero,at,1124
 8010fd4:	0801190c 	andi	zero,at,1124
 8010fd8:	08011680 	call	801168 <__alt_mem_sdram-0x77fee98>
 8010fdc:	0801190c 	andi	zero,at,1124
 8010fe0:	0801190c 	andi	zero,at,1124
 8010fe4:	0801190c 	andi	zero,at,1124
 8010fe8:	0801190c 	andi	zero,at,1124
 8010fec:	0801190c 	andi	zero,at,1124
 8010ff0:	0801190c 	andi	zero,at,1124
 8010ff4:	0801190c 	andi	zero,at,1124
 8010ff8:	0801190c 	andi	zero,at,1124
 8010ffc:	0801190c 	andi	zero,at,1124
 8011000:	0801190c 	andi	zero,at,1124
 8011004:	080116bc 	xorhi	zero,at,1114
 8011008:	0801190c 	andi	zero,at,1124
 801100c:	0801190c 	andi	zero,at,1124
 8011010:	0801190c 	andi	zero,at,1124
 8011014:	0801190c 	andi	zero,at,1124
 8011018:	0801190c 	andi	zero,at,1124
 801101c:	08011718 	cmpnei	zero,at,1116
 8011020:	0801190c 	andi	zero,at,1124
 8011024:	0801190c 	andi	zero,at,1124
 8011028:	0801178c 	andi	zero,at,1118
 801102c:	0801190c 	andi	zero,at,1124
 8011030:	0801190c 	andi	zero,at,1124
 8011034:	0801190c 	andi	zero,at,1124
 8011038:	0801190c 	andi	zero,at,1124
 801103c:	0801190c 	andi	zero,at,1124
 8011040:	0801190c 	andi	zero,at,1124
 8011044:	0801190c 	andi	zero,at,1124
 8011048:	0801190c 	andi	zero,at,1124
 801104c:	0801190c 	andi	zero,at,1124
 8011050:	0801190c 	andi	zero,at,1124
 8011054:	08011534 	orhi	zero,at,1108
 8011058:	08011564 	muli	zero,at,1109
 801105c:	0801190c 	andi	zero,at,1124
 8011060:	0801190c 	andi	zero,at,1124
 8011064:	0801190c 	andi	zero,at,1124
 8011068:	080118b4 	orhi	zero,at,1122
 801106c:	08011564 	muli	zero,at,1109
 8011070:	0801190c 	andi	zero,at,1124
 8011074:	0801190c 	andi	zero,at,1124
 8011078:	0801140c 	andi	zero,at,1104
 801107c:	0801190c 	andi	zero,at,1124
 8011080:	08011420 	cmpeqi	zero,at,1104
 8011084:	08011458 	cmpnei	zero,at,1105
 8011088:	08011158 	cmpnei	zero,at,1093
 801108c:	08011400 	call	801140 <__alt_mem_sdram-0x77feec0>
 8011090:	0801190c 	andi	zero,at,1124
 8011094:	080117cc 	andi	zero,at,1119
 8011098:	0801190c 	andi	zero,at,1124
 801109c:	08011818 	cmpnei	zero,at,1120
 80110a0:	0801190c 	andi	zero,at,1124
 80110a4:	0801190c 	andi	zero,at,1124
 80110a8:	080114dc 	xori	zero,at,1107
 80110ac:	42000204 	addi	r8,r8,8
 80110b0:	d8c02417 	ldw	r3,144(sp)
 80110b4:	1c07883a 	add	r3,r3,r16
 80110b8:	d8c02415 	stw	r3,144(sp)
 80110bc:	003f8c06 	br	8010ef0 <___vfiprintf_internal_r+0x140>
 80110c0:	d9402017 	ldw	r5,128(sp)
 80110c4:	d9002117 	ldw	r4,132(sp)
 80110c8:	800c5200 	call	800c520 <__swsetup_r>
 80110cc:	1003c11e 	bne	r2,zero,8011fd4 <___vfiprintf_internal_r+0x1224>
 80110d0:	d9402017 	ldw	r5,128(sp)
 80110d4:	00c00284 	movi	r3,10
 80110d8:	2880030b 	ldhu	r2,12(r5)
 80110dc:	1080068c 	andi	r2,r2,26
 80110e0:	10ff581e 	bne	r2,r3,8010e44 <___vfiprintf_internal_r+0x94>
 80110e4:	d8c02017 	ldw	r3,128(sp)
 80110e8:	1880038f 	ldh	r2,14(r3)
 80110ec:	103f5516 	blt	r2,zero,8010e44 <___vfiprintf_internal_r+0x94>
 80110f0:	d9c02217 	ldw	r7,136(sp)
 80110f4:	d9002117 	ldw	r4,132(sp)
 80110f8:	a80d883a 	mov	r6,r21
 80110fc:	180b883a 	mov	r5,r3
 8011100:	80122d80 	call	80122d8 <__sbprintf>
 8011104:	dfc03517 	ldw	ra,212(sp)
 8011108:	df003417 	ldw	fp,208(sp)
 801110c:	ddc03317 	ldw	r23,204(sp)
 8011110:	dd803217 	ldw	r22,200(sp)
 8011114:	dd403117 	ldw	r21,196(sp)
 8011118:	dd003017 	ldw	r20,192(sp)
 801111c:	dcc02f17 	ldw	r19,188(sp)
 8011120:	dc802e17 	ldw	r18,184(sp)
 8011124:	dc402d17 	ldw	r17,180(sp)
 8011128:	dc002c17 	ldw	r16,176(sp)
 801112c:	dec03604 	addi	sp,sp,216
 8011130:	f800283a 	ret
 8011134:	800e5800 	call	800e580 <__sinit>
 8011138:	003f2f06 	br	8010df8 <___vfiprintf_internal_r+0x48>
 801113c:	d8c02517 	ldw	r3,148(sp)
 8011140:	d8802215 	stw	r2,136(sp)
 8011144:	00c7c83a 	sub	r3,zero,r3
 8011148:	d8c02515 	stw	r3,148(sp)
 801114c:	8c400114 	ori	r17,r17,4
 8011150:	b0c00007 	ldb	r3,0(r22)
 8011154:	003f7306 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011158:	00800c04 	movi	r2,48
 801115c:	d9402217 	ldw	r5,136(sp)
 8011160:	d8801d05 	stb	r2,116(sp)
 8011164:	00801e04 	movi	r2,120
 8011168:	d8801d45 	stb	r2,117(sp)
 801116c:	d8001d85 	stb	zero,118(sp)
 8011170:	b811883a 	mov	r8,r23
 8011174:	28c00104 	addi	r3,r5,4
 8011178:	2cc00017 	ldw	r19,0(r5)
 801117c:	0029883a 	mov	r20,zero
 8011180:	88800094 	ori	r2,r17,2
 8011184:	80032516 	blt	r16,zero,8011e1c <___vfiprintf_internal_r+0x106c>
 8011188:	00bfdfc4 	movi	r2,-129
 801118c:	88a2703a 	and	r17,r17,r2
 8011190:	d8c02215 	stw	r3,136(sp)
 8011194:	8c400094 	ori	r17,r17,2
 8011198:	98032a1e 	bne	r19,zero,8011e44 <___vfiprintf_internal_r+0x1094>
 801119c:	008200b4 	movhi	r2,2050
 80111a0:	10a8cd04 	addi	r2,r2,-23756
 80111a4:	d8802615 	stw	r2,152(sp)
 80111a8:	002b883a 	mov	r21,zero
 80111ac:	8001741e 	bne	r16,zero,8011780 <___vfiprintf_internal_r+0x9d0>
 80111b0:	0021883a 	mov	r16,zero
 80111b4:	0029883a 	mov	r20,zero
 80111b8:	ddc01a04 	addi	r23,sp,104
 80111bc:	8027883a 	mov	r19,r16
 80111c0:	8500010e 	bge	r16,r20,80111c8 <___vfiprintf_internal_r+0x418>
 80111c4:	a027883a 	mov	r19,r20
 80111c8:	ad403fcc 	andi	r21,r21,255
 80111cc:	ad40201c 	xori	r21,r21,128
 80111d0:	ad7fe004 	addi	r21,r21,-128
 80111d4:	a8000126 	beq	r21,zero,80111dc <___vfiprintf_internal_r+0x42c>
 80111d8:	9cc00044 	addi	r19,r19,1
 80111dc:	89c0008c 	andi	r7,r17,2
 80111e0:	38000126 	beq	r7,zero,80111e8 <___vfiprintf_internal_r+0x438>
 80111e4:	9cc00084 	addi	r19,r19,2
 80111e8:	88c0210c 	andi	r3,r17,132
 80111ec:	1801dd1e 	bne	r3,zero,8011964 <___vfiprintf_internal_r+0xbb4>
 80111f0:	d9402517 	ldw	r5,148(sp)
 80111f4:	2cebc83a 	sub	r21,r5,r19
 80111f8:	0541da0e 	bge	zero,r21,8011964 <___vfiprintf_internal_r+0xbb4>
 80111fc:	07000404 	movi	fp,16
 8011200:	d8801c17 	ldw	r2,112(sp)
 8011204:	e543be0e 	bge	fp,r21,8012100 <___vfiprintf_internal_r+0x1350>
 8011208:	014200b4 	movhi	r5,2050
 801120c:	29693104 	addi	r5,r5,-23356
 8011210:	dc002715 	stw	r16,156(sp)
 8011214:	d9801b17 	ldw	r6,108(sp)
 8011218:	a821883a 	mov	r16,r21
 801121c:	d9402315 	stw	r5,140(sp)
 8011220:	028001c4 	movi	r10,7
 8011224:	d9c02915 	stw	r7,164(sp)
 8011228:	182b883a 	mov	r21,r3
 801122c:	00000506 	br	8011244 <___vfiprintf_internal_r+0x494>
 8011230:	31000084 	addi	r4,r6,2
 8011234:	42000204 	addi	r8,r8,8
 8011238:	180d883a 	mov	r6,r3
 801123c:	843ffc04 	addi	r16,r16,-16
 8011240:	e4000f0e 	bge	fp,r16,8011280 <___vfiprintf_internal_r+0x4d0>
 8011244:	010200b4 	movhi	r4,2050
 8011248:	10800404 	addi	r2,r2,16
 801124c:	30c00044 	addi	r3,r6,1
 8011250:	21293104 	addi	r4,r4,-23356
 8011254:	41000015 	stw	r4,0(r8)
 8011258:	47000115 	stw	fp,4(r8)
 801125c:	d8801c15 	stw	r2,112(sp)
 8011260:	d8c01b15 	stw	r3,108(sp)
 8011264:	50fff20e 	bge	r10,r3,8011230 <___vfiprintf_internal_r+0x480>
 8011268:	1001b21e 	bne	r2,zero,8011934 <___vfiprintf_internal_r+0xb84>
 801126c:	843ffc04 	addi	r16,r16,-16
 8011270:	000d883a 	mov	r6,zero
 8011274:	01000044 	movi	r4,1
 8011278:	d811883a 	mov	r8,sp
 801127c:	e43ff116 	blt	fp,r16,8011244 <___vfiprintf_internal_r+0x494>
 8011280:	a807883a 	mov	r3,r21
 8011284:	d9c02917 	ldw	r7,164(sp)
 8011288:	802b883a 	mov	r21,r16
 801128c:	dc002717 	ldw	r16,156(sp)
 8011290:	d9402317 	ldw	r5,140(sp)
 8011294:	a885883a 	add	r2,r21,r2
 8011298:	45400115 	stw	r21,4(r8)
 801129c:	41400015 	stw	r5,0(r8)
 80112a0:	d8801c15 	stw	r2,112(sp)
 80112a4:	d9001b15 	stw	r4,108(sp)
 80112a8:	014001c4 	movi	r5,7
 80112ac:	29026216 	blt	r5,r4,8011c38 <___vfiprintf_internal_r+0xe88>
 80112b0:	d9801d87 	ldb	r6,118(sp)
 80112b4:	42000204 	addi	r8,r8,8
 80112b8:	21400044 	addi	r5,r4,1
 80112bc:	3001ae1e 	bne	r6,zero,8011978 <___vfiprintf_internal_r+0xbc8>
 80112c0:	3801bb26 	beq	r7,zero,80119b0 <___vfiprintf_internal_r+0xc00>
 80112c4:	d9001d04 	addi	r4,sp,116
 80112c8:	10800084 	addi	r2,r2,2
 80112cc:	41000015 	stw	r4,0(r8)
 80112d0:	01000084 	movi	r4,2
 80112d4:	41000115 	stw	r4,4(r8)
 80112d8:	d8801c15 	stw	r2,112(sp)
 80112dc:	d9401b15 	stw	r5,108(sp)
 80112e0:	010001c4 	movi	r4,7
 80112e4:	2142680e 	bge	r4,r5,8011c88 <___vfiprintf_internal_r+0xed8>
 80112e8:	1002b11e 	bne	r2,zero,8011db0 <___vfiprintf_internal_r+0x1000>
 80112ec:	01802004 	movi	r6,128
 80112f0:	01400044 	movi	r5,1
 80112f4:	0009883a 	mov	r4,zero
 80112f8:	d811883a 	mov	r8,sp
 80112fc:	1981ae1e 	bne	r3,r6,80119b8 <___vfiprintf_internal_r+0xc08>
 8011300:	d8c02517 	ldw	r3,148(sp)
 8011304:	1cf9c83a 	sub	fp,r3,r19
 8011308:	0701ab0e 	bge	zero,fp,80119b8 <___vfiprintf_internal_r+0xc08>
 801130c:	05400404 	movi	r21,16
 8011310:	af03a90e 	bge	r21,fp,80121b8 <___vfiprintf_internal_r+0x1408>
 8011314:	014200b4 	movhi	r5,2050
 8011318:	29692d04 	addi	r5,r5,-23372
 801131c:	d9402315 	stw	r5,140(sp)
 8011320:	01c001c4 	movi	r7,7
 8011324:	00000506 	br	801133c <___vfiprintf_internal_r+0x58c>
 8011328:	21800084 	addi	r6,r4,2
 801132c:	42000204 	addi	r8,r8,8
 8011330:	1809883a 	mov	r4,r3
 8011334:	e73ffc04 	addi	fp,fp,-16
 8011338:	af000d0e 	bge	r21,fp,8011370 <___vfiprintf_internal_r+0x5c0>
 801133c:	10800404 	addi	r2,r2,16
 8011340:	20c00044 	addi	r3,r4,1
 8011344:	44800015 	stw	r18,0(r8)
 8011348:	45400115 	stw	r21,4(r8)
 801134c:	d8801c15 	stw	r2,112(sp)
 8011350:	d8c01b15 	stw	r3,108(sp)
 8011354:	38fff40e 	bge	r7,r3,8011328 <___vfiprintf_internal_r+0x578>
 8011358:	10022b1e 	bne	r2,zero,8011c08 <___vfiprintf_internal_r+0xe58>
 801135c:	e73ffc04 	addi	fp,fp,-16
 8011360:	01800044 	movi	r6,1
 8011364:	0009883a 	mov	r4,zero
 8011368:	d811883a 	mov	r8,sp
 801136c:	af3ff316 	blt	r21,fp,801133c <___vfiprintf_internal_r+0x58c>
 8011370:	d8c02317 	ldw	r3,140(sp)
 8011374:	1705883a 	add	r2,r2,fp
 8011378:	47000115 	stw	fp,4(r8)
 801137c:	40c00015 	stw	r3,0(r8)
 8011380:	d8801c15 	stw	r2,112(sp)
 8011384:	d9801b15 	stw	r6,108(sp)
 8011388:	00c001c4 	movi	r3,7
 801138c:	19829416 	blt	r3,r6,8011de0 <___vfiprintf_internal_r+0x1030>
 8011390:	8521c83a 	sub	r16,r16,r20
 8011394:	42000204 	addi	r8,r8,8
 8011398:	31400044 	addi	r5,r6,1
 801139c:	3009883a 	mov	r4,r6
 80113a0:	04018716 	blt	zero,r16,80119c0 <___vfiprintf_internal_r+0xc10>
 80113a4:	a085883a 	add	r2,r20,r2
 80113a8:	45c00015 	stw	r23,0(r8)
 80113ac:	45000115 	stw	r20,4(r8)
 80113b0:	d8801c15 	stw	r2,112(sp)
 80113b4:	d9401b15 	stw	r5,108(sp)
 80113b8:	00c001c4 	movi	r3,7
 80113bc:	1941c20e 	bge	r3,r5,8011ac8 <___vfiprintf_internal_r+0xd18>
 80113c0:	1002531e 	bne	r2,zero,8011d10 <___vfiprintf_internal_r+0xf60>
 80113c4:	d8001b15 	stw	zero,108(sp)
 80113c8:	8c40010c 	andi	r17,r17,4
 80113cc:	88023226 	beq	r17,zero,8011c98 <___vfiprintf_internal_r+0xee8>
 80113d0:	d9002517 	ldw	r4,148(sp)
 80113d4:	24e3c83a 	sub	r17,r4,r19
 80113d8:	04432916 	blt	zero,r17,8012080 <___vfiprintf_internal_r+0x12d0>
 80113dc:	d8802517 	ldw	r2,148(sp)
 80113e0:	14c0010e 	bge	r2,r19,80113e8 <___vfiprintf_internal_r+0x638>
 80113e4:	9805883a 	mov	r2,r19
 80113e8:	d8c02417 	ldw	r3,144(sp)
 80113ec:	1887883a 	add	r3,r3,r2
 80113f0:	d8c02415 	stw	r3,144(sp)
 80113f4:	d8001b15 	stw	zero,108(sp)
 80113f8:	d811883a 	mov	r8,sp
 80113fc:	003ea006 	br	8010e80 <___vfiprintf_internal_r+0xd0>
 8011400:	8c400814 	ori	r17,r17,32
 8011404:	b0c00007 	ldb	r3,0(r22)
 8011408:	003ec606 	br	8010f24 <___vfiprintf_internal_r+0x174>
 801140c:	b0c00007 	ldb	r3,0(r22)
 8011410:	00801b04 	movi	r2,108
 8011414:	18832026 	beq	r3,r2,8012098 <___vfiprintf_internal_r+0x12e8>
 8011418:	8c400414 	ori	r17,r17,16
 801141c:	003ec106 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011420:	9cc03fcc 	andi	r19,r19,255
 8011424:	b811883a 	mov	r8,r23
 8011428:	9803981e 	bne	r19,zero,801228c <___vfiprintf_internal_r+0x14dc>
 801142c:	8880080c 	andi	r2,r17,32
 8011430:	1002be26 	beq	r2,zero,8011f2c <___vfiprintf_internal_r+0x117c>
 8011434:	d9002217 	ldw	r4,136(sp)
 8011438:	d9402417 	ldw	r5,144(sp)
 801143c:	20800017 	ldw	r2,0(r4)
 8011440:	2807d7fa 	srai	r3,r5,31
 8011444:	21000104 	addi	r4,r4,4
 8011448:	d9002215 	stw	r4,136(sp)
 801144c:	11400015 	stw	r5,0(r2)
 8011450:	10c00115 	stw	r3,4(r2)
 8011454:	003e8a06 	br	8010e80 <___vfiprintf_internal_r+0xd0>
 8011458:	9cc03fcc 	andi	r19,r19,255
 801145c:	b811883a 	mov	r8,r23
 8011460:	9803871e 	bne	r19,zero,8012280 <___vfiprintf_internal_r+0x14d0>
 8011464:	8880080c 	andi	r2,r17,32
 8011468:	10009a26 	beq	r2,zero,80116d4 <___vfiprintf_internal_r+0x924>
 801146c:	d9002217 	ldw	r4,136(sp)
 8011470:	d8001d85 	stb	zero,118(sp)
 8011474:	20800204 	addi	r2,r4,8
 8011478:	24c00017 	ldw	r19,0(r4)
 801147c:	25000117 	ldw	r20,4(r4)
 8011480:	8002a416 	blt	r16,zero,8011f14 <___vfiprintf_internal_r+0x1164>
 8011484:	013fdfc4 	movi	r4,-129
 8011488:	9d06b03a 	or	r3,r19,r20
 801148c:	d8802215 	stw	r2,136(sp)
 8011490:	8922703a 	and	r17,r17,r4
 8011494:	18009b26 	beq	r3,zero,8011704 <___vfiprintf_internal_r+0x954>
 8011498:	002b883a 	mov	r21,zero
 801149c:	ddc01a04 	addi	r23,sp,104
 80114a0:	9806d0fa 	srli	r3,r19,3
 80114a4:	a008977a 	slli	r4,r20,29
 80114a8:	a028d0fa 	srli	r20,r20,3
 80114ac:	9cc001cc 	andi	r19,r19,7
 80114b0:	98800c04 	addi	r2,r19,48
 80114b4:	bdffffc4 	addi	r23,r23,-1
 80114b8:	20e6b03a 	or	r19,r4,r3
 80114bc:	b8800005 	stb	r2,0(r23)
 80114c0:	9d06b03a 	or	r3,r19,r20
 80114c4:	183ff61e 	bne	r3,zero,80114a0 <___vfiprintf_internal_r+0x6f0>
 80114c8:	88c0004c 	andi	r3,r17,1
 80114cc:	18021f1e 	bne	r3,zero,8011d4c <___vfiprintf_internal_r+0xf9c>
 80114d0:	d9401e17 	ldw	r5,120(sp)
 80114d4:	2de9c83a 	sub	r20,r5,r23
 80114d8:	003f3806 	br	80111bc <___vfiprintf_internal_r+0x40c>
 80114dc:	9cc03fcc 	andi	r19,r19,255
 80114e0:	b811883a 	mov	r8,r23
 80114e4:	98034f1e 	bne	r19,zero,8012224 <___vfiprintf_internal_r+0x1474>
 80114e8:	008200b4 	movhi	r2,2050
 80114ec:	10a8cd04 	addi	r2,r2,-23756
 80114f0:	d8802615 	stw	r2,152(sp)
 80114f4:	8880080c 	andi	r2,r17,32
 80114f8:	1000ac26 	beq	r2,zero,80117ac <___vfiprintf_internal_r+0x9fc>
 80114fc:	d9002217 	ldw	r4,136(sp)
 8011500:	24c00017 	ldw	r19,0(r4)
 8011504:	25000117 	ldw	r20,4(r4)
 8011508:	21000204 	addi	r4,r4,8
 801150c:	d9002215 	stw	r4,136(sp)
 8011510:	8880004c 	andi	r2,r17,1
 8011514:	1001e726 	beq	r2,zero,8011cb4 <___vfiprintf_internal_r+0xf04>
 8011518:	9d04b03a 	or	r2,r19,r20
 801151c:	10025c1e 	bne	r2,zero,8011e90 <___vfiprintf_internal_r+0x10e0>
 8011520:	d8001d85 	stb	zero,118(sp)
 8011524:	80024416 	blt	r16,zero,8011e38 <___vfiprintf_internal_r+0x1088>
 8011528:	00bfdfc4 	movi	r2,-129
 801152c:	88a2703a 	and	r17,r17,r2
 8011530:	003f1d06 	br	80111a8 <___vfiprintf_internal_r+0x3f8>
 8011534:	d8c02217 	ldw	r3,136(sp)
 8011538:	04c00044 	movi	r19,1
 801153c:	b811883a 	mov	r8,r23
 8011540:	18800017 	ldw	r2,0(r3)
 8011544:	18c00104 	addi	r3,r3,4
 8011548:	d8001d85 	stb	zero,118(sp)
 801154c:	d8801005 	stb	r2,64(sp)
 8011550:	d8c02215 	stw	r3,136(sp)
 8011554:	9829883a 	mov	r20,r19
 8011558:	ddc01004 	addi	r23,sp,64
 801155c:	0021883a 	mov	r16,zero
 8011560:	003f1e06 	br	80111dc <___vfiprintf_internal_r+0x42c>
 8011564:	9cc03fcc 	andi	r19,r19,255
 8011568:	b811883a 	mov	r8,r23
 801156c:	9803331e 	bne	r19,zero,801223c <___vfiprintf_internal_r+0x148c>
 8011570:	8880080c 	andi	r2,r17,32
 8011574:	10004826 	beq	r2,zero,8011698 <___vfiprintf_internal_r+0x8e8>
 8011578:	d9002217 	ldw	r4,136(sp)
 801157c:	20800117 	ldw	r2,4(r4)
 8011580:	24c00017 	ldw	r19,0(r4)
 8011584:	21000204 	addi	r4,r4,8
 8011588:	d9002215 	stw	r4,136(sp)
 801158c:	1029883a 	mov	r20,r2
 8011590:	10024c16 	blt	r2,zero,8011ec4 <___vfiprintf_internal_r+0x1114>
 8011594:	dd401d83 	ldbu	r21,118(sp)
 8011598:	80007116 	blt	r16,zero,8011760 <___vfiprintf_internal_r+0x9b0>
 801159c:	00ffdfc4 	movi	r3,-129
 80115a0:	9d04b03a 	or	r2,r19,r20
 80115a4:	88e2703a 	and	r17,r17,r3
 80115a8:	1000d126 	beq	r2,zero,80118f0 <___vfiprintf_internal_r+0xb40>
 80115ac:	a0023526 	beq	r20,zero,8011e84 <___vfiprintf_internal_r+0x10d4>
 80115b0:	ddc01a04 	addi	r23,sp,104
 80115b4:	4039883a 	mov	fp,r8
 80115b8:	9809883a 	mov	r4,r19
 80115bc:	a00b883a 	mov	r5,r20
 80115c0:	01800284 	movi	r6,10
 80115c4:	000f883a 	mov	r7,zero
 80115c8:	80130b80 	call	80130b8 <__umoddi3>
 80115cc:	10800c04 	addi	r2,r2,48
 80115d0:	bdffffc4 	addi	r23,r23,-1
 80115d4:	9809883a 	mov	r4,r19
 80115d8:	a00b883a 	mov	r5,r20
 80115dc:	b8800005 	stb	r2,0(r23)
 80115e0:	01800284 	movi	r6,10
 80115e4:	000f883a 	mov	r7,zero
 80115e8:	8012abc0 	call	8012abc <__udivdi3>
 80115ec:	1027883a 	mov	r19,r2
 80115f0:	10c4b03a 	or	r2,r2,r3
 80115f4:	1829883a 	mov	r20,r3
 80115f8:	103fef1e 	bne	r2,zero,80115b8 <___vfiprintf_internal_r+0x808>
 80115fc:	d9001e17 	ldw	r4,120(sp)
 8011600:	e011883a 	mov	r8,fp
 8011604:	25e9c83a 	sub	r20,r4,r23
 8011608:	003eec06 	br	80111bc <___vfiprintf_internal_r+0x40c>
 801160c:	d8802307 	ldb	r2,140(sp)
 8011610:	1002361e 	bne	r2,zero,8011eec <___vfiprintf_internal_r+0x113c>
 8011614:	00c00804 	movi	r3,32
 8011618:	d8c02305 	stb	r3,140(sp)
 801161c:	04c00044 	movi	r19,1
 8011620:	b0c00007 	ldb	r3,0(r22)
 8011624:	003e3f06 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011628:	8c400054 	ori	r17,r17,1
 801162c:	b0c00007 	ldb	r3,0(r22)
 8011630:	003e3c06 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011634:	8c402014 	ori	r17,r17,128
 8011638:	b0c00007 	ldb	r3,0(r22)
 801163c:	003e3906 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011640:	dc002715 	stw	r16,156(sp)
 8011644:	d8002515 	stw	zero,148(sp)
 8011648:	1f3ff404 	addi	fp,r3,-48
 801164c:	0009883a 	mov	r4,zero
 8011650:	b021883a 	mov	r16,r22
 8011654:	01400284 	movi	r5,10
 8011658:	80087fc0 	call	80087fc <__mulsi3>
 801165c:	80c00007 	ldb	r3,0(r16)
 8011660:	e089883a 	add	r4,fp,r2
 8011664:	b5800044 	addi	r22,r22,1
 8011668:	1f3ff404 	addi	fp,r3,-48
 801166c:	b021883a 	mov	r16,r22
 8011670:	af3ff82e 	bgeu	r21,fp,8011654 <___vfiprintf_internal_r+0x8a4>
 8011674:	d9002515 	stw	r4,148(sp)
 8011678:	dc002717 	ldw	r16,156(sp)
 801167c:	003e2a06 	br	8010f28 <___vfiprintf_internal_r+0x178>
 8011680:	9cc03fcc 	andi	r19,r19,255
 8011684:	b811883a 	mov	r8,r23
 8011688:	9802e91e 	bne	r19,zero,8012230 <___vfiprintf_internal_r+0x1480>
 801168c:	8c400414 	ori	r17,r17,16
 8011690:	8880080c 	andi	r2,r17,32
 8011694:	103fb81e 	bne	r2,zero,8011578 <___vfiprintf_internal_r+0x7c8>
 8011698:	8880040c 	andi	r2,r17,16
 801169c:	10022e26 	beq	r2,zero,8011f58 <___vfiprintf_internal_r+0x11a8>
 80116a0:	d9402217 	ldw	r5,136(sp)
 80116a4:	2cc00017 	ldw	r19,0(r5)
 80116a8:	29400104 	addi	r5,r5,4
 80116ac:	d9402215 	stw	r5,136(sp)
 80116b0:	9829d7fa 	srai	r20,r19,31
 80116b4:	a005883a 	mov	r2,r20
 80116b8:	003fb506 	br	8011590 <___vfiprintf_internal_r+0x7e0>
 80116bc:	9cc03fcc 	andi	r19,r19,255
 80116c0:	b811883a 	mov	r8,r23
 80116c4:	9802fa1e 	bne	r19,zero,80122b0 <___vfiprintf_internal_r+0x1500>
 80116c8:	8c400414 	ori	r17,r17,16
 80116cc:	8880080c 	andi	r2,r17,32
 80116d0:	103f661e 	bne	r2,zero,801146c <___vfiprintf_internal_r+0x6bc>
 80116d4:	8880040c 	andi	r2,r17,16
 80116d8:	10020626 	beq	r2,zero,8011ef4 <___vfiprintf_internal_r+0x1144>
 80116dc:	d9402217 	ldw	r5,136(sp)
 80116e0:	d8001d85 	stb	zero,118(sp)
 80116e4:	0029883a 	mov	r20,zero
 80116e8:	28800104 	addi	r2,r5,4
 80116ec:	2cc00017 	ldw	r19,0(r5)
 80116f0:	80020816 	blt	r16,zero,8011f14 <___vfiprintf_internal_r+0x1164>
 80116f4:	00ffdfc4 	movi	r3,-129
 80116f8:	d8802215 	stw	r2,136(sp)
 80116fc:	88e2703a 	and	r17,r17,r3
 8011700:	983f651e 	bne	r19,zero,8011498 <___vfiprintf_internal_r+0x6e8>
 8011704:	002b883a 	mov	r21,zero
 8011708:	8002cf26 	beq	r16,zero,8012248 <___vfiprintf_internal_r+0x1498>
 801170c:	0027883a 	mov	r19,zero
 8011710:	0029883a 	mov	r20,zero
 8011714:	003f6106 	br	801149c <___vfiprintf_internal_r+0x6ec>
 8011718:	9cc03fcc 	andi	r19,r19,255
 801171c:	b811883a 	mov	r8,r23
 8011720:	9802e01e 	bne	r19,zero,80122a4 <___vfiprintf_internal_r+0x14f4>
 8011724:	8c400414 	ori	r17,r17,16
 8011728:	8880080c 	andi	r2,r17,32
 801172c:	1000641e 	bne	r2,zero,80118c0 <___vfiprintf_internal_r+0xb10>
 8011730:	8880040c 	andi	r2,r17,16
 8011734:	1001c81e 	bne	r2,zero,8011e58 <___vfiprintf_internal_r+0x10a8>
 8011738:	8880100c 	andi	r2,r17,64
 801173c:	d8001d85 	stb	zero,118(sp)
 8011740:	1002281e 	bne	r2,zero,8011fe4 <___vfiprintf_internal_r+0x1234>
 8011744:	d9002217 	ldw	r4,136(sp)
 8011748:	0029883a 	mov	r20,zero
 801174c:	20800104 	addi	r2,r4,4
 8011750:	24c00017 	ldw	r19,0(r4)
 8011754:	8001c60e 	bge	r16,zero,8011e70 <___vfiprintf_internal_r+0x10c0>
 8011758:	d8802215 	stw	r2,136(sp)
 801175c:	002b883a 	mov	r21,zero
 8011760:	9d04b03a 	or	r2,r19,r20
 8011764:	103f911e 	bne	r2,zero,80115ac <___vfiprintf_internal_r+0x7fc>
 8011768:	00800044 	movi	r2,1
 801176c:	10803fcc 	andi	r2,r2,255
 8011770:	00c00044 	movi	r3,1
 8011774:	10c05f26 	beq	r2,r3,80118f4 <___vfiprintf_internal_r+0xb44>
 8011778:	00c00084 	movi	r3,2
 801177c:	10ffe31e 	bne	r2,r3,801170c <___vfiprintf_internal_r+0x95c>
 8011780:	0027883a 	mov	r19,zero
 8011784:	0029883a 	mov	r20,zero
 8011788:	00015106 	br	8011cd0 <___vfiprintf_internal_r+0xf20>
 801178c:	9cc03fcc 	andi	r19,r19,255
 8011790:	b811883a 	mov	r8,r23
 8011794:	9802c01e 	bne	r19,zero,8012298 <___vfiprintf_internal_r+0x14e8>
 8011798:	014200b4 	movhi	r5,2050
 801179c:	2968c804 	addi	r5,r5,-23776
 80117a0:	d9402615 	stw	r5,152(sp)
 80117a4:	8880080c 	andi	r2,r17,32
 80117a8:	103f541e 	bne	r2,zero,80114fc <___vfiprintf_internal_r+0x74c>
 80117ac:	8880040c 	andi	r2,r17,16
 80117b0:	1001f226 	beq	r2,zero,8011f7c <___vfiprintf_internal_r+0x11cc>
 80117b4:	d9402217 	ldw	r5,136(sp)
 80117b8:	0029883a 	mov	r20,zero
 80117bc:	2cc00017 	ldw	r19,0(r5)
 80117c0:	29400104 	addi	r5,r5,4
 80117c4:	d9402215 	stw	r5,136(sp)
 80117c8:	003f5106 	br	8011510 <___vfiprintf_internal_r+0x760>
 80117cc:	d8c02217 	ldw	r3,136(sp)
 80117d0:	b811883a 	mov	r8,r23
 80117d4:	d8001d85 	stb	zero,118(sp)
 80117d8:	1dc00017 	ldw	r23,0(r3)
 80117dc:	1f000104 	addi	fp,r3,4
 80117e0:	b8025926 	beq	r23,zero,8012148 <___vfiprintf_internal_r+0x1398>
 80117e4:	80023316 	blt	r16,zero,80120b4 <___vfiprintf_internal_r+0x1304>
 80117e8:	800d883a 	mov	r6,r16
 80117ec:	000b883a 	mov	r5,zero
 80117f0:	b809883a 	mov	r4,r23
 80117f4:	da002a15 	stw	r8,168(sp)
 80117f8:	800f2900 	call	800f290 <memchr>
 80117fc:	da002a17 	ldw	r8,168(sp)
 8011800:	10026826 	beq	r2,zero,80121a4 <___vfiprintf_internal_r+0x13f4>
 8011804:	15e9c83a 	sub	r20,r2,r23
 8011808:	dd401d83 	ldbu	r21,118(sp)
 801180c:	df002215 	stw	fp,136(sp)
 8011810:	0021883a 	mov	r16,zero
 8011814:	003e6906 	br	80111bc <___vfiprintf_internal_r+0x40c>
 8011818:	9cc03fcc 	andi	r19,r19,255
 801181c:	b811883a 	mov	r8,r23
 8011820:	983fc126 	beq	r19,zero,8011728 <___vfiprintf_internal_r+0x978>
 8011824:	d8c02303 	ldbu	r3,140(sp)
 8011828:	d8c01d85 	stb	r3,118(sp)
 801182c:	003fbe06 	br	8011728 <___vfiprintf_internal_r+0x978>
 8011830:	d9002217 	ldw	r4,136(sp)
 8011834:	d9402217 	ldw	r5,136(sp)
 8011838:	21000017 	ldw	r4,0(r4)
 801183c:	28800104 	addi	r2,r5,4
 8011840:	d9002515 	stw	r4,148(sp)
 8011844:	203e3d16 	blt	r4,zero,801113c <___vfiprintf_internal_r+0x38c>
 8011848:	d8802215 	stw	r2,136(sp)
 801184c:	b0c00007 	ldb	r3,0(r22)
 8011850:	003db406 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011854:	00c00ac4 	movi	r3,43
 8011858:	d8c02305 	stb	r3,140(sp)
 801185c:	04c00044 	movi	r19,1
 8011860:	b0c00007 	ldb	r3,0(r22)
 8011864:	003daf06 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011868:	b0c00007 	ldb	r3,0(r22)
 801186c:	01000a84 	movi	r4,42
 8011870:	b4000044 	addi	r16,r22,1
 8011874:	19025e26 	beq	r3,r4,80121f0 <___vfiprintf_internal_r+0x1440>
 8011878:	1f3ff404 	addi	fp,r3,-48
 801187c:	0009883a 	mov	r4,zero
 8011880:	af025236 	bltu	r21,fp,80121cc <___vfiprintf_internal_r+0x141c>
 8011884:	01400284 	movi	r5,10
 8011888:	80087fc0 	call	80087fc <__mulsi3>
 801188c:	80c00007 	ldb	r3,0(r16)
 8011890:	1709883a 	add	r4,r2,fp
 8011894:	85800044 	addi	r22,r16,1
 8011898:	1f3ff404 	addi	fp,r3,-48
 801189c:	b021883a 	mov	r16,r22
 80118a0:	af3ff82e 	bgeu	r21,fp,8011884 <___vfiprintf_internal_r+0xad4>
 80118a4:	2021883a 	mov	r16,r4
 80118a8:	203d9f0e 	bge	r4,zero,8010f28 <___vfiprintf_internal_r+0x178>
 80118ac:	043fffc4 	movi	r16,-1
 80118b0:	003d9d06 	br	8010f28 <___vfiprintf_internal_r+0x178>
 80118b4:	8c401014 	ori	r17,r17,64
 80118b8:	b0c00007 	ldb	r3,0(r22)
 80118bc:	003d9906 	br	8010f24 <___vfiprintf_internal_r+0x174>
 80118c0:	d9002217 	ldw	r4,136(sp)
 80118c4:	d8001d85 	stb	zero,118(sp)
 80118c8:	20c00204 	addi	r3,r4,8
 80118cc:	24c00017 	ldw	r19,0(r4)
 80118d0:	25000117 	ldw	r20,4(r4)
 80118d4:	8001e716 	blt	r16,zero,8012074 <___vfiprintf_internal_r+0x12c4>
 80118d8:	013fdfc4 	movi	r4,-129
 80118dc:	9d04b03a 	or	r2,r19,r20
 80118e0:	d8c02215 	stw	r3,136(sp)
 80118e4:	8922703a 	and	r17,r17,r4
 80118e8:	002b883a 	mov	r21,zero
 80118ec:	103f2f1e 	bne	r2,zero,80115ac <___vfiprintf_internal_r+0x7fc>
 80118f0:	803e2f26 	beq	r16,zero,80111b0 <___vfiprintf_internal_r+0x400>
 80118f4:	0027883a 	mov	r19,zero
 80118f8:	9cc00c04 	addi	r19,r19,48
 80118fc:	dcc019c5 	stb	r19,103(sp)
 8011900:	dd002817 	ldw	r20,160(sp)
 8011904:	ddc019c4 	addi	r23,sp,103
 8011908:	003e2c06 	br	80111bc <___vfiprintf_internal_r+0x40c>
 801190c:	9cc03fcc 	andi	r19,r19,255
 8011910:	b811883a 	mov	r8,r23
 8011914:	9802571e 	bne	r19,zero,8012274 <___vfiprintf_internal_r+0x14c4>
 8011918:	18005726 	beq	r3,zero,8011a78 <___vfiprintf_internal_r+0xcc8>
 801191c:	04c00044 	movi	r19,1
 8011920:	d8c01005 	stb	r3,64(sp)
 8011924:	d8001d85 	stb	zero,118(sp)
 8011928:	9829883a 	mov	r20,r19
 801192c:	ddc01004 	addi	r23,sp,64
 8011930:	003f0a06 	br	801155c <___vfiprintf_internal_r+0x7ac>
 8011934:	d9402017 	ldw	r5,128(sp)
 8011938:	d9002117 	ldw	r4,132(sp)
 801193c:	d9801a04 	addi	r6,sp,104
 8011940:	da802a15 	stw	r10,168(sp)
 8011944:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011948:	da802a17 	ldw	r10,168(sp)
 801194c:	1000501e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011950:	d9801b17 	ldw	r6,108(sp)
 8011954:	d8801c17 	ldw	r2,112(sp)
 8011958:	d811883a 	mov	r8,sp
 801195c:	31000044 	addi	r4,r6,1
 8011960:	003e3606 	br	801123c <___vfiprintf_internal_r+0x48c>
 8011964:	d9001b17 	ldw	r4,108(sp)
 8011968:	d8801c17 	ldw	r2,112(sp)
 801196c:	21400044 	addi	r5,r4,1
 8011970:	d9801d87 	ldb	r6,118(sp)
 8011974:	303e5226 	beq	r6,zero,80112c0 <___vfiprintf_internal_r+0x510>
 8011978:	01800044 	movi	r6,1
 801197c:	d9001d84 	addi	r4,sp,118
 8011980:	1185883a 	add	r2,r2,r6
 8011984:	41000015 	stw	r4,0(r8)
 8011988:	41800115 	stw	r6,4(r8)
 801198c:	d8801c15 	stw	r2,112(sp)
 8011990:	d9401b15 	stw	r5,108(sp)
 8011994:	010001c4 	movi	r4,7
 8011998:	2140b00e 	bge	r4,r5,8011c5c <___vfiprintf_internal_r+0xeac>
 801199c:	1000f61e 	bne	r2,zero,8011d78 <___vfiprintf_internal_r+0xfc8>
 80119a0:	3800b31e 	bne	r7,zero,8011c70 <___vfiprintf_internal_r+0xec0>
 80119a4:	0009883a 	mov	r4,zero
 80119a8:	300b883a 	mov	r5,r6
 80119ac:	d811883a 	mov	r8,sp
 80119b0:	01802004 	movi	r6,128
 80119b4:	19be5226 	beq	r3,r6,8011300 <___vfiprintf_internal_r+0x550>
 80119b8:	8521c83a 	sub	r16,r16,r20
 80119bc:	043e790e 	bge	zero,r16,80113a4 <___vfiprintf_internal_r+0x5f4>
 80119c0:	05400404 	movi	r21,16
 80119c4:	ac01b00e 	bge	r21,r16,8012088 <___vfiprintf_internal_r+0x12d8>
 80119c8:	014200b4 	movhi	r5,2050
 80119cc:	29692d04 	addi	r5,r5,-23372
 80119d0:	d9402315 	stw	r5,140(sp)
 80119d4:	070001c4 	movi	fp,7
 80119d8:	00000506 	br	80119f0 <___vfiprintf_internal_r+0xc40>
 80119dc:	21400084 	addi	r5,r4,2
 80119e0:	42000204 	addi	r8,r8,8
 80119e4:	1809883a 	mov	r4,r3
 80119e8:	843ffc04 	addi	r16,r16,-16
 80119ec:	ac000d0e 	bge	r21,r16,8011a24 <___vfiprintf_internal_r+0xc74>
 80119f0:	10800404 	addi	r2,r2,16
 80119f4:	20c00044 	addi	r3,r4,1
 80119f8:	44800015 	stw	r18,0(r8)
 80119fc:	45400115 	stw	r21,4(r8)
 8011a00:	d8801c15 	stw	r2,112(sp)
 8011a04:	d8c01b15 	stw	r3,108(sp)
 8011a08:	e0fff40e 	bge	fp,r3,80119dc <___vfiprintf_internal_r+0xc2c>
 8011a0c:	1000101e 	bne	r2,zero,8011a50 <___vfiprintf_internal_r+0xca0>
 8011a10:	843ffc04 	addi	r16,r16,-16
 8011a14:	01400044 	movi	r5,1
 8011a18:	0009883a 	mov	r4,zero
 8011a1c:	d811883a 	mov	r8,sp
 8011a20:	ac3ff316 	blt	r21,r16,80119f0 <___vfiprintf_internal_r+0xc40>
 8011a24:	d8c02317 	ldw	r3,140(sp)
 8011a28:	1405883a 	add	r2,r2,r16
 8011a2c:	44000115 	stw	r16,4(r8)
 8011a30:	40c00015 	stw	r3,0(r8)
 8011a34:	d8801c15 	stw	r2,112(sp)
 8011a38:	d9401b15 	stw	r5,108(sp)
 8011a3c:	00c001c4 	movi	r3,7
 8011a40:	19401916 	blt	r3,r5,8011aa8 <___vfiprintf_internal_r+0xcf8>
 8011a44:	42000204 	addi	r8,r8,8
 8011a48:	29400044 	addi	r5,r5,1
 8011a4c:	003e5506 	br	80113a4 <___vfiprintf_internal_r+0x5f4>
 8011a50:	d9402017 	ldw	r5,128(sp)
 8011a54:	d9002117 	ldw	r4,132(sp)
 8011a58:	d9801a04 	addi	r6,sp,104
 8011a5c:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011a60:	10000b1e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011a64:	d9001b17 	ldw	r4,108(sp)
 8011a68:	d8801c17 	ldw	r2,112(sp)
 8011a6c:	d811883a 	mov	r8,sp
 8011a70:	21400044 	addi	r5,r4,1
 8011a74:	003fdc06 	br	80119e8 <___vfiprintf_internal_r+0xc38>
 8011a78:	d8801c17 	ldw	r2,112(sp)
 8011a7c:	10000426 	beq	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011a80:	d9402017 	ldw	r5,128(sp)
 8011a84:	d9002117 	ldw	r4,132(sp)
 8011a88:	d9801a04 	addi	r6,sp,104
 8011a8c:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011a90:	d9402017 	ldw	r5,128(sp)
 8011a94:	2880030b 	ldhu	r2,12(r5)
 8011a98:	1080100c 	andi	r2,r2,64
 8011a9c:	10014d1e 	bne	r2,zero,8011fd4 <___vfiprintf_internal_r+0x1224>
 8011aa0:	d8802417 	ldw	r2,144(sp)
 8011aa4:	003d9706 	br	8011104 <___vfiprintf_internal_r+0x354>
 8011aa8:	1000d21e 	bne	r2,zero,8011df4 <___vfiprintf_internal_r+0x1044>
 8011aac:	00c00044 	movi	r3,1
 8011ab0:	a005883a 	mov	r2,r20
 8011ab4:	ddc00015 	stw	r23,0(sp)
 8011ab8:	dd000115 	stw	r20,4(sp)
 8011abc:	dd001c15 	stw	r20,112(sp)
 8011ac0:	d8c01b15 	stw	r3,108(sp)
 8011ac4:	d811883a 	mov	r8,sp
 8011ac8:	42000204 	addi	r8,r8,8
 8011acc:	8c40010c 	andi	r17,r17,4
 8011ad0:	88004026 	beq	r17,zero,8011bd4 <___vfiprintf_internal_r+0xe24>
 8011ad4:	d9002517 	ldw	r4,148(sp)
 8011ad8:	24e3c83a 	sub	r17,r4,r19
 8011adc:	04403d0e 	bge	zero,r17,8011bd4 <___vfiprintf_internal_r+0xe24>
 8011ae0:	04000404 	movi	r16,16
 8011ae4:	8441a90e 	bge	r16,r17,801218c <___vfiprintf_internal_r+0x13dc>
 8011ae8:	00c200b4 	movhi	r3,2050
 8011aec:	18e93104 	addi	r3,r3,-23356
 8011af0:	d9001b17 	ldw	r4,108(sp)
 8011af4:	d8c02315 	stw	r3,140(sp)
 8011af8:	050001c4 	movi	r20,7
 8011afc:	dd402117 	ldw	r21,132(sp)
 8011b00:	ddc02017 	ldw	r23,128(sp)
 8011b04:	00000506 	br	8011b1c <___vfiprintf_internal_r+0xd6c>
 8011b08:	21400084 	addi	r5,r4,2
 8011b0c:	42000204 	addi	r8,r8,8
 8011b10:	1809883a 	mov	r4,r3
 8011b14:	8c7ffc04 	addi	r17,r17,-16
 8011b18:	84400f0e 	bge	r16,r17,8011b58 <___vfiprintf_internal_r+0xda8>
 8011b1c:	014200b4 	movhi	r5,2050
 8011b20:	10800404 	addi	r2,r2,16
 8011b24:	20c00044 	addi	r3,r4,1
 8011b28:	29693104 	addi	r5,r5,-23356
 8011b2c:	41400015 	stw	r5,0(r8)
 8011b30:	44000115 	stw	r16,4(r8)
 8011b34:	d8801c15 	stw	r2,112(sp)
 8011b38:	d8c01b15 	stw	r3,108(sp)
 8011b3c:	a0fff20e 	bge	r20,r3,8011b08 <___vfiprintf_internal_r+0xd58>
 8011b40:	1000141e 	bne	r2,zero,8011b94 <___vfiprintf_internal_r+0xde4>
 8011b44:	8c7ffc04 	addi	r17,r17,-16
 8011b48:	01400044 	movi	r5,1
 8011b4c:	0009883a 	mov	r4,zero
 8011b50:	d811883a 	mov	r8,sp
 8011b54:	847ff116 	blt	r16,r17,8011b1c <___vfiprintf_internal_r+0xd6c>
 8011b58:	d8c02317 	ldw	r3,140(sp)
 8011b5c:	1445883a 	add	r2,r2,r17
 8011b60:	44400115 	stw	r17,4(r8)
 8011b64:	40c00015 	stw	r3,0(r8)
 8011b68:	d8801c15 	stw	r2,112(sp)
 8011b6c:	d9401b15 	stw	r5,108(sp)
 8011b70:	00c001c4 	movi	r3,7
 8011b74:	1940170e 	bge	r3,r5,8011bd4 <___vfiprintf_internal_r+0xe24>
 8011b78:	1000101e 	bne	r2,zero,8011bbc <___vfiprintf_internal_r+0xe0c>
 8011b7c:	d8802517 	ldw	r2,148(sp)
 8011b80:	14c11616 	blt	r2,r19,8011fdc <___vfiprintf_internal_r+0x122c>
 8011b84:	d9002417 	ldw	r4,144(sp)
 8011b88:	2089883a 	add	r4,r4,r2
 8011b8c:	d9002415 	stw	r4,144(sp)
 8011b90:	003e1806 	br	80113f4 <___vfiprintf_internal_r+0x644>
 8011b94:	d9801a04 	addi	r6,sp,104
 8011b98:	b80b883a 	mov	r5,r23
 8011b9c:	a809883a 	mov	r4,r21
 8011ba0:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011ba4:	103fba1e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011ba8:	d9001b17 	ldw	r4,108(sp)
 8011bac:	d8801c17 	ldw	r2,112(sp)
 8011bb0:	d811883a 	mov	r8,sp
 8011bb4:	21400044 	addi	r5,r4,1
 8011bb8:	003fd606 	br	8011b14 <___vfiprintf_internal_r+0xd64>
 8011bbc:	d9402017 	ldw	r5,128(sp)
 8011bc0:	d9002117 	ldw	r4,132(sp)
 8011bc4:	d9801a04 	addi	r6,sp,104
 8011bc8:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011bcc:	103fb01e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011bd0:	d8801c17 	ldw	r2,112(sp)
 8011bd4:	d8c02517 	ldw	r3,148(sp)
 8011bd8:	1cc0010e 	bge	r3,r19,8011be0 <___vfiprintf_internal_r+0xe30>
 8011bdc:	9807883a 	mov	r3,r19
 8011be0:	d9002417 	ldw	r4,144(sp)
 8011be4:	20c9883a 	add	r4,r4,r3
 8011be8:	d9002415 	stw	r4,144(sp)
 8011bec:	103e0126 	beq	r2,zero,80113f4 <___vfiprintf_internal_r+0x644>
 8011bf0:	d9402017 	ldw	r5,128(sp)
 8011bf4:	d9002117 	ldw	r4,132(sp)
 8011bf8:	d9801a04 	addi	r6,sp,104
 8011bfc:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011c00:	103dfc26 	beq	r2,zero,80113f4 <___vfiprintf_internal_r+0x644>
 8011c04:	003fa206 	br	8011a90 <___vfiprintf_internal_r+0xce0>
 8011c08:	d9402017 	ldw	r5,128(sp)
 8011c0c:	d9002117 	ldw	r4,132(sp)
 8011c10:	d9801a04 	addi	r6,sp,104
 8011c14:	d9c02b15 	stw	r7,172(sp)
 8011c18:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011c1c:	d9c02b17 	ldw	r7,172(sp)
 8011c20:	103f9b1e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011c24:	d9001b17 	ldw	r4,108(sp)
 8011c28:	d8801c17 	ldw	r2,112(sp)
 8011c2c:	d811883a 	mov	r8,sp
 8011c30:	21800044 	addi	r6,r4,1
 8011c34:	003dbf06 	br	8011334 <___vfiprintf_internal_r+0x584>
 8011c38:	1000d81e 	bne	r2,zero,8011f9c <___vfiprintf_internal_r+0x11ec>
 8011c3c:	d9001d87 	ldb	r4,118(sp)
 8011c40:	20000a26 	beq	r4,zero,8011c6c <___vfiprintf_internal_r+0xebc>
 8011c44:	00800044 	movi	r2,1
 8011c48:	d9001d84 	addi	r4,sp,118
 8011c4c:	100b883a 	mov	r5,r2
 8011c50:	d9000015 	stw	r4,0(sp)
 8011c54:	d8800115 	stw	r2,4(sp)
 8011c58:	d811883a 	mov	r8,sp
 8011c5c:	2809883a 	mov	r4,r5
 8011c60:	42000204 	addi	r8,r8,8
 8011c64:	29400044 	addi	r5,r5,1
 8011c68:	003d9506 	br	80112c0 <___vfiprintf_internal_r+0x510>
 8011c6c:	3800fd26 	beq	r7,zero,8012064 <___vfiprintf_internal_r+0x12b4>
 8011c70:	00800084 	movi	r2,2
 8011c74:	d9001d04 	addi	r4,sp,116
 8011c78:	d9000015 	stw	r4,0(sp)
 8011c7c:	d8800115 	stw	r2,4(sp)
 8011c80:	01400044 	movi	r5,1
 8011c84:	d811883a 	mov	r8,sp
 8011c88:	2809883a 	mov	r4,r5
 8011c8c:	42000204 	addi	r8,r8,8
 8011c90:	29400044 	addi	r5,r5,1
 8011c94:	003f4606 	br	80119b0 <___vfiprintf_internal_r+0xc00>
 8011c98:	d8802517 	ldw	r2,148(sp)
 8011c9c:	14c0010e 	bge	r2,r19,8011ca4 <___vfiprintf_internal_r+0xef4>
 8011ca0:	9805883a 	mov	r2,r19
 8011ca4:	d9402417 	ldw	r5,144(sp)
 8011ca8:	288b883a 	add	r5,r5,r2
 8011cac:	d9402415 	stw	r5,144(sp)
 8011cb0:	003dd006 	br	80113f4 <___vfiprintf_internal_r+0x644>
 8011cb4:	d8001d85 	stb	zero,118(sp)
 8011cb8:	80005d16 	blt	r16,zero,8011e30 <___vfiprintf_internal_r+0x1080>
 8011cbc:	00ffdfc4 	movi	r3,-129
 8011cc0:	9d04b03a 	or	r2,r19,r20
 8011cc4:	88e2703a 	and	r17,r17,r3
 8011cc8:	103d3726 	beq	r2,zero,80111a8 <___vfiprintf_internal_r+0x3f8>
 8011ccc:	002b883a 	mov	r21,zero
 8011cd0:	d9002617 	ldw	r4,152(sp)
 8011cd4:	ddc01a04 	addi	r23,sp,104
 8011cd8:	988003cc 	andi	r2,r19,15
 8011cdc:	a006973a 	slli	r3,r20,28
 8011ce0:	2085883a 	add	r2,r4,r2
 8011ce4:	9826d13a 	srli	r19,r19,4
 8011ce8:	10800003 	ldbu	r2,0(r2)
 8011cec:	a028d13a 	srli	r20,r20,4
 8011cf0:	bdffffc4 	addi	r23,r23,-1
 8011cf4:	1ce6b03a 	or	r19,r3,r19
 8011cf8:	b8800005 	stb	r2,0(r23)
 8011cfc:	9d04b03a 	or	r2,r19,r20
 8011d00:	103ff51e 	bne	r2,zero,8011cd8 <___vfiprintf_internal_r+0xf28>
 8011d04:	d8801e17 	ldw	r2,120(sp)
 8011d08:	15e9c83a 	sub	r20,r2,r23
 8011d0c:	003d2b06 	br	80111bc <___vfiprintf_internal_r+0x40c>
 8011d10:	d9402017 	ldw	r5,128(sp)
 8011d14:	d9002117 	ldw	r4,132(sp)
 8011d18:	d9801a04 	addi	r6,sp,104
 8011d1c:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011d20:	103f5b1e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011d24:	d8801c17 	ldw	r2,112(sp)
 8011d28:	d811883a 	mov	r8,sp
 8011d2c:	003f6706 	br	8011acc <___vfiprintf_internal_r+0xd1c>
 8011d30:	d9402017 	ldw	r5,128(sp)
 8011d34:	d9002117 	ldw	r4,132(sp)
 8011d38:	d9801a04 	addi	r6,sp,104
 8011d3c:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011d40:	103f531e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011d44:	d811883a 	mov	r8,sp
 8011d48:	003cd906 	br	80110b0 <___vfiprintf_internal_r+0x300>
 8011d4c:	10803fcc 	andi	r2,r2,255
 8011d50:	1080201c 	xori	r2,r2,128
 8011d54:	10bfe004 	addi	r2,r2,-128
 8011d58:	00c00c04 	movi	r3,48
 8011d5c:	10ffe926 	beq	r2,r3,8011d04 <___vfiprintf_internal_r+0xf54>
 8011d60:	b8ffffc5 	stb	r3,-1(r23)
 8011d64:	d8c01e17 	ldw	r3,120(sp)
 8011d68:	b8bfffc4 	addi	r2,r23,-1
 8011d6c:	102f883a 	mov	r23,r2
 8011d70:	18a9c83a 	sub	r20,r3,r2
 8011d74:	003d1106 	br	80111bc <___vfiprintf_internal_r+0x40c>
 8011d78:	d9402017 	ldw	r5,128(sp)
 8011d7c:	d9002117 	ldw	r4,132(sp)
 8011d80:	d9801a04 	addi	r6,sp,104
 8011d84:	d8c02a15 	stw	r3,168(sp)
 8011d88:	d9c02b15 	stw	r7,172(sp)
 8011d8c:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011d90:	d8c02a17 	ldw	r3,168(sp)
 8011d94:	d9c02b17 	ldw	r7,172(sp)
 8011d98:	103f3d1e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011d9c:	d9001b17 	ldw	r4,108(sp)
 8011da0:	d8801c17 	ldw	r2,112(sp)
 8011da4:	d811883a 	mov	r8,sp
 8011da8:	21400044 	addi	r5,r4,1
 8011dac:	003d4406 	br	80112c0 <___vfiprintf_internal_r+0x510>
 8011db0:	d9402017 	ldw	r5,128(sp)
 8011db4:	d9002117 	ldw	r4,132(sp)
 8011db8:	d9801a04 	addi	r6,sp,104
 8011dbc:	d8c02a15 	stw	r3,168(sp)
 8011dc0:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011dc4:	d8c02a17 	ldw	r3,168(sp)
 8011dc8:	103f311e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011dcc:	d9001b17 	ldw	r4,108(sp)
 8011dd0:	d8801c17 	ldw	r2,112(sp)
 8011dd4:	d811883a 	mov	r8,sp
 8011dd8:	21400044 	addi	r5,r4,1
 8011ddc:	003ef406 	br	80119b0 <___vfiprintf_internal_r+0xc00>
 8011de0:	1000bd1e 	bne	r2,zero,80120d8 <___vfiprintf_internal_r+0x1328>
 8011de4:	01400044 	movi	r5,1
 8011de8:	0009883a 	mov	r4,zero
 8011dec:	d811883a 	mov	r8,sp
 8011df0:	003ef106 	br	80119b8 <___vfiprintf_internal_r+0xc08>
 8011df4:	d9402017 	ldw	r5,128(sp)
 8011df8:	d9002117 	ldw	r4,132(sp)
 8011dfc:	d9801a04 	addi	r6,sp,104
 8011e00:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011e04:	103f221e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011e08:	d9401b17 	ldw	r5,108(sp)
 8011e0c:	d8801c17 	ldw	r2,112(sp)
 8011e10:	d811883a 	mov	r8,sp
 8011e14:	29400044 	addi	r5,r5,1
 8011e18:	003d6206 	br	80113a4 <___vfiprintf_internal_r+0x5f4>
 8011e1c:	014200b4 	movhi	r5,2050
 8011e20:	2968cd04 	addi	r5,r5,-23756
 8011e24:	d9402615 	stw	r5,152(sp)
 8011e28:	d8c02215 	stw	r3,136(sp)
 8011e2c:	1023883a 	mov	r17,r2
 8011e30:	9d04b03a 	or	r2,r19,r20
 8011e34:	103fa51e 	bne	r2,zero,8011ccc <___vfiprintf_internal_r+0xf1c>
 8011e38:	002b883a 	mov	r21,zero
 8011e3c:	00800084 	movi	r2,2
 8011e40:	003e4a06 	br	801176c <___vfiprintf_internal_r+0x9bc>
 8011e44:	014200b4 	movhi	r5,2050
 8011e48:	2968cd04 	addi	r5,r5,-23756
 8011e4c:	002b883a 	mov	r21,zero
 8011e50:	d9402615 	stw	r5,152(sp)
 8011e54:	003f9e06 	br	8011cd0 <___vfiprintf_internal_r+0xf20>
 8011e58:	d9402217 	ldw	r5,136(sp)
 8011e5c:	d8001d85 	stb	zero,118(sp)
 8011e60:	0029883a 	mov	r20,zero
 8011e64:	28800104 	addi	r2,r5,4
 8011e68:	2cc00017 	ldw	r19,0(r5)
 8011e6c:	803e3a16 	blt	r16,zero,8011758 <___vfiprintf_internal_r+0x9a8>
 8011e70:	00ffdfc4 	movi	r3,-129
 8011e74:	d8802215 	stw	r2,136(sp)
 8011e78:	88e2703a 	and	r17,r17,r3
 8011e7c:	002b883a 	mov	r21,zero
 8011e80:	983e9b26 	beq	r19,zero,80118f0 <___vfiprintf_internal_r+0xb40>
 8011e84:	00800244 	movi	r2,9
 8011e88:	14fdc936 	bltu	r2,r19,80115b0 <___vfiprintf_internal_r+0x800>
 8011e8c:	003e9a06 	br	80118f8 <___vfiprintf_internal_r+0xb48>
 8011e90:	00800c04 	movi	r2,48
 8011e94:	d8c01d45 	stb	r3,117(sp)
 8011e98:	d8801d05 	stb	r2,116(sp)
 8011e9c:	d8001d85 	stb	zero,118(sp)
 8011ea0:	88c00094 	ori	r3,r17,2
 8011ea4:	80009c16 	blt	r16,zero,8012118 <___vfiprintf_internal_r+0x1368>
 8011ea8:	00bfdfc4 	movi	r2,-129
 8011eac:	88a2703a 	and	r17,r17,r2
 8011eb0:	8c400094 	ori	r17,r17,2
 8011eb4:	002b883a 	mov	r21,zero
 8011eb8:	003f8506 	br	8011cd0 <___vfiprintf_internal_r+0xf20>
 8011ebc:	b029883a 	mov	r20,r22
 8011ec0:	003c0b06 	br	8010ef0 <___vfiprintf_internal_r+0x140>
 8011ec4:	04e7c83a 	sub	r19,zero,r19
 8011ec8:	05400b44 	movi	r21,45
 8011ecc:	9804c03a 	cmpne	r2,r19,zero
 8011ed0:	0529c83a 	sub	r20,zero,r20
 8011ed4:	dd401d85 	stb	r21,118(sp)
 8011ed8:	a0a9c83a 	sub	r20,r20,r2
 8011edc:	80009716 	blt	r16,zero,801213c <___vfiprintf_internal_r+0x138c>
 8011ee0:	00bfdfc4 	movi	r2,-129
 8011ee4:	88a2703a 	and	r17,r17,r2
 8011ee8:	003db006 	br	80115ac <___vfiprintf_internal_r+0x7fc>
 8011eec:	b0c00007 	ldb	r3,0(r22)
 8011ef0:	003c0c06 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8011ef4:	8880100c 	andi	r2,r17,64
 8011ef8:	d8001d85 	stb	zero,118(sp)
 8011efc:	1000461e 	bne	r2,zero,8012018 <___vfiprintf_internal_r+0x1268>
 8011f00:	d9002217 	ldw	r4,136(sp)
 8011f04:	0029883a 	mov	r20,zero
 8011f08:	20800104 	addi	r2,r4,4
 8011f0c:	24c00017 	ldw	r19,0(r4)
 8011f10:	803df80e 	bge	r16,zero,80116f4 <___vfiprintf_internal_r+0x944>
 8011f14:	9d06b03a 	or	r3,r19,r20
 8011f18:	d8802215 	stw	r2,136(sp)
 8011f1c:	183d5e1e 	bne	r3,zero,8011498 <___vfiprintf_internal_r+0x6e8>
 8011f20:	002b883a 	mov	r21,zero
 8011f24:	0005883a 	mov	r2,zero
 8011f28:	003e1006 	br	801176c <___vfiprintf_internal_r+0x9bc>
 8011f2c:	8880040c 	andi	r2,r17,16
 8011f30:	1000321e 	bne	r2,zero,8011ffc <___vfiprintf_internal_r+0x124c>
 8011f34:	8c40100c 	andi	r17,r17,64
 8011f38:	88008d26 	beq	r17,zero,8012170 <___vfiprintf_internal_r+0x13c0>
 8011f3c:	d9402217 	ldw	r5,136(sp)
 8011f40:	d8c02417 	ldw	r3,144(sp)
 8011f44:	28800017 	ldw	r2,0(r5)
 8011f48:	29400104 	addi	r5,r5,4
 8011f4c:	d9402215 	stw	r5,136(sp)
 8011f50:	10c0000d 	sth	r3,0(r2)
 8011f54:	003bca06 	br	8010e80 <___vfiprintf_internal_r+0xd0>
 8011f58:	8880100c 	andi	r2,r17,64
 8011f5c:	10003a26 	beq	r2,zero,8012048 <___vfiprintf_internal_r+0x1298>
 8011f60:	d8802217 	ldw	r2,136(sp)
 8011f64:	14c0000f 	ldh	r19,0(r2)
 8011f68:	10800104 	addi	r2,r2,4
 8011f6c:	d8802215 	stw	r2,136(sp)
 8011f70:	9829d7fa 	srai	r20,r19,31
 8011f74:	a005883a 	mov	r2,r20
 8011f78:	003d8506 	br	8011590 <___vfiprintf_internal_r+0x7e0>
 8011f7c:	8880100c 	andi	r2,r17,64
 8011f80:	10002b26 	beq	r2,zero,8012030 <___vfiprintf_internal_r+0x1280>
 8011f84:	d8802217 	ldw	r2,136(sp)
 8011f88:	0029883a 	mov	r20,zero
 8011f8c:	14c0000b 	ldhu	r19,0(r2)
 8011f90:	10800104 	addi	r2,r2,4
 8011f94:	d8802215 	stw	r2,136(sp)
 8011f98:	003d5d06 	br	8011510 <___vfiprintf_internal_r+0x760>
 8011f9c:	d9402017 	ldw	r5,128(sp)
 8011fa0:	d9002117 	ldw	r4,132(sp)
 8011fa4:	d9801a04 	addi	r6,sp,104
 8011fa8:	d8c02a15 	stw	r3,168(sp)
 8011fac:	d9c02b15 	stw	r7,172(sp)
 8011fb0:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 8011fb4:	d8c02a17 	ldw	r3,168(sp)
 8011fb8:	d9c02b17 	ldw	r7,172(sp)
 8011fbc:	103eb41e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 8011fc0:	d9001b17 	ldw	r4,108(sp)
 8011fc4:	d8801c17 	ldw	r2,112(sp)
 8011fc8:	d811883a 	mov	r8,sp
 8011fcc:	21400044 	addi	r5,r4,1
 8011fd0:	003e6706 	br	8011970 <___vfiprintf_internal_r+0xbc0>
 8011fd4:	00bfffc4 	movi	r2,-1
 8011fd8:	003c4a06 	br	8011104 <___vfiprintf_internal_r+0x354>
 8011fdc:	9805883a 	mov	r2,r19
 8011fe0:	003ee806 	br	8011b84 <___vfiprintf_internal_r+0xdd4>
 8011fe4:	d8c02217 	ldw	r3,136(sp)
 8011fe8:	0029883a 	mov	r20,zero
 8011fec:	18800104 	addi	r2,r3,4
 8011ff0:	1cc0000b 	ldhu	r19,0(r3)
 8011ff4:	803f9e0e 	bge	r16,zero,8011e70 <___vfiprintf_internal_r+0x10c0>
 8011ff8:	003dd706 	br	8011758 <___vfiprintf_internal_r+0x9a8>
 8011ffc:	d8c02217 	ldw	r3,136(sp)
 8012000:	d9002417 	ldw	r4,144(sp)
 8012004:	18800017 	ldw	r2,0(r3)
 8012008:	18c00104 	addi	r3,r3,4
 801200c:	d8c02215 	stw	r3,136(sp)
 8012010:	11000015 	stw	r4,0(r2)
 8012014:	003b9a06 	br	8010e80 <___vfiprintf_internal_r+0xd0>
 8012018:	d8c02217 	ldw	r3,136(sp)
 801201c:	0029883a 	mov	r20,zero
 8012020:	18800104 	addi	r2,r3,4
 8012024:	1cc0000b 	ldhu	r19,0(r3)
 8012028:	803db20e 	bge	r16,zero,80116f4 <___vfiprintf_internal_r+0x944>
 801202c:	003fb906 	br	8011f14 <___vfiprintf_internal_r+0x1164>
 8012030:	d9002217 	ldw	r4,136(sp)
 8012034:	0029883a 	mov	r20,zero
 8012038:	24c00017 	ldw	r19,0(r4)
 801203c:	21000104 	addi	r4,r4,4
 8012040:	d9002215 	stw	r4,136(sp)
 8012044:	003d3206 	br	8011510 <___vfiprintf_internal_r+0x760>
 8012048:	d8c02217 	ldw	r3,136(sp)
 801204c:	1cc00017 	ldw	r19,0(r3)
 8012050:	18c00104 	addi	r3,r3,4
 8012054:	d8c02215 	stw	r3,136(sp)
 8012058:	9829d7fa 	srai	r20,r19,31
 801205c:	a005883a 	mov	r2,r20
 8012060:	003d4b06 	br	8011590 <___vfiprintf_internal_r+0x7e0>
 8012064:	0009883a 	mov	r4,zero
 8012068:	01400044 	movi	r5,1
 801206c:	d811883a 	mov	r8,sp
 8012070:	003e4f06 	br	80119b0 <___vfiprintf_internal_r+0xc00>
 8012074:	d8c02215 	stw	r3,136(sp)
 8012078:	002b883a 	mov	r21,zero
 801207c:	003db806 	br	8011760 <___vfiprintf_internal_r+0x9b0>
 8012080:	d811883a 	mov	r8,sp
 8012084:	003e9606 	br	8011ae0 <___vfiprintf_internal_r+0xd30>
 8012088:	010200b4 	movhi	r4,2050
 801208c:	21292d04 	addi	r4,r4,-23372
 8012090:	d9002315 	stw	r4,140(sp)
 8012094:	003e6306 	br	8011a24 <___vfiprintf_internal_r+0xc74>
 8012098:	b0c00043 	ldbu	r3,1(r22)
 801209c:	8c400814 	ori	r17,r17,32
 80120a0:	b5800044 	addi	r22,r22,1
 80120a4:	18c03fcc 	andi	r3,r3,255
 80120a8:	18c0201c 	xori	r3,r3,128
 80120ac:	18ffe004 	addi	r3,r3,-128
 80120b0:	003b9c06 	br	8010f24 <___vfiprintf_internal_r+0x174>
 80120b4:	b809883a 	mov	r4,r23
 80120b8:	da002a15 	stw	r8,168(sp)
 80120bc:	800a0740 	call	800a074 <strlen>
 80120c0:	1029883a 	mov	r20,r2
 80120c4:	dd401d83 	ldbu	r21,118(sp)
 80120c8:	df002215 	stw	fp,136(sp)
 80120cc:	0021883a 	mov	r16,zero
 80120d0:	da002a17 	ldw	r8,168(sp)
 80120d4:	003c3906 	br	80111bc <___vfiprintf_internal_r+0x40c>
 80120d8:	d9402017 	ldw	r5,128(sp)
 80120dc:	d9002117 	ldw	r4,132(sp)
 80120e0:	d9801a04 	addi	r6,sp,104
 80120e4:	8010c9c0 	call	8010c9c <__sprint_r.part.0>
 80120e8:	103e691e 	bne	r2,zero,8011a90 <___vfiprintf_internal_r+0xce0>
 80120ec:	d9001b17 	ldw	r4,108(sp)
 80120f0:	d8801c17 	ldw	r2,112(sp)
 80120f4:	d811883a 	mov	r8,sp
 80120f8:	21400044 	addi	r5,r4,1
 80120fc:	003e2e06 	br	80119b8 <___vfiprintf_internal_r+0xc08>
 8012100:	010200b4 	movhi	r4,2050
 8012104:	21293104 	addi	r4,r4,-23356
 8012108:	d9002315 	stw	r4,140(sp)
 801210c:	d9001b17 	ldw	r4,108(sp)
 8012110:	21000044 	addi	r4,r4,1
 8012114:	003c5e06 	br	8011290 <___vfiprintf_internal_r+0x4e0>
 8012118:	002b883a 	mov	r21,zero
 801211c:	00800084 	movi	r2,2
 8012120:	10803fcc 	andi	r2,r2,255
 8012124:	01000044 	movi	r4,1
 8012128:	11002b26 	beq	r2,r4,80121d8 <___vfiprintf_internal_r+0x1428>
 801212c:	01000084 	movi	r4,2
 8012130:	11002b1e 	bne	r2,r4,80121e0 <___vfiprintf_internal_r+0x1430>
 8012134:	1823883a 	mov	r17,r3
 8012138:	003ee506 	br	8011cd0 <___vfiprintf_internal_r+0xf20>
 801213c:	8807883a 	mov	r3,r17
 8012140:	00800044 	movi	r2,1
 8012144:	003ff606 	br	8012120 <___vfiprintf_internal_r+0x1370>
 8012148:	00800184 	movi	r2,6
 801214c:	1400012e 	bgeu	r2,r16,8012154 <___vfiprintf_internal_r+0x13a4>
 8012150:	1021883a 	mov	r16,r2
 8012154:	8029883a 	mov	r20,r16
 8012158:	8027883a 	mov	r19,r16
 801215c:	80002216 	blt	r16,zero,80121e8 <___vfiprintf_internal_r+0x1438>
 8012160:	05c200b4 	movhi	r23,2050
 8012164:	df002215 	stw	fp,136(sp)
 8012168:	bde8d204 	addi	r23,r23,-23736
 801216c:	003cfb06 	br	801155c <___vfiprintf_internal_r+0x7ac>
 8012170:	d9002217 	ldw	r4,136(sp)
 8012174:	d9402417 	ldw	r5,144(sp)
 8012178:	20800017 	ldw	r2,0(r4)
 801217c:	21000104 	addi	r4,r4,4
 8012180:	d9002215 	stw	r4,136(sp)
 8012184:	11400015 	stw	r5,0(r2)
 8012188:	003b3d06 	br	8010e80 <___vfiprintf_internal_r+0xd0>
 801218c:	014200b4 	movhi	r5,2050
 8012190:	29693104 	addi	r5,r5,-23356
 8012194:	d9402315 	stw	r5,140(sp)
 8012198:	d9401b17 	ldw	r5,108(sp)
 801219c:	29400044 	addi	r5,r5,1
 80121a0:	003e6d06 	br	8011b58 <___vfiprintf_internal_r+0xda8>
 80121a4:	8029883a 	mov	r20,r16
 80121a8:	dd401d83 	ldbu	r21,118(sp)
 80121ac:	df002215 	stw	fp,136(sp)
 80121b0:	0021883a 	mov	r16,zero
 80121b4:	003c0106 	br	80111bc <___vfiprintf_internal_r+0x40c>
 80121b8:	00c200b4 	movhi	r3,2050
 80121bc:	18e92d04 	addi	r3,r3,-23372
 80121c0:	d8c02315 	stw	r3,140(sp)
 80121c4:	280d883a 	mov	r6,r5
 80121c8:	003c6906 	br	8011370 <___vfiprintf_internal_r+0x5c0>
 80121cc:	802d883a 	mov	r22,r16
 80121d0:	0021883a 	mov	r16,zero
 80121d4:	003b5406 	br	8010f28 <___vfiprintf_internal_r+0x178>
 80121d8:	1823883a 	mov	r17,r3
 80121dc:	003cf306 	br	80115ac <___vfiprintf_internal_r+0x7fc>
 80121e0:	1823883a 	mov	r17,r3
 80121e4:	003cad06 	br	801149c <___vfiprintf_internal_r+0x6ec>
 80121e8:	0027883a 	mov	r19,zero
 80121ec:	003fdc06 	br	8012160 <___vfiprintf_internal_r+0x13b0>
 80121f0:	d9402217 	ldw	r5,136(sp)
 80121f4:	8005883a 	mov	r2,r16
 80121f8:	b0c00043 	ldbu	r3,1(r22)
 80121fc:	2c000017 	ldw	r16,0(r5)
 8012200:	29000104 	addi	r4,r5,4
 8012204:	d9002215 	stw	r4,136(sp)
 8012208:	102d883a 	mov	r22,r2
 801220c:	803fa50e 	bge	r16,zero,80120a4 <___vfiprintf_internal_r+0x12f4>
 8012210:	18c03fcc 	andi	r3,r3,255
 8012214:	18c0201c 	xori	r3,r3,128
 8012218:	043fffc4 	movi	r16,-1
 801221c:	18ffe004 	addi	r3,r3,-128
 8012220:	003b4006 	br	8010f24 <___vfiprintf_internal_r+0x174>
 8012224:	d9402303 	ldbu	r5,140(sp)
 8012228:	d9401d85 	stb	r5,118(sp)
 801222c:	003cae06 	br	80114e8 <___vfiprintf_internal_r+0x738>
 8012230:	d8c02303 	ldbu	r3,140(sp)
 8012234:	d8c01d85 	stb	r3,118(sp)
 8012238:	003d1406 	br	801168c <___vfiprintf_internal_r+0x8dc>
 801223c:	d8c02303 	ldbu	r3,140(sp)
 8012240:	d8c01d85 	stb	r3,118(sp)
 8012244:	003cca06 	br	8011570 <___vfiprintf_internal_r+0x7c0>
 8012248:	8880004c 	andi	r2,r17,1
 801224c:	002b883a 	mov	r21,zero
 8012250:	10000526 	beq	r2,zero,8012268 <___vfiprintf_internal_r+0x14b8>
 8012254:	00800c04 	movi	r2,48
 8012258:	d88019c5 	stb	r2,103(sp)
 801225c:	dd002817 	ldw	r20,160(sp)
 8012260:	ddc019c4 	addi	r23,sp,103
 8012264:	003bd506 	br	80111bc <___vfiprintf_internal_r+0x40c>
 8012268:	0029883a 	mov	r20,zero
 801226c:	ddc01a04 	addi	r23,sp,104
 8012270:	003bd206 	br	80111bc <___vfiprintf_internal_r+0x40c>
 8012274:	d9002303 	ldbu	r4,140(sp)
 8012278:	d9001d85 	stb	r4,118(sp)
 801227c:	003da606 	br	8011918 <___vfiprintf_internal_r+0xb68>
 8012280:	d8c02303 	ldbu	r3,140(sp)
 8012284:	d8c01d85 	stb	r3,118(sp)
 8012288:	003c7606 	br	8011464 <___vfiprintf_internal_r+0x6b4>
 801228c:	d8c02303 	ldbu	r3,140(sp)
 8012290:	d8c01d85 	stb	r3,118(sp)
 8012294:	003c6506 	br	801142c <___vfiprintf_internal_r+0x67c>
 8012298:	d9002303 	ldbu	r4,140(sp)
 801229c:	d9001d85 	stb	r4,118(sp)
 80122a0:	003d3d06 	br	8011798 <___vfiprintf_internal_r+0x9e8>
 80122a4:	d8c02303 	ldbu	r3,140(sp)
 80122a8:	d8c01d85 	stb	r3,118(sp)
 80122ac:	003d1d06 	br	8011724 <___vfiprintf_internal_r+0x974>
 80122b0:	d8c02303 	ldbu	r3,140(sp)
 80122b4:	d8c01d85 	stb	r3,118(sp)
 80122b8:	003d0306 	br	80116c8 <___vfiprintf_internal_r+0x918>

080122bc <__vfiprintf_internal>:
 80122bc:	008200b4 	movhi	r2,2050
 80122c0:	10b1bc04 	addi	r2,r2,-14608
 80122c4:	300f883a 	mov	r7,r6
 80122c8:	280d883a 	mov	r6,r5
 80122cc:	200b883a 	mov	r5,r4
 80122d0:	11000017 	ldw	r4,0(r2)
 80122d4:	8010db01 	jmpi	8010db0 <___vfiprintf_internal_r>

080122d8 <__sbprintf>:
 80122d8:	2880030b 	ldhu	r2,12(r5)
 80122dc:	2ac01917 	ldw	r11,100(r5)
 80122e0:	2a80038b 	ldhu	r10,14(r5)
 80122e4:	2a400717 	ldw	r9,28(r5)
 80122e8:	2a000917 	ldw	r8,36(r5)
 80122ec:	defee204 	addi	sp,sp,-1144
 80122f0:	00c10004 	movi	r3,1024
 80122f4:	dc011a15 	stw	r16,1128(sp)
 80122f8:	10bfff4c 	andi	r2,r2,65533
 80122fc:	2821883a 	mov	r16,r5
 8012300:	d8cb883a 	add	r5,sp,r3
 8012304:	dc811c15 	stw	r18,1136(sp)
 8012308:	dc411b15 	stw	r17,1132(sp)
 801230c:	dfc11d15 	stw	ra,1140(sp)
 8012310:	2025883a 	mov	r18,r4
 8012314:	d881030d 	sth	r2,1036(sp)
 8012318:	dac11915 	stw	r11,1124(sp)
 801231c:	da81038d 	sth	r10,1038(sp)
 8012320:	da410715 	stw	r9,1052(sp)
 8012324:	da010915 	stw	r8,1060(sp)
 8012328:	dec10015 	stw	sp,1024(sp)
 801232c:	dec10415 	stw	sp,1040(sp)
 8012330:	d8c10215 	stw	r3,1032(sp)
 8012334:	d8c10515 	stw	r3,1044(sp)
 8012338:	d8010615 	stw	zero,1048(sp)
 801233c:	8010db00 	call	8010db0 <___vfiprintf_internal_r>
 8012340:	1023883a 	mov	r17,r2
 8012344:	10000416 	blt	r2,zero,8012358 <__sbprintf+0x80>
 8012348:	d9410004 	addi	r5,sp,1024
 801234c:	9009883a 	mov	r4,r18
 8012350:	800e1940 	call	800e194 <_fflush_r>
 8012354:	10000d1e 	bne	r2,zero,801238c <__sbprintf+0xb4>
 8012358:	d881030b 	ldhu	r2,1036(sp)
 801235c:	1080100c 	andi	r2,r2,64
 8012360:	10000326 	beq	r2,zero,8012370 <__sbprintf+0x98>
 8012364:	8080030b 	ldhu	r2,12(r16)
 8012368:	10801014 	ori	r2,r2,64
 801236c:	8080030d 	sth	r2,12(r16)
 8012370:	8805883a 	mov	r2,r17
 8012374:	dfc11d17 	ldw	ra,1140(sp)
 8012378:	dc811c17 	ldw	r18,1136(sp)
 801237c:	dc411b17 	ldw	r17,1132(sp)
 8012380:	dc011a17 	ldw	r16,1128(sp)
 8012384:	dec11e04 	addi	sp,sp,1144
 8012388:	f800283a 	ret
 801238c:	047fffc4 	movi	r17,-1
 8012390:	003ff106 	br	8012358 <__sbprintf+0x80>

08012394 <_calloc_r>:
 8012394:	defffe04 	addi	sp,sp,-8
 8012398:	2805883a 	mov	r2,r5
 801239c:	dc000015 	stw	r16,0(sp)
 80123a0:	300b883a 	mov	r5,r6
 80123a4:	2021883a 	mov	r16,r4
 80123a8:	1009883a 	mov	r4,r2
 80123ac:	dfc00115 	stw	ra,4(sp)
 80123b0:	80087fc0 	call	80087fc <__mulsi3>
 80123b4:	100b883a 	mov	r5,r2
 80123b8:	8009883a 	mov	r4,r16
 80123bc:	80090d80 	call	80090d8 <_malloc_r>
 80123c0:	10002926 	beq	r2,zero,8012468 <_calloc_r+0xd4>
 80123c4:	11bfff17 	ldw	r6,-4(r2)
 80123c8:	1021883a 	mov	r16,r2
 80123cc:	00bfff04 	movi	r2,-4
 80123d0:	308c703a 	and	r6,r6,r2
 80123d4:	00c00904 	movi	r3,36
 80123d8:	308d883a 	add	r6,r6,r2
 80123dc:	19801636 	bltu	r3,r6,8012438 <_calloc_r+0xa4>
 80123e0:	008004c4 	movi	r2,19
 80123e4:	11800b2e 	bgeu	r2,r6,8012414 <_calloc_r+0x80>
 80123e8:	80000015 	stw	zero,0(r16)
 80123ec:	80000115 	stw	zero,4(r16)
 80123f0:	008006c4 	movi	r2,27
 80123f4:	11801a2e 	bgeu	r2,r6,8012460 <_calloc_r+0xcc>
 80123f8:	80000215 	stw	zero,8(r16)
 80123fc:	80000315 	stw	zero,12(r16)
 8012400:	30c0151e 	bne	r6,r3,8012458 <_calloc_r+0xc4>
 8012404:	80000415 	stw	zero,16(r16)
 8012408:	80800604 	addi	r2,r16,24
 801240c:	80000515 	stw	zero,20(r16)
 8012410:	00000106 	br	8012418 <_calloc_r+0x84>
 8012414:	8005883a 	mov	r2,r16
 8012418:	10000015 	stw	zero,0(r2)
 801241c:	10000115 	stw	zero,4(r2)
 8012420:	10000215 	stw	zero,8(r2)
 8012424:	8005883a 	mov	r2,r16
 8012428:	dfc00117 	ldw	ra,4(sp)
 801242c:	dc000017 	ldw	r16,0(sp)
 8012430:	dec00204 	addi	sp,sp,8
 8012434:	f800283a 	ret
 8012438:	000b883a 	mov	r5,zero
 801243c:	8009883a 	mov	r4,r16
 8012440:	8009a2c0 	call	8009a2c <memset>
 8012444:	8005883a 	mov	r2,r16
 8012448:	dfc00117 	ldw	ra,4(sp)
 801244c:	dc000017 	ldw	r16,0(sp)
 8012450:	dec00204 	addi	sp,sp,8
 8012454:	f800283a 	ret
 8012458:	80800404 	addi	r2,r16,16
 801245c:	003fee06 	br	8012418 <_calloc_r+0x84>
 8012460:	80800204 	addi	r2,r16,8
 8012464:	003fec06 	br	8012418 <_calloc_r+0x84>
 8012468:	0005883a 	mov	r2,zero
 801246c:	003fee06 	br	8012428 <_calloc_r+0x94>

08012470 <_fclose_r>:
 8012470:	28003926 	beq	r5,zero,8012558 <_fclose_r+0xe8>
 8012474:	defffc04 	addi	sp,sp,-16
 8012478:	dc400115 	stw	r17,4(sp)
 801247c:	dc000015 	stw	r16,0(sp)
 8012480:	dfc00315 	stw	ra,12(sp)
 8012484:	dc800215 	stw	r18,8(sp)
 8012488:	2023883a 	mov	r17,r4
 801248c:	2821883a 	mov	r16,r5
 8012490:	20000226 	beq	r4,zero,801249c <_fclose_r+0x2c>
 8012494:	20800e17 	ldw	r2,56(r4)
 8012498:	10002726 	beq	r2,zero,8012538 <_fclose_r+0xc8>
 801249c:	8080030f 	ldh	r2,12(r16)
 80124a0:	1000071e 	bne	r2,zero,80124c0 <_fclose_r+0x50>
 80124a4:	0005883a 	mov	r2,zero
 80124a8:	dfc00317 	ldw	ra,12(sp)
 80124ac:	dc800217 	ldw	r18,8(sp)
 80124b0:	dc400117 	ldw	r17,4(sp)
 80124b4:	dc000017 	ldw	r16,0(sp)
 80124b8:	dec00404 	addi	sp,sp,16
 80124bc:	f800283a 	ret
 80124c0:	800b883a 	mov	r5,r16
 80124c4:	8809883a 	mov	r4,r17
 80124c8:	800df780 	call	800df78 <__sflush_r>
 80124cc:	1025883a 	mov	r18,r2
 80124d0:	80800b17 	ldw	r2,44(r16)
 80124d4:	10000426 	beq	r2,zero,80124e8 <_fclose_r+0x78>
 80124d8:	81400717 	ldw	r5,28(r16)
 80124dc:	8809883a 	mov	r4,r17
 80124e0:	103ee83a 	callr	r2
 80124e4:	10001616 	blt	r2,zero,8012540 <_fclose_r+0xd0>
 80124e8:	8080030b 	ldhu	r2,12(r16)
 80124ec:	1080200c 	andi	r2,r2,128
 80124f0:	1000151e 	bne	r2,zero,8012548 <_fclose_r+0xd8>
 80124f4:	81400c17 	ldw	r5,48(r16)
 80124f8:	28000526 	beq	r5,zero,8012510 <_fclose_r+0xa0>
 80124fc:	80801004 	addi	r2,r16,64
 8012500:	28800226 	beq	r5,r2,801250c <_fclose_r+0x9c>
 8012504:	8809883a 	mov	r4,r17
 8012508:	800e7a00 	call	800e7a0 <_free_r>
 801250c:	80000c15 	stw	zero,48(r16)
 8012510:	81401117 	ldw	r5,68(r16)
 8012514:	28000326 	beq	r5,zero,8012524 <_fclose_r+0xb4>
 8012518:	8809883a 	mov	r4,r17
 801251c:	800e7a00 	call	800e7a0 <_free_r>
 8012520:	80001115 	stw	zero,68(r16)
 8012524:	800e5900 	call	800e590 <__sfp_lock_acquire>
 8012528:	8000030d 	sth	zero,12(r16)
 801252c:	800e5940 	call	800e594 <__sfp_lock_release>
 8012530:	9005883a 	mov	r2,r18
 8012534:	003fdc06 	br	80124a8 <_fclose_r+0x38>
 8012538:	800e5800 	call	800e580 <__sinit>
 801253c:	003fd706 	br	801249c <_fclose_r+0x2c>
 8012540:	04bfffc4 	movi	r18,-1
 8012544:	003fe806 	br	80124e8 <_fclose_r+0x78>
 8012548:	81400417 	ldw	r5,16(r16)
 801254c:	8809883a 	mov	r4,r17
 8012550:	800e7a00 	call	800e7a0 <_free_r>
 8012554:	003fe706 	br	80124f4 <_fclose_r+0x84>
 8012558:	0005883a 	mov	r2,zero
 801255c:	f800283a 	ret

08012560 <fclose>:
 8012560:	008200b4 	movhi	r2,2050
 8012564:	10b1bc04 	addi	r2,r2,-14608
 8012568:	200b883a 	mov	r5,r4
 801256c:	11000017 	ldw	r4,0(r2)
 8012570:	80124701 	jmpi	8012470 <_fclose_r>

08012574 <__fputwc>:
 8012574:	defff804 	addi	sp,sp,-32
 8012578:	dcc00415 	stw	r19,16(sp)
 801257c:	dc800315 	stw	r18,12(sp)
 8012580:	dc000115 	stw	r16,4(sp)
 8012584:	dfc00715 	stw	ra,28(sp)
 8012588:	dd400615 	stw	r21,24(sp)
 801258c:	dd000515 	stw	r20,20(sp)
 8012590:	dc400215 	stw	r17,8(sp)
 8012594:	2027883a 	mov	r19,r4
 8012598:	2825883a 	mov	r18,r5
 801259c:	3021883a 	mov	r16,r6
 80125a0:	800f1dc0 	call	800f1dc <__locale_mb_cur_max>
 80125a4:	00c00044 	movi	r3,1
 80125a8:	10c03e26 	beq	r2,r3,80126a4 <__fputwc+0x130>
 80125ac:	81c01704 	addi	r7,r16,92
 80125b0:	900d883a 	mov	r6,r18
 80125b4:	d80b883a 	mov	r5,sp
 80125b8:	9809883a 	mov	r4,r19
 80125bc:	80128d40 	call	80128d4 <_wcrtomb_r>
 80125c0:	1029883a 	mov	r20,r2
 80125c4:	00bfffc4 	movi	r2,-1
 80125c8:	a0802026 	beq	r20,r2,801264c <__fputwc+0xd8>
 80125cc:	d9400003 	ldbu	r5,0(sp)
 80125d0:	a0001c26 	beq	r20,zero,8012644 <__fputwc+0xd0>
 80125d4:	0023883a 	mov	r17,zero
 80125d8:	05400284 	movi	r21,10
 80125dc:	00000906 	br	8012604 <__fputwc+0x90>
 80125e0:	80800017 	ldw	r2,0(r16)
 80125e4:	11400005 	stb	r5,0(r2)
 80125e8:	80c00017 	ldw	r3,0(r16)
 80125ec:	18c00044 	addi	r3,r3,1
 80125f0:	80c00015 	stw	r3,0(r16)
 80125f4:	8c400044 	addi	r17,r17,1
 80125f8:	dc45883a 	add	r2,sp,r17
 80125fc:	8d00112e 	bgeu	r17,r20,8012644 <__fputwc+0xd0>
 8012600:	11400003 	ldbu	r5,0(r2)
 8012604:	80c00217 	ldw	r3,8(r16)
 8012608:	18ffffc4 	addi	r3,r3,-1
 801260c:	80c00215 	stw	r3,8(r16)
 8012610:	183ff30e 	bge	r3,zero,80125e0 <__fputwc+0x6c>
 8012614:	80800617 	ldw	r2,24(r16)
 8012618:	18801916 	blt	r3,r2,8012680 <__fputwc+0x10c>
 801261c:	80800017 	ldw	r2,0(r16)
 8012620:	11400005 	stb	r5,0(r2)
 8012624:	80800017 	ldw	r2,0(r16)
 8012628:	10c00003 	ldbu	r3,0(r2)
 801262c:	10800044 	addi	r2,r2,1
 8012630:	1d402326 	beq	r3,r21,80126c0 <__fputwc+0x14c>
 8012634:	80800015 	stw	r2,0(r16)
 8012638:	8c400044 	addi	r17,r17,1
 801263c:	dc45883a 	add	r2,sp,r17
 8012640:	8d3fef36 	bltu	r17,r20,8012600 <__fputwc+0x8c>
 8012644:	9005883a 	mov	r2,r18
 8012648:	00000406 	br	801265c <__fputwc+0xe8>
 801264c:	80c0030b 	ldhu	r3,12(r16)
 8012650:	a005883a 	mov	r2,r20
 8012654:	18c01014 	ori	r3,r3,64
 8012658:	80c0030d 	sth	r3,12(r16)
 801265c:	dfc00717 	ldw	ra,28(sp)
 8012660:	dd400617 	ldw	r21,24(sp)
 8012664:	dd000517 	ldw	r20,20(sp)
 8012668:	dcc00417 	ldw	r19,16(sp)
 801266c:	dc800317 	ldw	r18,12(sp)
 8012670:	dc400217 	ldw	r17,8(sp)
 8012674:	dc000117 	ldw	r16,4(sp)
 8012678:	dec00804 	addi	sp,sp,32
 801267c:	f800283a 	ret
 8012680:	800d883a 	mov	r6,r16
 8012684:	29403fcc 	andi	r5,r5,255
 8012688:	9809883a 	mov	r4,r19
 801268c:	801277c0 	call	801277c <__swbuf_r>
 8012690:	10bfffe0 	cmpeqi	r2,r2,-1
 8012694:	10803fcc 	andi	r2,r2,255
 8012698:	103fd626 	beq	r2,zero,80125f4 <__fputwc+0x80>
 801269c:	00bfffc4 	movi	r2,-1
 80126a0:	003fee06 	br	801265c <__fputwc+0xe8>
 80126a4:	90ffffc4 	addi	r3,r18,-1
 80126a8:	01003f84 	movi	r4,254
 80126ac:	20ffbf36 	bltu	r4,r3,80125ac <__fputwc+0x38>
 80126b0:	900b883a 	mov	r5,r18
 80126b4:	dc800005 	stb	r18,0(sp)
 80126b8:	1029883a 	mov	r20,r2
 80126bc:	003fc506 	br	80125d4 <__fputwc+0x60>
 80126c0:	800d883a 	mov	r6,r16
 80126c4:	a80b883a 	mov	r5,r21
 80126c8:	9809883a 	mov	r4,r19
 80126cc:	801277c0 	call	801277c <__swbuf_r>
 80126d0:	10bfffe0 	cmpeqi	r2,r2,-1
 80126d4:	003fef06 	br	8012694 <__fputwc+0x120>

080126d8 <_fputwc_r>:
 80126d8:	3080030b 	ldhu	r2,12(r6)
 80126dc:	10c8000c 	andi	r3,r2,8192
 80126e0:	1800051e 	bne	r3,zero,80126f8 <_fputwc_r+0x20>
 80126e4:	30c01917 	ldw	r3,100(r6)
 80126e8:	10880014 	ori	r2,r2,8192
 80126ec:	3080030d 	sth	r2,12(r6)
 80126f0:	18880014 	ori	r2,r3,8192
 80126f4:	30801915 	stw	r2,100(r6)
 80126f8:	80125741 	jmpi	8012574 <__fputwc>

080126fc <fputwc>:
 80126fc:	008200b4 	movhi	r2,2050
 8012700:	defffc04 	addi	sp,sp,-16
 8012704:	10b1bc04 	addi	r2,r2,-14608
 8012708:	dc000115 	stw	r16,4(sp)
 801270c:	14000017 	ldw	r16,0(r2)
 8012710:	dc400215 	stw	r17,8(sp)
 8012714:	dfc00315 	stw	ra,12(sp)
 8012718:	2023883a 	mov	r17,r4
 801271c:	80000226 	beq	r16,zero,8012728 <fputwc+0x2c>
 8012720:	80800e17 	ldw	r2,56(r16)
 8012724:	10001026 	beq	r2,zero,8012768 <fputwc+0x6c>
 8012728:	2880030b 	ldhu	r2,12(r5)
 801272c:	10c8000c 	andi	r3,r2,8192
 8012730:	1800051e 	bne	r3,zero,8012748 <fputwc+0x4c>
 8012734:	28c01917 	ldw	r3,100(r5)
 8012738:	10880014 	ori	r2,r2,8192
 801273c:	2880030d 	sth	r2,12(r5)
 8012740:	18880014 	ori	r2,r3,8192
 8012744:	28801915 	stw	r2,100(r5)
 8012748:	280d883a 	mov	r6,r5
 801274c:	8009883a 	mov	r4,r16
 8012750:	880b883a 	mov	r5,r17
 8012754:	dfc00317 	ldw	ra,12(sp)
 8012758:	dc400217 	ldw	r17,8(sp)
 801275c:	dc000117 	ldw	r16,4(sp)
 8012760:	dec00404 	addi	sp,sp,16
 8012764:	80125741 	jmpi	8012574 <__fputwc>
 8012768:	8009883a 	mov	r4,r16
 801276c:	d9400015 	stw	r5,0(sp)
 8012770:	800e5800 	call	800e580 <__sinit>
 8012774:	d9400017 	ldw	r5,0(sp)
 8012778:	003feb06 	br	8012728 <fputwc+0x2c>

0801277c <__swbuf_r>:
 801277c:	defffb04 	addi	sp,sp,-20
 8012780:	dcc00315 	stw	r19,12(sp)
 8012784:	dc800215 	stw	r18,8(sp)
 8012788:	dc000015 	stw	r16,0(sp)
 801278c:	dfc00415 	stw	ra,16(sp)
 8012790:	dc400115 	stw	r17,4(sp)
 8012794:	2025883a 	mov	r18,r4
 8012798:	2827883a 	mov	r19,r5
 801279c:	3021883a 	mov	r16,r6
 80127a0:	20000226 	beq	r4,zero,80127ac <__swbuf_r+0x30>
 80127a4:	20800e17 	ldw	r2,56(r4)
 80127a8:	10004226 	beq	r2,zero,80128b4 <__swbuf_r+0x138>
 80127ac:	80800617 	ldw	r2,24(r16)
 80127b0:	8100030b 	ldhu	r4,12(r16)
 80127b4:	80800215 	stw	r2,8(r16)
 80127b8:	2080020c 	andi	r2,r4,8
 80127bc:	10003626 	beq	r2,zero,8012898 <__swbuf_r+0x11c>
 80127c0:	80c00417 	ldw	r3,16(r16)
 80127c4:	18003426 	beq	r3,zero,8012898 <__swbuf_r+0x11c>
 80127c8:	2088000c 	andi	r2,r4,8192
 80127cc:	9c403fcc 	andi	r17,r19,255
 80127d0:	10001a26 	beq	r2,zero,801283c <__swbuf_r+0xc0>
 80127d4:	80800017 	ldw	r2,0(r16)
 80127d8:	81000517 	ldw	r4,20(r16)
 80127dc:	10c7c83a 	sub	r3,r2,r3
 80127e0:	1900200e 	bge	r3,r4,8012864 <__swbuf_r+0xe8>
 80127e4:	18c00044 	addi	r3,r3,1
 80127e8:	81000217 	ldw	r4,8(r16)
 80127ec:	11400044 	addi	r5,r2,1
 80127f0:	81400015 	stw	r5,0(r16)
 80127f4:	213fffc4 	addi	r4,r4,-1
 80127f8:	81000215 	stw	r4,8(r16)
 80127fc:	14c00005 	stb	r19,0(r2)
 8012800:	80800517 	ldw	r2,20(r16)
 8012804:	10c01e26 	beq	r2,r3,8012880 <__swbuf_r+0x104>
 8012808:	8080030b 	ldhu	r2,12(r16)
 801280c:	1080004c 	andi	r2,r2,1
 8012810:	10000226 	beq	r2,zero,801281c <__swbuf_r+0xa0>
 8012814:	00800284 	movi	r2,10
 8012818:	88801926 	beq	r17,r2,8012880 <__swbuf_r+0x104>
 801281c:	8805883a 	mov	r2,r17
 8012820:	dfc00417 	ldw	ra,16(sp)
 8012824:	dcc00317 	ldw	r19,12(sp)
 8012828:	dc800217 	ldw	r18,8(sp)
 801282c:	dc400117 	ldw	r17,4(sp)
 8012830:	dc000017 	ldw	r16,0(sp)
 8012834:	dec00504 	addi	sp,sp,20
 8012838:	f800283a 	ret
 801283c:	81401917 	ldw	r5,100(r16)
 8012840:	00b7ffc4 	movi	r2,-8193
 8012844:	21080014 	ori	r4,r4,8192
 8012848:	2884703a 	and	r2,r5,r2
 801284c:	80801915 	stw	r2,100(r16)
 8012850:	80800017 	ldw	r2,0(r16)
 8012854:	8100030d 	sth	r4,12(r16)
 8012858:	81000517 	ldw	r4,20(r16)
 801285c:	10c7c83a 	sub	r3,r2,r3
 8012860:	193fe016 	blt	r3,r4,80127e4 <__swbuf_r+0x68>
 8012864:	800b883a 	mov	r5,r16
 8012868:	9009883a 	mov	r4,r18
 801286c:	800e1940 	call	800e194 <_fflush_r>
 8012870:	1000071e 	bne	r2,zero,8012890 <__swbuf_r+0x114>
 8012874:	80800017 	ldw	r2,0(r16)
 8012878:	00c00044 	movi	r3,1
 801287c:	003fda06 	br	80127e8 <__swbuf_r+0x6c>
 8012880:	800b883a 	mov	r5,r16
 8012884:	9009883a 	mov	r4,r18
 8012888:	800e1940 	call	800e194 <_fflush_r>
 801288c:	103fe326 	beq	r2,zero,801281c <__swbuf_r+0xa0>
 8012890:	00bfffc4 	movi	r2,-1
 8012894:	003fe206 	br	8012820 <__swbuf_r+0xa4>
 8012898:	800b883a 	mov	r5,r16
 801289c:	9009883a 	mov	r4,r18
 80128a0:	800c5200 	call	800c520 <__swsetup_r>
 80128a4:	103ffa1e 	bne	r2,zero,8012890 <__swbuf_r+0x114>
 80128a8:	8100030b 	ldhu	r4,12(r16)
 80128ac:	80c00417 	ldw	r3,16(r16)
 80128b0:	003fc506 	br	80127c8 <__swbuf_r+0x4c>
 80128b4:	800e5800 	call	800e580 <__sinit>
 80128b8:	003fbc06 	br	80127ac <__swbuf_r+0x30>

080128bc <__swbuf>:
 80128bc:	008200b4 	movhi	r2,2050
 80128c0:	10b1bc04 	addi	r2,r2,-14608
 80128c4:	280d883a 	mov	r6,r5
 80128c8:	200b883a 	mov	r5,r4
 80128cc:	11000017 	ldw	r4,0(r2)
 80128d0:	801277c1 	jmpi	801277c <__swbuf_r>

080128d4 <_wcrtomb_r>:
 80128d4:	defff604 	addi	sp,sp,-40
 80128d8:	008200b4 	movhi	r2,2050
 80128dc:	dc800815 	stw	r18,32(sp)
 80128e0:	dc400715 	stw	r17,28(sp)
 80128e4:	dc000615 	stw	r16,24(sp)
 80128e8:	10b1c004 	addi	r2,r2,-14592
 80128ec:	dfc00915 	stw	ra,36(sp)
 80128f0:	2021883a 	mov	r16,r4
 80128f4:	3823883a 	mov	r17,r7
 80128f8:	14800017 	ldw	r18,0(r2)
 80128fc:	28001426 	beq	r5,zero,8012950 <_wcrtomb_r+0x7c>
 8012900:	d9400415 	stw	r5,16(sp)
 8012904:	d9800515 	stw	r6,20(sp)
 8012908:	800f1d00 	call	800f1d0 <__locale_charset>
 801290c:	d9800517 	ldw	r6,20(sp)
 8012910:	d9400417 	ldw	r5,16(sp)
 8012914:	100f883a 	mov	r7,r2
 8012918:	dc400015 	stw	r17,0(sp)
 801291c:	8009883a 	mov	r4,r16
 8012920:	903ee83a 	callr	r18
 8012924:	00ffffc4 	movi	r3,-1
 8012928:	10c0031e 	bne	r2,r3,8012938 <_wcrtomb_r+0x64>
 801292c:	88000015 	stw	zero,0(r17)
 8012930:	00c02284 	movi	r3,138
 8012934:	80c00015 	stw	r3,0(r16)
 8012938:	dfc00917 	ldw	ra,36(sp)
 801293c:	dc800817 	ldw	r18,32(sp)
 8012940:	dc400717 	ldw	r17,28(sp)
 8012944:	dc000617 	ldw	r16,24(sp)
 8012948:	dec00a04 	addi	sp,sp,40
 801294c:	f800283a 	ret
 8012950:	800f1d00 	call	800f1d0 <__locale_charset>
 8012954:	100f883a 	mov	r7,r2
 8012958:	dc400015 	stw	r17,0(sp)
 801295c:	000d883a 	mov	r6,zero
 8012960:	d9400104 	addi	r5,sp,4
 8012964:	8009883a 	mov	r4,r16
 8012968:	903ee83a 	callr	r18
 801296c:	003fed06 	br	8012924 <_wcrtomb_r+0x50>

08012970 <wcrtomb>:
 8012970:	defff604 	addi	sp,sp,-40
 8012974:	008200b4 	movhi	r2,2050
 8012978:	dc800615 	stw	r18,24(sp)
 801297c:	dc400515 	stw	r17,20(sp)
 8012980:	10b1bc04 	addi	r2,r2,-14608
 8012984:	dfc00915 	stw	ra,36(sp)
 8012988:	dd000815 	stw	r20,32(sp)
 801298c:	dcc00715 	stw	r19,28(sp)
 8012990:	dc000415 	stw	r16,16(sp)
 8012994:	3025883a 	mov	r18,r6
 8012998:	14400017 	ldw	r17,0(r2)
 801299c:	20001926 	beq	r4,zero,8012a04 <wcrtomb+0x94>
 80129a0:	008200b4 	movhi	r2,2050
 80129a4:	10b1c004 	addi	r2,r2,-14592
 80129a8:	15000017 	ldw	r20,0(r2)
 80129ac:	2021883a 	mov	r16,r4
 80129b0:	2827883a 	mov	r19,r5
 80129b4:	800f1d00 	call	800f1d0 <__locale_charset>
 80129b8:	100f883a 	mov	r7,r2
 80129bc:	dc800015 	stw	r18,0(sp)
 80129c0:	980d883a 	mov	r6,r19
 80129c4:	800b883a 	mov	r5,r16
 80129c8:	8809883a 	mov	r4,r17
 80129cc:	a03ee83a 	callr	r20
 80129d0:	00ffffc4 	movi	r3,-1
 80129d4:	10c0031e 	bne	r2,r3,80129e4 <wcrtomb+0x74>
 80129d8:	90000015 	stw	zero,0(r18)
 80129dc:	00c02284 	movi	r3,138
 80129e0:	88c00015 	stw	r3,0(r17)
 80129e4:	dfc00917 	ldw	ra,36(sp)
 80129e8:	dd000817 	ldw	r20,32(sp)
 80129ec:	dcc00717 	ldw	r19,28(sp)
 80129f0:	dc800617 	ldw	r18,24(sp)
 80129f4:	dc400517 	ldw	r17,20(sp)
 80129f8:	dc000417 	ldw	r16,16(sp)
 80129fc:	dec00a04 	addi	sp,sp,40
 8012a00:	f800283a 	ret
 8012a04:	008200b4 	movhi	r2,2050
 8012a08:	10b1c004 	addi	r2,r2,-14592
 8012a0c:	14000017 	ldw	r16,0(r2)
 8012a10:	800f1d00 	call	800f1d0 <__locale_charset>
 8012a14:	100f883a 	mov	r7,r2
 8012a18:	dc800015 	stw	r18,0(sp)
 8012a1c:	000d883a 	mov	r6,zero
 8012a20:	d9400104 	addi	r5,sp,4
 8012a24:	8809883a 	mov	r4,r17
 8012a28:	803ee83a 	callr	r16
 8012a2c:	003fe806 	br	80129d0 <wcrtomb+0x60>

08012a30 <__ascii_wctomb>:
 8012a30:	28000526 	beq	r5,zero,8012a48 <__ascii_wctomb+0x18>
 8012a34:	00803fc4 	movi	r2,255
 8012a38:	11800536 	bltu	r2,r6,8012a50 <__ascii_wctomb+0x20>
 8012a3c:	29800005 	stb	r6,0(r5)
 8012a40:	00800044 	movi	r2,1
 8012a44:	f800283a 	ret
 8012a48:	0005883a 	mov	r2,zero
 8012a4c:	f800283a 	ret
 8012a50:	00802284 	movi	r2,138
 8012a54:	20800015 	stw	r2,0(r4)
 8012a58:	00bfffc4 	movi	r2,-1
 8012a5c:	f800283a 	ret

08012a60 <_wctomb_r>:
 8012a60:	008200b4 	movhi	r2,2050
 8012a64:	defff904 	addi	sp,sp,-28
 8012a68:	10b1c004 	addi	r2,r2,-14592
 8012a6c:	dfc00615 	stw	ra,24(sp)
 8012a70:	dc400515 	stw	r17,20(sp)
 8012a74:	dc000415 	stw	r16,16(sp)
 8012a78:	3823883a 	mov	r17,r7
 8012a7c:	14000017 	ldw	r16,0(r2)
 8012a80:	d9000115 	stw	r4,4(sp)
 8012a84:	d9400215 	stw	r5,8(sp)
 8012a88:	d9800315 	stw	r6,12(sp)
 8012a8c:	800f1d00 	call	800f1d0 <__locale_charset>
 8012a90:	d9800317 	ldw	r6,12(sp)
 8012a94:	d9400217 	ldw	r5,8(sp)
 8012a98:	d9000117 	ldw	r4,4(sp)
 8012a9c:	100f883a 	mov	r7,r2
 8012aa0:	dc400015 	stw	r17,0(sp)
 8012aa4:	803ee83a 	callr	r16
 8012aa8:	dfc00617 	ldw	ra,24(sp)
 8012aac:	dc400517 	ldw	r17,20(sp)
 8012ab0:	dc000417 	ldw	r16,16(sp)
 8012ab4:	dec00704 	addi	sp,sp,28
 8012ab8:	f800283a 	ret

08012abc <__udivdi3>:
 8012abc:	defff404 	addi	sp,sp,-48
 8012ac0:	dcc00515 	stw	r19,20(sp)
 8012ac4:	dc000215 	stw	r16,8(sp)
 8012ac8:	dfc00b15 	stw	ra,44(sp)
 8012acc:	df000a15 	stw	fp,40(sp)
 8012ad0:	ddc00915 	stw	r23,36(sp)
 8012ad4:	dd800815 	stw	r22,32(sp)
 8012ad8:	dd400715 	stw	r21,28(sp)
 8012adc:	dd000615 	stw	r20,24(sp)
 8012ae0:	dc800415 	stw	r18,16(sp)
 8012ae4:	dc400315 	stw	r17,12(sp)
 8012ae8:	2027883a 	mov	r19,r4
 8012aec:	2821883a 	mov	r16,r5
 8012af0:	3800461e 	bne	r7,zero,8012c0c <__udivdi3+0x150>
 8012af4:	3023883a 	mov	r17,r6
 8012af8:	2025883a 	mov	r18,r4
 8012afc:	2980572e 	bgeu	r5,r6,8012c5c <__udivdi3+0x1a0>
 8012b00:	00bfffd4 	movui	r2,65535
 8012b04:	282d883a 	mov	r22,r5
 8012b08:	1180b236 	bltu	r2,r6,8012dd4 <__udivdi3+0x318>
 8012b0c:	00803fc4 	movi	r2,255
 8012b10:	1185803a 	cmpltu	r2,r2,r6
 8012b14:	100490fa 	slli	r2,r2,3
 8012b18:	3086d83a 	srl	r3,r6,r2
 8012b1c:	010200b4 	movhi	r4,2050
 8012b20:	21293504 	addi	r4,r4,-23340
 8012b24:	20c7883a 	add	r3,r4,r3
 8012b28:	18c00003 	ldbu	r3,0(r3)
 8012b2c:	1885883a 	add	r2,r3,r2
 8012b30:	00c00804 	movi	r3,32
 8012b34:	1887c83a 	sub	r3,r3,r2
 8012b38:	18000526 	beq	r3,zero,8012b50 <__udivdi3+0x94>
 8012b3c:	80e0983a 	sll	r16,r16,r3
 8012b40:	9884d83a 	srl	r2,r19,r2
 8012b44:	30e2983a 	sll	r17,r6,r3
 8012b48:	98e4983a 	sll	r18,r19,r3
 8012b4c:	142cb03a 	or	r22,r2,r16
 8012b50:	882ad43a 	srli	r21,r17,16
 8012b54:	b009883a 	mov	r4,r22
 8012b58:	8d3fffcc 	andi	r20,r17,65535
 8012b5c:	a80b883a 	mov	r5,r21
 8012b60:	80087a40 	call	80087a4 <__umodsi3>
 8012b64:	b009883a 	mov	r4,r22
 8012b68:	a80b883a 	mov	r5,r21
 8012b6c:	1027883a 	mov	r19,r2
 8012b70:	80087400 	call	8008740 <__udivsi3>
 8012b74:	100b883a 	mov	r5,r2
 8012b78:	a009883a 	mov	r4,r20
 8012b7c:	102d883a 	mov	r22,r2
 8012b80:	80087fc0 	call	80087fc <__mulsi3>
 8012b84:	9826943a 	slli	r19,r19,16
 8012b88:	9006d43a 	srli	r3,r18,16
 8012b8c:	1cc6b03a 	or	r3,r3,r19
 8012b90:	1880052e 	bgeu	r3,r2,8012ba8 <__udivdi3+0xec>
 8012b94:	1c47883a 	add	r3,r3,r17
 8012b98:	b13fffc4 	addi	r4,r22,-1
 8012b9c:	1c400136 	bltu	r3,r17,8012ba4 <__udivdi3+0xe8>
 8012ba0:	18814236 	bltu	r3,r2,80130ac <__udivdi3+0x5f0>
 8012ba4:	202d883a 	mov	r22,r4
 8012ba8:	18a1c83a 	sub	r16,r3,r2
 8012bac:	8009883a 	mov	r4,r16
 8012bb0:	a80b883a 	mov	r5,r21
 8012bb4:	80087a40 	call	80087a4 <__umodsi3>
 8012bb8:	1027883a 	mov	r19,r2
 8012bbc:	8009883a 	mov	r4,r16
 8012bc0:	a80b883a 	mov	r5,r21
 8012bc4:	9826943a 	slli	r19,r19,16
 8012bc8:	80087400 	call	8008740 <__udivsi3>
 8012bcc:	100b883a 	mov	r5,r2
 8012bd0:	a009883a 	mov	r4,r20
 8012bd4:	94bfffcc 	andi	r18,r18,65535
 8012bd8:	1021883a 	mov	r16,r2
 8012bdc:	94e4b03a 	or	r18,r18,r19
 8012be0:	80087fc0 	call	80087fc <__mulsi3>
 8012be4:	9080052e 	bgeu	r18,r2,8012bfc <__udivdi3+0x140>
 8012be8:	8ca5883a 	add	r18,r17,r18
 8012bec:	80ffffc4 	addi	r3,r16,-1
 8012bf0:	94410c36 	bltu	r18,r17,8013024 <__udivdi3+0x568>
 8012bf4:	90810b2e 	bgeu	r18,r2,8013024 <__udivdi3+0x568>
 8012bf8:	843fff84 	addi	r16,r16,-2
 8012bfc:	b004943a 	slli	r2,r22,16
 8012c00:	0007883a 	mov	r3,zero
 8012c04:	1404b03a 	or	r2,r2,r16
 8012c08:	00005e06 	br	8012d84 <__udivdi3+0x2c8>
 8012c0c:	29c05b36 	bltu	r5,r7,8012d7c <__udivdi3+0x2c0>
 8012c10:	00bfffd4 	movui	r2,65535
 8012c14:	11c0672e 	bgeu	r2,r7,8012db4 <__udivdi3+0x2f8>
 8012c18:	00804034 	movhi	r2,256
 8012c1c:	10bfffc4 	addi	r2,r2,-1
 8012c20:	11c10a36 	bltu	r2,r7,801304c <__udivdi3+0x590>
 8012c24:	00800404 	movi	r2,16
 8012c28:	3886d83a 	srl	r3,r7,r2
 8012c2c:	010200b4 	movhi	r4,2050
 8012c30:	21293504 	addi	r4,r4,-23340
 8012c34:	20c7883a 	add	r3,r4,r3
 8012c38:	18c00003 	ldbu	r3,0(r3)
 8012c3c:	05c00804 	movi	r23,32
 8012c40:	1885883a 	add	r2,r3,r2
 8012c44:	b8afc83a 	sub	r23,r23,r2
 8012c48:	b800671e 	bne	r23,zero,8012de8 <__udivdi3+0x32c>
 8012c4c:	3c010536 	bltu	r7,r16,8013064 <__udivdi3+0x5a8>
 8012c50:	9985403a 	cmpgeu	r2,r19,r6
 8012c54:	0007883a 	mov	r3,zero
 8012c58:	00004a06 	br	8012d84 <__udivdi3+0x2c8>
 8012c5c:	3000041e 	bne	r6,zero,8012c70 <__udivdi3+0x1b4>
 8012c60:	000b883a 	mov	r5,zero
 8012c64:	01000044 	movi	r4,1
 8012c68:	80087400 	call	8008740 <__udivsi3>
 8012c6c:	1023883a 	mov	r17,r2
 8012c70:	00bfffd4 	movui	r2,65535
 8012c74:	1440532e 	bgeu	r2,r17,8012dc4 <__udivdi3+0x308>
 8012c78:	00804034 	movhi	r2,256
 8012c7c:	10bfffc4 	addi	r2,r2,-1
 8012c80:	1440f436 	bltu	r2,r17,8013054 <__udivdi3+0x598>
 8012c84:	00800404 	movi	r2,16
 8012c88:	8886d83a 	srl	r3,r17,r2
 8012c8c:	010200b4 	movhi	r4,2050
 8012c90:	21293504 	addi	r4,r4,-23340
 8012c94:	20c7883a 	add	r3,r4,r3
 8012c98:	18c00003 	ldbu	r3,0(r3)
 8012c9c:	1885883a 	add	r2,r3,r2
 8012ca0:	00c00804 	movi	r3,32
 8012ca4:	1887c83a 	sub	r3,r3,r2
 8012ca8:	1800a51e 	bne	r3,zero,8012f40 <__udivdi3+0x484>
 8012cac:	882ad43a 	srli	r21,r17,16
 8012cb0:	8461c83a 	sub	r16,r16,r17
 8012cb4:	8d3fffcc 	andi	r20,r17,65535
 8012cb8:	00c00044 	movi	r3,1
 8012cbc:	a80b883a 	mov	r5,r21
 8012cc0:	8009883a 	mov	r4,r16
 8012cc4:	d8c00115 	stw	r3,4(sp)
 8012cc8:	80087a40 	call	80087a4 <__umodsi3>
 8012ccc:	a80b883a 	mov	r5,r21
 8012cd0:	8009883a 	mov	r4,r16
 8012cd4:	1027883a 	mov	r19,r2
 8012cd8:	80087400 	call	8008740 <__udivsi3>
 8012cdc:	a00b883a 	mov	r5,r20
 8012ce0:	1009883a 	mov	r4,r2
 8012ce4:	102d883a 	mov	r22,r2
 8012ce8:	80087fc0 	call	80087fc <__mulsi3>
 8012cec:	9826943a 	slli	r19,r19,16
 8012cf0:	900ed43a 	srli	r7,r18,16
 8012cf4:	d8c00117 	ldw	r3,4(sp)
 8012cf8:	3cceb03a 	or	r7,r7,r19
 8012cfc:	3880052e 	bgeu	r7,r2,8012d14 <__udivdi3+0x258>
 8012d00:	3c4f883a 	add	r7,r7,r17
 8012d04:	b13fffc4 	addi	r4,r22,-1
 8012d08:	3c400136 	bltu	r7,r17,8012d10 <__udivdi3+0x254>
 8012d0c:	3880e436 	bltu	r7,r2,80130a0 <__udivdi3+0x5e4>
 8012d10:	202d883a 	mov	r22,r4
 8012d14:	38a1c83a 	sub	r16,r7,r2
 8012d18:	8009883a 	mov	r4,r16
 8012d1c:	a80b883a 	mov	r5,r21
 8012d20:	d8c00115 	stw	r3,4(sp)
 8012d24:	80087a40 	call	80087a4 <__umodsi3>
 8012d28:	1027883a 	mov	r19,r2
 8012d2c:	8009883a 	mov	r4,r16
 8012d30:	a80b883a 	mov	r5,r21
 8012d34:	9826943a 	slli	r19,r19,16
 8012d38:	80087400 	call	8008740 <__udivsi3>
 8012d3c:	a00b883a 	mov	r5,r20
 8012d40:	1009883a 	mov	r4,r2
 8012d44:	94bfffcc 	andi	r18,r18,65535
 8012d48:	1021883a 	mov	r16,r2
 8012d4c:	94e4b03a 	or	r18,r18,r19
 8012d50:	80087fc0 	call	80087fc <__mulsi3>
 8012d54:	d8c00117 	ldw	r3,4(sp)
 8012d58:	9080052e 	bgeu	r18,r2,8012d70 <__udivdi3+0x2b4>
 8012d5c:	8ca5883a 	add	r18,r17,r18
 8012d60:	813fffc4 	addi	r4,r16,-1
 8012d64:	9440ad36 	bltu	r18,r17,801301c <__udivdi3+0x560>
 8012d68:	9080ac2e 	bgeu	r18,r2,801301c <__udivdi3+0x560>
 8012d6c:	843fff84 	addi	r16,r16,-2
 8012d70:	b004943a 	slli	r2,r22,16
 8012d74:	1404b03a 	or	r2,r2,r16
 8012d78:	00000206 	br	8012d84 <__udivdi3+0x2c8>
 8012d7c:	0007883a 	mov	r3,zero
 8012d80:	0005883a 	mov	r2,zero
 8012d84:	dfc00b17 	ldw	ra,44(sp)
 8012d88:	df000a17 	ldw	fp,40(sp)
 8012d8c:	ddc00917 	ldw	r23,36(sp)
 8012d90:	dd800817 	ldw	r22,32(sp)
 8012d94:	dd400717 	ldw	r21,28(sp)
 8012d98:	dd000617 	ldw	r20,24(sp)
 8012d9c:	dcc00517 	ldw	r19,20(sp)
 8012da0:	dc800417 	ldw	r18,16(sp)
 8012da4:	dc400317 	ldw	r17,12(sp)
 8012da8:	dc000217 	ldw	r16,8(sp)
 8012dac:	dec00c04 	addi	sp,sp,48
 8012db0:	f800283a 	ret
 8012db4:	00803fc4 	movi	r2,255
 8012db8:	11c5803a 	cmpltu	r2,r2,r7
 8012dbc:	100490fa 	slli	r2,r2,3
 8012dc0:	003f9906 	br	8012c28 <__udivdi3+0x16c>
 8012dc4:	00803fc4 	movi	r2,255
 8012dc8:	1445803a 	cmpltu	r2,r2,r17
 8012dcc:	100490fa 	slli	r2,r2,3
 8012dd0:	003fad06 	br	8012c88 <__udivdi3+0x1cc>
 8012dd4:	00804034 	movhi	r2,256
 8012dd8:	10bfffc4 	addi	r2,r2,-1
 8012ddc:	11809f36 	bltu	r2,r6,801305c <__udivdi3+0x5a0>
 8012de0:	00800404 	movi	r2,16
 8012de4:	003f4c06 	br	8012b18 <__udivdi3+0x5c>
 8012de8:	3dce983a 	sll	r7,r7,r23
 8012dec:	30b8d83a 	srl	fp,r6,r2
 8012df0:	80a2d83a 	srl	r17,r16,r2
 8012df4:	35cc983a 	sll	r6,r6,r23
 8012df8:	3f38b03a 	or	fp,r7,fp
 8012dfc:	e024d43a 	srli	r18,fp,16
 8012e00:	9884d83a 	srl	r2,r19,r2
 8012e04:	85e0983a 	sll	r16,r16,r23
 8012e08:	8809883a 	mov	r4,r17
 8012e0c:	900b883a 	mov	r5,r18
 8012e10:	d9800015 	stw	r6,0(sp)
 8012e14:	1420b03a 	or	r16,r2,r16
 8012e18:	80087a40 	call	80087a4 <__umodsi3>
 8012e1c:	900b883a 	mov	r5,r18
 8012e20:	8809883a 	mov	r4,r17
 8012e24:	1029883a 	mov	r20,r2
 8012e28:	e5bfffcc 	andi	r22,fp,65535
 8012e2c:	80087400 	call	8008740 <__udivsi3>
 8012e30:	100b883a 	mov	r5,r2
 8012e34:	b009883a 	mov	r4,r22
 8012e38:	102b883a 	mov	r21,r2
 8012e3c:	80087fc0 	call	80087fc <__mulsi3>
 8012e40:	a028943a 	slli	r20,r20,16
 8012e44:	8006d43a 	srli	r3,r16,16
 8012e48:	1d06b03a 	or	r3,r3,r20
 8012e4c:	1880042e 	bgeu	r3,r2,8012e60 <__udivdi3+0x3a4>
 8012e50:	1f07883a 	add	r3,r3,fp
 8012e54:	a93fffc4 	addi	r4,r21,-1
 8012e58:	1f00892e 	bgeu	r3,fp,8013080 <__udivdi3+0x5c4>
 8012e5c:	202b883a 	mov	r21,r4
 8012e60:	18a3c83a 	sub	r17,r3,r2
 8012e64:	8809883a 	mov	r4,r17
 8012e68:	900b883a 	mov	r5,r18
 8012e6c:	80087a40 	call	80087a4 <__umodsi3>
 8012e70:	1029883a 	mov	r20,r2
 8012e74:	8809883a 	mov	r4,r17
 8012e78:	900b883a 	mov	r5,r18
 8012e7c:	a028943a 	slli	r20,r20,16
 8012e80:	80087400 	call	8008740 <__udivsi3>
 8012e84:	100b883a 	mov	r5,r2
 8012e88:	b009883a 	mov	r4,r22
 8012e8c:	843fffcc 	andi	r16,r16,65535
 8012e90:	1023883a 	mov	r17,r2
 8012e94:	8520b03a 	or	r16,r16,r20
 8012e98:	80087fc0 	call	80087fc <__mulsi3>
 8012e9c:	8080042e 	bgeu	r16,r2,8012eb0 <__udivdi3+0x3f4>
 8012ea0:	8721883a 	add	r16,r16,fp
 8012ea4:	88ffffc4 	addi	r3,r17,-1
 8012ea8:	8700712e 	bgeu	r16,fp,8013070 <__udivdi3+0x5b4>
 8012eac:	1823883a 	mov	r17,r3
 8012eb0:	a80e943a 	slli	r7,r21,16
 8012eb4:	d8c00017 	ldw	r3,0(sp)
 8012eb8:	80a1c83a 	sub	r16,r16,r2
 8012ebc:	3c64b03a 	or	r18,r7,r17
 8012ec0:	1d3fffcc 	andi	r20,r3,65535
 8012ec4:	9022d43a 	srli	r17,r18,16
 8012ec8:	95bfffcc 	andi	r22,r18,65535
 8012ecc:	a00b883a 	mov	r5,r20
 8012ed0:	b009883a 	mov	r4,r22
 8012ed4:	182ad43a 	srli	r21,r3,16
 8012ed8:	80087fc0 	call	80087fc <__mulsi3>
 8012edc:	a00b883a 	mov	r5,r20
 8012ee0:	8809883a 	mov	r4,r17
 8012ee4:	1039883a 	mov	fp,r2
 8012ee8:	80087fc0 	call	80087fc <__mulsi3>
 8012eec:	8809883a 	mov	r4,r17
 8012ef0:	a80b883a 	mov	r5,r21
 8012ef4:	1029883a 	mov	r20,r2
 8012ef8:	80087fc0 	call	80087fc <__mulsi3>
 8012efc:	a80b883a 	mov	r5,r21
 8012f00:	b009883a 	mov	r4,r22
 8012f04:	1023883a 	mov	r17,r2
 8012f08:	80087fc0 	call	80087fc <__mulsi3>
 8012f0c:	e006d43a 	srli	r3,fp,16
 8012f10:	1505883a 	add	r2,r2,r20
 8012f14:	1887883a 	add	r3,r3,r2
 8012f18:	1d00022e 	bgeu	r3,r20,8012f24 <__udivdi3+0x468>
 8012f1c:	00800074 	movhi	r2,1
 8012f20:	88a3883a 	add	r17,r17,r2
 8012f24:	1804d43a 	srli	r2,r3,16
 8012f28:	1463883a 	add	r17,r2,r17
 8012f2c:	84404436 	bltu	r16,r17,8013040 <__udivdi3+0x584>
 8012f30:	84403e26 	beq	r16,r17,801302c <__udivdi3+0x570>
 8012f34:	9005883a 	mov	r2,r18
 8012f38:	0007883a 	mov	r3,zero
 8012f3c:	003f9106 	br	8012d84 <__udivdi3+0x2c8>
 8012f40:	88e2983a 	sll	r17,r17,r3
 8012f44:	80aed83a 	srl	r23,r16,r2
 8012f48:	80e0983a 	sll	r16,r16,r3
 8012f4c:	882ad43a 	srli	r21,r17,16
 8012f50:	9884d83a 	srl	r2,r19,r2
 8012f54:	b809883a 	mov	r4,r23
 8012f58:	a80b883a 	mov	r5,r21
 8012f5c:	98e4983a 	sll	r18,r19,r3
 8012f60:	142cb03a 	or	r22,r2,r16
 8012f64:	80087a40 	call	80087a4 <__umodsi3>
 8012f68:	b809883a 	mov	r4,r23
 8012f6c:	a80b883a 	mov	r5,r21
 8012f70:	1027883a 	mov	r19,r2
 8012f74:	8d3fffcc 	andi	r20,r17,65535
 8012f78:	80087400 	call	8008740 <__udivsi3>
 8012f7c:	a009883a 	mov	r4,r20
 8012f80:	100b883a 	mov	r5,r2
 8012f84:	102f883a 	mov	r23,r2
 8012f88:	80087fc0 	call	80087fc <__mulsi3>
 8012f8c:	9826943a 	slli	r19,r19,16
 8012f90:	b008d43a 	srli	r4,r22,16
 8012f94:	24c8b03a 	or	r4,r4,r19
 8012f98:	2080062e 	bgeu	r4,r2,8012fb4 <__udivdi3+0x4f8>
 8012f9c:	2449883a 	add	r4,r4,r17
 8012fa0:	b8ffffc4 	addi	r3,r23,-1
 8012fa4:	24403c36 	bltu	r4,r17,8013098 <__udivdi3+0x5dc>
 8012fa8:	20803b2e 	bgeu	r4,r2,8013098 <__udivdi3+0x5dc>
 8012fac:	bdffff84 	addi	r23,r23,-2
 8012fb0:	2449883a 	add	r4,r4,r17
 8012fb4:	20a1c83a 	sub	r16,r4,r2
 8012fb8:	a80b883a 	mov	r5,r21
 8012fbc:	8009883a 	mov	r4,r16
 8012fc0:	80087a40 	call	80087a4 <__umodsi3>
 8012fc4:	a80b883a 	mov	r5,r21
 8012fc8:	8009883a 	mov	r4,r16
 8012fcc:	1027883a 	mov	r19,r2
 8012fd0:	80087400 	call	8008740 <__udivsi3>
 8012fd4:	a009883a 	mov	r4,r20
 8012fd8:	100b883a 	mov	r5,r2
 8012fdc:	9826943a 	slli	r19,r19,16
 8012fe0:	1039883a 	mov	fp,r2
 8012fe4:	80087fc0 	call	80087fc <__mulsi3>
 8012fe8:	b13fffcc 	andi	r4,r22,65535
 8012fec:	24c8b03a 	or	r4,r4,r19
 8012ff0:	2080062e 	bgeu	r4,r2,801300c <__udivdi3+0x550>
 8012ff4:	2449883a 	add	r4,r4,r17
 8012ff8:	e0ffffc4 	addi	r3,fp,-1
 8012ffc:	24402436 	bltu	r4,r17,8013090 <__udivdi3+0x5d4>
 8013000:	2080232e 	bgeu	r4,r2,8013090 <__udivdi3+0x5d4>
 8013004:	e73fff84 	addi	fp,fp,-2
 8013008:	2449883a 	add	r4,r4,r17
 801300c:	b82e943a 	slli	r23,r23,16
 8013010:	20a1c83a 	sub	r16,r4,r2
 8013014:	bf06b03a 	or	r3,r23,fp
 8013018:	003f2806 	br	8012cbc <__udivdi3+0x200>
 801301c:	2021883a 	mov	r16,r4
 8013020:	003f5306 	br	8012d70 <__udivdi3+0x2b4>
 8013024:	1821883a 	mov	r16,r3
 8013028:	003ef406 	br	8012bfc <__udivdi3+0x140>
 801302c:	1806943a 	slli	r3,r3,16
 8013030:	9de6983a 	sll	r19,r19,r23
 8013034:	e73fffcc 	andi	fp,fp,65535
 8013038:	1f07883a 	add	r3,r3,fp
 801303c:	98ffbd2e 	bgeu	r19,r3,8012f34 <__udivdi3+0x478>
 8013040:	90bfffc4 	addi	r2,r18,-1
 8013044:	0007883a 	mov	r3,zero
 8013048:	003f4e06 	br	8012d84 <__udivdi3+0x2c8>
 801304c:	00800604 	movi	r2,24
 8013050:	003ef506 	br	8012c28 <__udivdi3+0x16c>
 8013054:	00800604 	movi	r2,24
 8013058:	003f0b06 	br	8012c88 <__udivdi3+0x1cc>
 801305c:	00800604 	movi	r2,24
 8013060:	003ead06 	br	8012b18 <__udivdi3+0x5c>
 8013064:	0007883a 	mov	r3,zero
 8013068:	00800044 	movi	r2,1
 801306c:	003f4506 	br	8012d84 <__udivdi3+0x2c8>
 8013070:	80bf8e2e 	bgeu	r16,r2,8012eac <__udivdi3+0x3f0>
 8013074:	8c7fff84 	addi	r17,r17,-2
 8013078:	8721883a 	add	r16,r16,fp
 801307c:	003f8c06 	br	8012eb0 <__udivdi3+0x3f4>
 8013080:	18bf762e 	bgeu	r3,r2,8012e5c <__udivdi3+0x3a0>
 8013084:	ad7fff84 	addi	r21,r21,-2
 8013088:	1f07883a 	add	r3,r3,fp
 801308c:	003f7406 	br	8012e60 <__udivdi3+0x3a4>
 8013090:	1839883a 	mov	fp,r3
 8013094:	003fdd06 	br	801300c <__udivdi3+0x550>
 8013098:	182f883a 	mov	r23,r3
 801309c:	003fc506 	br	8012fb4 <__udivdi3+0x4f8>
 80130a0:	b5bfff84 	addi	r22,r22,-2
 80130a4:	3c4f883a 	add	r7,r7,r17
 80130a8:	003f1a06 	br	8012d14 <__udivdi3+0x258>
 80130ac:	b5bfff84 	addi	r22,r22,-2
 80130b0:	1c47883a 	add	r3,r3,r17
 80130b4:	003ebc06 	br	8012ba8 <__udivdi3+0xec>

080130b8 <__umoddi3>:
 80130b8:	defff304 	addi	sp,sp,-52
 80130bc:	df000b15 	stw	fp,44(sp)
 80130c0:	dc400415 	stw	r17,16(sp)
 80130c4:	dc000315 	stw	r16,12(sp)
 80130c8:	dfc00c15 	stw	ra,48(sp)
 80130cc:	ddc00a15 	stw	r23,40(sp)
 80130d0:	dd800915 	stw	r22,36(sp)
 80130d4:	dd400815 	stw	r21,32(sp)
 80130d8:	dd000715 	stw	r20,28(sp)
 80130dc:	dcc00615 	stw	r19,24(sp)
 80130e0:	dc800515 	stw	r18,20(sp)
 80130e4:	2021883a 	mov	r16,r4
 80130e8:	2823883a 	mov	r17,r5
 80130ec:	2839883a 	mov	fp,r5
 80130f0:	3800401e 	bne	r7,zero,80131f4 <__umoddi3+0x13c>
 80130f4:	3027883a 	mov	r19,r6
 80130f8:	2029883a 	mov	r20,r4
 80130fc:	2980552e 	bgeu	r5,r6,8013254 <__umoddi3+0x19c>
 8013100:	00bfffd4 	movui	r2,65535
 8013104:	1180a236 	bltu	r2,r6,8013390 <__umoddi3+0x2d8>
 8013108:	01003fc4 	movi	r4,255
 801310c:	2189803a 	cmpltu	r4,r4,r6
 8013110:	200890fa 	slli	r4,r4,3
 8013114:	3104d83a 	srl	r2,r6,r4
 8013118:	00c200b4 	movhi	r3,2050
 801311c:	18e93504 	addi	r3,r3,-23340
 8013120:	1885883a 	add	r2,r3,r2
 8013124:	10c00003 	ldbu	r3,0(r2)
 8013128:	00800804 	movi	r2,32
 801312c:	1909883a 	add	r4,r3,r4
 8013130:	1125c83a 	sub	r18,r2,r4
 8013134:	90000526 	beq	r18,zero,801314c <__umoddi3+0x94>
 8013138:	8ca2983a 	sll	r17,r17,r18
 801313c:	8108d83a 	srl	r4,r16,r4
 8013140:	34a6983a 	sll	r19,r6,r18
 8013144:	84a8983a 	sll	r20,r16,r18
 8013148:	2478b03a 	or	fp,r4,r17
 801314c:	982cd43a 	srli	r22,r19,16
 8013150:	e009883a 	mov	r4,fp
 8013154:	9dffffcc 	andi	r23,r19,65535
 8013158:	b00b883a 	mov	r5,r22
 801315c:	80087a40 	call	80087a4 <__umodsi3>
 8013160:	b00b883a 	mov	r5,r22
 8013164:	e009883a 	mov	r4,fp
 8013168:	102b883a 	mov	r21,r2
 801316c:	80087400 	call	8008740 <__udivsi3>
 8013170:	100b883a 	mov	r5,r2
 8013174:	b809883a 	mov	r4,r23
 8013178:	80087fc0 	call	80087fc <__mulsi3>
 801317c:	a82a943a 	slli	r21,r21,16
 8013180:	a006d43a 	srli	r3,r20,16
 8013184:	1d46b03a 	or	r3,r3,r21
 8013188:	1880032e 	bgeu	r3,r2,8013198 <__umoddi3+0xe0>
 801318c:	1cc7883a 	add	r3,r3,r19
 8013190:	1cc00136 	bltu	r3,r19,8013198 <__umoddi3+0xe0>
 8013194:	18813136 	bltu	r3,r2,801365c <__umoddi3+0x5a4>
 8013198:	18a1c83a 	sub	r16,r3,r2
 801319c:	b00b883a 	mov	r5,r22
 80131a0:	8009883a 	mov	r4,r16
 80131a4:	80087a40 	call	80087a4 <__umodsi3>
 80131a8:	b00b883a 	mov	r5,r22
 80131ac:	8009883a 	mov	r4,r16
 80131b0:	1023883a 	mov	r17,r2
 80131b4:	80087400 	call	8008740 <__udivsi3>
 80131b8:	100b883a 	mov	r5,r2
 80131bc:	b809883a 	mov	r4,r23
 80131c0:	8822943a 	slli	r17,r17,16
 80131c4:	80087fc0 	call	80087fc <__mulsi3>
 80131c8:	a0ffffcc 	andi	r3,r20,65535
 80131cc:	1c46b03a 	or	r3,r3,r17
 80131d0:	1880042e 	bgeu	r3,r2,80131e4 <__umoddi3+0x12c>
 80131d4:	1cc7883a 	add	r3,r3,r19
 80131d8:	1cc00236 	bltu	r3,r19,80131e4 <__umoddi3+0x12c>
 80131dc:	1880012e 	bgeu	r3,r2,80131e4 <__umoddi3+0x12c>
 80131e0:	1cc7883a 	add	r3,r3,r19
 80131e4:	1885c83a 	sub	r2,r3,r2
 80131e8:	1484d83a 	srl	r2,r2,r18
 80131ec:	0007883a 	mov	r3,zero
 80131f0:	00005306 	br	8013340 <__umoddi3+0x288>
 80131f4:	29c05036 	bltu	r5,r7,8013338 <__umoddi3+0x280>
 80131f8:	00bfffd4 	movui	r2,65535
 80131fc:	11c05c2e 	bgeu	r2,r7,8013370 <__umoddi3+0x2b8>
 8013200:	00804034 	movhi	r2,256
 8013204:	10bfffc4 	addi	r2,r2,-1
 8013208:	11c10636 	bltu	r2,r7,8013624 <__umoddi3+0x56c>
 801320c:	01000404 	movi	r4,16
 8013210:	3904d83a 	srl	r2,r7,r4
 8013214:	00c200b4 	movhi	r3,2050
 8013218:	18e93504 	addi	r3,r3,-23340
 801321c:	1885883a 	add	r2,r3,r2
 8013220:	14c00003 	ldbu	r19,0(r2)
 8013224:	00c00804 	movi	r3,32
 8013228:	9927883a 	add	r19,r19,r4
 801322c:	1ce9c83a 	sub	r20,r3,r19
 8013230:	a0005c1e 	bne	r20,zero,80133a4 <__umoddi3+0x2ec>
 8013234:	3c400136 	bltu	r7,r17,801323c <__umoddi3+0x184>
 8013238:	81810a36 	bltu	r16,r6,8013664 <__umoddi3+0x5ac>
 801323c:	8185c83a 	sub	r2,r16,r6
 8013240:	89e3c83a 	sub	r17,r17,r7
 8013244:	8089803a 	cmpltu	r4,r16,r2
 8013248:	8939c83a 	sub	fp,r17,r4
 801324c:	e007883a 	mov	r3,fp
 8013250:	00003b06 	br	8013340 <__umoddi3+0x288>
 8013254:	3000041e 	bne	r6,zero,8013268 <__umoddi3+0x1b0>
 8013258:	000b883a 	mov	r5,zero
 801325c:	01000044 	movi	r4,1
 8013260:	80087400 	call	8008740 <__udivsi3>
 8013264:	1027883a 	mov	r19,r2
 8013268:	00bfffd4 	movui	r2,65535
 801326c:	14c0442e 	bgeu	r2,r19,8013380 <__umoddi3+0x2c8>
 8013270:	00804034 	movhi	r2,256
 8013274:	10bfffc4 	addi	r2,r2,-1
 8013278:	14c0ec36 	bltu	r2,r19,801362c <__umoddi3+0x574>
 801327c:	00800404 	movi	r2,16
 8013280:	9886d83a 	srl	r3,r19,r2
 8013284:	010200b4 	movhi	r4,2050
 8013288:	21293504 	addi	r4,r4,-23340
 801328c:	20c7883a 	add	r3,r4,r3
 8013290:	18c00003 	ldbu	r3,0(r3)
 8013294:	1887883a 	add	r3,r3,r2
 8013298:	00800804 	movi	r2,32
 801329c:	10e5c83a 	sub	r18,r2,r3
 80132a0:	9000ab1e 	bne	r18,zero,8013550 <__umoddi3+0x498>
 80132a4:	982cd43a 	srli	r22,r19,16
 80132a8:	8ce3c83a 	sub	r17,r17,r19
 80132ac:	9dffffcc 	andi	r23,r19,65535
 80132b0:	b00b883a 	mov	r5,r22
 80132b4:	8809883a 	mov	r4,r17
 80132b8:	80087a40 	call	80087a4 <__umodsi3>
 80132bc:	b00b883a 	mov	r5,r22
 80132c0:	8809883a 	mov	r4,r17
 80132c4:	102b883a 	mov	r21,r2
 80132c8:	80087400 	call	8008740 <__udivsi3>
 80132cc:	b80b883a 	mov	r5,r23
 80132d0:	1009883a 	mov	r4,r2
 80132d4:	80087fc0 	call	80087fc <__mulsi3>
 80132d8:	a82a943a 	slli	r21,r21,16
 80132dc:	a006d43a 	srli	r3,r20,16
 80132e0:	1d46b03a 	or	r3,r3,r21
 80132e4:	1880042e 	bgeu	r3,r2,80132f8 <__umoddi3+0x240>
 80132e8:	1cc7883a 	add	r3,r3,r19
 80132ec:	1cc00236 	bltu	r3,r19,80132f8 <__umoddi3+0x240>
 80132f0:	1880012e 	bgeu	r3,r2,80132f8 <__umoddi3+0x240>
 80132f4:	1cc7883a 	add	r3,r3,r19
 80132f8:	18a1c83a 	sub	r16,r3,r2
 80132fc:	b00b883a 	mov	r5,r22
 8013300:	8009883a 	mov	r4,r16
 8013304:	80087a40 	call	80087a4 <__umodsi3>
 8013308:	1023883a 	mov	r17,r2
 801330c:	b00b883a 	mov	r5,r22
 8013310:	8009883a 	mov	r4,r16
 8013314:	80087400 	call	8008740 <__udivsi3>
 8013318:	8822943a 	slli	r17,r17,16
 801331c:	b80b883a 	mov	r5,r23
 8013320:	1009883a 	mov	r4,r2
 8013324:	80087fc0 	call	80087fc <__mulsi3>
 8013328:	a53fffcc 	andi	r20,r20,65535
 801332c:	a446b03a 	or	r3,r20,r17
 8013330:	18bfac2e 	bgeu	r3,r2,80131e4 <__umoddi3+0x12c>
 8013334:	003fa706 	br	80131d4 <__umoddi3+0x11c>
 8013338:	2005883a 	mov	r2,r4
 801333c:	2807883a 	mov	r3,r5
 8013340:	dfc00c17 	ldw	ra,48(sp)
 8013344:	df000b17 	ldw	fp,44(sp)
 8013348:	ddc00a17 	ldw	r23,40(sp)
 801334c:	dd800917 	ldw	r22,36(sp)
 8013350:	dd400817 	ldw	r21,32(sp)
 8013354:	dd000717 	ldw	r20,28(sp)
 8013358:	dcc00617 	ldw	r19,24(sp)
 801335c:	dc800517 	ldw	r18,20(sp)
 8013360:	dc400417 	ldw	r17,16(sp)
 8013364:	dc000317 	ldw	r16,12(sp)
 8013368:	dec00d04 	addi	sp,sp,52
 801336c:	f800283a 	ret
 8013370:	04c03fc4 	movi	r19,255
 8013374:	99c9803a 	cmpltu	r4,r19,r7
 8013378:	200890fa 	slli	r4,r4,3
 801337c:	003fa406 	br	8013210 <__umoddi3+0x158>
 8013380:	00803fc4 	movi	r2,255
 8013384:	14c5803a 	cmpltu	r2,r2,r19
 8013388:	100490fa 	slli	r2,r2,3
 801338c:	003fbc06 	br	8013280 <__umoddi3+0x1c8>
 8013390:	00804034 	movhi	r2,256
 8013394:	10bfffc4 	addi	r2,r2,-1
 8013398:	1180a636 	bltu	r2,r6,8013634 <__umoddi3+0x57c>
 801339c:	01000404 	movi	r4,16
 80133a0:	003f5c06 	br	8013114 <__umoddi3+0x5c>
 80133a4:	3d0e983a 	sll	r7,r7,r20
 80133a8:	34ead83a 	srl	r21,r6,r19
 80133ac:	8cc6d83a 	srl	r3,r17,r19
 80133b0:	8d10983a 	sll	r8,r17,r20
 80133b4:	3d6ab03a 	or	r21,r7,r21
 80133b8:	a82cd43a 	srli	r22,r21,16
 80133bc:	84e2d83a 	srl	r17,r16,r19
 80133c0:	1809883a 	mov	r4,r3
 80133c4:	b00b883a 	mov	r5,r22
 80133c8:	8a22b03a 	or	r17,r17,r8
 80133cc:	3524983a 	sll	r18,r6,r20
 80133d0:	dc400015 	stw	r17,0(sp)
 80133d4:	d8c00115 	stw	r3,4(sp)
 80133d8:	80087a40 	call	80087a4 <__umodsi3>
 80133dc:	d8c00117 	ldw	r3,4(sp)
 80133e0:	b00b883a 	mov	r5,r22
 80133e4:	1039883a 	mov	fp,r2
 80133e8:	1809883a 	mov	r4,r3
 80133ec:	80087400 	call	8008740 <__udivsi3>
 80133f0:	adffffcc 	andi	r23,r21,65535
 80133f4:	100b883a 	mov	r5,r2
 80133f8:	b809883a 	mov	r4,r23
 80133fc:	1023883a 	mov	r17,r2
 8013400:	80087fc0 	call	80087fc <__mulsi3>
 8013404:	d9400017 	ldw	r5,0(sp)
 8013408:	e008943a 	slli	r4,fp,16
 801340c:	8520983a 	sll	r16,r16,r20
 8013410:	2806d43a 	srli	r3,r5,16
 8013414:	1906b03a 	or	r3,r3,r4
 8013418:	1880042e 	bgeu	r3,r2,801342c <__umoddi3+0x374>
 801341c:	1d47883a 	add	r3,r3,r21
 8013420:	893fffc4 	addi	r4,r17,-1
 8013424:	1d40892e 	bgeu	r3,r21,801364c <__umoddi3+0x594>
 8013428:	2023883a 	mov	r17,r4
 801342c:	18b9c83a 	sub	fp,r3,r2
 8013430:	b00b883a 	mov	r5,r22
 8013434:	e009883a 	mov	r4,fp
 8013438:	80087a40 	call	80087a4 <__umodsi3>
 801343c:	b00b883a 	mov	r5,r22
 8013440:	e009883a 	mov	r4,fp
 8013444:	d8800215 	stw	r2,8(sp)
 8013448:	80087400 	call	8008740 <__udivsi3>
 801344c:	100b883a 	mov	r5,r2
 8013450:	b809883a 	mov	r4,r23
 8013454:	102d883a 	mov	r22,r2
 8013458:	80087fc0 	call	80087fc <__mulsi3>
 801345c:	d9800217 	ldw	r6,8(sp)
 8013460:	d8c00017 	ldw	r3,0(sp)
 8013464:	300c943a 	slli	r6,r6,16
 8013468:	1a3fffcc 	andi	r8,r3,65535
 801346c:	4190b03a 	or	r8,r8,r6
 8013470:	4080042e 	bgeu	r8,r2,8013484 <__umoddi3+0x3cc>
 8013474:	4551883a 	add	r8,r8,r21
 8013478:	b0ffffc4 	addi	r3,r22,-1
 801347c:	45406f2e 	bgeu	r8,r21,801363c <__umoddi3+0x584>
 8013480:	182d883a 	mov	r22,r3
 8013484:	880e943a 	slli	r7,r17,16
 8013488:	9006d43a 	srli	r3,r18,16
 801348c:	91bfffcc 	andi	r6,r18,65535
 8013490:	3dacb03a 	or	r22,r7,r22
 8013494:	b02ed43a 	srli	r23,r22,16
 8013498:	b5bfffcc 	andi	r22,r22,65535
 801349c:	300b883a 	mov	r5,r6
 80134a0:	b009883a 	mov	r4,r22
 80134a4:	40a3c83a 	sub	r17,r8,r2
 80134a8:	d8c00115 	stw	r3,4(sp)
 80134ac:	d9800215 	stw	r6,8(sp)
 80134b0:	80087fc0 	call	80087fc <__mulsi3>
 80134b4:	d9800217 	ldw	r6,8(sp)
 80134b8:	b809883a 	mov	r4,r23
 80134bc:	1039883a 	mov	fp,r2
 80134c0:	300b883a 	mov	r5,r6
 80134c4:	80087fc0 	call	80087fc <__mulsi3>
 80134c8:	d8c00117 	ldw	r3,4(sp)
 80134cc:	b809883a 	mov	r4,r23
 80134d0:	d8800215 	stw	r2,8(sp)
 80134d4:	180b883a 	mov	r5,r3
 80134d8:	80087fc0 	call	80087fc <__mulsi3>
 80134dc:	d8c00117 	ldw	r3,4(sp)
 80134e0:	b009883a 	mov	r4,r22
 80134e4:	102f883a 	mov	r23,r2
 80134e8:	180b883a 	mov	r5,r3
 80134ec:	80087fc0 	call	80087fc <__mulsi3>
 80134f0:	d9800217 	ldw	r6,8(sp)
 80134f4:	e006d43a 	srli	r3,fp,16
 80134f8:	1185883a 	add	r2,r2,r6
 80134fc:	1885883a 	add	r2,r3,r2
 8013500:	1180022e 	bgeu	r2,r6,801350c <__umoddi3+0x454>
 8013504:	00c00074 	movhi	r3,1
 8013508:	b8ef883a 	add	r23,r23,r3
 801350c:	1006d43a 	srli	r3,r2,16
 8013510:	1004943a 	slli	r2,r2,16
 8013514:	e73fffcc 	andi	fp,fp,65535
 8013518:	1dc7883a 	add	r3,r3,r23
 801351c:	1739883a 	add	fp,r2,fp
 8013520:	88c03a36 	bltu	r17,r3,801360c <__umoddi3+0x554>
 8013524:	88c05126 	beq	r17,r3,801366c <__umoddi3+0x5b4>
 8013528:	88c9c83a 	sub	r4,r17,r3
 801352c:	e00f883a 	mov	r7,fp
 8013530:	81cfc83a 	sub	r7,r16,r7
 8013534:	81c7803a 	cmpltu	r3,r16,r7
 8013538:	20c7c83a 	sub	r3,r4,r3
 801353c:	1cc4983a 	sll	r2,r3,r19
 8013540:	3d0ed83a 	srl	r7,r7,r20
 8013544:	1d06d83a 	srl	r3,r3,r20
 8013548:	11c4b03a 	or	r2,r2,r7
 801354c:	003f7c06 	br	8013340 <__umoddi3+0x288>
 8013550:	9ca6983a 	sll	r19,r19,r18
 8013554:	88f8d83a 	srl	fp,r17,r3
 8013558:	80c4d83a 	srl	r2,r16,r3
 801355c:	982cd43a 	srli	r22,r19,16
 8013560:	8ca2983a 	sll	r17,r17,r18
 8013564:	e009883a 	mov	r4,fp
 8013568:	b00b883a 	mov	r5,r22
 801356c:	146ab03a 	or	r21,r2,r17
 8013570:	80087a40 	call	80087a4 <__umodsi3>
 8013574:	b00b883a 	mov	r5,r22
 8013578:	e009883a 	mov	r4,fp
 801357c:	1029883a 	mov	r20,r2
 8013580:	9dffffcc 	andi	r23,r19,65535
 8013584:	80087400 	call	8008740 <__udivsi3>
 8013588:	b809883a 	mov	r4,r23
 801358c:	100b883a 	mov	r5,r2
 8013590:	80087fc0 	call	80087fc <__mulsi3>
 8013594:	a008943a 	slli	r4,r20,16
 8013598:	a806d43a 	srli	r3,r21,16
 801359c:	84a8983a 	sll	r20,r16,r18
 80135a0:	1906b03a 	or	r3,r3,r4
 80135a4:	1880042e 	bgeu	r3,r2,80135b8 <__umoddi3+0x500>
 80135a8:	1cc7883a 	add	r3,r3,r19
 80135ac:	1cc00236 	bltu	r3,r19,80135b8 <__umoddi3+0x500>
 80135b0:	1880012e 	bgeu	r3,r2,80135b8 <__umoddi3+0x500>
 80135b4:	1cc7883a 	add	r3,r3,r19
 80135b8:	18a3c83a 	sub	r17,r3,r2
 80135bc:	b00b883a 	mov	r5,r22
 80135c0:	8809883a 	mov	r4,r17
 80135c4:	80087a40 	call	80087a4 <__umodsi3>
 80135c8:	b00b883a 	mov	r5,r22
 80135cc:	8809883a 	mov	r4,r17
 80135d0:	1021883a 	mov	r16,r2
 80135d4:	80087400 	call	8008740 <__udivsi3>
 80135d8:	100b883a 	mov	r5,r2
 80135dc:	b809883a 	mov	r4,r23
 80135e0:	8020943a 	slli	r16,r16,16
 80135e4:	80087fc0 	call	80087fc <__mulsi3>
 80135e8:	a8ffffcc 	andi	r3,r21,65535
 80135ec:	1c06b03a 	or	r3,r3,r16
 80135f0:	1880042e 	bgeu	r3,r2,8013604 <__umoddi3+0x54c>
 80135f4:	1cc7883a 	add	r3,r3,r19
 80135f8:	1cc00236 	bltu	r3,r19,8013604 <__umoddi3+0x54c>
 80135fc:	1880012e 	bgeu	r3,r2,8013604 <__umoddi3+0x54c>
 8013600:	1cc7883a 	add	r3,r3,r19
 8013604:	18a3c83a 	sub	r17,r3,r2
 8013608:	003f2906 	br	80132b0 <__umoddi3+0x1f8>
 801360c:	e48fc83a 	sub	r7,fp,r18
 8013610:	1d49c83a 	sub	r4,r3,r21
 8013614:	e1f9803a 	cmpltu	fp,fp,r7
 8013618:	2739c83a 	sub	fp,r4,fp
 801361c:	8f09c83a 	sub	r4,r17,fp
 8013620:	003fc306 	br	8013530 <__umoddi3+0x478>
 8013624:	01000604 	movi	r4,24
 8013628:	003ef906 	br	8013210 <__umoddi3+0x158>
 801362c:	00800604 	movi	r2,24
 8013630:	003f1306 	br	8013280 <__umoddi3+0x1c8>
 8013634:	01000604 	movi	r4,24
 8013638:	003eb606 	br	8013114 <__umoddi3+0x5c>
 801363c:	40bf902e 	bgeu	r8,r2,8013480 <__umoddi3+0x3c8>
 8013640:	b5bfff84 	addi	r22,r22,-2
 8013644:	4551883a 	add	r8,r8,r21
 8013648:	003f8e06 	br	8013484 <__umoddi3+0x3cc>
 801364c:	18bf762e 	bgeu	r3,r2,8013428 <__umoddi3+0x370>
 8013650:	8c7fff84 	addi	r17,r17,-2
 8013654:	1d47883a 	add	r3,r3,r21
 8013658:	003f7406 	br	801342c <__umoddi3+0x374>
 801365c:	1cc7883a 	add	r3,r3,r19
 8013660:	003ecd06 	br	8013198 <__umoddi3+0xe0>
 8013664:	8005883a 	mov	r2,r16
 8013668:	003ef806 	br	801324c <__umoddi3+0x194>
 801366c:	873fe736 	bltu	r16,fp,801360c <__umoddi3+0x554>
 8013670:	e00f883a 	mov	r7,fp
 8013674:	0009883a 	mov	r4,zero
 8013678:	003fad06 	br	8013530 <__umoddi3+0x478>

0801367c <__adddf3>:
 801367c:	02c00434 	movhi	r11,16
 8013680:	5affffc4 	addi	r11,r11,-1
 8013684:	2806d7fa 	srli	r3,r5,31
 8013688:	2ad4703a 	and	r10,r5,r11
 801368c:	3ad2703a 	and	r9,r7,r11
 8013690:	3804d53a 	srli	r2,r7,20
 8013694:	3018d77a 	srli	r12,r6,29
 8013698:	280ad53a 	srli	r5,r5,20
 801369c:	501490fa 	slli	r10,r10,3
 80136a0:	2010d77a 	srli	r8,r4,29
 80136a4:	481290fa 	slli	r9,r9,3
 80136a8:	380ed7fa 	srli	r7,r7,31
 80136ac:	defffb04 	addi	sp,sp,-20
 80136b0:	dc800215 	stw	r18,8(sp)
 80136b4:	dc400115 	stw	r17,4(sp)
 80136b8:	dc000015 	stw	r16,0(sp)
 80136bc:	dfc00415 	stw	ra,16(sp)
 80136c0:	dcc00315 	stw	r19,12(sp)
 80136c4:	1c803fcc 	andi	r18,r3,255
 80136c8:	2c01ffcc 	andi	r16,r5,2047
 80136cc:	5210b03a 	or	r8,r10,r8
 80136d0:	202290fa 	slli	r17,r4,3
 80136d4:	1081ffcc 	andi	r2,r2,2047
 80136d8:	4b12b03a 	or	r9,r9,r12
 80136dc:	300c90fa 	slli	r6,r6,3
 80136e0:	91c07526 	beq	r18,r7,80138b8 <__adddf3+0x23c>
 80136e4:	8087c83a 	sub	r3,r16,r2
 80136e8:	00c0ab0e 	bge	zero,r3,8013998 <__adddf3+0x31c>
 80136ec:	10002a1e 	bne	r2,zero,8013798 <__adddf3+0x11c>
 80136f0:	4984b03a 	or	r2,r9,r6
 80136f4:	1000961e 	bne	r2,zero,8013950 <__adddf3+0x2d4>
 80136f8:	888001cc 	andi	r2,r17,7
 80136fc:	10000726 	beq	r2,zero,801371c <__adddf3+0xa0>
 8013700:	888003cc 	andi	r2,r17,15
 8013704:	00c00104 	movi	r3,4
 8013708:	10c00426 	beq	r2,r3,801371c <__adddf3+0xa0>
 801370c:	88c7883a 	add	r3,r17,r3
 8013710:	1c63803a 	cmpltu	r17,r3,r17
 8013714:	4451883a 	add	r8,r8,r17
 8013718:	1823883a 	mov	r17,r3
 801371c:	4080202c 	andhi	r2,r8,128
 8013720:	10005926 	beq	r2,zero,8013888 <__adddf3+0x20c>
 8013724:	84000044 	addi	r16,r16,1
 8013728:	0081ffc4 	movi	r2,2047
 801372c:	8080ba26 	beq	r16,r2,8013a18 <__adddf3+0x39c>
 8013730:	00bfe034 	movhi	r2,65408
 8013734:	10bfffc4 	addi	r2,r2,-1
 8013738:	4090703a 	and	r8,r8,r2
 801373c:	4004977a 	slli	r2,r8,29
 8013740:	4010927a 	slli	r8,r8,9
 8013744:	8822d0fa 	srli	r17,r17,3
 8013748:	8401ffcc 	andi	r16,r16,2047
 801374c:	4010d33a 	srli	r8,r8,12
 8013750:	9007883a 	mov	r3,r18
 8013754:	1444b03a 	or	r2,r2,r17
 8013758:	8401ffcc 	andi	r16,r16,2047
 801375c:	8020953a 	slli	r16,r16,20
 8013760:	18c03fcc 	andi	r3,r3,255
 8013764:	01000434 	movhi	r4,16
 8013768:	213fffc4 	addi	r4,r4,-1
 801376c:	180697fa 	slli	r3,r3,31
 8013770:	4110703a 	and	r8,r8,r4
 8013774:	4410b03a 	or	r8,r8,r16
 8013778:	40c6b03a 	or	r3,r8,r3
 801377c:	dfc00417 	ldw	ra,16(sp)
 8013780:	dcc00317 	ldw	r19,12(sp)
 8013784:	dc800217 	ldw	r18,8(sp)
 8013788:	dc400117 	ldw	r17,4(sp)
 801378c:	dc000017 	ldw	r16,0(sp)
 8013790:	dec00504 	addi	sp,sp,20
 8013794:	f800283a 	ret
 8013798:	0081ffc4 	movi	r2,2047
 801379c:	80bfd626 	beq	r16,r2,80136f8 <__adddf3+0x7c>
 80137a0:	4a402034 	orhi	r9,r9,128
 80137a4:	00800e04 	movi	r2,56
 80137a8:	10c09f16 	blt	r2,r3,8013a28 <__adddf3+0x3ac>
 80137ac:	008007c4 	movi	r2,31
 80137b0:	10c0c216 	blt	r2,r3,8013abc <__adddf3+0x440>
 80137b4:	00800804 	movi	r2,32
 80137b8:	10c5c83a 	sub	r2,r2,r3
 80137bc:	488a983a 	sll	r5,r9,r2
 80137c0:	30c8d83a 	srl	r4,r6,r3
 80137c4:	3084983a 	sll	r2,r6,r2
 80137c8:	48c6d83a 	srl	r3,r9,r3
 80137cc:	290cb03a 	or	r6,r5,r4
 80137d0:	1004c03a 	cmpne	r2,r2,zero
 80137d4:	308cb03a 	or	r6,r6,r2
 80137d8:	898dc83a 	sub	r6,r17,r6
 80137dc:	89a3803a 	cmpltu	r17,r17,r6
 80137e0:	40d1c83a 	sub	r8,r8,r3
 80137e4:	4451c83a 	sub	r8,r8,r17
 80137e8:	3023883a 	mov	r17,r6
 80137ec:	4080202c 	andhi	r2,r8,128
 80137f0:	10002326 	beq	r2,zero,8013880 <__adddf3+0x204>
 80137f4:	04c02034 	movhi	r19,128
 80137f8:	9cffffc4 	addi	r19,r19,-1
 80137fc:	44e6703a 	and	r19,r8,r19
 8013800:	98007626 	beq	r19,zero,80139dc <__adddf3+0x360>
 8013804:	9809883a 	mov	r4,r19
 8013808:	8015ebc0 	call	8015ebc <__clzsi2>
 801380c:	10fffe04 	addi	r3,r2,-8
 8013810:	010007c4 	movi	r4,31
 8013814:	20c07716 	blt	r4,r3,80139f4 <__adddf3+0x378>
 8013818:	00800804 	movi	r2,32
 801381c:	10c5c83a 	sub	r2,r2,r3
 8013820:	8884d83a 	srl	r2,r17,r2
 8013824:	98d0983a 	sll	r8,r19,r3
 8013828:	88e2983a 	sll	r17,r17,r3
 801382c:	1204b03a 	or	r2,r2,r8
 8013830:	1c007416 	blt	r3,r16,8013a04 <__adddf3+0x388>
 8013834:	1c21c83a 	sub	r16,r3,r16
 8013838:	82000044 	addi	r8,r16,1
 801383c:	00c007c4 	movi	r3,31
 8013840:	1a009116 	blt	r3,r8,8013a88 <__adddf3+0x40c>
 8013844:	00c00804 	movi	r3,32
 8013848:	1a07c83a 	sub	r3,r3,r8
 801384c:	8a08d83a 	srl	r4,r17,r8
 8013850:	88e2983a 	sll	r17,r17,r3
 8013854:	10c6983a 	sll	r3,r2,r3
 8013858:	1210d83a 	srl	r8,r2,r8
 801385c:	8804c03a 	cmpne	r2,r17,zero
 8013860:	1906b03a 	or	r3,r3,r4
 8013864:	18a2b03a 	or	r17,r3,r2
 8013868:	0021883a 	mov	r16,zero
 801386c:	003fa206 	br	80136f8 <__adddf3+0x7c>
 8013870:	1890b03a 	or	r8,r3,r2
 8013874:	40017d26 	beq	r8,zero,8013e6c <__adddf3+0x7f0>
 8013878:	1011883a 	mov	r8,r2
 801387c:	1823883a 	mov	r17,r3
 8013880:	888001cc 	andi	r2,r17,7
 8013884:	103f9e1e 	bne	r2,zero,8013700 <__adddf3+0x84>
 8013888:	4004977a 	slli	r2,r8,29
 801388c:	8822d0fa 	srli	r17,r17,3
 8013890:	4010d0fa 	srli	r8,r8,3
 8013894:	9007883a 	mov	r3,r18
 8013898:	1444b03a 	or	r2,r2,r17
 801389c:	0101ffc4 	movi	r4,2047
 80138a0:	81002426 	beq	r16,r4,8013934 <__adddf3+0x2b8>
 80138a4:	8120703a 	and	r16,r16,r4
 80138a8:	01000434 	movhi	r4,16
 80138ac:	213fffc4 	addi	r4,r4,-1
 80138b0:	4110703a 	and	r8,r8,r4
 80138b4:	003fa806 	br	8013758 <__adddf3+0xdc>
 80138b8:	8089c83a 	sub	r4,r16,r2
 80138bc:	01005e0e 	bge	zero,r4,8013a38 <__adddf3+0x3bc>
 80138c0:	10002b26 	beq	r2,zero,8013970 <__adddf3+0x2f4>
 80138c4:	0081ffc4 	movi	r2,2047
 80138c8:	80bf8b26 	beq	r16,r2,80136f8 <__adddf3+0x7c>
 80138cc:	4a402034 	orhi	r9,r9,128
 80138d0:	00800e04 	movi	r2,56
 80138d4:	1100a40e 	bge	r2,r4,8013b68 <__adddf3+0x4ec>
 80138d8:	498cb03a 	or	r6,r9,r6
 80138dc:	300ac03a 	cmpne	r5,r6,zero
 80138e0:	0013883a 	mov	r9,zero
 80138e4:	2c4b883a 	add	r5,r5,r17
 80138e8:	2c63803a 	cmpltu	r17,r5,r17
 80138ec:	4a11883a 	add	r8,r9,r8
 80138f0:	8a11883a 	add	r8,r17,r8
 80138f4:	2823883a 	mov	r17,r5
 80138f8:	4080202c 	andhi	r2,r8,128
 80138fc:	103fe026 	beq	r2,zero,8013880 <__adddf3+0x204>
 8013900:	84000044 	addi	r16,r16,1
 8013904:	0081ffc4 	movi	r2,2047
 8013908:	8080d226 	beq	r16,r2,8013c54 <__adddf3+0x5d8>
 801390c:	00bfe034 	movhi	r2,65408
 8013910:	10bfffc4 	addi	r2,r2,-1
 8013914:	4090703a 	and	r8,r8,r2
 8013918:	880ad07a 	srli	r5,r17,1
 801391c:	400897fa 	slli	r4,r8,31
 8013920:	88c0004c 	andi	r3,r17,1
 8013924:	28e2b03a 	or	r17,r5,r3
 8013928:	4010d07a 	srli	r8,r8,1
 801392c:	2462b03a 	or	r17,r4,r17
 8013930:	003f7106 	br	80136f8 <__adddf3+0x7c>
 8013934:	4088b03a 	or	r4,r8,r2
 8013938:	20014526 	beq	r4,zero,8013e50 <__adddf3+0x7d4>
 801393c:	01000434 	movhi	r4,16
 8013940:	42000234 	orhi	r8,r8,8
 8013944:	213fffc4 	addi	r4,r4,-1
 8013948:	4110703a 	and	r8,r8,r4
 801394c:	003f8206 	br	8013758 <__adddf3+0xdc>
 8013950:	18ffffc4 	addi	r3,r3,-1
 8013954:	1800491e 	bne	r3,zero,8013a7c <__adddf3+0x400>
 8013958:	898bc83a 	sub	r5,r17,r6
 801395c:	8963803a 	cmpltu	r17,r17,r5
 8013960:	4251c83a 	sub	r8,r8,r9
 8013964:	4451c83a 	sub	r8,r8,r17
 8013968:	2823883a 	mov	r17,r5
 801396c:	003f9f06 	br	80137ec <__adddf3+0x170>
 8013970:	4984b03a 	or	r2,r9,r6
 8013974:	103f6026 	beq	r2,zero,80136f8 <__adddf3+0x7c>
 8013978:	213fffc4 	addi	r4,r4,-1
 801397c:	2000931e 	bne	r4,zero,8013bcc <__adddf3+0x550>
 8013980:	898d883a 	add	r6,r17,r6
 8013984:	3463803a 	cmpltu	r17,r6,r17
 8013988:	4251883a 	add	r8,r8,r9
 801398c:	8a11883a 	add	r8,r17,r8
 8013990:	3023883a 	mov	r17,r6
 8013994:	003fd806 	br	80138f8 <__adddf3+0x27c>
 8013998:	1800541e 	bne	r3,zero,8013aec <__adddf3+0x470>
 801399c:	80800044 	addi	r2,r16,1
 80139a0:	1081ffcc 	andi	r2,r2,2047
 80139a4:	00c00044 	movi	r3,1
 80139a8:	1880a00e 	bge	r3,r2,8013c2c <__adddf3+0x5b0>
 80139ac:	8989c83a 	sub	r4,r17,r6
 80139b0:	8905803a 	cmpltu	r2,r17,r4
 80139b4:	4267c83a 	sub	r19,r8,r9
 80139b8:	98a7c83a 	sub	r19,r19,r2
 80139bc:	9880202c 	andhi	r2,r19,128
 80139c0:	10006326 	beq	r2,zero,8013b50 <__adddf3+0x4d4>
 80139c4:	3463c83a 	sub	r17,r6,r17
 80139c8:	4a07c83a 	sub	r3,r9,r8
 80139cc:	344d803a 	cmpltu	r6,r6,r17
 80139d0:	19a7c83a 	sub	r19,r3,r6
 80139d4:	3825883a 	mov	r18,r7
 80139d8:	983f8a1e 	bne	r19,zero,8013804 <__adddf3+0x188>
 80139dc:	8809883a 	mov	r4,r17
 80139e0:	8015ebc0 	call	8015ebc <__clzsi2>
 80139e4:	10800804 	addi	r2,r2,32
 80139e8:	10fffe04 	addi	r3,r2,-8
 80139ec:	010007c4 	movi	r4,31
 80139f0:	20ff890e 	bge	r4,r3,8013818 <__adddf3+0x19c>
 80139f4:	10bff604 	addi	r2,r2,-40
 80139f8:	8884983a 	sll	r2,r17,r2
 80139fc:	0023883a 	mov	r17,zero
 8013a00:	1c3f8c0e 	bge	r3,r16,8013834 <__adddf3+0x1b8>
 8013a04:	023fe034 	movhi	r8,65408
 8013a08:	423fffc4 	addi	r8,r8,-1
 8013a0c:	80e1c83a 	sub	r16,r16,r3
 8013a10:	1210703a 	and	r8,r2,r8
 8013a14:	003f3806 	br	80136f8 <__adddf3+0x7c>
 8013a18:	9007883a 	mov	r3,r18
 8013a1c:	0011883a 	mov	r8,zero
 8013a20:	0005883a 	mov	r2,zero
 8013a24:	003f4c06 	br	8013758 <__adddf3+0xdc>
 8013a28:	498cb03a 	or	r6,r9,r6
 8013a2c:	300cc03a 	cmpne	r6,r6,zero
 8013a30:	0007883a 	mov	r3,zero
 8013a34:	003f6806 	br	80137d8 <__adddf3+0x15c>
 8013a38:	20009c1e 	bne	r4,zero,8013cac <__adddf3+0x630>
 8013a3c:	80800044 	addi	r2,r16,1
 8013a40:	1141ffcc 	andi	r5,r2,2047
 8013a44:	01000044 	movi	r4,1
 8013a48:	2140670e 	bge	r4,r5,8013be8 <__adddf3+0x56c>
 8013a4c:	0101ffc4 	movi	r4,2047
 8013a50:	11007f26 	beq	r2,r4,8013c50 <__adddf3+0x5d4>
 8013a54:	898d883a 	add	r6,r17,r6
 8013a58:	4247883a 	add	r3,r8,r9
 8013a5c:	3451803a 	cmpltu	r8,r6,r17
 8013a60:	40d1883a 	add	r8,r8,r3
 8013a64:	402297fa 	slli	r17,r8,31
 8013a68:	300cd07a 	srli	r6,r6,1
 8013a6c:	4010d07a 	srli	r8,r8,1
 8013a70:	1021883a 	mov	r16,r2
 8013a74:	89a2b03a 	or	r17,r17,r6
 8013a78:	003f1f06 	br	80136f8 <__adddf3+0x7c>
 8013a7c:	0081ffc4 	movi	r2,2047
 8013a80:	80bf481e 	bne	r16,r2,80137a4 <__adddf3+0x128>
 8013a84:	003f1c06 	br	80136f8 <__adddf3+0x7c>
 8013a88:	843ff844 	addi	r16,r16,-31
 8013a8c:	01000804 	movi	r4,32
 8013a90:	1406d83a 	srl	r3,r2,r16
 8013a94:	41005026 	beq	r8,r4,8013bd8 <__adddf3+0x55c>
 8013a98:	01001004 	movi	r4,64
 8013a9c:	2211c83a 	sub	r8,r4,r8
 8013aa0:	1204983a 	sll	r2,r2,r8
 8013aa4:	88a2b03a 	or	r17,r17,r2
 8013aa8:	8822c03a 	cmpne	r17,r17,zero
 8013aac:	1c62b03a 	or	r17,r3,r17
 8013ab0:	0011883a 	mov	r8,zero
 8013ab4:	0021883a 	mov	r16,zero
 8013ab8:	003f7106 	br	8013880 <__adddf3+0x204>
 8013abc:	193ff804 	addi	r4,r3,-32
 8013ac0:	00800804 	movi	r2,32
 8013ac4:	4908d83a 	srl	r4,r9,r4
 8013ac8:	18804526 	beq	r3,r2,8013be0 <__adddf3+0x564>
 8013acc:	00801004 	movi	r2,64
 8013ad0:	10c5c83a 	sub	r2,r2,r3
 8013ad4:	4886983a 	sll	r3,r9,r2
 8013ad8:	198cb03a 	or	r6,r3,r6
 8013adc:	300cc03a 	cmpne	r6,r6,zero
 8013ae0:	218cb03a 	or	r6,r4,r6
 8013ae4:	0007883a 	mov	r3,zero
 8013ae8:	003f3b06 	br	80137d8 <__adddf3+0x15c>
 8013aec:	80002a26 	beq	r16,zero,8013b98 <__adddf3+0x51c>
 8013af0:	0101ffc4 	movi	r4,2047
 8013af4:	11006826 	beq	r2,r4,8013c98 <__adddf3+0x61c>
 8013af8:	00c7c83a 	sub	r3,zero,r3
 8013afc:	42002034 	orhi	r8,r8,128
 8013b00:	01000e04 	movi	r4,56
 8013b04:	20c07c16 	blt	r4,r3,8013cf8 <__adddf3+0x67c>
 8013b08:	010007c4 	movi	r4,31
 8013b0c:	20c0da16 	blt	r4,r3,8013e78 <__adddf3+0x7fc>
 8013b10:	01000804 	movi	r4,32
 8013b14:	20c9c83a 	sub	r4,r4,r3
 8013b18:	4114983a 	sll	r10,r8,r4
 8013b1c:	88cad83a 	srl	r5,r17,r3
 8013b20:	8908983a 	sll	r4,r17,r4
 8013b24:	40c6d83a 	srl	r3,r8,r3
 8013b28:	5162b03a 	or	r17,r10,r5
 8013b2c:	2008c03a 	cmpne	r4,r4,zero
 8013b30:	8922b03a 	or	r17,r17,r4
 8013b34:	3463c83a 	sub	r17,r6,r17
 8013b38:	48c7c83a 	sub	r3,r9,r3
 8013b3c:	344d803a 	cmpltu	r6,r6,r17
 8013b40:	1991c83a 	sub	r8,r3,r6
 8013b44:	1021883a 	mov	r16,r2
 8013b48:	3825883a 	mov	r18,r7
 8013b4c:	003f2706 	br	80137ec <__adddf3+0x170>
 8013b50:	24d0b03a 	or	r8,r4,r19
 8013b54:	40001b1e 	bne	r8,zero,8013bc4 <__adddf3+0x548>
 8013b58:	0005883a 	mov	r2,zero
 8013b5c:	0007883a 	mov	r3,zero
 8013b60:	0021883a 	mov	r16,zero
 8013b64:	003f4d06 	br	801389c <__adddf3+0x220>
 8013b68:	008007c4 	movi	r2,31
 8013b6c:	11003c16 	blt	r2,r4,8013c60 <__adddf3+0x5e4>
 8013b70:	00800804 	movi	r2,32
 8013b74:	1105c83a 	sub	r2,r2,r4
 8013b78:	488e983a 	sll	r7,r9,r2
 8013b7c:	310ad83a 	srl	r5,r6,r4
 8013b80:	3084983a 	sll	r2,r6,r2
 8013b84:	4912d83a 	srl	r9,r9,r4
 8013b88:	394ab03a 	or	r5,r7,r5
 8013b8c:	1004c03a 	cmpne	r2,r2,zero
 8013b90:	288ab03a 	or	r5,r5,r2
 8013b94:	003f5306 	br	80138e4 <__adddf3+0x268>
 8013b98:	4448b03a 	or	r4,r8,r17
 8013b9c:	20003e26 	beq	r4,zero,8013c98 <__adddf3+0x61c>
 8013ba0:	00c6303a 	nor	r3,zero,r3
 8013ba4:	18003a1e 	bne	r3,zero,8013c90 <__adddf3+0x614>
 8013ba8:	3463c83a 	sub	r17,r6,r17
 8013bac:	4a07c83a 	sub	r3,r9,r8
 8013bb0:	344d803a 	cmpltu	r6,r6,r17
 8013bb4:	1991c83a 	sub	r8,r3,r6
 8013bb8:	1021883a 	mov	r16,r2
 8013bbc:	3825883a 	mov	r18,r7
 8013bc0:	003f0a06 	br	80137ec <__adddf3+0x170>
 8013bc4:	2023883a 	mov	r17,r4
 8013bc8:	003f0d06 	br	8013800 <__adddf3+0x184>
 8013bcc:	0081ffc4 	movi	r2,2047
 8013bd0:	80bf3f1e 	bne	r16,r2,80138d0 <__adddf3+0x254>
 8013bd4:	003ec806 	br	80136f8 <__adddf3+0x7c>
 8013bd8:	0005883a 	mov	r2,zero
 8013bdc:	003fb106 	br	8013aa4 <__adddf3+0x428>
 8013be0:	0007883a 	mov	r3,zero
 8013be4:	003fbc06 	br	8013ad8 <__adddf3+0x45c>
 8013be8:	4444b03a 	or	r2,r8,r17
 8013bec:	8000871e 	bne	r16,zero,8013e0c <__adddf3+0x790>
 8013bf0:	1000ba26 	beq	r2,zero,8013edc <__adddf3+0x860>
 8013bf4:	4984b03a 	or	r2,r9,r6
 8013bf8:	103ebf26 	beq	r2,zero,80136f8 <__adddf3+0x7c>
 8013bfc:	8985883a 	add	r2,r17,r6
 8013c00:	4247883a 	add	r3,r8,r9
 8013c04:	1451803a 	cmpltu	r8,r2,r17
 8013c08:	40d1883a 	add	r8,r8,r3
 8013c0c:	40c0202c 	andhi	r3,r8,128
 8013c10:	1023883a 	mov	r17,r2
 8013c14:	183f1a26 	beq	r3,zero,8013880 <__adddf3+0x204>
 8013c18:	00bfe034 	movhi	r2,65408
 8013c1c:	10bfffc4 	addi	r2,r2,-1
 8013c20:	2021883a 	mov	r16,r4
 8013c24:	4090703a 	and	r8,r8,r2
 8013c28:	003eb306 	br	80136f8 <__adddf3+0x7c>
 8013c2c:	4444b03a 	or	r2,r8,r17
 8013c30:	8000291e 	bne	r16,zero,8013cd8 <__adddf3+0x65c>
 8013c34:	10004b1e 	bne	r2,zero,8013d64 <__adddf3+0x6e8>
 8013c38:	4990b03a 	or	r8,r9,r6
 8013c3c:	40008b26 	beq	r8,zero,8013e6c <__adddf3+0x7f0>
 8013c40:	4811883a 	mov	r8,r9
 8013c44:	3023883a 	mov	r17,r6
 8013c48:	3825883a 	mov	r18,r7
 8013c4c:	003eaa06 	br	80136f8 <__adddf3+0x7c>
 8013c50:	1021883a 	mov	r16,r2
 8013c54:	0011883a 	mov	r8,zero
 8013c58:	0005883a 	mov	r2,zero
 8013c5c:	003f0f06 	br	801389c <__adddf3+0x220>
 8013c60:	217ff804 	addi	r5,r4,-32
 8013c64:	00800804 	movi	r2,32
 8013c68:	494ad83a 	srl	r5,r9,r5
 8013c6c:	20807d26 	beq	r4,r2,8013e64 <__adddf3+0x7e8>
 8013c70:	00801004 	movi	r2,64
 8013c74:	1109c83a 	sub	r4,r2,r4
 8013c78:	4912983a 	sll	r9,r9,r4
 8013c7c:	498cb03a 	or	r6,r9,r6
 8013c80:	300cc03a 	cmpne	r6,r6,zero
 8013c84:	298ab03a 	or	r5,r5,r6
 8013c88:	0013883a 	mov	r9,zero
 8013c8c:	003f1506 	br	80138e4 <__adddf3+0x268>
 8013c90:	0101ffc4 	movi	r4,2047
 8013c94:	113f9a1e 	bne	r2,r4,8013b00 <__adddf3+0x484>
 8013c98:	4811883a 	mov	r8,r9
 8013c9c:	3023883a 	mov	r17,r6
 8013ca0:	1021883a 	mov	r16,r2
 8013ca4:	3825883a 	mov	r18,r7
 8013ca8:	003e9306 	br	80136f8 <__adddf3+0x7c>
 8013cac:	8000161e 	bne	r16,zero,8013d08 <__adddf3+0x68c>
 8013cb0:	444ab03a 	or	r5,r8,r17
 8013cb4:	28005126 	beq	r5,zero,8013dfc <__adddf3+0x780>
 8013cb8:	0108303a 	nor	r4,zero,r4
 8013cbc:	20004d1e 	bne	r4,zero,8013df4 <__adddf3+0x778>
 8013cc0:	89a3883a 	add	r17,r17,r6
 8013cc4:	4253883a 	add	r9,r8,r9
 8013cc8:	898d803a 	cmpltu	r6,r17,r6
 8013ccc:	3251883a 	add	r8,r6,r9
 8013cd0:	1021883a 	mov	r16,r2
 8013cd4:	003f0806 	br	80138f8 <__adddf3+0x27c>
 8013cd8:	1000301e 	bne	r2,zero,8013d9c <__adddf3+0x720>
 8013cdc:	4984b03a 	or	r2,r9,r6
 8013ce0:	10007126 	beq	r2,zero,8013ea8 <__adddf3+0x82c>
 8013ce4:	4811883a 	mov	r8,r9
 8013ce8:	3023883a 	mov	r17,r6
 8013cec:	3825883a 	mov	r18,r7
 8013cf0:	0401ffc4 	movi	r16,2047
 8013cf4:	003e8006 	br	80136f8 <__adddf3+0x7c>
 8013cf8:	4462b03a 	or	r17,r8,r17
 8013cfc:	8822c03a 	cmpne	r17,r17,zero
 8013d00:	0007883a 	mov	r3,zero
 8013d04:	003f8b06 	br	8013b34 <__adddf3+0x4b8>
 8013d08:	0141ffc4 	movi	r5,2047
 8013d0c:	11403b26 	beq	r2,r5,8013dfc <__adddf3+0x780>
 8013d10:	0109c83a 	sub	r4,zero,r4
 8013d14:	42002034 	orhi	r8,r8,128
 8013d18:	01400e04 	movi	r5,56
 8013d1c:	29006716 	blt	r5,r4,8013ebc <__adddf3+0x840>
 8013d20:	014007c4 	movi	r5,31
 8013d24:	29007016 	blt	r5,r4,8013ee8 <__adddf3+0x86c>
 8013d28:	01400804 	movi	r5,32
 8013d2c:	290bc83a 	sub	r5,r5,r4
 8013d30:	4154983a 	sll	r10,r8,r5
 8013d34:	890ed83a 	srl	r7,r17,r4
 8013d38:	894a983a 	sll	r5,r17,r5
 8013d3c:	4108d83a 	srl	r4,r8,r4
 8013d40:	51e2b03a 	or	r17,r10,r7
 8013d44:	280ac03a 	cmpne	r5,r5,zero
 8013d48:	8962b03a 	or	r17,r17,r5
 8013d4c:	89a3883a 	add	r17,r17,r6
 8013d50:	2253883a 	add	r9,r4,r9
 8013d54:	898d803a 	cmpltu	r6,r17,r6
 8013d58:	3251883a 	add	r8,r6,r9
 8013d5c:	1021883a 	mov	r16,r2
 8013d60:	003ee506 	br	80138f8 <__adddf3+0x27c>
 8013d64:	4984b03a 	or	r2,r9,r6
 8013d68:	103e6326 	beq	r2,zero,80136f8 <__adddf3+0x7c>
 8013d6c:	8987c83a 	sub	r3,r17,r6
 8013d70:	88c9803a 	cmpltu	r4,r17,r3
 8013d74:	4245c83a 	sub	r2,r8,r9
 8013d78:	1105c83a 	sub	r2,r2,r4
 8013d7c:	1100202c 	andhi	r4,r2,128
 8013d80:	203ebb26 	beq	r4,zero,8013870 <__adddf3+0x1f4>
 8013d84:	3463c83a 	sub	r17,r6,r17
 8013d88:	4a07c83a 	sub	r3,r9,r8
 8013d8c:	344d803a 	cmpltu	r6,r6,r17
 8013d90:	1991c83a 	sub	r8,r3,r6
 8013d94:	3825883a 	mov	r18,r7
 8013d98:	003e5706 	br	80136f8 <__adddf3+0x7c>
 8013d9c:	4984b03a 	or	r2,r9,r6
 8013da0:	10002e26 	beq	r2,zero,8013e5c <__adddf3+0x7e0>
 8013da4:	4004d0fa 	srli	r2,r8,3
 8013da8:	8822d0fa 	srli	r17,r17,3
 8013dac:	4010977a 	slli	r8,r8,29
 8013db0:	10c0022c 	andhi	r3,r2,8
 8013db4:	4462b03a 	or	r17,r8,r17
 8013db8:	18000826 	beq	r3,zero,8013ddc <__adddf3+0x760>
 8013dbc:	4808d0fa 	srli	r4,r9,3
 8013dc0:	20c0022c 	andhi	r3,r4,8
 8013dc4:	1800051e 	bne	r3,zero,8013ddc <__adddf3+0x760>
 8013dc8:	300cd0fa 	srli	r6,r6,3
 8013dcc:	4806977a 	slli	r3,r9,29
 8013dd0:	2005883a 	mov	r2,r4
 8013dd4:	3825883a 	mov	r18,r7
 8013dd8:	19a2b03a 	or	r17,r3,r6
 8013ddc:	8810d77a 	srli	r8,r17,29
 8013de0:	100490fa 	slli	r2,r2,3
 8013de4:	882290fa 	slli	r17,r17,3
 8013de8:	0401ffc4 	movi	r16,2047
 8013dec:	4090b03a 	or	r8,r8,r2
 8013df0:	003e4106 	br	80136f8 <__adddf3+0x7c>
 8013df4:	0141ffc4 	movi	r5,2047
 8013df8:	117fc71e 	bne	r2,r5,8013d18 <__adddf3+0x69c>
 8013dfc:	4811883a 	mov	r8,r9
 8013e00:	3023883a 	mov	r17,r6
 8013e04:	1021883a 	mov	r16,r2
 8013e08:	003e3b06 	br	80136f8 <__adddf3+0x7c>
 8013e0c:	10002f26 	beq	r2,zero,8013ecc <__adddf3+0x850>
 8013e10:	4984b03a 	or	r2,r9,r6
 8013e14:	10001126 	beq	r2,zero,8013e5c <__adddf3+0x7e0>
 8013e18:	4004d0fa 	srli	r2,r8,3
 8013e1c:	8822d0fa 	srli	r17,r17,3
 8013e20:	4010977a 	slli	r8,r8,29
 8013e24:	10c0022c 	andhi	r3,r2,8
 8013e28:	4462b03a 	or	r17,r8,r17
 8013e2c:	183feb26 	beq	r3,zero,8013ddc <__adddf3+0x760>
 8013e30:	4808d0fa 	srli	r4,r9,3
 8013e34:	20c0022c 	andhi	r3,r4,8
 8013e38:	183fe81e 	bne	r3,zero,8013ddc <__adddf3+0x760>
 8013e3c:	300cd0fa 	srli	r6,r6,3
 8013e40:	4806977a 	slli	r3,r9,29
 8013e44:	2005883a 	mov	r2,r4
 8013e48:	19a2b03a 	or	r17,r3,r6
 8013e4c:	003fe306 	br	8013ddc <__adddf3+0x760>
 8013e50:	0011883a 	mov	r8,zero
 8013e54:	0005883a 	mov	r2,zero
 8013e58:	003e3f06 	br	8013758 <__adddf3+0xdc>
 8013e5c:	0401ffc4 	movi	r16,2047
 8013e60:	003e2506 	br	80136f8 <__adddf3+0x7c>
 8013e64:	0013883a 	mov	r9,zero
 8013e68:	003f8406 	br	8013c7c <__adddf3+0x600>
 8013e6c:	0005883a 	mov	r2,zero
 8013e70:	0007883a 	mov	r3,zero
 8013e74:	003e8906 	br	801389c <__adddf3+0x220>
 8013e78:	197ff804 	addi	r5,r3,-32
 8013e7c:	01000804 	movi	r4,32
 8013e80:	414ad83a 	srl	r5,r8,r5
 8013e84:	19002426 	beq	r3,r4,8013f18 <__adddf3+0x89c>
 8013e88:	01001004 	movi	r4,64
 8013e8c:	20c7c83a 	sub	r3,r4,r3
 8013e90:	40c6983a 	sll	r3,r8,r3
 8013e94:	1c46b03a 	or	r3,r3,r17
 8013e98:	1806c03a 	cmpne	r3,r3,zero
 8013e9c:	28e2b03a 	or	r17,r5,r3
 8013ea0:	0007883a 	mov	r3,zero
 8013ea4:	003f2306 	br	8013b34 <__adddf3+0x4b8>
 8013ea8:	0007883a 	mov	r3,zero
 8013eac:	5811883a 	mov	r8,r11
 8013eb0:	00bfffc4 	movi	r2,-1
 8013eb4:	0401ffc4 	movi	r16,2047
 8013eb8:	003e7806 	br	801389c <__adddf3+0x220>
 8013ebc:	4462b03a 	or	r17,r8,r17
 8013ec0:	8822c03a 	cmpne	r17,r17,zero
 8013ec4:	0009883a 	mov	r4,zero
 8013ec8:	003fa006 	br	8013d4c <__adddf3+0x6d0>
 8013ecc:	4811883a 	mov	r8,r9
 8013ed0:	3023883a 	mov	r17,r6
 8013ed4:	0401ffc4 	movi	r16,2047
 8013ed8:	003e0706 	br	80136f8 <__adddf3+0x7c>
 8013edc:	4811883a 	mov	r8,r9
 8013ee0:	3023883a 	mov	r17,r6
 8013ee4:	003e0406 	br	80136f8 <__adddf3+0x7c>
 8013ee8:	21fff804 	addi	r7,r4,-32
 8013eec:	01400804 	movi	r5,32
 8013ef0:	41ced83a 	srl	r7,r8,r7
 8013ef4:	21400a26 	beq	r4,r5,8013f20 <__adddf3+0x8a4>
 8013ef8:	01401004 	movi	r5,64
 8013efc:	2909c83a 	sub	r4,r5,r4
 8013f00:	4108983a 	sll	r4,r8,r4
 8013f04:	2448b03a 	or	r4,r4,r17
 8013f08:	2008c03a 	cmpne	r4,r4,zero
 8013f0c:	3922b03a 	or	r17,r7,r4
 8013f10:	0009883a 	mov	r4,zero
 8013f14:	003f8d06 	br	8013d4c <__adddf3+0x6d0>
 8013f18:	0007883a 	mov	r3,zero
 8013f1c:	003fdd06 	br	8013e94 <__adddf3+0x818>
 8013f20:	0009883a 	mov	r4,zero
 8013f24:	003ff706 	br	8013f04 <__adddf3+0x888>

08013f28 <__divdf3>:
 8013f28:	defff004 	addi	sp,sp,-64
 8013f2c:	dc800815 	stw	r18,32(sp)
 8013f30:	2824d53a 	srli	r18,r5,20
 8013f34:	dd800c15 	stw	r22,48(sp)
 8013f38:	282cd7fa 	srli	r22,r5,31
 8013f3c:	dc000615 	stw	r16,24(sp)
 8013f40:	04000434 	movhi	r16,16
 8013f44:	843fffc4 	addi	r16,r16,-1
 8013f48:	dfc00f15 	stw	ra,60(sp)
 8013f4c:	df000e15 	stw	fp,56(sp)
 8013f50:	ddc00d15 	stw	r23,52(sp)
 8013f54:	dd400b15 	stw	r21,44(sp)
 8013f58:	dd000a15 	stw	r20,40(sp)
 8013f5c:	dcc00915 	stw	r19,36(sp)
 8013f60:	dc400715 	stw	r17,28(sp)
 8013f64:	9481ffcc 	andi	r18,r18,2047
 8013f68:	2c20703a 	and	r16,r5,r16
 8013f6c:	b2003fcc 	andi	r8,r22,255
 8013f70:	90006126 	beq	r18,zero,80140f8 <__divdf3+0x1d0>
 8013f74:	0081ffc4 	movi	r2,2047
 8013f78:	202b883a 	mov	r21,r4
 8013f7c:	90803726 	beq	r18,r2,801405c <__divdf3+0x134>
 8013f80:	80800434 	orhi	r2,r16,16
 8013f84:	100490fa 	slli	r2,r2,3
 8013f88:	2020d77a 	srli	r16,r4,29
 8013f8c:	202a90fa 	slli	r21,r4,3
 8013f90:	94bf0044 	addi	r18,r18,-1023
 8013f94:	80a0b03a 	or	r16,r16,r2
 8013f98:	0013883a 	mov	r9,zero
 8013f9c:	000b883a 	mov	r5,zero
 8013fa0:	3806d53a 	srli	r3,r7,20
 8013fa4:	382ed7fa 	srli	r23,r7,31
 8013fa8:	04400434 	movhi	r17,16
 8013fac:	8c7fffc4 	addi	r17,r17,-1
 8013fb0:	18c1ffcc 	andi	r3,r3,2047
 8013fb4:	3029883a 	mov	r20,r6
 8013fb8:	3c62703a 	and	r17,r7,r17
 8013fbc:	bf003fcc 	andi	fp,r23,255
 8013fc0:	18006e26 	beq	r3,zero,801417c <__divdf3+0x254>
 8013fc4:	0081ffc4 	movi	r2,2047
 8013fc8:	18806626 	beq	r3,r2,8014164 <__divdf3+0x23c>
 8013fcc:	88800434 	orhi	r2,r17,16
 8013fd0:	100490fa 	slli	r2,r2,3
 8013fd4:	3022d77a 	srli	r17,r6,29
 8013fd8:	302890fa 	slli	r20,r6,3
 8013fdc:	18ff0044 	addi	r3,r3,-1023
 8013fe0:	88a2b03a 	or	r17,r17,r2
 8013fe4:	000f883a 	mov	r7,zero
 8013fe8:	b5e6f03a 	xor	r19,r22,r23
 8013fec:	3a4cb03a 	or	r6,r7,r9
 8013ff0:	008003c4 	movi	r2,15
 8013ff4:	9809883a 	mov	r4,r19
 8013ff8:	90c7c83a 	sub	r3,r18,r3
 8013ffc:	9cc03fcc 	andi	r19,r19,255
 8014000:	11809636 	bltu	r2,r6,801425c <__divdf3+0x334>
 8014004:	300c90ba 	slli	r6,r6,2
 8014008:	00820074 	movhi	r2,2049
 801400c:	10900704 	addi	r2,r2,16412
 8014010:	308d883a 	add	r6,r6,r2
 8014014:	30800017 	ldw	r2,0(r6)
 8014018:	1000683a 	jmp	r2
 801401c:	0801425c 	xori	zero,at,1289
 8014020:	08014094 	ori	zero,at,1282
 8014024:	0801424c 	andi	zero,at,1289
 8014028:	08014088 	cmpgei	zero,at,1282
 801402c:	0801424c 	andi	zero,at,1289
 8014030:	08014220 	cmpeqi	zero,at,1288
 8014034:	0801424c 	andi	zero,at,1289
 8014038:	08014088 	cmpgei	zero,at,1282
 801403c:	08014094 	ori	zero,at,1282
 8014040:	08014094 	ori	zero,at,1282
 8014044:	08014220 	cmpeqi	zero,at,1288
 8014048:	08014088 	cmpgei	zero,at,1282
 801404c:	08014078 	rdprs	zero,at,1281
 8014050:	08014078 	rdprs	zero,at,1281
 8014054:	08014078 	rdprs	zero,at,1281
 8014058:	080145e4 	muli	zero,at,1303
 801405c:	2404b03a 	or	r2,r4,r16
 8014060:	10006c1e 	bne	r2,zero,8014214 <__divdf3+0x2ec>
 8014064:	02400204 	movi	r9,8
 8014068:	0021883a 	mov	r16,zero
 801406c:	002b883a 	mov	r21,zero
 8014070:	01400084 	movi	r5,2
 8014074:	003fca06 	br	8013fa0 <__divdf3+0x78>
 8014078:	8023883a 	mov	r17,r16
 801407c:	a829883a 	mov	r20,r21
 8014080:	4039883a 	mov	fp,r8
 8014084:	280f883a 	mov	r7,r5
 8014088:	00800084 	movi	r2,2
 801408c:	3881601e 	bne	r7,r2,8014610 <__divdf3+0x6e8>
 8014090:	e027883a 	mov	r19,fp
 8014094:	9900004c 	andi	r4,r19,1
 8014098:	0081ffc4 	movi	r2,2047
 801409c:	0021883a 	mov	r16,zero
 80140a0:	002b883a 	mov	r21,zero
 80140a4:	1004953a 	slli	r2,r2,20
 80140a8:	20c03fcc 	andi	r3,r4,255
 80140ac:	01400434 	movhi	r5,16
 80140b0:	297fffc4 	addi	r5,r5,-1
 80140b4:	180697fa 	slli	r3,r3,31
 80140b8:	8160703a 	and	r16,r16,r5
 80140bc:	80a0b03a 	or	r16,r16,r2
 80140c0:	80c6b03a 	or	r3,r16,r3
 80140c4:	a805883a 	mov	r2,r21
 80140c8:	dfc00f17 	ldw	ra,60(sp)
 80140cc:	df000e17 	ldw	fp,56(sp)
 80140d0:	ddc00d17 	ldw	r23,52(sp)
 80140d4:	dd800c17 	ldw	r22,48(sp)
 80140d8:	dd400b17 	ldw	r21,44(sp)
 80140dc:	dd000a17 	ldw	r20,40(sp)
 80140e0:	dcc00917 	ldw	r19,36(sp)
 80140e4:	dc800817 	ldw	r18,32(sp)
 80140e8:	dc400717 	ldw	r17,28(sp)
 80140ec:	dc000617 	ldw	r16,24(sp)
 80140f0:	dec01004 	addi	sp,sp,64
 80140f4:	f800283a 	ret
 80140f8:	2404b03a 	or	r2,r4,r16
 80140fc:	2023883a 	mov	r17,r4
 8014100:	10003f26 	beq	r2,zero,8014200 <__divdf3+0x2d8>
 8014104:	80015e26 	beq	r16,zero,8014680 <__divdf3+0x758>
 8014108:	8009883a 	mov	r4,r16
 801410c:	d9800215 	stw	r6,8(sp)
 8014110:	d9c00515 	stw	r7,20(sp)
 8014114:	da000415 	stw	r8,16(sp)
 8014118:	8015ebc0 	call	8015ebc <__clzsi2>
 801411c:	d9800217 	ldw	r6,8(sp)
 8014120:	d9c00517 	ldw	r7,20(sp)
 8014124:	da000417 	ldw	r8,16(sp)
 8014128:	113ffd44 	addi	r4,r2,-11
 801412c:	00c00704 	movi	r3,28
 8014130:	19014f16 	blt	r3,r4,8014670 <__divdf3+0x748>
 8014134:	00c00744 	movi	r3,29
 8014138:	157ffe04 	addi	r21,r2,-8
 801413c:	1907c83a 	sub	r3,r3,r4
 8014140:	8560983a 	sll	r16,r16,r21
 8014144:	88c6d83a 	srl	r3,r17,r3
 8014148:	8d6a983a 	sll	r21,r17,r21
 801414c:	1c20b03a 	or	r16,r3,r16
 8014150:	1080fcc4 	addi	r2,r2,1011
 8014154:	00a5c83a 	sub	r18,zero,r2
 8014158:	0013883a 	mov	r9,zero
 801415c:	000b883a 	mov	r5,zero
 8014160:	003f8f06 	br	8013fa0 <__divdf3+0x78>
 8014164:	3444b03a 	or	r2,r6,r17
 8014168:	1000231e 	bne	r2,zero,80141f8 <__divdf3+0x2d0>
 801416c:	0023883a 	mov	r17,zero
 8014170:	0029883a 	mov	r20,zero
 8014174:	01c00084 	movi	r7,2
 8014178:	003f9b06 	br	8013fe8 <__divdf3+0xc0>
 801417c:	3444b03a 	or	r2,r6,r17
 8014180:	10001926 	beq	r2,zero,80141e8 <__divdf3+0x2c0>
 8014184:	88014b26 	beq	r17,zero,80146b4 <__divdf3+0x78c>
 8014188:	8809883a 	mov	r4,r17
 801418c:	d9400115 	stw	r5,4(sp)
 8014190:	d9800215 	stw	r6,8(sp)
 8014194:	da000415 	stw	r8,16(sp)
 8014198:	da400315 	stw	r9,12(sp)
 801419c:	8015ebc0 	call	8015ebc <__clzsi2>
 80141a0:	d9400117 	ldw	r5,4(sp)
 80141a4:	d9800217 	ldw	r6,8(sp)
 80141a8:	da000417 	ldw	r8,16(sp)
 80141ac:	da400317 	ldw	r9,12(sp)
 80141b0:	113ffd44 	addi	r4,r2,-11
 80141b4:	00c00704 	movi	r3,28
 80141b8:	19013a16 	blt	r3,r4,80146a4 <__divdf3+0x77c>
 80141bc:	00c00744 	movi	r3,29
 80141c0:	153ffe04 	addi	r20,r2,-8
 80141c4:	1907c83a 	sub	r3,r3,r4
 80141c8:	8d22983a 	sll	r17,r17,r20
 80141cc:	30c6d83a 	srl	r3,r6,r3
 80141d0:	3528983a 	sll	r20,r6,r20
 80141d4:	1c62b03a 	or	r17,r3,r17
 80141d8:	1080fcc4 	addi	r2,r2,1011
 80141dc:	0087c83a 	sub	r3,zero,r2
 80141e0:	000f883a 	mov	r7,zero
 80141e4:	003f8006 	br	8013fe8 <__divdf3+0xc0>
 80141e8:	0023883a 	mov	r17,zero
 80141ec:	0029883a 	mov	r20,zero
 80141f0:	01c00044 	movi	r7,1
 80141f4:	003f7c06 	br	8013fe8 <__divdf3+0xc0>
 80141f8:	01c000c4 	movi	r7,3
 80141fc:	003f7a06 	br	8013fe8 <__divdf3+0xc0>
 8014200:	02400104 	movi	r9,4
 8014204:	0021883a 	mov	r16,zero
 8014208:	002b883a 	mov	r21,zero
 801420c:	01400044 	movi	r5,1
 8014210:	003f6306 	br	8013fa0 <__divdf3+0x78>
 8014214:	02400304 	movi	r9,12
 8014218:	014000c4 	movi	r5,3
 801421c:	003f6006 	br	8013fa0 <__divdf3+0x78>
 8014220:	04000434 	movhi	r16,16
 8014224:	0009883a 	mov	r4,zero
 8014228:	843fffc4 	addi	r16,r16,-1
 801422c:	057fffc4 	movi	r21,-1
 8014230:	0081ffc4 	movi	r2,2047
 8014234:	003f9b06 	br	80140a4 <__divdf3+0x17c>
 8014238:	00c00044 	movi	r3,1
 801423c:	1887c83a 	sub	r3,r3,r2
 8014240:	01000e04 	movi	r4,56
 8014244:	20c1530e 	bge	r4,r3,8014794 <__divdf3+0x86c>
 8014248:	9900004c 	andi	r4,r19,1
 801424c:	0005883a 	mov	r2,zero
 8014250:	0021883a 	mov	r16,zero
 8014254:	002b883a 	mov	r21,zero
 8014258:	003f9206 	br	80140a4 <__divdf3+0x17c>
 801425c:	8c012e36 	bltu	r17,r16,8014718 <__divdf3+0x7f0>
 8014260:	84412c26 	beq	r16,r17,8014714 <__divdf3+0x7ec>
 8014264:	a82f883a 	mov	r23,r21
 8014268:	18ffffc4 	addi	r3,r3,-1
 801426c:	002b883a 	mov	r21,zero
 8014270:	a004d63a 	srli	r2,r20,24
 8014274:	8822923a 	slli	r17,r17,8
 8014278:	a028923a 	slli	r20,r20,8
 801427c:	8009883a 	mov	r4,r16
 8014280:	88acb03a 	or	r22,r17,r2
 8014284:	dd000015 	stw	r20,0(sp)
 8014288:	b028d43a 	srli	r20,r22,16
 801428c:	d8c00215 	stw	r3,8(sp)
 8014290:	b4bfffcc 	andi	r18,r22,65535
 8014294:	a00b883a 	mov	r5,r20
 8014298:	80087400 	call	8008740 <__udivsi3>
 801429c:	100b883a 	mov	r5,r2
 80142a0:	9009883a 	mov	r4,r18
 80142a4:	1023883a 	mov	r17,r2
 80142a8:	80087fc0 	call	80087fc <__mulsi3>
 80142ac:	8009883a 	mov	r4,r16
 80142b0:	a00b883a 	mov	r5,r20
 80142b4:	1039883a 	mov	fp,r2
 80142b8:	80087a40 	call	80087a4 <__umodsi3>
 80142bc:	1004943a 	slli	r2,r2,16
 80142c0:	b808d43a 	srli	r4,r23,16
 80142c4:	d8c00217 	ldw	r3,8(sp)
 80142c8:	2084b03a 	or	r2,r4,r2
 80142cc:	1700062e 	bgeu	r2,fp,80142e8 <__divdf3+0x3c0>
 80142d0:	1585883a 	add	r2,r2,r22
 80142d4:	893fffc4 	addi	r4,r17,-1
 80142d8:	15811d36 	bltu	r2,r22,8014750 <__divdf3+0x828>
 80142dc:	17011c2e 	bgeu	r2,fp,8014750 <__divdf3+0x828>
 80142e0:	8c7fff84 	addi	r17,r17,-2
 80142e4:	1585883a 	add	r2,r2,r22
 80142e8:	1739c83a 	sub	fp,r2,fp
 80142ec:	a00b883a 	mov	r5,r20
 80142f0:	e009883a 	mov	r4,fp
 80142f4:	d8c00215 	stw	r3,8(sp)
 80142f8:	80087400 	call	8008740 <__udivsi3>
 80142fc:	100b883a 	mov	r5,r2
 8014300:	9009883a 	mov	r4,r18
 8014304:	1021883a 	mov	r16,r2
 8014308:	80087fc0 	call	80087fc <__mulsi3>
 801430c:	a00b883a 	mov	r5,r20
 8014310:	e009883a 	mov	r4,fp
 8014314:	d8800415 	stw	r2,16(sp)
 8014318:	80087a40 	call	80087a4 <__umodsi3>
 801431c:	1004943a 	slli	r2,r2,16
 8014320:	da000417 	ldw	r8,16(sp)
 8014324:	bdffffcc 	andi	r23,r23,65535
 8014328:	b884b03a 	or	r2,r23,r2
 801432c:	d8c00217 	ldw	r3,8(sp)
 8014330:	1200062e 	bgeu	r2,r8,801434c <__divdf3+0x424>
 8014334:	1585883a 	add	r2,r2,r22
 8014338:	813fffc4 	addi	r4,r16,-1
 801433c:	15810236 	bltu	r2,r22,8014748 <__divdf3+0x820>
 8014340:	1201012e 	bgeu	r2,r8,8014748 <__divdf3+0x820>
 8014344:	843fff84 	addi	r16,r16,-2
 8014348:	1585883a 	add	r2,r2,r22
 801434c:	8822943a 	slli	r17,r17,16
 8014350:	d9800017 	ldw	r6,0(sp)
 8014354:	1211c83a 	sub	r8,r2,r8
 8014358:	8c22b03a 	or	r17,r17,r16
 801435c:	373fffcc 	andi	fp,r6,65535
 8014360:	8abfffcc 	andi	r10,r17,65535
 8014364:	8820d43a 	srli	r16,r17,16
 8014368:	5009883a 	mov	r4,r10
 801436c:	e00b883a 	mov	r5,fp
 8014370:	302ed43a 	srli	r23,r6,16
 8014374:	d8c00215 	stw	r3,8(sp)
 8014378:	da000415 	stw	r8,16(sp)
 801437c:	da800115 	stw	r10,4(sp)
 8014380:	80087fc0 	call	80087fc <__mulsi3>
 8014384:	800b883a 	mov	r5,r16
 8014388:	e009883a 	mov	r4,fp
 801438c:	d8800515 	stw	r2,20(sp)
 8014390:	80087fc0 	call	80087fc <__mulsi3>
 8014394:	8009883a 	mov	r4,r16
 8014398:	b80b883a 	mov	r5,r23
 801439c:	d8800315 	stw	r2,12(sp)
 80143a0:	80087fc0 	call	80087fc <__mulsi3>
 80143a4:	da800117 	ldw	r10,4(sp)
 80143a8:	b80b883a 	mov	r5,r23
 80143ac:	1021883a 	mov	r16,r2
 80143b0:	5009883a 	mov	r4,r10
 80143b4:	80087fc0 	call	80087fc <__mulsi3>
 80143b8:	d9c00517 	ldw	r7,20(sp)
 80143bc:	da400317 	ldw	r9,12(sp)
 80143c0:	d8c00217 	ldw	r3,8(sp)
 80143c4:	3808d43a 	srli	r4,r7,16
 80143c8:	1245883a 	add	r2,r2,r9
 80143cc:	da000417 	ldw	r8,16(sp)
 80143d0:	2085883a 	add	r2,r4,r2
 80143d4:	1240022e 	bgeu	r2,r9,80143e0 <__divdf3+0x4b8>
 80143d8:	01000074 	movhi	r4,1
 80143dc:	8121883a 	add	r16,r16,r4
 80143e0:	1008d43a 	srli	r4,r2,16
 80143e4:	1004943a 	slli	r2,r2,16
 80143e8:	39ffffcc 	andi	r7,r7,65535
 80143ec:	2409883a 	add	r4,r4,r16
 80143f0:	11c5883a 	add	r2,r2,r7
 80143f4:	4100bb36 	bltu	r8,r4,80146e4 <__divdf3+0x7bc>
 80143f8:	4100d726 	beq	r8,r4,8014758 <__divdf3+0x830>
 80143fc:	4109c83a 	sub	r4,r8,r4
 8014400:	a8a1c83a 	sub	r16,r21,r2
 8014404:	ac2b803a 	cmpltu	r21,r21,r16
 8014408:	256bc83a 	sub	r21,r4,r21
 801440c:	b540d926 	beq	r22,r21,8014774 <__divdf3+0x84c>
 8014410:	a00b883a 	mov	r5,r20
 8014414:	a809883a 	mov	r4,r21
 8014418:	d8c00215 	stw	r3,8(sp)
 801441c:	80087400 	call	8008740 <__udivsi3>
 8014420:	100b883a 	mov	r5,r2
 8014424:	9009883a 	mov	r4,r18
 8014428:	d8800515 	stw	r2,20(sp)
 801442c:	80087fc0 	call	80087fc <__mulsi3>
 8014430:	a809883a 	mov	r4,r21
 8014434:	a00b883a 	mov	r5,r20
 8014438:	d8800415 	stw	r2,16(sp)
 801443c:	80087a40 	call	80087a4 <__umodsi3>
 8014440:	1004943a 	slli	r2,r2,16
 8014444:	8008d43a 	srli	r4,r16,16
 8014448:	da000417 	ldw	r8,16(sp)
 801444c:	d8c00217 	ldw	r3,8(sp)
 8014450:	2084b03a 	or	r2,r4,r2
 8014454:	d9c00517 	ldw	r7,20(sp)
 8014458:	1200062e 	bgeu	r2,r8,8014474 <__divdf3+0x54c>
 801445c:	1585883a 	add	r2,r2,r22
 8014460:	393fffc4 	addi	r4,r7,-1
 8014464:	1580c536 	bltu	r2,r22,801477c <__divdf3+0x854>
 8014468:	1200c42e 	bgeu	r2,r8,801477c <__divdf3+0x854>
 801446c:	39ffff84 	addi	r7,r7,-2
 8014470:	1585883a 	add	r2,r2,r22
 8014474:	122bc83a 	sub	r21,r2,r8
 8014478:	a00b883a 	mov	r5,r20
 801447c:	a809883a 	mov	r4,r21
 8014480:	d8c00215 	stw	r3,8(sp)
 8014484:	d9c00515 	stw	r7,20(sp)
 8014488:	80087400 	call	8008740 <__udivsi3>
 801448c:	9009883a 	mov	r4,r18
 8014490:	100b883a 	mov	r5,r2
 8014494:	d8800415 	stw	r2,16(sp)
 8014498:	80087fc0 	call	80087fc <__mulsi3>
 801449c:	a809883a 	mov	r4,r21
 80144a0:	a00b883a 	mov	r5,r20
 80144a4:	1025883a 	mov	r18,r2
 80144a8:	80087a40 	call	80087a4 <__umodsi3>
 80144ac:	1004943a 	slli	r2,r2,16
 80144b0:	813fffcc 	andi	r4,r16,65535
 80144b4:	d8c00217 	ldw	r3,8(sp)
 80144b8:	20a0b03a 	or	r16,r4,r2
 80144bc:	d9c00517 	ldw	r7,20(sp)
 80144c0:	da000417 	ldw	r8,16(sp)
 80144c4:	8480062e 	bgeu	r16,r18,80144e0 <__divdf3+0x5b8>
 80144c8:	85a1883a 	add	r16,r16,r22
 80144cc:	40bfffc4 	addi	r2,r8,-1
 80144d0:	8580ac36 	bltu	r16,r22,8014784 <__divdf3+0x85c>
 80144d4:	8480ab2e 	bgeu	r16,r18,8014784 <__divdf3+0x85c>
 80144d8:	423fff84 	addi	r8,r8,-2
 80144dc:	85a1883a 	add	r16,r16,r22
 80144e0:	3804943a 	slli	r2,r7,16
 80144e4:	84a1c83a 	sub	r16,r16,r18
 80144e8:	e009883a 	mov	r4,fp
 80144ec:	1228b03a 	or	r20,r2,r8
 80144f0:	a1ffffcc 	andi	r7,r20,65535
 80144f4:	a024d43a 	srli	r18,r20,16
 80144f8:	380b883a 	mov	r5,r7
 80144fc:	d8c00215 	stw	r3,8(sp)
 8014500:	d9c00515 	stw	r7,20(sp)
 8014504:	80087fc0 	call	80087fc <__mulsi3>
 8014508:	900b883a 	mov	r5,r18
 801450c:	e009883a 	mov	r4,fp
 8014510:	102b883a 	mov	r21,r2
 8014514:	80087fc0 	call	80087fc <__mulsi3>
 8014518:	900b883a 	mov	r5,r18
 801451c:	b809883a 	mov	r4,r23
 8014520:	1039883a 	mov	fp,r2
 8014524:	80087fc0 	call	80087fc <__mulsi3>
 8014528:	d9c00517 	ldw	r7,20(sp)
 801452c:	b80b883a 	mov	r5,r23
 8014530:	1025883a 	mov	r18,r2
 8014534:	3809883a 	mov	r4,r7
 8014538:	80087fc0 	call	80087fc <__mulsi3>
 801453c:	a808d43a 	srli	r4,r21,16
 8014540:	1705883a 	add	r2,r2,fp
 8014544:	d8c00217 	ldw	r3,8(sp)
 8014548:	2085883a 	add	r2,r4,r2
 801454c:	1700022e 	bgeu	r2,fp,8014558 <__divdf3+0x630>
 8014550:	01000074 	movhi	r4,1
 8014554:	9125883a 	add	r18,r18,r4
 8014558:	1008d43a 	srli	r4,r2,16
 801455c:	1004943a 	slli	r2,r2,16
 8014560:	ad7fffcc 	andi	r21,r21,65535
 8014564:	2489883a 	add	r4,r4,r18
 8014568:	1545883a 	add	r2,r2,r21
 801456c:	81003836 	bltu	r16,r4,8014650 <__divdf3+0x728>
 8014570:	81003626 	beq	r16,r4,801464c <__divdf3+0x724>
 8014574:	a5000054 	ori	r20,r20,1
 8014578:	1880ffc4 	addi	r2,r3,1023
 801457c:	00bf2e0e 	bge	zero,r2,8014238 <__divdf3+0x310>
 8014580:	a10001cc 	andi	r4,r20,7
 8014584:	20000726 	beq	r4,zero,80145a4 <__divdf3+0x67c>
 8014588:	a10003cc 	andi	r4,r20,15
 801458c:	01400104 	movi	r5,4
 8014590:	21400426 	beq	r4,r5,80145a4 <__divdf3+0x67c>
 8014594:	a149883a 	add	r4,r20,r5
 8014598:	2529803a 	cmpltu	r20,r4,r20
 801459c:	8d23883a 	add	r17,r17,r20
 80145a0:	2029883a 	mov	r20,r4
 80145a4:	8900402c 	andhi	r4,r17,256
 80145a8:	20000426 	beq	r4,zero,80145bc <__divdf3+0x694>
 80145ac:	18810004 	addi	r2,r3,1024
 80145b0:	00ffc034 	movhi	r3,65280
 80145b4:	18ffffc4 	addi	r3,r3,-1
 80145b8:	88e2703a 	and	r17,r17,r3
 80145bc:	00c1ff84 	movi	r3,2046
 80145c0:	18beb416 	blt	r3,r2,8014094 <__divdf3+0x16c>
 80145c4:	a028d0fa 	srli	r20,r20,3
 80145c8:	882a977a 	slli	r21,r17,29
 80145cc:	8820927a 	slli	r16,r17,9
 80145d0:	1081ffcc 	andi	r2,r2,2047
 80145d4:	ad2ab03a 	or	r21,r21,r20
 80145d8:	8020d33a 	srli	r16,r16,12
 80145dc:	9900004c 	andi	r4,r19,1
 80145e0:	003eb006 	br	80140a4 <__divdf3+0x17c>
 80145e4:	8080022c 	andhi	r2,r16,8
 80145e8:	10001226 	beq	r2,zero,8014634 <__divdf3+0x70c>
 80145ec:	8880022c 	andhi	r2,r17,8
 80145f0:	1000101e 	bne	r2,zero,8014634 <__divdf3+0x70c>
 80145f4:	00800434 	movhi	r2,16
 80145f8:	8c000234 	orhi	r16,r17,8
 80145fc:	10bfffc4 	addi	r2,r2,-1
 8014600:	b809883a 	mov	r4,r23
 8014604:	80a0703a 	and	r16,r16,r2
 8014608:	a02b883a 	mov	r21,r20
 801460c:	003f0806 	br	8014230 <__divdf3+0x308>
 8014610:	008000c4 	movi	r2,3
 8014614:	3880b126 	beq	r7,r2,80148dc <__divdf3+0x9b4>
 8014618:	00800044 	movi	r2,1
 801461c:	38805b1e 	bne	r7,r2,801478c <__divdf3+0x864>
 8014620:	e009883a 	mov	r4,fp
 8014624:	0005883a 	mov	r2,zero
 8014628:	0021883a 	mov	r16,zero
 801462c:	002b883a 	mov	r21,zero
 8014630:	003e9c06 	br	80140a4 <__divdf3+0x17c>
 8014634:	00800434 	movhi	r2,16
 8014638:	84000234 	orhi	r16,r16,8
 801463c:	10bfffc4 	addi	r2,r2,-1
 8014640:	b009883a 	mov	r4,r22
 8014644:	80a0703a 	and	r16,r16,r2
 8014648:	003ef906 	br	8014230 <__divdf3+0x308>
 801464c:	103fca26 	beq	r2,zero,8014578 <__divdf3+0x650>
 8014650:	b421883a 	add	r16,r22,r16
 8014654:	a17fffc4 	addi	r5,r20,-1
 8014658:	8580422e 	bgeu	r16,r22,8014764 <__divdf3+0x83c>
 801465c:	2829883a 	mov	r20,r5
 8014660:	813fc41e 	bne	r16,r4,8014574 <__divdf3+0x64c>
 8014664:	d9800017 	ldw	r6,0(sp)
 8014668:	30bfc21e 	bne	r6,r2,8014574 <__divdf3+0x64c>
 801466c:	003fc206 	br	8014578 <__divdf3+0x650>
 8014670:	143ff604 	addi	r16,r2,-40
 8014674:	8c20983a 	sll	r16,r17,r16
 8014678:	002b883a 	mov	r21,zero
 801467c:	003eb406 	br	8014150 <__divdf3+0x228>
 8014680:	d9800215 	stw	r6,8(sp)
 8014684:	d9c00515 	stw	r7,20(sp)
 8014688:	da000415 	stw	r8,16(sp)
 801468c:	8015ebc0 	call	8015ebc <__clzsi2>
 8014690:	10800804 	addi	r2,r2,32
 8014694:	da000417 	ldw	r8,16(sp)
 8014698:	d9c00517 	ldw	r7,20(sp)
 801469c:	d9800217 	ldw	r6,8(sp)
 80146a0:	003ea106 	br	8014128 <__divdf3+0x200>
 80146a4:	147ff604 	addi	r17,r2,-40
 80146a8:	3462983a 	sll	r17,r6,r17
 80146ac:	0029883a 	mov	r20,zero
 80146b0:	003ec906 	br	80141d8 <__divdf3+0x2b0>
 80146b4:	3009883a 	mov	r4,r6
 80146b8:	d9400115 	stw	r5,4(sp)
 80146bc:	d9800215 	stw	r6,8(sp)
 80146c0:	da000415 	stw	r8,16(sp)
 80146c4:	da400315 	stw	r9,12(sp)
 80146c8:	8015ebc0 	call	8015ebc <__clzsi2>
 80146cc:	10800804 	addi	r2,r2,32
 80146d0:	da400317 	ldw	r9,12(sp)
 80146d4:	da000417 	ldw	r8,16(sp)
 80146d8:	d9800217 	ldw	r6,8(sp)
 80146dc:	d9400117 	ldw	r5,4(sp)
 80146e0:	003eb306 	br	80141b0 <__divdf3+0x288>
 80146e4:	d9800017 	ldw	r6,0(sp)
 80146e8:	a9ab883a 	add	r21,r21,r6
 80146ec:	a98b803a 	cmpltu	r5,r21,r6
 80146f0:	2d8b883a 	add	r5,r5,r22
 80146f4:	2a11883a 	add	r8,r5,r8
 80146f8:	897fffc4 	addi	r5,r17,-1
 80146fc:	b2000c2e 	bgeu	r22,r8,8014730 <__divdf3+0x808>
 8014700:	41003f36 	bltu	r8,r4,8014800 <__divdf3+0x8d8>
 8014704:	22006c26 	beq	r4,r8,80148b8 <__divdf3+0x990>
 8014708:	4109c83a 	sub	r4,r8,r4
 801470c:	2823883a 	mov	r17,r5
 8014710:	003f3b06 	br	8014400 <__divdf3+0x4d8>
 8014714:	ad3ed336 	bltu	r21,r20,8014264 <__divdf3+0x33c>
 8014718:	a804d07a 	srli	r2,r21,1
 801471c:	802e97fa 	slli	r23,r16,31
 8014720:	a82a97fa 	slli	r21,r21,31
 8014724:	8020d07a 	srli	r16,r16,1
 8014728:	b8aeb03a 	or	r23,r23,r2
 801472c:	003ed006 	br	8014270 <__divdf3+0x348>
 8014730:	b23ff51e 	bne	r22,r8,8014708 <__divdf3+0x7e0>
 8014734:	d9800017 	ldw	r6,0(sp)
 8014738:	a9bff12e 	bgeu	r21,r6,8014700 <__divdf3+0x7d8>
 801473c:	b109c83a 	sub	r4,r22,r4
 8014740:	2823883a 	mov	r17,r5
 8014744:	003f2e06 	br	8014400 <__divdf3+0x4d8>
 8014748:	2021883a 	mov	r16,r4
 801474c:	003eff06 	br	801434c <__divdf3+0x424>
 8014750:	2023883a 	mov	r17,r4
 8014754:	003ee406 	br	80142e8 <__divdf3+0x3c0>
 8014758:	a8bfe236 	bltu	r21,r2,80146e4 <__divdf3+0x7bc>
 801475c:	0009883a 	mov	r4,zero
 8014760:	003f2706 	br	8014400 <__divdf3+0x4d8>
 8014764:	81002d36 	bltu	r16,r4,801481c <__divdf3+0x8f4>
 8014768:	24005626 	beq	r4,r16,80148c4 <__divdf3+0x99c>
 801476c:	2829883a 	mov	r20,r5
 8014770:	003f8006 	br	8014574 <__divdf3+0x64c>
 8014774:	053fffc4 	movi	r20,-1
 8014778:	003f7f06 	br	8014578 <__divdf3+0x650>
 801477c:	200f883a 	mov	r7,r4
 8014780:	003f3c06 	br	8014474 <__divdf3+0x54c>
 8014784:	1011883a 	mov	r8,r2
 8014788:	003f5506 	br	80144e0 <__divdf3+0x5b8>
 801478c:	e027883a 	mov	r19,fp
 8014790:	003f7906 	br	8014578 <__divdf3+0x650>
 8014794:	010007c4 	movi	r4,31
 8014798:	20c02816 	blt	r4,r3,801483c <__divdf3+0x914>
 801479c:	00800804 	movi	r2,32
 80147a0:	10c5c83a 	sub	r2,r2,r3
 80147a4:	888a983a 	sll	r5,r17,r2
 80147a8:	a0c8d83a 	srl	r4,r20,r3
 80147ac:	a084983a 	sll	r2,r20,r2
 80147b0:	88e2d83a 	srl	r17,r17,r3
 80147b4:	2906b03a 	or	r3,r5,r4
 80147b8:	1004c03a 	cmpne	r2,r2,zero
 80147bc:	1886b03a 	or	r3,r3,r2
 80147c0:	188001cc 	andi	r2,r3,7
 80147c4:	10000726 	beq	r2,zero,80147e4 <__divdf3+0x8bc>
 80147c8:	188003cc 	andi	r2,r3,15
 80147cc:	01000104 	movi	r4,4
 80147d0:	11000426 	beq	r2,r4,80147e4 <__divdf3+0x8bc>
 80147d4:	1805883a 	mov	r2,r3
 80147d8:	10c00104 	addi	r3,r2,4
 80147dc:	1885803a 	cmpltu	r2,r3,r2
 80147e0:	88a3883a 	add	r17,r17,r2
 80147e4:	8880202c 	andhi	r2,r17,128
 80147e8:	10002926 	beq	r2,zero,8014890 <__divdf3+0x968>
 80147ec:	9900004c 	andi	r4,r19,1
 80147f0:	00800044 	movi	r2,1
 80147f4:	0021883a 	mov	r16,zero
 80147f8:	002b883a 	mov	r21,zero
 80147fc:	003e2906 	br	80140a4 <__divdf3+0x17c>
 8014800:	d9800017 	ldw	r6,0(sp)
 8014804:	8c7fff84 	addi	r17,r17,-2
 8014808:	a9ab883a 	add	r21,r21,r6
 801480c:	a98b803a 	cmpltu	r5,r21,r6
 8014810:	2d8b883a 	add	r5,r5,r22
 8014814:	2a11883a 	add	r8,r5,r8
 8014818:	003ef806 	br	80143fc <__divdf3+0x4d4>
 801481c:	d9800017 	ldw	r6,0(sp)
 8014820:	318f883a 	add	r7,r6,r6
 8014824:	398b803a 	cmpltu	r5,r7,r6
 8014828:	2d8d883a 	add	r6,r5,r22
 801482c:	81a1883a 	add	r16,r16,r6
 8014830:	a17fff84 	addi	r5,r20,-2
 8014834:	d9c00015 	stw	r7,0(sp)
 8014838:	003f8806 	br	801465c <__divdf3+0x734>
 801483c:	013ff844 	movi	r4,-31
 8014840:	2085c83a 	sub	r2,r4,r2
 8014844:	8888d83a 	srl	r4,r17,r2
 8014848:	00800804 	movi	r2,32
 801484c:	18802126 	beq	r3,r2,80148d4 <__divdf3+0x9ac>
 8014850:	04001004 	movi	r16,64
 8014854:	80c7c83a 	sub	r3,r16,r3
 8014858:	88e0983a 	sll	r16,r17,r3
 801485c:	8504b03a 	or	r2,r16,r20
 8014860:	1004c03a 	cmpne	r2,r2,zero
 8014864:	2084b03a 	or	r2,r4,r2
 8014868:	144001cc 	andi	r17,r2,7
 801486c:	88000d1e 	bne	r17,zero,80148a4 <__divdf3+0x97c>
 8014870:	0021883a 	mov	r16,zero
 8014874:	102ad0fa 	srli	r21,r2,3
 8014878:	9900004c 	andi	r4,r19,1
 801487c:	0005883a 	mov	r2,zero
 8014880:	ac6ab03a 	or	r21,r21,r17
 8014884:	003e0706 	br	80140a4 <__divdf3+0x17c>
 8014888:	1007883a 	mov	r3,r2
 801488c:	0023883a 	mov	r17,zero
 8014890:	8820927a 	slli	r16,r17,9
 8014894:	1805883a 	mov	r2,r3
 8014898:	8822977a 	slli	r17,r17,29
 801489c:	8020d33a 	srli	r16,r16,12
 80148a0:	003ff406 	br	8014874 <__divdf3+0x94c>
 80148a4:	10c003cc 	andi	r3,r2,15
 80148a8:	01000104 	movi	r4,4
 80148ac:	193ff626 	beq	r3,r4,8014888 <__divdf3+0x960>
 80148b0:	0023883a 	mov	r17,zero
 80148b4:	003fc806 	br	80147d8 <__divdf3+0x8b0>
 80148b8:	a8bfd136 	bltu	r21,r2,8014800 <__divdf3+0x8d8>
 80148bc:	2823883a 	mov	r17,r5
 80148c0:	003fa606 	br	801475c <__divdf3+0x834>
 80148c4:	d9800017 	ldw	r6,0(sp)
 80148c8:	30bfd436 	bltu	r6,r2,801481c <__divdf3+0x8f4>
 80148cc:	2829883a 	mov	r20,r5
 80148d0:	003f6406 	br	8014664 <__divdf3+0x73c>
 80148d4:	0021883a 	mov	r16,zero
 80148d8:	003fe006 	br	801485c <__divdf3+0x934>
 80148dc:	00800434 	movhi	r2,16
 80148e0:	8c000234 	orhi	r16,r17,8
 80148e4:	10bfffc4 	addi	r2,r2,-1
 80148e8:	e009883a 	mov	r4,fp
 80148ec:	80a0703a 	and	r16,r16,r2
 80148f0:	a02b883a 	mov	r21,r20
 80148f4:	003e4e06 	br	8014230 <__divdf3+0x308>

080148f8 <__eqdf2>:
 80148f8:	2804d53a 	srli	r2,r5,20
 80148fc:	3806d53a 	srli	r3,r7,20
 8014900:	02000434 	movhi	r8,16
 8014904:	423fffc4 	addi	r8,r8,-1
 8014908:	1081ffcc 	andi	r2,r2,2047
 801490c:	0281ffc4 	movi	r10,2047
 8014910:	2a12703a 	and	r9,r5,r8
 8014914:	18c1ffcc 	andi	r3,r3,2047
 8014918:	3a10703a 	and	r8,r7,r8
 801491c:	280ad7fa 	srli	r5,r5,31
 8014920:	380ed7fa 	srli	r7,r7,31
 8014924:	12801026 	beq	r2,r10,8014968 <__eqdf2+0x70>
 8014928:	0281ffc4 	movi	r10,2047
 801492c:	1a800a26 	beq	r3,r10,8014958 <__eqdf2+0x60>
 8014930:	10c00226 	beq	r2,r3,801493c <__eqdf2+0x44>
 8014934:	00800044 	movi	r2,1
 8014938:	f800283a 	ret
 801493c:	4a3ffd1e 	bne	r9,r8,8014934 <__eqdf2+0x3c>
 8014940:	21bffc1e 	bne	r4,r6,8014934 <__eqdf2+0x3c>
 8014944:	29c00c26 	beq	r5,r7,8014978 <__eqdf2+0x80>
 8014948:	103ffa1e 	bne	r2,zero,8014934 <__eqdf2+0x3c>
 801494c:	2244b03a 	or	r2,r4,r9
 8014950:	1004c03a 	cmpne	r2,r2,zero
 8014954:	f800283a 	ret
 8014958:	3214b03a 	or	r10,r6,r8
 801495c:	503ff426 	beq	r10,zero,8014930 <__eqdf2+0x38>
 8014960:	00800044 	movi	r2,1
 8014964:	f800283a 	ret
 8014968:	2254b03a 	or	r10,r4,r9
 801496c:	503fee26 	beq	r10,zero,8014928 <__eqdf2+0x30>
 8014970:	00800044 	movi	r2,1
 8014974:	f800283a 	ret
 8014978:	0005883a 	mov	r2,zero
 801497c:	f800283a 	ret

08014980 <__gedf2>:
 8014980:	2804d53a 	srli	r2,r5,20
 8014984:	3806d53a 	srli	r3,r7,20
 8014988:	02000434 	movhi	r8,16
 801498c:	423fffc4 	addi	r8,r8,-1
 8014990:	1081ffcc 	andi	r2,r2,2047
 8014994:	0241ffc4 	movi	r9,2047
 8014998:	2a14703a 	and	r10,r5,r8
 801499c:	18c1ffcc 	andi	r3,r3,2047
 80149a0:	3a10703a 	and	r8,r7,r8
 80149a4:	280ad7fa 	srli	r5,r5,31
 80149a8:	380ed7fa 	srli	r7,r7,31
 80149ac:	12401d26 	beq	r2,r9,8014a24 <__gedf2+0xa4>
 80149b0:	0241ffc4 	movi	r9,2047
 80149b4:	1a401226 	beq	r3,r9,8014a00 <__gedf2+0x80>
 80149b8:	1000081e 	bne	r2,zero,80149dc <__gedf2+0x5c>
 80149bc:	2296b03a 	or	r11,r4,r10
 80149c0:	5813003a 	cmpeq	r9,r11,zero
 80149c4:	1800091e 	bne	r3,zero,80149ec <__gedf2+0x6c>
 80149c8:	3218b03a 	or	r12,r6,r8
 80149cc:	6000071e 	bne	r12,zero,80149ec <__gedf2+0x6c>
 80149d0:	0005883a 	mov	r2,zero
 80149d4:	5800101e 	bne	r11,zero,8014a18 <__gedf2+0x98>
 80149d8:	f800283a 	ret
 80149dc:	18000c1e 	bne	r3,zero,8014a10 <__gedf2+0x90>
 80149e0:	3212b03a 	or	r9,r6,r8
 80149e4:	48000c26 	beq	r9,zero,8014a18 <__gedf2+0x98>
 80149e8:	0013883a 	mov	r9,zero
 80149ec:	39c03fcc 	andi	r7,r7,255
 80149f0:	48000826 	beq	r9,zero,8014a14 <__gedf2+0x94>
 80149f4:	38000926 	beq	r7,zero,8014a1c <__gedf2+0x9c>
 80149f8:	00800044 	movi	r2,1
 80149fc:	f800283a 	ret
 8014a00:	3212b03a 	or	r9,r6,r8
 8014a04:	483fec26 	beq	r9,zero,80149b8 <__gedf2+0x38>
 8014a08:	00bfff84 	movi	r2,-2
 8014a0c:	f800283a 	ret
 8014a10:	39c03fcc 	andi	r7,r7,255
 8014a14:	29c00626 	beq	r5,r7,8014a30 <__gedf2+0xb0>
 8014a18:	283ff726 	beq	r5,zero,80149f8 <__gedf2+0x78>
 8014a1c:	00bfffc4 	movi	r2,-1
 8014a20:	f800283a 	ret
 8014a24:	2292b03a 	or	r9,r4,r10
 8014a28:	483fe126 	beq	r9,zero,80149b0 <__gedf2+0x30>
 8014a2c:	003ff606 	br	8014a08 <__gedf2+0x88>
 8014a30:	18bff916 	blt	r3,r2,8014a18 <__gedf2+0x98>
 8014a34:	10c00316 	blt	r2,r3,8014a44 <__gedf2+0xc4>
 8014a38:	42bff736 	bltu	r8,r10,8014a18 <__gedf2+0x98>
 8014a3c:	52000326 	beq	r10,r8,8014a4c <__gedf2+0xcc>
 8014a40:	5200042e 	bgeu	r10,r8,8014a54 <__gedf2+0xd4>
 8014a44:	283fec1e 	bne	r5,zero,80149f8 <__gedf2+0x78>
 8014a48:	003ff406 	br	8014a1c <__gedf2+0x9c>
 8014a4c:	313ff236 	bltu	r6,r4,8014a18 <__gedf2+0x98>
 8014a50:	21bffc36 	bltu	r4,r6,8014a44 <__gedf2+0xc4>
 8014a54:	0005883a 	mov	r2,zero
 8014a58:	f800283a 	ret

08014a5c <__ledf2>:
 8014a5c:	2804d53a 	srli	r2,r5,20
 8014a60:	3810d53a 	srli	r8,r7,20
 8014a64:	00c00434 	movhi	r3,16
 8014a68:	18ffffc4 	addi	r3,r3,-1
 8014a6c:	1081ffcc 	andi	r2,r2,2047
 8014a70:	0241ffc4 	movi	r9,2047
 8014a74:	28d4703a 	and	r10,r5,r3
 8014a78:	4201ffcc 	andi	r8,r8,2047
 8014a7c:	38c6703a 	and	r3,r7,r3
 8014a80:	280ad7fa 	srli	r5,r5,31
 8014a84:	380ed7fa 	srli	r7,r7,31
 8014a88:	12401f26 	beq	r2,r9,8014b08 <__ledf2+0xac>
 8014a8c:	0241ffc4 	movi	r9,2047
 8014a90:	42401426 	beq	r8,r9,8014ae4 <__ledf2+0x88>
 8014a94:	1000091e 	bne	r2,zero,8014abc <__ledf2+0x60>
 8014a98:	2296b03a 	or	r11,r4,r10
 8014a9c:	5813003a 	cmpeq	r9,r11,zero
 8014aa0:	29403fcc 	andi	r5,r5,255
 8014aa4:	40000a1e 	bne	r8,zero,8014ad0 <__ledf2+0x74>
 8014aa8:	30d8b03a 	or	r12,r6,r3
 8014aac:	6000081e 	bne	r12,zero,8014ad0 <__ledf2+0x74>
 8014ab0:	0005883a 	mov	r2,zero
 8014ab4:	5800111e 	bne	r11,zero,8014afc <__ledf2+0xa0>
 8014ab8:	f800283a 	ret
 8014abc:	29403fcc 	andi	r5,r5,255
 8014ac0:	40000c1e 	bne	r8,zero,8014af4 <__ledf2+0x98>
 8014ac4:	30d2b03a 	or	r9,r6,r3
 8014ac8:	48000c26 	beq	r9,zero,8014afc <__ledf2+0xa0>
 8014acc:	0013883a 	mov	r9,zero
 8014ad0:	39c03fcc 	andi	r7,r7,255
 8014ad4:	48000826 	beq	r9,zero,8014af8 <__ledf2+0x9c>
 8014ad8:	38001126 	beq	r7,zero,8014b20 <__ledf2+0xc4>
 8014adc:	00800044 	movi	r2,1
 8014ae0:	f800283a 	ret
 8014ae4:	30d2b03a 	or	r9,r6,r3
 8014ae8:	483fea26 	beq	r9,zero,8014a94 <__ledf2+0x38>
 8014aec:	00800084 	movi	r2,2
 8014af0:	f800283a 	ret
 8014af4:	39c03fcc 	andi	r7,r7,255
 8014af8:	39400726 	beq	r7,r5,8014b18 <__ledf2+0xbc>
 8014afc:	2800081e 	bne	r5,zero,8014b20 <__ledf2+0xc4>
 8014b00:	00800044 	movi	r2,1
 8014b04:	f800283a 	ret
 8014b08:	2292b03a 	or	r9,r4,r10
 8014b0c:	483fdf26 	beq	r9,zero,8014a8c <__ledf2+0x30>
 8014b10:	00800084 	movi	r2,2
 8014b14:	f800283a 	ret
 8014b18:	4080030e 	bge	r8,r2,8014b28 <__ledf2+0xcc>
 8014b1c:	383fef26 	beq	r7,zero,8014adc <__ledf2+0x80>
 8014b20:	00bfffc4 	movi	r2,-1
 8014b24:	f800283a 	ret
 8014b28:	123feb16 	blt	r2,r8,8014ad8 <__ledf2+0x7c>
 8014b2c:	1abff336 	bltu	r3,r10,8014afc <__ledf2+0xa0>
 8014b30:	50c00326 	beq	r10,r3,8014b40 <__ledf2+0xe4>
 8014b34:	50c0042e 	bgeu	r10,r3,8014b48 <__ledf2+0xec>
 8014b38:	283fe81e 	bne	r5,zero,8014adc <__ledf2+0x80>
 8014b3c:	003ff806 	br	8014b20 <__ledf2+0xc4>
 8014b40:	313fee36 	bltu	r6,r4,8014afc <__ledf2+0xa0>
 8014b44:	21bffc36 	bltu	r4,r6,8014b38 <__ledf2+0xdc>
 8014b48:	0005883a 	mov	r2,zero
 8014b4c:	f800283a 	ret

08014b50 <__muldf3>:
 8014b50:	deffee04 	addi	sp,sp,-72
 8014b54:	dd000c15 	stw	r20,48(sp)
 8014b58:	2828d53a 	srli	r20,r5,20
 8014b5c:	ddc00f15 	stw	r23,60(sp)
 8014b60:	282ed7fa 	srli	r23,r5,31
 8014b64:	dc000815 	stw	r16,32(sp)
 8014b68:	04000434 	movhi	r16,16
 8014b6c:	dcc00b15 	stw	r19,44(sp)
 8014b70:	843fffc4 	addi	r16,r16,-1
 8014b74:	dfc01115 	stw	ra,68(sp)
 8014b78:	df001015 	stw	fp,64(sp)
 8014b7c:	dd800e15 	stw	r22,56(sp)
 8014b80:	dd400d15 	stw	r21,52(sp)
 8014b84:	dc800a15 	stw	r18,40(sp)
 8014b88:	dc400915 	stw	r17,36(sp)
 8014b8c:	a501ffcc 	andi	r20,r20,2047
 8014b90:	2c20703a 	and	r16,r5,r16
 8014b94:	b827883a 	mov	r19,r23
 8014b98:	ba403fcc 	andi	r9,r23,255
 8014b9c:	a0006026 	beq	r20,zero,8014d20 <__muldf3+0x1d0>
 8014ba0:	0081ffc4 	movi	r2,2047
 8014ba4:	202d883a 	mov	r22,r4
 8014ba8:	a0803626 	beq	r20,r2,8014c84 <__muldf3+0x134>
 8014bac:	84000434 	orhi	r16,r16,16
 8014bb0:	200ad77a 	srli	r5,r4,29
 8014bb4:	800490fa 	slli	r2,r16,3
 8014bb8:	202c90fa 	slli	r22,r4,3
 8014bbc:	a53f0044 	addi	r20,r20,-1023
 8014bc0:	28a0b03a 	or	r16,r5,r2
 8014bc4:	002b883a 	mov	r21,zero
 8014bc8:	000b883a 	mov	r5,zero
 8014bcc:	3804d53a 	srli	r2,r7,20
 8014bd0:	3838d7fa 	srli	fp,r7,31
 8014bd4:	04400434 	movhi	r17,16
 8014bd8:	8c7fffc4 	addi	r17,r17,-1
 8014bdc:	1081ffcc 	andi	r2,r2,2047
 8014be0:	3025883a 	mov	r18,r6
 8014be4:	3c62703a 	and	r17,r7,r17
 8014be8:	e2803fcc 	andi	r10,fp,255
 8014bec:	10006d26 	beq	r2,zero,8014da4 <__muldf3+0x254>
 8014bf0:	00c1ffc4 	movi	r3,2047
 8014bf4:	10c06526 	beq	r2,r3,8014d8c <__muldf3+0x23c>
 8014bf8:	8c400434 	orhi	r17,r17,16
 8014bfc:	300ed77a 	srli	r7,r6,29
 8014c00:	880690fa 	slli	r3,r17,3
 8014c04:	302490fa 	slli	r18,r6,3
 8014c08:	10bf0044 	addi	r2,r2,-1023
 8014c0c:	38e2b03a 	or	r17,r7,r3
 8014c10:	000f883a 	mov	r7,zero
 8014c14:	a087883a 	add	r3,r20,r2
 8014c18:	010003c4 	movi	r4,15
 8014c1c:	3d44b03a 	or	r2,r7,r21
 8014c20:	e5ccf03a 	xor	r6,fp,r23
 8014c24:	1a000044 	addi	r8,r3,1
 8014c28:	20809b36 	bltu	r4,r2,8014e98 <__muldf3+0x348>
 8014c2c:	100490ba 	slli	r2,r2,2
 8014c30:	01020074 	movhi	r4,2049
 8014c34:	21131104 	addi	r4,r4,19524
 8014c38:	1105883a 	add	r2,r2,r4
 8014c3c:	10800017 	ldw	r2,0(r2)
 8014c40:	1000683a 	jmp	r2
 8014c44:	08014e98 	cmpnei	zero,at,1338
 8014c48:	08014ca4 	muli	zero,at,1330
 8014c4c:	08014ca4 	muli	zero,at,1330
 8014c50:	08014ca0 	cmpeqi	zero,at,1330
 8014c54:	08014e74 	orhi	zero,at,1337
 8014c58:	08014e74 	orhi	zero,at,1337
 8014c5c:	08014e5c 	xori	zero,at,1337
 8014c60:	08014ca0 	cmpeqi	zero,at,1330
 8014c64:	08014e74 	orhi	zero,at,1337
 8014c68:	08014e5c 	xori	zero,at,1337
 8014c6c:	08014e74 	orhi	zero,at,1337
 8014c70:	08014ca0 	cmpeqi	zero,at,1330
 8014c74:	08014e84 	addi	zero,at,1338
 8014c78:	08014e84 	addi	zero,at,1338
 8014c7c:	08014e84 	addi	zero,at,1338
 8014c80:	080151e4 	muli	zero,at,1351
 8014c84:	2404b03a 	or	r2,r4,r16
 8014c88:	1000711e 	bne	r2,zero,8014e50 <__muldf3+0x300>
 8014c8c:	05400204 	movi	r21,8
 8014c90:	0021883a 	mov	r16,zero
 8014c94:	002d883a 	mov	r22,zero
 8014c98:	01400084 	movi	r5,2
 8014c9c:	003fcb06 	br	8014bcc <__muldf3+0x7c>
 8014ca0:	500d883a 	mov	r6,r10
 8014ca4:	00800084 	movi	r2,2
 8014ca8:	38805926 	beq	r7,r2,8014e10 <__muldf3+0x2c0>
 8014cac:	008000c4 	movi	r2,3
 8014cb0:	3881bb26 	beq	r7,r2,80153a0 <__muldf3+0x850>
 8014cb4:	00800044 	movi	r2,1
 8014cb8:	3881961e 	bne	r7,r2,8015314 <__muldf3+0x7c4>
 8014cbc:	3027883a 	mov	r19,r6
 8014cc0:	0005883a 	mov	r2,zero
 8014cc4:	0021883a 	mov	r16,zero
 8014cc8:	002d883a 	mov	r22,zero
 8014ccc:	1004953a 	slli	r2,r2,20
 8014cd0:	98c03fcc 	andi	r3,r19,255
 8014cd4:	04400434 	movhi	r17,16
 8014cd8:	8c7fffc4 	addi	r17,r17,-1
 8014cdc:	180697fa 	slli	r3,r3,31
 8014ce0:	8460703a 	and	r16,r16,r17
 8014ce4:	80a0b03a 	or	r16,r16,r2
 8014ce8:	80c6b03a 	or	r3,r16,r3
 8014cec:	b005883a 	mov	r2,r22
 8014cf0:	dfc01117 	ldw	ra,68(sp)
 8014cf4:	df001017 	ldw	fp,64(sp)
 8014cf8:	ddc00f17 	ldw	r23,60(sp)
 8014cfc:	dd800e17 	ldw	r22,56(sp)
 8014d00:	dd400d17 	ldw	r21,52(sp)
 8014d04:	dd000c17 	ldw	r20,48(sp)
 8014d08:	dcc00b17 	ldw	r19,44(sp)
 8014d0c:	dc800a17 	ldw	r18,40(sp)
 8014d10:	dc400917 	ldw	r17,36(sp)
 8014d14:	dc000817 	ldw	r16,32(sp)
 8014d18:	dec01204 	addi	sp,sp,72
 8014d1c:	f800283a 	ret
 8014d20:	2404b03a 	or	r2,r4,r16
 8014d24:	202b883a 	mov	r21,r4
 8014d28:	10004426 	beq	r2,zero,8014e3c <__muldf3+0x2ec>
 8014d2c:	80015126 	beq	r16,zero,8015274 <__muldf3+0x724>
 8014d30:	8009883a 	mov	r4,r16
 8014d34:	d9800715 	stw	r6,28(sp)
 8014d38:	d9c00215 	stw	r7,8(sp)
 8014d3c:	da400415 	stw	r9,16(sp)
 8014d40:	8015ebc0 	call	8015ebc <__clzsi2>
 8014d44:	d9800717 	ldw	r6,28(sp)
 8014d48:	d9c00217 	ldw	r7,8(sp)
 8014d4c:	da400417 	ldw	r9,16(sp)
 8014d50:	113ffd44 	addi	r4,r2,-11
 8014d54:	00c00704 	movi	r3,28
 8014d58:	19014216 	blt	r3,r4,8015264 <__muldf3+0x714>
 8014d5c:	00c00744 	movi	r3,29
 8014d60:	15bffe04 	addi	r22,r2,-8
 8014d64:	1907c83a 	sub	r3,r3,r4
 8014d68:	85a0983a 	sll	r16,r16,r22
 8014d6c:	a8c6d83a 	srl	r3,r21,r3
 8014d70:	adac983a 	sll	r22,r21,r22
 8014d74:	1c20b03a 	or	r16,r3,r16
 8014d78:	1080fcc4 	addi	r2,r2,1011
 8014d7c:	00a9c83a 	sub	r20,zero,r2
 8014d80:	002b883a 	mov	r21,zero
 8014d84:	000b883a 	mov	r5,zero
 8014d88:	003f9006 	br	8014bcc <__muldf3+0x7c>
 8014d8c:	3446b03a 	or	r3,r6,r17
 8014d90:	1800281e 	bne	r3,zero,8014e34 <__muldf3+0x2e4>
 8014d94:	0023883a 	mov	r17,zero
 8014d98:	0025883a 	mov	r18,zero
 8014d9c:	01c00084 	movi	r7,2
 8014da0:	003f9c06 	br	8014c14 <__muldf3+0xc4>
 8014da4:	3446b03a 	or	r3,r6,r17
 8014da8:	18001e26 	beq	r3,zero,8014e24 <__muldf3+0x2d4>
 8014dac:	88012126 	beq	r17,zero,8015234 <__muldf3+0x6e4>
 8014db0:	8809883a 	mov	r4,r17
 8014db4:	d9400215 	stw	r5,8(sp)
 8014db8:	d9800715 	stw	r6,28(sp)
 8014dbc:	da400415 	stw	r9,16(sp)
 8014dc0:	da800315 	stw	r10,12(sp)
 8014dc4:	8015ebc0 	call	8015ebc <__clzsi2>
 8014dc8:	d9400217 	ldw	r5,8(sp)
 8014dcc:	d9800717 	ldw	r6,28(sp)
 8014dd0:	da400417 	ldw	r9,16(sp)
 8014dd4:	da800317 	ldw	r10,12(sp)
 8014dd8:	113ffd44 	addi	r4,r2,-11
 8014ddc:	00c00704 	movi	r3,28
 8014de0:	19011016 	blt	r3,r4,8015224 <__muldf3+0x6d4>
 8014de4:	00c00744 	movi	r3,29
 8014de8:	14bffe04 	addi	r18,r2,-8
 8014dec:	1907c83a 	sub	r3,r3,r4
 8014df0:	8ca2983a 	sll	r17,r17,r18
 8014df4:	30c6d83a 	srl	r3,r6,r3
 8014df8:	34a4983a 	sll	r18,r6,r18
 8014dfc:	1c62b03a 	or	r17,r3,r17
 8014e00:	1080fcc4 	addi	r2,r2,1011
 8014e04:	0085c83a 	sub	r2,zero,r2
 8014e08:	000f883a 	mov	r7,zero
 8014e0c:	003f8106 	br	8014c14 <__muldf3+0xc4>
 8014e10:	3027883a 	mov	r19,r6
 8014e14:	0081ffc4 	movi	r2,2047
 8014e18:	0021883a 	mov	r16,zero
 8014e1c:	002d883a 	mov	r22,zero
 8014e20:	003faa06 	br	8014ccc <__muldf3+0x17c>
 8014e24:	0023883a 	mov	r17,zero
 8014e28:	0025883a 	mov	r18,zero
 8014e2c:	01c00044 	movi	r7,1
 8014e30:	003f7806 	br	8014c14 <__muldf3+0xc4>
 8014e34:	01c000c4 	movi	r7,3
 8014e38:	003f7606 	br	8014c14 <__muldf3+0xc4>
 8014e3c:	05400104 	movi	r21,4
 8014e40:	0021883a 	mov	r16,zero
 8014e44:	002d883a 	mov	r22,zero
 8014e48:	01400044 	movi	r5,1
 8014e4c:	003f5f06 	br	8014bcc <__muldf3+0x7c>
 8014e50:	05400304 	movi	r21,12
 8014e54:	014000c4 	movi	r5,3
 8014e58:	003f5c06 	br	8014bcc <__muldf3+0x7c>
 8014e5c:	04000434 	movhi	r16,16
 8014e60:	0027883a 	mov	r19,zero
 8014e64:	843fffc4 	addi	r16,r16,-1
 8014e68:	05bfffc4 	movi	r22,-1
 8014e6c:	0081ffc4 	movi	r2,2047
 8014e70:	003f9606 	br	8014ccc <__muldf3+0x17c>
 8014e74:	8023883a 	mov	r17,r16
 8014e78:	b025883a 	mov	r18,r22
 8014e7c:	280f883a 	mov	r7,r5
 8014e80:	003f8806 	br	8014ca4 <__muldf3+0x154>
 8014e84:	8023883a 	mov	r17,r16
 8014e88:	b025883a 	mov	r18,r22
 8014e8c:	480d883a 	mov	r6,r9
 8014e90:	280f883a 	mov	r7,r5
 8014e94:	003f8306 	br	8014ca4 <__muldf3+0x154>
 8014e98:	b026d43a 	srli	r19,r22,16
 8014e9c:	902ed43a 	srli	r23,r18,16
 8014ea0:	b5bfffcc 	andi	r22,r22,65535
 8014ea4:	94bfffcc 	andi	r18,r18,65535
 8014ea8:	b00b883a 	mov	r5,r22
 8014eac:	9009883a 	mov	r4,r18
 8014eb0:	d8c00515 	stw	r3,20(sp)
 8014eb4:	d9800715 	stw	r6,28(sp)
 8014eb8:	da000615 	stw	r8,24(sp)
 8014ebc:	80087fc0 	call	80087fc <__mulsi3>
 8014ec0:	980b883a 	mov	r5,r19
 8014ec4:	9009883a 	mov	r4,r18
 8014ec8:	1029883a 	mov	r20,r2
 8014ecc:	80087fc0 	call	80087fc <__mulsi3>
 8014ed0:	b80b883a 	mov	r5,r23
 8014ed4:	9809883a 	mov	r4,r19
 8014ed8:	102b883a 	mov	r21,r2
 8014edc:	80087fc0 	call	80087fc <__mulsi3>
 8014ee0:	b809883a 	mov	r4,r23
 8014ee4:	b00b883a 	mov	r5,r22
 8014ee8:	1039883a 	mov	fp,r2
 8014eec:	80087fc0 	call	80087fc <__mulsi3>
 8014ef0:	a008d43a 	srli	r4,r20,16
 8014ef4:	1545883a 	add	r2,r2,r21
 8014ef8:	d8c00517 	ldw	r3,20(sp)
 8014efc:	2085883a 	add	r2,r4,r2
 8014f00:	d9800717 	ldw	r6,28(sp)
 8014f04:	da000617 	ldw	r8,24(sp)
 8014f08:	1540022e 	bgeu	r2,r21,8014f14 <__muldf3+0x3c4>
 8014f0c:	01000074 	movhi	r4,1
 8014f10:	e139883a 	add	fp,fp,r4
 8014f14:	100e943a 	slli	r7,r2,16
 8014f18:	1004d43a 	srli	r2,r2,16
 8014f1c:	882ad43a 	srli	r21,r17,16
 8014f20:	a53fffcc 	andi	r20,r20,65535
 8014f24:	8c7fffcc 	andi	r17,r17,65535
 8014f28:	3d29883a 	add	r20,r7,r20
 8014f2c:	b00b883a 	mov	r5,r22
 8014f30:	8809883a 	mov	r4,r17
 8014f34:	d8c00515 	stw	r3,20(sp)
 8014f38:	d9800715 	stw	r6,28(sp)
 8014f3c:	da000615 	stw	r8,24(sp)
 8014f40:	dd000115 	stw	r20,4(sp)
 8014f44:	d8800015 	stw	r2,0(sp)
 8014f48:	80087fc0 	call	80087fc <__mulsi3>
 8014f4c:	980b883a 	mov	r5,r19
 8014f50:	8809883a 	mov	r4,r17
 8014f54:	d8800215 	stw	r2,8(sp)
 8014f58:	80087fc0 	call	80087fc <__mulsi3>
 8014f5c:	9809883a 	mov	r4,r19
 8014f60:	a80b883a 	mov	r5,r21
 8014f64:	1029883a 	mov	r20,r2
 8014f68:	80087fc0 	call	80087fc <__mulsi3>
 8014f6c:	b00b883a 	mov	r5,r22
 8014f70:	a809883a 	mov	r4,r21
 8014f74:	d8800415 	stw	r2,16(sp)
 8014f78:	80087fc0 	call	80087fc <__mulsi3>
 8014f7c:	d9c00217 	ldw	r7,8(sp)
 8014f80:	1505883a 	add	r2,r2,r20
 8014f84:	d8c00517 	ldw	r3,20(sp)
 8014f88:	3826d43a 	srli	r19,r7,16
 8014f8c:	d9800717 	ldw	r6,28(sp)
 8014f90:	da000617 	ldw	r8,24(sp)
 8014f94:	9885883a 	add	r2,r19,r2
 8014f98:	da400417 	ldw	r9,16(sp)
 8014f9c:	1500022e 	bgeu	r2,r20,8014fa8 <__muldf3+0x458>
 8014fa0:	01000074 	movhi	r4,1
 8014fa4:	4913883a 	add	r9,r9,r4
 8014fa8:	1028d43a 	srli	r20,r2,16
 8014fac:	1004943a 	slli	r2,r2,16
 8014fb0:	802cd43a 	srli	r22,r16,16
 8014fb4:	843fffcc 	andi	r16,r16,65535
 8014fb8:	3cffffcc 	andi	r19,r7,65535
 8014fbc:	9009883a 	mov	r4,r18
 8014fc0:	800b883a 	mov	r5,r16
 8014fc4:	a269883a 	add	r20,r20,r9
 8014fc8:	d8c00515 	stw	r3,20(sp)
 8014fcc:	d9800715 	stw	r6,28(sp)
 8014fd0:	da000615 	stw	r8,24(sp)
 8014fd4:	14e7883a 	add	r19,r2,r19
 8014fd8:	80087fc0 	call	80087fc <__mulsi3>
 8014fdc:	9009883a 	mov	r4,r18
 8014fe0:	b00b883a 	mov	r5,r22
 8014fe4:	d8800315 	stw	r2,12(sp)
 8014fe8:	80087fc0 	call	80087fc <__mulsi3>
 8014fec:	b809883a 	mov	r4,r23
 8014ff0:	b00b883a 	mov	r5,r22
 8014ff4:	d8800215 	stw	r2,8(sp)
 8014ff8:	80087fc0 	call	80087fc <__mulsi3>
 8014ffc:	b80b883a 	mov	r5,r23
 8015000:	8009883a 	mov	r4,r16
 8015004:	d8800415 	stw	r2,16(sp)
 8015008:	80087fc0 	call	80087fc <__mulsi3>
 801500c:	da800317 	ldw	r10,12(sp)
 8015010:	d9c00217 	ldw	r7,8(sp)
 8015014:	d9000017 	ldw	r4,0(sp)
 8015018:	502ed43a 	srli	r23,r10,16
 801501c:	11c5883a 	add	r2,r2,r7
 8015020:	24e5883a 	add	r18,r4,r19
 8015024:	b885883a 	add	r2,r23,r2
 8015028:	d8c00517 	ldw	r3,20(sp)
 801502c:	d9800717 	ldw	r6,28(sp)
 8015030:	da000617 	ldw	r8,24(sp)
 8015034:	da400417 	ldw	r9,16(sp)
 8015038:	11c0022e 	bgeu	r2,r7,8015044 <__muldf3+0x4f4>
 801503c:	01000074 	movhi	r4,1
 8015040:	4913883a 	add	r9,r9,r4
 8015044:	100ed43a 	srli	r7,r2,16
 8015048:	1004943a 	slli	r2,r2,16
 801504c:	55ffffcc 	andi	r23,r10,65535
 8015050:	3a53883a 	add	r9,r7,r9
 8015054:	8809883a 	mov	r4,r17
 8015058:	800b883a 	mov	r5,r16
 801505c:	d8c00515 	stw	r3,20(sp)
 8015060:	d9800715 	stw	r6,28(sp)
 8015064:	da000615 	stw	r8,24(sp)
 8015068:	da400415 	stw	r9,16(sp)
 801506c:	15ef883a 	add	r23,r2,r23
 8015070:	80087fc0 	call	80087fc <__mulsi3>
 8015074:	8809883a 	mov	r4,r17
 8015078:	b00b883a 	mov	r5,r22
 801507c:	d8800215 	stw	r2,8(sp)
 8015080:	80087fc0 	call	80087fc <__mulsi3>
 8015084:	b00b883a 	mov	r5,r22
 8015088:	a809883a 	mov	r4,r21
 801508c:	d8800315 	stw	r2,12(sp)
 8015090:	80087fc0 	call	80087fc <__mulsi3>
 8015094:	8009883a 	mov	r4,r16
 8015098:	a80b883a 	mov	r5,r21
 801509c:	1023883a 	mov	r17,r2
 80150a0:	80087fc0 	call	80087fc <__mulsi3>
 80150a4:	d9c00217 	ldw	r7,8(sp)
 80150a8:	da800317 	ldw	r10,12(sp)
 80150ac:	d8c00517 	ldw	r3,20(sp)
 80150b0:	3808d43a 	srli	r4,r7,16
 80150b4:	1285883a 	add	r2,r2,r10
 80150b8:	d9800717 	ldw	r6,28(sp)
 80150bc:	2085883a 	add	r2,r4,r2
 80150c0:	da000617 	ldw	r8,24(sp)
 80150c4:	da400417 	ldw	r9,16(sp)
 80150c8:	1280022e 	bgeu	r2,r10,80150d4 <__muldf3+0x584>
 80150cc:	01000074 	movhi	r4,1
 80150d0:	8923883a 	add	r17,r17,r4
 80150d4:	1008943a 	slli	r4,r2,16
 80150d8:	39ffffcc 	andi	r7,r7,65535
 80150dc:	e4b9883a 	add	fp,fp,r18
 80150e0:	21cf883a 	add	r7,r4,r7
 80150e4:	e4e7803a 	cmpltu	r19,fp,r19
 80150e8:	3d0f883a 	add	r7,r7,r20
 80150ec:	bf39883a 	add	fp,r23,fp
 80150f0:	99c9883a 	add	r4,r19,r7
 80150f4:	e5ef803a 	cmpltu	r23,fp,r23
 80150f8:	490b883a 	add	r5,r9,r4
 80150fc:	1004d43a 	srli	r2,r2,16
 8015100:	b965883a 	add	r18,r23,r5
 8015104:	24c9803a 	cmpltu	r4,r4,r19
 8015108:	3d29803a 	cmpltu	r20,r7,r20
 801510c:	a128b03a 	or	r20,r20,r4
 8015110:	95ef803a 	cmpltu	r23,r18,r23
 8015114:	2a53803a 	cmpltu	r9,r5,r9
 8015118:	a0a9883a 	add	r20,r20,r2
 801511c:	4deeb03a 	or	r23,r9,r23
 8015120:	a5ef883a 	add	r23,r20,r23
 8015124:	bc63883a 	add	r17,r23,r17
 8015128:	e004927a 	slli	r2,fp,9
 801512c:	d9000117 	ldw	r4,4(sp)
 8015130:	882e927a 	slli	r23,r17,9
 8015134:	9022d5fa 	srli	r17,r18,23
 8015138:	e038d5fa 	srli	fp,fp,23
 801513c:	1104b03a 	or	r2,r2,r4
 8015140:	9024927a 	slli	r18,r18,9
 8015144:	1004c03a 	cmpne	r2,r2,zero
 8015148:	bc62b03a 	or	r17,r23,r17
 801514c:	1738b03a 	or	fp,r2,fp
 8015150:	8880402c 	andhi	r2,r17,256
 8015154:	e4a4b03a 	or	r18,fp,r18
 8015158:	10000726 	beq	r2,zero,8015178 <__muldf3+0x628>
 801515c:	9006d07a 	srli	r3,r18,1
 8015160:	880497fa 	slli	r2,r17,31
 8015164:	9480004c 	andi	r18,r18,1
 8015168:	8822d07a 	srli	r17,r17,1
 801516c:	1ca4b03a 	or	r18,r3,r18
 8015170:	14a4b03a 	or	r18,r2,r18
 8015174:	4007883a 	mov	r3,r8
 8015178:	1880ffc4 	addi	r2,r3,1023
 801517c:	0080460e 	bge	zero,r2,8015298 <__muldf3+0x748>
 8015180:	910001cc 	andi	r4,r18,7
 8015184:	20000726 	beq	r4,zero,80151a4 <__muldf3+0x654>
 8015188:	910003cc 	andi	r4,r18,15
 801518c:	01400104 	movi	r5,4
 8015190:	21400426 	beq	r4,r5,80151a4 <__muldf3+0x654>
 8015194:	9149883a 	add	r4,r18,r5
 8015198:	24a5803a 	cmpltu	r18,r4,r18
 801519c:	8ca3883a 	add	r17,r17,r18
 80151a0:	2025883a 	mov	r18,r4
 80151a4:	8900402c 	andhi	r4,r17,256
 80151a8:	20000426 	beq	r4,zero,80151bc <__muldf3+0x66c>
 80151ac:	18810004 	addi	r2,r3,1024
 80151b0:	00ffc034 	movhi	r3,65280
 80151b4:	18ffffc4 	addi	r3,r3,-1
 80151b8:	88e2703a 	and	r17,r17,r3
 80151bc:	00c1ff84 	movi	r3,2046
 80151c0:	18bf1316 	blt	r3,r2,8014e10 <__muldf3+0x2c0>
 80151c4:	882c977a 	slli	r22,r17,29
 80151c8:	9024d0fa 	srli	r18,r18,3
 80151cc:	8822927a 	slli	r17,r17,9
 80151d0:	1081ffcc 	andi	r2,r2,2047
 80151d4:	b4acb03a 	or	r22,r22,r18
 80151d8:	8820d33a 	srli	r16,r17,12
 80151dc:	3027883a 	mov	r19,r6
 80151e0:	003eba06 	br	8014ccc <__muldf3+0x17c>
 80151e4:	8080022c 	andhi	r2,r16,8
 80151e8:	10000926 	beq	r2,zero,8015210 <__muldf3+0x6c0>
 80151ec:	8880022c 	andhi	r2,r17,8
 80151f0:	1000071e 	bne	r2,zero,8015210 <__muldf3+0x6c0>
 80151f4:	00800434 	movhi	r2,16
 80151f8:	8c000234 	orhi	r16,r17,8
 80151fc:	10bfffc4 	addi	r2,r2,-1
 8015200:	e027883a 	mov	r19,fp
 8015204:	80a0703a 	and	r16,r16,r2
 8015208:	902d883a 	mov	r22,r18
 801520c:	003f1706 	br	8014e6c <__muldf3+0x31c>
 8015210:	00800434 	movhi	r2,16
 8015214:	84000234 	orhi	r16,r16,8
 8015218:	10bfffc4 	addi	r2,r2,-1
 801521c:	80a0703a 	and	r16,r16,r2
 8015220:	003f1206 	br	8014e6c <__muldf3+0x31c>
 8015224:	147ff604 	addi	r17,r2,-40
 8015228:	3462983a 	sll	r17,r6,r17
 801522c:	0025883a 	mov	r18,zero
 8015230:	003ef306 	br	8014e00 <__muldf3+0x2b0>
 8015234:	3009883a 	mov	r4,r6
 8015238:	d9400215 	stw	r5,8(sp)
 801523c:	d9800715 	stw	r6,28(sp)
 8015240:	da400415 	stw	r9,16(sp)
 8015244:	da800315 	stw	r10,12(sp)
 8015248:	8015ebc0 	call	8015ebc <__clzsi2>
 801524c:	10800804 	addi	r2,r2,32
 8015250:	da800317 	ldw	r10,12(sp)
 8015254:	da400417 	ldw	r9,16(sp)
 8015258:	d9800717 	ldw	r6,28(sp)
 801525c:	d9400217 	ldw	r5,8(sp)
 8015260:	003edd06 	br	8014dd8 <__muldf3+0x288>
 8015264:	143ff604 	addi	r16,r2,-40
 8015268:	ac20983a 	sll	r16,r21,r16
 801526c:	002d883a 	mov	r22,zero
 8015270:	003ec106 	br	8014d78 <__muldf3+0x228>
 8015274:	d9800715 	stw	r6,28(sp)
 8015278:	d9c00215 	stw	r7,8(sp)
 801527c:	da400415 	stw	r9,16(sp)
 8015280:	8015ebc0 	call	8015ebc <__clzsi2>
 8015284:	10800804 	addi	r2,r2,32
 8015288:	da400417 	ldw	r9,16(sp)
 801528c:	d9c00217 	ldw	r7,8(sp)
 8015290:	d9800717 	ldw	r6,28(sp)
 8015294:	003eae06 	br	8014d50 <__muldf3+0x200>
 8015298:	00c00044 	movi	r3,1
 801529c:	1887c83a 	sub	r3,r3,r2
 80152a0:	01000e04 	movi	r4,56
 80152a4:	20fe8516 	blt	r4,r3,8014cbc <__muldf3+0x16c>
 80152a8:	010007c4 	movi	r4,31
 80152ac:	20c01b16 	blt	r4,r3,801531c <__muldf3+0x7cc>
 80152b0:	00800804 	movi	r2,32
 80152b4:	10c5c83a 	sub	r2,r2,r3
 80152b8:	888a983a 	sll	r5,r17,r2
 80152bc:	90c8d83a 	srl	r4,r18,r3
 80152c0:	9084983a 	sll	r2,r18,r2
 80152c4:	88e2d83a 	srl	r17,r17,r3
 80152c8:	2906b03a 	or	r3,r5,r4
 80152cc:	1004c03a 	cmpne	r2,r2,zero
 80152d0:	1886b03a 	or	r3,r3,r2
 80152d4:	188001cc 	andi	r2,r3,7
 80152d8:	10000726 	beq	r2,zero,80152f8 <__muldf3+0x7a8>
 80152dc:	188003cc 	andi	r2,r3,15
 80152e0:	01000104 	movi	r4,4
 80152e4:	11000426 	beq	r2,r4,80152f8 <__muldf3+0x7a8>
 80152e8:	1805883a 	mov	r2,r3
 80152ec:	10c00104 	addi	r3,r2,4
 80152f0:	1885803a 	cmpltu	r2,r3,r2
 80152f4:	88a3883a 	add	r17,r17,r2
 80152f8:	8880202c 	andhi	r2,r17,128
 80152fc:	10001c26 	beq	r2,zero,8015370 <__muldf3+0x820>
 8015300:	3027883a 	mov	r19,r6
 8015304:	00800044 	movi	r2,1
 8015308:	0021883a 	mov	r16,zero
 801530c:	002d883a 	mov	r22,zero
 8015310:	003e6e06 	br	8014ccc <__muldf3+0x17c>
 8015314:	4007883a 	mov	r3,r8
 8015318:	003f9706 	br	8015178 <__muldf3+0x628>
 801531c:	017ff844 	movi	r5,-31
 8015320:	2885c83a 	sub	r2,r5,r2
 8015324:	888ad83a 	srl	r5,r17,r2
 8015328:	00800804 	movi	r2,32
 801532c:	18801a26 	beq	r3,r2,8015398 <__muldf3+0x848>
 8015330:	01001004 	movi	r4,64
 8015334:	20c7c83a 	sub	r3,r4,r3
 8015338:	88e2983a 	sll	r17,r17,r3
 801533c:	8ca4b03a 	or	r18,r17,r18
 8015340:	9004c03a 	cmpne	r2,r18,zero
 8015344:	2884b03a 	or	r2,r5,r2
 8015348:	144001cc 	andi	r17,r2,7
 801534c:	88000d1e 	bne	r17,zero,8015384 <__muldf3+0x834>
 8015350:	0021883a 	mov	r16,zero
 8015354:	102cd0fa 	srli	r22,r2,3
 8015358:	3027883a 	mov	r19,r6
 801535c:	0005883a 	mov	r2,zero
 8015360:	b46cb03a 	or	r22,r22,r17
 8015364:	003e5906 	br	8014ccc <__muldf3+0x17c>
 8015368:	1007883a 	mov	r3,r2
 801536c:	0023883a 	mov	r17,zero
 8015370:	8820927a 	slli	r16,r17,9
 8015374:	1805883a 	mov	r2,r3
 8015378:	8822977a 	slli	r17,r17,29
 801537c:	8020d33a 	srli	r16,r16,12
 8015380:	003ff406 	br	8015354 <__muldf3+0x804>
 8015384:	10c003cc 	andi	r3,r2,15
 8015388:	01000104 	movi	r4,4
 801538c:	193ff626 	beq	r3,r4,8015368 <__muldf3+0x818>
 8015390:	0023883a 	mov	r17,zero
 8015394:	003fd506 	br	80152ec <__muldf3+0x79c>
 8015398:	0023883a 	mov	r17,zero
 801539c:	003fe706 	br	801533c <__muldf3+0x7ec>
 80153a0:	00800434 	movhi	r2,16
 80153a4:	8c000234 	orhi	r16,r17,8
 80153a8:	10bfffc4 	addi	r2,r2,-1
 80153ac:	3027883a 	mov	r19,r6
 80153b0:	80a0703a 	and	r16,r16,r2
 80153b4:	902d883a 	mov	r22,r18
 80153b8:	003eac06 	br	8014e6c <__muldf3+0x31c>

080153bc <__subdf3>:
 80153bc:	02000434 	movhi	r8,16
 80153c0:	423fffc4 	addi	r8,r8,-1
 80153c4:	defffb04 	addi	sp,sp,-20
 80153c8:	2a14703a 	and	r10,r5,r8
 80153cc:	3812d53a 	srli	r9,r7,20
 80153d0:	3a10703a 	and	r8,r7,r8
 80153d4:	2006d77a 	srli	r3,r4,29
 80153d8:	3004d77a 	srli	r2,r6,29
 80153dc:	dc000015 	stw	r16,0(sp)
 80153e0:	501490fa 	slli	r10,r10,3
 80153e4:	2820d53a 	srli	r16,r5,20
 80153e8:	401090fa 	slli	r8,r8,3
 80153ec:	dc800215 	stw	r18,8(sp)
 80153f0:	dc400115 	stw	r17,4(sp)
 80153f4:	dfc00415 	stw	ra,16(sp)
 80153f8:	202290fa 	slli	r17,r4,3
 80153fc:	dcc00315 	stw	r19,12(sp)
 8015400:	4a41ffcc 	andi	r9,r9,2047
 8015404:	0101ffc4 	movi	r4,2047
 8015408:	2824d7fa 	srli	r18,r5,31
 801540c:	8401ffcc 	andi	r16,r16,2047
 8015410:	50c6b03a 	or	r3,r10,r3
 8015414:	380ed7fa 	srli	r7,r7,31
 8015418:	408ab03a 	or	r5,r8,r2
 801541c:	300c90fa 	slli	r6,r6,3
 8015420:	49009626 	beq	r9,r4,801567c <__subdf3+0x2c0>
 8015424:	39c0005c 	xori	r7,r7,1
 8015428:	8245c83a 	sub	r2,r16,r9
 801542c:	3c807426 	beq	r7,r18,8015600 <__subdf3+0x244>
 8015430:	0080af0e 	bge	zero,r2,80156f0 <__subdf3+0x334>
 8015434:	48002a1e 	bne	r9,zero,80154e0 <__subdf3+0x124>
 8015438:	2988b03a 	or	r4,r5,r6
 801543c:	20009a1e 	bne	r4,zero,80156a8 <__subdf3+0x2ec>
 8015440:	888001cc 	andi	r2,r17,7
 8015444:	10000726 	beq	r2,zero,8015464 <__subdf3+0xa8>
 8015448:	888003cc 	andi	r2,r17,15
 801544c:	01000104 	movi	r4,4
 8015450:	11000426 	beq	r2,r4,8015464 <__subdf3+0xa8>
 8015454:	890b883a 	add	r5,r17,r4
 8015458:	2c63803a 	cmpltu	r17,r5,r17
 801545c:	1c47883a 	add	r3,r3,r17
 8015460:	2823883a 	mov	r17,r5
 8015464:	1880202c 	andhi	r2,r3,128
 8015468:	10005926 	beq	r2,zero,80155d0 <__subdf3+0x214>
 801546c:	84000044 	addi	r16,r16,1
 8015470:	0081ffc4 	movi	r2,2047
 8015474:	8080be26 	beq	r16,r2,8015770 <__subdf3+0x3b4>
 8015478:	017fe034 	movhi	r5,65408
 801547c:	297fffc4 	addi	r5,r5,-1
 8015480:	1946703a 	and	r3,r3,r5
 8015484:	1804977a 	slli	r2,r3,29
 8015488:	1806927a 	slli	r3,r3,9
 801548c:	8822d0fa 	srli	r17,r17,3
 8015490:	8401ffcc 	andi	r16,r16,2047
 8015494:	180ad33a 	srli	r5,r3,12
 8015498:	9100004c 	andi	r4,r18,1
 801549c:	1444b03a 	or	r2,r2,r17
 80154a0:	80c1ffcc 	andi	r3,r16,2047
 80154a4:	1820953a 	slli	r16,r3,20
 80154a8:	20c03fcc 	andi	r3,r4,255
 80154ac:	180897fa 	slli	r4,r3,31
 80154b0:	00c00434 	movhi	r3,16
 80154b4:	18ffffc4 	addi	r3,r3,-1
 80154b8:	28c6703a 	and	r3,r5,r3
 80154bc:	1c06b03a 	or	r3,r3,r16
 80154c0:	1906b03a 	or	r3,r3,r4
 80154c4:	dfc00417 	ldw	ra,16(sp)
 80154c8:	dcc00317 	ldw	r19,12(sp)
 80154cc:	dc800217 	ldw	r18,8(sp)
 80154d0:	dc400117 	ldw	r17,4(sp)
 80154d4:	dc000017 	ldw	r16,0(sp)
 80154d8:	dec00504 	addi	sp,sp,20
 80154dc:	f800283a 	ret
 80154e0:	0101ffc4 	movi	r4,2047
 80154e4:	813fd626 	beq	r16,r4,8015440 <__subdf3+0x84>
 80154e8:	29402034 	orhi	r5,r5,128
 80154ec:	01000e04 	movi	r4,56
 80154f0:	2080a316 	blt	r4,r2,8015780 <__subdf3+0x3c4>
 80154f4:	010007c4 	movi	r4,31
 80154f8:	2080c616 	blt	r4,r2,8015814 <__subdf3+0x458>
 80154fc:	01000804 	movi	r4,32
 8015500:	2089c83a 	sub	r4,r4,r2
 8015504:	2910983a 	sll	r8,r5,r4
 8015508:	308ed83a 	srl	r7,r6,r2
 801550c:	3108983a 	sll	r4,r6,r4
 8015510:	2884d83a 	srl	r2,r5,r2
 8015514:	41ccb03a 	or	r6,r8,r7
 8015518:	2008c03a 	cmpne	r4,r4,zero
 801551c:	310cb03a 	or	r6,r6,r4
 8015520:	898dc83a 	sub	r6,r17,r6
 8015524:	89a3803a 	cmpltu	r17,r17,r6
 8015528:	1887c83a 	sub	r3,r3,r2
 801552c:	1c47c83a 	sub	r3,r3,r17
 8015530:	3023883a 	mov	r17,r6
 8015534:	1880202c 	andhi	r2,r3,128
 8015538:	10002326 	beq	r2,zero,80155c8 <__subdf3+0x20c>
 801553c:	04c02034 	movhi	r19,128
 8015540:	9cffffc4 	addi	r19,r19,-1
 8015544:	1ce6703a 	and	r19,r3,r19
 8015548:	98007a26 	beq	r19,zero,8015734 <__subdf3+0x378>
 801554c:	9809883a 	mov	r4,r19
 8015550:	8015ebc0 	call	8015ebc <__clzsi2>
 8015554:	113ffe04 	addi	r4,r2,-8
 8015558:	00c007c4 	movi	r3,31
 801555c:	19007b16 	blt	r3,r4,801574c <__subdf3+0x390>
 8015560:	00800804 	movi	r2,32
 8015564:	1105c83a 	sub	r2,r2,r4
 8015568:	8884d83a 	srl	r2,r17,r2
 801556c:	9906983a 	sll	r3,r19,r4
 8015570:	8922983a 	sll	r17,r17,r4
 8015574:	10c4b03a 	or	r2,r2,r3
 8015578:	24007816 	blt	r4,r16,801575c <__subdf3+0x3a0>
 801557c:	2421c83a 	sub	r16,r4,r16
 8015580:	80c00044 	addi	r3,r16,1
 8015584:	010007c4 	movi	r4,31
 8015588:	20c09516 	blt	r4,r3,80157e0 <__subdf3+0x424>
 801558c:	01400804 	movi	r5,32
 8015590:	28cbc83a 	sub	r5,r5,r3
 8015594:	88c8d83a 	srl	r4,r17,r3
 8015598:	8962983a 	sll	r17,r17,r5
 801559c:	114a983a 	sll	r5,r2,r5
 80155a0:	10c6d83a 	srl	r3,r2,r3
 80155a4:	8804c03a 	cmpne	r2,r17,zero
 80155a8:	290ab03a 	or	r5,r5,r4
 80155ac:	28a2b03a 	or	r17,r5,r2
 80155b0:	0021883a 	mov	r16,zero
 80155b4:	003fa206 	br	8015440 <__subdf3+0x84>
 80155b8:	2090b03a 	or	r8,r4,r2
 80155bc:	40018e26 	beq	r8,zero,8015bf8 <__subdf3+0x83c>
 80155c0:	1007883a 	mov	r3,r2
 80155c4:	2023883a 	mov	r17,r4
 80155c8:	888001cc 	andi	r2,r17,7
 80155cc:	103f9e1e 	bne	r2,zero,8015448 <__subdf3+0x8c>
 80155d0:	1804977a 	slli	r2,r3,29
 80155d4:	8822d0fa 	srli	r17,r17,3
 80155d8:	1810d0fa 	srli	r8,r3,3
 80155dc:	9100004c 	andi	r4,r18,1
 80155e0:	1444b03a 	or	r2,r2,r17
 80155e4:	00c1ffc4 	movi	r3,2047
 80155e8:	80c02826 	beq	r16,r3,801568c <__subdf3+0x2d0>
 80155ec:	01400434 	movhi	r5,16
 80155f0:	297fffc4 	addi	r5,r5,-1
 80155f4:	80e0703a 	and	r16,r16,r3
 80155f8:	414a703a 	and	r5,r8,r5
 80155fc:	003fa806 	br	80154a0 <__subdf3+0xe4>
 8015600:	0080630e 	bge	zero,r2,8015790 <__subdf3+0x3d4>
 8015604:	48003026 	beq	r9,zero,80156c8 <__subdf3+0x30c>
 8015608:	0101ffc4 	movi	r4,2047
 801560c:	813f8c26 	beq	r16,r4,8015440 <__subdf3+0x84>
 8015610:	29402034 	orhi	r5,r5,128
 8015614:	01000e04 	movi	r4,56
 8015618:	2080a90e 	bge	r4,r2,80158c0 <__subdf3+0x504>
 801561c:	298cb03a 	or	r6,r5,r6
 8015620:	3012c03a 	cmpne	r9,r6,zero
 8015624:	0005883a 	mov	r2,zero
 8015628:	4c53883a 	add	r9,r9,r17
 801562c:	4c63803a 	cmpltu	r17,r9,r17
 8015630:	10c7883a 	add	r3,r2,r3
 8015634:	88c7883a 	add	r3,r17,r3
 8015638:	4823883a 	mov	r17,r9
 801563c:	1880202c 	andhi	r2,r3,128
 8015640:	1000d026 	beq	r2,zero,8015984 <__subdf3+0x5c8>
 8015644:	84000044 	addi	r16,r16,1
 8015648:	0081ffc4 	movi	r2,2047
 801564c:	8080fe26 	beq	r16,r2,8015a48 <__subdf3+0x68c>
 8015650:	00bfe034 	movhi	r2,65408
 8015654:	10bfffc4 	addi	r2,r2,-1
 8015658:	1886703a 	and	r3,r3,r2
 801565c:	880ad07a 	srli	r5,r17,1
 8015660:	180497fa 	slli	r2,r3,31
 8015664:	8900004c 	andi	r4,r17,1
 8015668:	2922b03a 	or	r17,r5,r4
 801566c:	1806d07a 	srli	r3,r3,1
 8015670:	1462b03a 	or	r17,r2,r17
 8015674:	3825883a 	mov	r18,r7
 8015678:	003f7106 	br	8015440 <__subdf3+0x84>
 801567c:	2984b03a 	or	r2,r5,r6
 8015680:	103f6826 	beq	r2,zero,8015424 <__subdf3+0x68>
 8015684:	39c03fcc 	andi	r7,r7,255
 8015688:	003f6706 	br	8015428 <__subdf3+0x6c>
 801568c:	4086b03a 	or	r3,r8,r2
 8015690:	18015226 	beq	r3,zero,8015bdc <__subdf3+0x820>
 8015694:	00c00434 	movhi	r3,16
 8015698:	41400234 	orhi	r5,r8,8
 801569c:	18ffffc4 	addi	r3,r3,-1
 80156a0:	28ca703a 	and	r5,r5,r3
 80156a4:	003f7e06 	br	80154a0 <__subdf3+0xe4>
 80156a8:	10bfffc4 	addi	r2,r2,-1
 80156ac:	1000491e 	bne	r2,zero,80157d4 <__subdf3+0x418>
 80156b0:	898fc83a 	sub	r7,r17,r6
 80156b4:	89e3803a 	cmpltu	r17,r17,r7
 80156b8:	1947c83a 	sub	r3,r3,r5
 80156bc:	1c47c83a 	sub	r3,r3,r17
 80156c0:	3823883a 	mov	r17,r7
 80156c4:	003f9b06 	br	8015534 <__subdf3+0x178>
 80156c8:	2988b03a 	or	r4,r5,r6
 80156cc:	203f5c26 	beq	r4,zero,8015440 <__subdf3+0x84>
 80156d0:	10bfffc4 	addi	r2,r2,-1
 80156d4:	1000931e 	bne	r2,zero,8015924 <__subdf3+0x568>
 80156d8:	898d883a 	add	r6,r17,r6
 80156dc:	3463803a 	cmpltu	r17,r6,r17
 80156e0:	1947883a 	add	r3,r3,r5
 80156e4:	88c7883a 	add	r3,r17,r3
 80156e8:	3023883a 	mov	r17,r6
 80156ec:	003fd306 	br	801563c <__subdf3+0x280>
 80156f0:	1000541e 	bne	r2,zero,8015844 <__subdf3+0x488>
 80156f4:	80800044 	addi	r2,r16,1
 80156f8:	1081ffcc 	andi	r2,r2,2047
 80156fc:	01000044 	movi	r4,1
 8015700:	2080a20e 	bge	r4,r2,801598c <__subdf3+0x5d0>
 8015704:	8989c83a 	sub	r4,r17,r6
 8015708:	8905803a 	cmpltu	r2,r17,r4
 801570c:	1967c83a 	sub	r19,r3,r5
 8015710:	98a7c83a 	sub	r19,r19,r2
 8015714:	9880202c 	andhi	r2,r19,128
 8015718:	10006326 	beq	r2,zero,80158a8 <__subdf3+0x4ec>
 801571c:	3463c83a 	sub	r17,r6,r17
 8015720:	28c7c83a 	sub	r3,r5,r3
 8015724:	344d803a 	cmpltu	r6,r6,r17
 8015728:	19a7c83a 	sub	r19,r3,r6
 801572c:	3825883a 	mov	r18,r7
 8015730:	983f861e 	bne	r19,zero,801554c <__subdf3+0x190>
 8015734:	8809883a 	mov	r4,r17
 8015738:	8015ebc0 	call	8015ebc <__clzsi2>
 801573c:	10800804 	addi	r2,r2,32
 8015740:	113ffe04 	addi	r4,r2,-8
 8015744:	00c007c4 	movi	r3,31
 8015748:	193f850e 	bge	r3,r4,8015560 <__subdf3+0x1a4>
 801574c:	10bff604 	addi	r2,r2,-40
 8015750:	8884983a 	sll	r2,r17,r2
 8015754:	0023883a 	mov	r17,zero
 8015758:	243f880e 	bge	r4,r16,801557c <__subdf3+0x1c0>
 801575c:	00ffe034 	movhi	r3,65408
 8015760:	18ffffc4 	addi	r3,r3,-1
 8015764:	8121c83a 	sub	r16,r16,r4
 8015768:	10c6703a 	and	r3,r2,r3
 801576c:	003f3406 	br	8015440 <__subdf3+0x84>
 8015770:	9100004c 	andi	r4,r18,1
 8015774:	000b883a 	mov	r5,zero
 8015778:	0005883a 	mov	r2,zero
 801577c:	003f4806 	br	80154a0 <__subdf3+0xe4>
 8015780:	298cb03a 	or	r6,r5,r6
 8015784:	300cc03a 	cmpne	r6,r6,zero
 8015788:	0005883a 	mov	r2,zero
 801578c:	003f6406 	br	8015520 <__subdf3+0x164>
 8015790:	10009a1e 	bne	r2,zero,80159fc <__subdf3+0x640>
 8015794:	82400044 	addi	r9,r16,1
 8015798:	4881ffcc 	andi	r2,r9,2047
 801579c:	02800044 	movi	r10,1
 80157a0:	5080670e 	bge	r10,r2,8015940 <__subdf3+0x584>
 80157a4:	0081ffc4 	movi	r2,2047
 80157a8:	4880af26 	beq	r9,r2,8015a68 <__subdf3+0x6ac>
 80157ac:	898d883a 	add	r6,r17,r6
 80157b0:	1945883a 	add	r2,r3,r5
 80157b4:	3447803a 	cmpltu	r3,r6,r17
 80157b8:	1887883a 	add	r3,r3,r2
 80157bc:	182297fa 	slli	r17,r3,31
 80157c0:	300cd07a 	srli	r6,r6,1
 80157c4:	1806d07a 	srli	r3,r3,1
 80157c8:	4821883a 	mov	r16,r9
 80157cc:	89a2b03a 	or	r17,r17,r6
 80157d0:	003f1b06 	br	8015440 <__subdf3+0x84>
 80157d4:	0101ffc4 	movi	r4,2047
 80157d8:	813f441e 	bne	r16,r4,80154ec <__subdf3+0x130>
 80157dc:	003f1806 	br	8015440 <__subdf3+0x84>
 80157e0:	843ff844 	addi	r16,r16,-31
 80157e4:	01400804 	movi	r5,32
 80157e8:	1408d83a 	srl	r4,r2,r16
 80157ec:	19405026 	beq	r3,r5,8015930 <__subdf3+0x574>
 80157f0:	01401004 	movi	r5,64
 80157f4:	28c7c83a 	sub	r3,r5,r3
 80157f8:	10c4983a 	sll	r2,r2,r3
 80157fc:	88a2b03a 	or	r17,r17,r2
 8015800:	8822c03a 	cmpne	r17,r17,zero
 8015804:	2462b03a 	or	r17,r4,r17
 8015808:	0007883a 	mov	r3,zero
 801580c:	0021883a 	mov	r16,zero
 8015810:	003f6d06 	br	80155c8 <__subdf3+0x20c>
 8015814:	11fff804 	addi	r7,r2,-32
 8015818:	01000804 	movi	r4,32
 801581c:	29ced83a 	srl	r7,r5,r7
 8015820:	11004526 	beq	r2,r4,8015938 <__subdf3+0x57c>
 8015824:	01001004 	movi	r4,64
 8015828:	2089c83a 	sub	r4,r4,r2
 801582c:	2904983a 	sll	r2,r5,r4
 8015830:	118cb03a 	or	r6,r2,r6
 8015834:	300cc03a 	cmpne	r6,r6,zero
 8015838:	398cb03a 	or	r6,r7,r6
 801583c:	0005883a 	mov	r2,zero
 8015840:	003f3706 	br	8015520 <__subdf3+0x164>
 8015844:	80002a26 	beq	r16,zero,80158f0 <__subdf3+0x534>
 8015848:	0101ffc4 	movi	r4,2047
 801584c:	49006626 	beq	r9,r4,80159e8 <__subdf3+0x62c>
 8015850:	0085c83a 	sub	r2,zero,r2
 8015854:	18c02034 	orhi	r3,r3,128
 8015858:	01000e04 	movi	r4,56
 801585c:	20807e16 	blt	r4,r2,8015a58 <__subdf3+0x69c>
 8015860:	010007c4 	movi	r4,31
 8015864:	2080e716 	blt	r4,r2,8015c04 <__subdf3+0x848>
 8015868:	01000804 	movi	r4,32
 801586c:	2089c83a 	sub	r4,r4,r2
 8015870:	1914983a 	sll	r10,r3,r4
 8015874:	8890d83a 	srl	r8,r17,r2
 8015878:	8908983a 	sll	r4,r17,r4
 801587c:	1884d83a 	srl	r2,r3,r2
 8015880:	5222b03a 	or	r17,r10,r8
 8015884:	2006c03a 	cmpne	r3,r4,zero
 8015888:	88e2b03a 	or	r17,r17,r3
 801588c:	3463c83a 	sub	r17,r6,r17
 8015890:	2885c83a 	sub	r2,r5,r2
 8015894:	344d803a 	cmpltu	r6,r6,r17
 8015898:	1187c83a 	sub	r3,r2,r6
 801589c:	4821883a 	mov	r16,r9
 80158a0:	3825883a 	mov	r18,r7
 80158a4:	003f2306 	br	8015534 <__subdf3+0x178>
 80158a8:	24d0b03a 	or	r8,r4,r19
 80158ac:	40001b1e 	bne	r8,zero,801591c <__subdf3+0x560>
 80158b0:	0005883a 	mov	r2,zero
 80158b4:	0009883a 	mov	r4,zero
 80158b8:	0021883a 	mov	r16,zero
 80158bc:	003f4906 	br	80155e4 <__subdf3+0x228>
 80158c0:	010007c4 	movi	r4,31
 80158c4:	20803a16 	blt	r4,r2,80159b0 <__subdf3+0x5f4>
 80158c8:	01000804 	movi	r4,32
 80158cc:	2089c83a 	sub	r4,r4,r2
 80158d0:	2912983a 	sll	r9,r5,r4
 80158d4:	3090d83a 	srl	r8,r6,r2
 80158d8:	3108983a 	sll	r4,r6,r4
 80158dc:	2884d83a 	srl	r2,r5,r2
 80158e0:	4a12b03a 	or	r9,r9,r8
 80158e4:	2008c03a 	cmpne	r4,r4,zero
 80158e8:	4912b03a 	or	r9,r9,r4
 80158ec:	003f4e06 	br	8015628 <__subdf3+0x26c>
 80158f0:	1c48b03a 	or	r4,r3,r17
 80158f4:	20003c26 	beq	r4,zero,80159e8 <__subdf3+0x62c>
 80158f8:	0084303a 	nor	r2,zero,r2
 80158fc:	1000381e 	bne	r2,zero,80159e0 <__subdf3+0x624>
 8015900:	3463c83a 	sub	r17,r6,r17
 8015904:	28c5c83a 	sub	r2,r5,r3
 8015908:	344d803a 	cmpltu	r6,r6,r17
 801590c:	1187c83a 	sub	r3,r2,r6
 8015910:	4821883a 	mov	r16,r9
 8015914:	3825883a 	mov	r18,r7
 8015918:	003f0606 	br	8015534 <__subdf3+0x178>
 801591c:	2023883a 	mov	r17,r4
 8015920:	003f0906 	br	8015548 <__subdf3+0x18c>
 8015924:	0101ffc4 	movi	r4,2047
 8015928:	813f3a1e 	bne	r16,r4,8015614 <__subdf3+0x258>
 801592c:	003ec406 	br	8015440 <__subdf3+0x84>
 8015930:	0005883a 	mov	r2,zero
 8015934:	003fb106 	br	80157fc <__subdf3+0x440>
 8015938:	0005883a 	mov	r2,zero
 801593c:	003fbc06 	br	8015830 <__subdf3+0x474>
 8015940:	1c44b03a 	or	r2,r3,r17
 8015944:	80008e1e 	bne	r16,zero,8015b80 <__subdf3+0x7c4>
 8015948:	1000c826 	beq	r2,zero,8015c6c <__subdf3+0x8b0>
 801594c:	2984b03a 	or	r2,r5,r6
 8015950:	103ebb26 	beq	r2,zero,8015440 <__subdf3+0x84>
 8015954:	8989883a 	add	r4,r17,r6
 8015958:	1945883a 	add	r2,r3,r5
 801595c:	2447803a 	cmpltu	r3,r4,r17
 8015960:	1887883a 	add	r3,r3,r2
 8015964:	1880202c 	andhi	r2,r3,128
 8015968:	2023883a 	mov	r17,r4
 801596c:	103f1626 	beq	r2,zero,80155c8 <__subdf3+0x20c>
 8015970:	00bfe034 	movhi	r2,65408
 8015974:	10bfffc4 	addi	r2,r2,-1
 8015978:	5021883a 	mov	r16,r10
 801597c:	1886703a 	and	r3,r3,r2
 8015980:	003eaf06 	br	8015440 <__subdf3+0x84>
 8015984:	3825883a 	mov	r18,r7
 8015988:	003f0f06 	br	80155c8 <__subdf3+0x20c>
 801598c:	1c44b03a 	or	r2,r3,r17
 8015990:	8000251e 	bne	r16,zero,8015a28 <__subdf3+0x66c>
 8015994:	1000661e 	bne	r2,zero,8015b30 <__subdf3+0x774>
 8015998:	2990b03a 	or	r8,r5,r6
 801599c:	40009626 	beq	r8,zero,8015bf8 <__subdf3+0x83c>
 80159a0:	2807883a 	mov	r3,r5
 80159a4:	3023883a 	mov	r17,r6
 80159a8:	3825883a 	mov	r18,r7
 80159ac:	003ea406 	br	8015440 <__subdf3+0x84>
 80159b0:	127ff804 	addi	r9,r2,-32
 80159b4:	01000804 	movi	r4,32
 80159b8:	2a52d83a 	srl	r9,r5,r9
 80159bc:	11008c26 	beq	r2,r4,8015bf0 <__subdf3+0x834>
 80159c0:	01001004 	movi	r4,64
 80159c4:	2085c83a 	sub	r2,r4,r2
 80159c8:	2884983a 	sll	r2,r5,r2
 80159cc:	118cb03a 	or	r6,r2,r6
 80159d0:	300cc03a 	cmpne	r6,r6,zero
 80159d4:	4992b03a 	or	r9,r9,r6
 80159d8:	0005883a 	mov	r2,zero
 80159dc:	003f1206 	br	8015628 <__subdf3+0x26c>
 80159e0:	0101ffc4 	movi	r4,2047
 80159e4:	493f9c1e 	bne	r9,r4,8015858 <__subdf3+0x49c>
 80159e8:	2807883a 	mov	r3,r5
 80159ec:	3023883a 	mov	r17,r6
 80159f0:	4821883a 	mov	r16,r9
 80159f4:	3825883a 	mov	r18,r7
 80159f8:	003e9106 	br	8015440 <__subdf3+0x84>
 80159fc:	80001f1e 	bne	r16,zero,8015a7c <__subdf3+0x6c0>
 8015a00:	1c48b03a 	or	r4,r3,r17
 8015a04:	20005a26 	beq	r4,zero,8015b70 <__subdf3+0x7b4>
 8015a08:	0084303a 	nor	r2,zero,r2
 8015a0c:	1000561e 	bne	r2,zero,8015b68 <__subdf3+0x7ac>
 8015a10:	89a3883a 	add	r17,r17,r6
 8015a14:	1945883a 	add	r2,r3,r5
 8015a18:	898d803a 	cmpltu	r6,r17,r6
 8015a1c:	3087883a 	add	r3,r6,r2
 8015a20:	4821883a 	mov	r16,r9
 8015a24:	003f0506 	br	801563c <__subdf3+0x280>
 8015a28:	10002b1e 	bne	r2,zero,8015ad8 <__subdf3+0x71c>
 8015a2c:	2984b03a 	or	r2,r5,r6
 8015a30:	10008026 	beq	r2,zero,8015c34 <__subdf3+0x878>
 8015a34:	2807883a 	mov	r3,r5
 8015a38:	3023883a 	mov	r17,r6
 8015a3c:	3825883a 	mov	r18,r7
 8015a40:	0401ffc4 	movi	r16,2047
 8015a44:	003e7e06 	br	8015440 <__subdf3+0x84>
 8015a48:	3809883a 	mov	r4,r7
 8015a4c:	0011883a 	mov	r8,zero
 8015a50:	0005883a 	mov	r2,zero
 8015a54:	003ee306 	br	80155e4 <__subdf3+0x228>
 8015a58:	1c62b03a 	or	r17,r3,r17
 8015a5c:	8822c03a 	cmpne	r17,r17,zero
 8015a60:	0005883a 	mov	r2,zero
 8015a64:	003f8906 	br	801588c <__subdf3+0x4d0>
 8015a68:	3809883a 	mov	r4,r7
 8015a6c:	4821883a 	mov	r16,r9
 8015a70:	0011883a 	mov	r8,zero
 8015a74:	0005883a 	mov	r2,zero
 8015a78:	003eda06 	br	80155e4 <__subdf3+0x228>
 8015a7c:	0101ffc4 	movi	r4,2047
 8015a80:	49003b26 	beq	r9,r4,8015b70 <__subdf3+0x7b4>
 8015a84:	0085c83a 	sub	r2,zero,r2
 8015a88:	18c02034 	orhi	r3,r3,128
 8015a8c:	01000e04 	movi	r4,56
 8015a90:	20806e16 	blt	r4,r2,8015c4c <__subdf3+0x890>
 8015a94:	010007c4 	movi	r4,31
 8015a98:	20807716 	blt	r4,r2,8015c78 <__subdf3+0x8bc>
 8015a9c:	01000804 	movi	r4,32
 8015aa0:	2089c83a 	sub	r4,r4,r2
 8015aa4:	1914983a 	sll	r10,r3,r4
 8015aa8:	8890d83a 	srl	r8,r17,r2
 8015aac:	8908983a 	sll	r4,r17,r4
 8015ab0:	1884d83a 	srl	r2,r3,r2
 8015ab4:	5222b03a 	or	r17,r10,r8
 8015ab8:	2006c03a 	cmpne	r3,r4,zero
 8015abc:	88e2b03a 	or	r17,r17,r3
 8015ac0:	89a3883a 	add	r17,r17,r6
 8015ac4:	1145883a 	add	r2,r2,r5
 8015ac8:	898d803a 	cmpltu	r6,r17,r6
 8015acc:	3087883a 	add	r3,r6,r2
 8015ad0:	4821883a 	mov	r16,r9
 8015ad4:	003ed906 	br	801563c <__subdf3+0x280>
 8015ad8:	2984b03a 	or	r2,r5,r6
 8015adc:	10004226 	beq	r2,zero,8015be8 <__subdf3+0x82c>
 8015ae0:	1808d0fa 	srli	r4,r3,3
 8015ae4:	8822d0fa 	srli	r17,r17,3
 8015ae8:	1806977a 	slli	r3,r3,29
 8015aec:	2080022c 	andhi	r2,r4,8
 8015af0:	1c62b03a 	or	r17,r3,r17
 8015af4:	10000826 	beq	r2,zero,8015b18 <__subdf3+0x75c>
 8015af8:	2812d0fa 	srli	r9,r5,3
 8015afc:	4880022c 	andhi	r2,r9,8
 8015b00:	1000051e 	bne	r2,zero,8015b18 <__subdf3+0x75c>
 8015b04:	300cd0fa 	srli	r6,r6,3
 8015b08:	2804977a 	slli	r2,r5,29
 8015b0c:	4809883a 	mov	r4,r9
 8015b10:	3825883a 	mov	r18,r7
 8015b14:	11a2b03a 	or	r17,r2,r6
 8015b18:	8806d77a 	srli	r3,r17,29
 8015b1c:	200890fa 	slli	r4,r4,3
 8015b20:	882290fa 	slli	r17,r17,3
 8015b24:	0401ffc4 	movi	r16,2047
 8015b28:	1906b03a 	or	r3,r3,r4
 8015b2c:	003e4406 	br	8015440 <__subdf3+0x84>
 8015b30:	2984b03a 	or	r2,r5,r6
 8015b34:	103e4226 	beq	r2,zero,8015440 <__subdf3+0x84>
 8015b38:	8989c83a 	sub	r4,r17,r6
 8015b3c:	8911803a 	cmpltu	r8,r17,r4
 8015b40:	1945c83a 	sub	r2,r3,r5
 8015b44:	1205c83a 	sub	r2,r2,r8
 8015b48:	1200202c 	andhi	r8,r2,128
 8015b4c:	403e9a26 	beq	r8,zero,80155b8 <__subdf3+0x1fc>
 8015b50:	3463c83a 	sub	r17,r6,r17
 8015b54:	28c5c83a 	sub	r2,r5,r3
 8015b58:	344d803a 	cmpltu	r6,r6,r17
 8015b5c:	1187c83a 	sub	r3,r2,r6
 8015b60:	3825883a 	mov	r18,r7
 8015b64:	003e3606 	br	8015440 <__subdf3+0x84>
 8015b68:	0101ffc4 	movi	r4,2047
 8015b6c:	493fc71e 	bne	r9,r4,8015a8c <__subdf3+0x6d0>
 8015b70:	2807883a 	mov	r3,r5
 8015b74:	3023883a 	mov	r17,r6
 8015b78:	4821883a 	mov	r16,r9
 8015b7c:	003e3006 	br	8015440 <__subdf3+0x84>
 8015b80:	10003626 	beq	r2,zero,8015c5c <__subdf3+0x8a0>
 8015b84:	2984b03a 	or	r2,r5,r6
 8015b88:	10001726 	beq	r2,zero,8015be8 <__subdf3+0x82c>
 8015b8c:	1808d0fa 	srli	r4,r3,3
 8015b90:	8822d0fa 	srli	r17,r17,3
 8015b94:	1806977a 	slli	r3,r3,29
 8015b98:	2080022c 	andhi	r2,r4,8
 8015b9c:	1c62b03a 	or	r17,r3,r17
 8015ba0:	10000726 	beq	r2,zero,8015bc0 <__subdf3+0x804>
 8015ba4:	2812d0fa 	srli	r9,r5,3
 8015ba8:	4880022c 	andhi	r2,r9,8
 8015bac:	1000041e 	bne	r2,zero,8015bc0 <__subdf3+0x804>
 8015bb0:	300cd0fa 	srli	r6,r6,3
 8015bb4:	2804977a 	slli	r2,r5,29
 8015bb8:	4809883a 	mov	r4,r9
 8015bbc:	11a2b03a 	or	r17,r2,r6
 8015bc0:	8806d77a 	srli	r3,r17,29
 8015bc4:	200890fa 	slli	r4,r4,3
 8015bc8:	882290fa 	slli	r17,r17,3
 8015bcc:	3825883a 	mov	r18,r7
 8015bd0:	1906b03a 	or	r3,r3,r4
 8015bd4:	0401ffc4 	movi	r16,2047
 8015bd8:	003e1906 	br	8015440 <__subdf3+0x84>
 8015bdc:	000b883a 	mov	r5,zero
 8015be0:	0005883a 	mov	r2,zero
 8015be4:	003e2e06 	br	80154a0 <__subdf3+0xe4>
 8015be8:	0401ffc4 	movi	r16,2047
 8015bec:	003e1406 	br	8015440 <__subdf3+0x84>
 8015bf0:	0005883a 	mov	r2,zero
 8015bf4:	003f7506 	br	80159cc <__subdf3+0x610>
 8015bf8:	0005883a 	mov	r2,zero
 8015bfc:	0009883a 	mov	r4,zero
 8015c00:	003e7806 	br	80155e4 <__subdf3+0x228>
 8015c04:	123ff804 	addi	r8,r2,-32
 8015c08:	01000804 	movi	r4,32
 8015c0c:	1a10d83a 	srl	r8,r3,r8
 8015c10:	11002526 	beq	r2,r4,8015ca8 <__subdf3+0x8ec>
 8015c14:	01001004 	movi	r4,64
 8015c18:	2085c83a 	sub	r2,r4,r2
 8015c1c:	1884983a 	sll	r2,r3,r2
 8015c20:	1444b03a 	or	r2,r2,r17
 8015c24:	1004c03a 	cmpne	r2,r2,zero
 8015c28:	40a2b03a 	or	r17,r8,r2
 8015c2c:	0005883a 	mov	r2,zero
 8015c30:	003f1606 	br	801588c <__subdf3+0x4d0>
 8015c34:	02000434 	movhi	r8,16
 8015c38:	0009883a 	mov	r4,zero
 8015c3c:	423fffc4 	addi	r8,r8,-1
 8015c40:	00bfffc4 	movi	r2,-1
 8015c44:	0401ffc4 	movi	r16,2047
 8015c48:	003e6606 	br	80155e4 <__subdf3+0x228>
 8015c4c:	1c62b03a 	or	r17,r3,r17
 8015c50:	8822c03a 	cmpne	r17,r17,zero
 8015c54:	0005883a 	mov	r2,zero
 8015c58:	003f9906 	br	8015ac0 <__subdf3+0x704>
 8015c5c:	2807883a 	mov	r3,r5
 8015c60:	3023883a 	mov	r17,r6
 8015c64:	0401ffc4 	movi	r16,2047
 8015c68:	003df506 	br	8015440 <__subdf3+0x84>
 8015c6c:	2807883a 	mov	r3,r5
 8015c70:	3023883a 	mov	r17,r6
 8015c74:	003df206 	br	8015440 <__subdf3+0x84>
 8015c78:	123ff804 	addi	r8,r2,-32
 8015c7c:	01000804 	movi	r4,32
 8015c80:	1a10d83a 	srl	r8,r3,r8
 8015c84:	11000a26 	beq	r2,r4,8015cb0 <__subdf3+0x8f4>
 8015c88:	01001004 	movi	r4,64
 8015c8c:	2085c83a 	sub	r2,r4,r2
 8015c90:	1884983a 	sll	r2,r3,r2
 8015c94:	1444b03a 	or	r2,r2,r17
 8015c98:	1004c03a 	cmpne	r2,r2,zero
 8015c9c:	40a2b03a 	or	r17,r8,r2
 8015ca0:	0005883a 	mov	r2,zero
 8015ca4:	003f8606 	br	8015ac0 <__subdf3+0x704>
 8015ca8:	0005883a 	mov	r2,zero
 8015cac:	003fdc06 	br	8015c20 <__subdf3+0x864>
 8015cb0:	0005883a 	mov	r2,zero
 8015cb4:	003ff706 	br	8015c94 <__subdf3+0x8d8>

08015cb8 <__fixdfsi>:
 8015cb8:	280cd53a 	srli	r6,r5,20
 8015cbc:	00c00434 	movhi	r3,16
 8015cc0:	18ffffc4 	addi	r3,r3,-1
 8015cc4:	3181ffcc 	andi	r6,r6,2047
 8015cc8:	01c0ff84 	movi	r7,1022
 8015ccc:	28c6703a 	and	r3,r5,r3
 8015cd0:	280ad7fa 	srli	r5,r5,31
 8015cd4:	3980120e 	bge	r7,r6,8015d20 <__fixdfsi+0x68>
 8015cd8:	00810744 	movi	r2,1053
 8015cdc:	11800c16 	blt	r2,r6,8015d10 <__fixdfsi+0x58>
 8015ce0:	00810cc4 	movi	r2,1075
 8015ce4:	1185c83a 	sub	r2,r2,r6
 8015ce8:	01c007c4 	movi	r7,31
 8015cec:	18c00434 	orhi	r3,r3,16
 8015cf0:	38800d16 	blt	r7,r2,8015d28 <__fixdfsi+0x70>
 8015cf4:	31befb44 	addi	r6,r6,-1043
 8015cf8:	2084d83a 	srl	r2,r4,r2
 8015cfc:	1986983a 	sll	r3,r3,r6
 8015d00:	1884b03a 	or	r2,r3,r2
 8015d04:	28000726 	beq	r5,zero,8015d24 <__fixdfsi+0x6c>
 8015d08:	0085c83a 	sub	r2,zero,r2
 8015d0c:	f800283a 	ret
 8015d10:	00a00034 	movhi	r2,32768
 8015d14:	10bfffc4 	addi	r2,r2,-1
 8015d18:	2885883a 	add	r2,r5,r2
 8015d1c:	f800283a 	ret
 8015d20:	0005883a 	mov	r2,zero
 8015d24:	f800283a 	ret
 8015d28:	008104c4 	movi	r2,1043
 8015d2c:	1185c83a 	sub	r2,r2,r6
 8015d30:	1884d83a 	srl	r2,r3,r2
 8015d34:	003ff306 	br	8015d04 <__fixdfsi+0x4c>

08015d38 <__floatsidf>:
 8015d38:	defffd04 	addi	sp,sp,-12
 8015d3c:	dfc00215 	stw	ra,8(sp)
 8015d40:	dc400115 	stw	r17,4(sp)
 8015d44:	dc000015 	stw	r16,0(sp)
 8015d48:	20002b26 	beq	r4,zero,8015df8 <__floatsidf+0xc0>
 8015d4c:	2023883a 	mov	r17,r4
 8015d50:	2020d7fa 	srli	r16,r4,31
 8015d54:	20002d16 	blt	r4,zero,8015e0c <__floatsidf+0xd4>
 8015d58:	8809883a 	mov	r4,r17
 8015d5c:	8015ebc0 	call	8015ebc <__clzsi2>
 8015d60:	01410784 	movi	r5,1054
 8015d64:	288bc83a 	sub	r5,r5,r2
 8015d68:	01010cc4 	movi	r4,1075
 8015d6c:	2149c83a 	sub	r4,r4,r5
 8015d70:	00c007c4 	movi	r3,31
 8015d74:	1900160e 	bge	r3,r4,8015dd0 <__floatsidf+0x98>
 8015d78:	00c104c4 	movi	r3,1043
 8015d7c:	1947c83a 	sub	r3,r3,r5
 8015d80:	88c6983a 	sll	r3,r17,r3
 8015d84:	00800434 	movhi	r2,16
 8015d88:	10bfffc4 	addi	r2,r2,-1
 8015d8c:	1886703a 	and	r3,r3,r2
 8015d90:	2941ffcc 	andi	r5,r5,2047
 8015d94:	800d883a 	mov	r6,r16
 8015d98:	0005883a 	mov	r2,zero
 8015d9c:	280a953a 	slli	r5,r5,20
 8015da0:	31803fcc 	andi	r6,r6,255
 8015da4:	01000434 	movhi	r4,16
 8015da8:	300c97fa 	slli	r6,r6,31
 8015dac:	213fffc4 	addi	r4,r4,-1
 8015db0:	1906703a 	and	r3,r3,r4
 8015db4:	1946b03a 	or	r3,r3,r5
 8015db8:	1986b03a 	or	r3,r3,r6
 8015dbc:	dfc00217 	ldw	ra,8(sp)
 8015dc0:	dc400117 	ldw	r17,4(sp)
 8015dc4:	dc000017 	ldw	r16,0(sp)
 8015dc8:	dec00304 	addi	sp,sp,12
 8015dcc:	f800283a 	ret
 8015dd0:	00c002c4 	movi	r3,11
 8015dd4:	1887c83a 	sub	r3,r3,r2
 8015dd8:	88c6d83a 	srl	r3,r17,r3
 8015ddc:	8904983a 	sll	r2,r17,r4
 8015de0:	01000434 	movhi	r4,16
 8015de4:	213fffc4 	addi	r4,r4,-1
 8015de8:	2941ffcc 	andi	r5,r5,2047
 8015dec:	1906703a 	and	r3,r3,r4
 8015df0:	800d883a 	mov	r6,r16
 8015df4:	003fe906 	br	8015d9c <__floatsidf+0x64>
 8015df8:	000d883a 	mov	r6,zero
 8015dfc:	000b883a 	mov	r5,zero
 8015e00:	0007883a 	mov	r3,zero
 8015e04:	0005883a 	mov	r2,zero
 8015e08:	003fe406 	br	8015d9c <__floatsidf+0x64>
 8015e0c:	0123c83a 	sub	r17,zero,r4
 8015e10:	003fd106 	br	8015d58 <__floatsidf+0x20>

08015e14 <__floatunsidf>:
 8015e14:	defffe04 	addi	sp,sp,-8
 8015e18:	dc000015 	stw	r16,0(sp)
 8015e1c:	dfc00115 	stw	ra,4(sp)
 8015e20:	2021883a 	mov	r16,r4
 8015e24:	20002226 	beq	r4,zero,8015eb0 <__floatunsidf+0x9c>
 8015e28:	8015ebc0 	call	8015ebc <__clzsi2>
 8015e2c:	01010784 	movi	r4,1054
 8015e30:	2089c83a 	sub	r4,r4,r2
 8015e34:	01810cc4 	movi	r6,1075
 8015e38:	310dc83a 	sub	r6,r6,r4
 8015e3c:	00c007c4 	movi	r3,31
 8015e40:	1980120e 	bge	r3,r6,8015e8c <__floatunsidf+0x78>
 8015e44:	00c104c4 	movi	r3,1043
 8015e48:	1907c83a 	sub	r3,r3,r4
 8015e4c:	80ca983a 	sll	r5,r16,r3
 8015e50:	00800434 	movhi	r2,16
 8015e54:	10bfffc4 	addi	r2,r2,-1
 8015e58:	2101ffcc 	andi	r4,r4,2047
 8015e5c:	0021883a 	mov	r16,zero
 8015e60:	288a703a 	and	r5,r5,r2
 8015e64:	2008953a 	slli	r4,r4,20
 8015e68:	00c00434 	movhi	r3,16
 8015e6c:	18ffffc4 	addi	r3,r3,-1
 8015e70:	28c6703a 	and	r3,r5,r3
 8015e74:	8005883a 	mov	r2,r16
 8015e78:	1906b03a 	or	r3,r3,r4
 8015e7c:	dfc00117 	ldw	ra,4(sp)
 8015e80:	dc000017 	ldw	r16,0(sp)
 8015e84:	dec00204 	addi	sp,sp,8
 8015e88:	f800283a 	ret
 8015e8c:	00c002c4 	movi	r3,11
 8015e90:	188bc83a 	sub	r5,r3,r2
 8015e94:	814ad83a 	srl	r5,r16,r5
 8015e98:	00c00434 	movhi	r3,16
 8015e9c:	18ffffc4 	addi	r3,r3,-1
 8015ea0:	81a0983a 	sll	r16,r16,r6
 8015ea4:	2101ffcc 	andi	r4,r4,2047
 8015ea8:	28ca703a 	and	r5,r5,r3
 8015eac:	003fed06 	br	8015e64 <__floatunsidf+0x50>
 8015eb0:	0009883a 	mov	r4,zero
 8015eb4:	000b883a 	mov	r5,zero
 8015eb8:	003fea06 	br	8015e64 <__floatunsidf+0x50>

08015ebc <__clzsi2>:
 8015ebc:	00bfffd4 	movui	r2,65535
 8015ec0:	11000536 	bltu	r2,r4,8015ed8 <__clzsi2+0x1c>
 8015ec4:	00803fc4 	movi	r2,255
 8015ec8:	11000f36 	bltu	r2,r4,8015f08 <__clzsi2+0x4c>
 8015ecc:	00800804 	movi	r2,32
 8015ed0:	0007883a 	mov	r3,zero
 8015ed4:	00000506 	br	8015eec <__clzsi2+0x30>
 8015ed8:	00804034 	movhi	r2,256
 8015edc:	10bfffc4 	addi	r2,r2,-1
 8015ee0:	11000c2e 	bgeu	r2,r4,8015f14 <__clzsi2+0x58>
 8015ee4:	00800204 	movi	r2,8
 8015ee8:	00c00604 	movi	r3,24
 8015eec:	20c8d83a 	srl	r4,r4,r3
 8015ef0:	00c200b4 	movhi	r3,2050
 8015ef4:	18e93504 	addi	r3,r3,-23340
 8015ef8:	1909883a 	add	r4,r3,r4
 8015efc:	20c00003 	ldbu	r3,0(r4)
 8015f00:	10c5c83a 	sub	r2,r2,r3
 8015f04:	f800283a 	ret
 8015f08:	00800604 	movi	r2,24
 8015f0c:	00c00204 	movi	r3,8
 8015f10:	003ff606 	br	8015eec <__clzsi2+0x30>
 8015f14:	00800404 	movi	r2,16
 8015f18:	1007883a 	mov	r3,r2
 8015f1c:	003ff306 	br	8015eec <__clzsi2+0x30>

08015f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015f20:	defffe04 	addi	sp,sp,-8
 8015f24:	dfc00115 	stw	ra,4(sp)
 8015f28:	df000015 	stw	fp,0(sp)
 8015f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015f30:	d0a00e17 	ldw	r2,-32712(gp)
 8015f34:	10000326 	beq	r2,zero,8015f44 <alt_get_errno+0x24>
 8015f38:	d0a00e17 	ldw	r2,-32712(gp)
 8015f3c:	103ee83a 	callr	r2
 8015f40:	00000106 	br	8015f48 <alt_get_errno+0x28>
 8015f44:	d0a8af04 	addi	r2,gp,-23876
}
 8015f48:	e037883a 	mov	sp,fp
 8015f4c:	dfc00117 	ldw	ra,4(sp)
 8015f50:	df000017 	ldw	fp,0(sp)
 8015f54:	dec00204 	addi	sp,sp,8
 8015f58:	f800283a 	ret

08015f5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015f5c:	defffb04 	addi	sp,sp,-20
 8015f60:	dfc00415 	stw	ra,16(sp)
 8015f64:	df000315 	stw	fp,12(sp)
 8015f68:	df000304 	addi	fp,sp,12
 8015f6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8015f70:	e0bfff17 	ldw	r2,-4(fp)
 8015f74:	10000816 	blt	r2,zero,8015f98 <close+0x3c>
 8015f78:	01400304 	movi	r5,12
 8015f7c:	e13fff17 	ldw	r4,-4(fp)
 8015f80:	80087fc0 	call	80087fc <__mulsi3>
 8015f84:	1007883a 	mov	r3,r2
 8015f88:	008200b4 	movhi	r2,2050
 8015f8c:	10accb04 	addi	r2,r2,-19668
 8015f90:	1885883a 	add	r2,r3,r2
 8015f94:	00000106 	br	8015f9c <close+0x40>
 8015f98:	0005883a 	mov	r2,zero
 8015f9c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8015fa0:	e0bffd17 	ldw	r2,-12(fp)
 8015fa4:	10001926 	beq	r2,zero,801600c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8015fa8:	e0bffd17 	ldw	r2,-12(fp)
 8015fac:	10800017 	ldw	r2,0(r2)
 8015fb0:	10800417 	ldw	r2,16(r2)
 8015fb4:	10000626 	beq	r2,zero,8015fd0 <close+0x74>
 8015fb8:	e0bffd17 	ldw	r2,-12(fp)
 8015fbc:	10800017 	ldw	r2,0(r2)
 8015fc0:	10800417 	ldw	r2,16(r2)
 8015fc4:	e13ffd17 	ldw	r4,-12(fp)
 8015fc8:	103ee83a 	callr	r2
 8015fcc:	00000106 	br	8015fd4 <close+0x78>
 8015fd0:	0005883a 	mov	r2,zero
 8015fd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015fd8:	e13fff17 	ldw	r4,-4(fp)
 8015fdc:	8016ce00 	call	8016ce0 <alt_release_fd>
    if (rval < 0)
 8015fe0:	e0bffe17 	ldw	r2,-8(fp)
 8015fe4:	1000070e 	bge	r2,zero,8016004 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015fe8:	8015f200 	call	8015f20 <alt_get_errno>
 8015fec:	1007883a 	mov	r3,r2
 8015ff0:	e0bffe17 	ldw	r2,-8(fp)
 8015ff4:	0085c83a 	sub	r2,zero,r2
 8015ff8:	18800015 	stw	r2,0(r3)
      return -1;
 8015ffc:	00bfffc4 	movi	r2,-1
 8016000:	00000706 	br	8016020 <close+0xc4>
    }
    return 0;
 8016004:	0005883a 	mov	r2,zero
 8016008:	00000506 	br	8016020 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801600c:	8015f200 	call	8015f20 <alt_get_errno>
 8016010:	1007883a 	mov	r3,r2
 8016014:	00801444 	movi	r2,81
 8016018:	18800015 	stw	r2,0(r3)
    return -1;
 801601c:	00bfffc4 	movi	r2,-1
  }
}
 8016020:	e037883a 	mov	sp,fp
 8016024:	dfc00117 	ldw	ra,4(sp)
 8016028:	df000017 	ldw	fp,0(sp)
 801602c:	dec00204 	addi	sp,sp,8
 8016030:	f800283a 	ret

08016034 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8016034:	defffc04 	addi	sp,sp,-16
 8016038:	df000315 	stw	fp,12(sp)
 801603c:	df000304 	addi	fp,sp,12
 8016040:	e13ffd15 	stw	r4,-12(fp)
 8016044:	e17ffe15 	stw	r5,-8(fp)
 8016048:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801604c:	e0bfff17 	ldw	r2,-4(fp)
}
 8016050:	e037883a 	mov	sp,fp
 8016054:	df000017 	ldw	fp,0(sp)
 8016058:	dec00104 	addi	sp,sp,4
 801605c:	f800283a 	ret

08016060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016060:	defffe04 	addi	sp,sp,-8
 8016064:	dfc00115 	stw	ra,4(sp)
 8016068:	df000015 	stw	fp,0(sp)
 801606c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016070:	d0a00e17 	ldw	r2,-32712(gp)
 8016074:	10000326 	beq	r2,zero,8016084 <alt_get_errno+0x24>
 8016078:	d0a00e17 	ldw	r2,-32712(gp)
 801607c:	103ee83a 	callr	r2
 8016080:	00000106 	br	8016088 <alt_get_errno+0x28>
 8016084:	d0a8af04 	addi	r2,gp,-23876
}
 8016088:	e037883a 	mov	sp,fp
 801608c:	dfc00117 	ldw	ra,4(sp)
 8016090:	df000017 	ldw	fp,0(sp)
 8016094:	dec00204 	addi	sp,sp,8
 8016098:	f800283a 	ret

0801609c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801609c:	defffb04 	addi	sp,sp,-20
 80160a0:	dfc00415 	stw	ra,16(sp)
 80160a4:	df000315 	stw	fp,12(sp)
 80160a8:	df000304 	addi	fp,sp,12
 80160ac:	e13ffe15 	stw	r4,-8(fp)
 80160b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80160b4:	e0bffe17 	ldw	r2,-8(fp)
 80160b8:	10000816 	blt	r2,zero,80160dc <fstat+0x40>
 80160bc:	01400304 	movi	r5,12
 80160c0:	e13ffe17 	ldw	r4,-8(fp)
 80160c4:	80087fc0 	call	80087fc <__mulsi3>
 80160c8:	1007883a 	mov	r3,r2
 80160cc:	008200b4 	movhi	r2,2050
 80160d0:	10accb04 	addi	r2,r2,-19668
 80160d4:	1885883a 	add	r2,r3,r2
 80160d8:	00000106 	br	80160e0 <fstat+0x44>
 80160dc:	0005883a 	mov	r2,zero
 80160e0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80160e4:	e0bffd17 	ldw	r2,-12(fp)
 80160e8:	10001026 	beq	r2,zero,801612c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80160ec:	e0bffd17 	ldw	r2,-12(fp)
 80160f0:	10800017 	ldw	r2,0(r2)
 80160f4:	10800817 	ldw	r2,32(r2)
 80160f8:	10000726 	beq	r2,zero,8016118 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 80160fc:	e0bffd17 	ldw	r2,-12(fp)
 8016100:	10800017 	ldw	r2,0(r2)
 8016104:	10800817 	ldw	r2,32(r2)
 8016108:	e17fff17 	ldw	r5,-4(fp)
 801610c:	e13ffd17 	ldw	r4,-12(fp)
 8016110:	103ee83a 	callr	r2
 8016114:	00000a06 	br	8016140 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8016118:	e0bfff17 	ldw	r2,-4(fp)
 801611c:	00c80004 	movi	r3,8192
 8016120:	10c00115 	stw	r3,4(r2)
      return 0;
 8016124:	0005883a 	mov	r2,zero
 8016128:	00000506 	br	8016140 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801612c:	80160600 	call	8016060 <alt_get_errno>
 8016130:	1007883a 	mov	r3,r2
 8016134:	00801444 	movi	r2,81
 8016138:	18800015 	stw	r2,0(r3)
    return -1;
 801613c:	00bfffc4 	movi	r2,-1
  }
}
 8016140:	e037883a 	mov	sp,fp
 8016144:	dfc00117 	ldw	ra,4(sp)
 8016148:	df000017 	ldw	fp,0(sp)
 801614c:	dec00204 	addi	sp,sp,8
 8016150:	f800283a 	ret

08016154 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016154:	defff904 	addi	sp,sp,-28
 8016158:	dfc00615 	stw	ra,24(sp)
 801615c:	df000515 	stw	fp,20(sp)
 8016160:	df000504 	addi	fp,sp,20
 8016164:	e13ffc15 	stw	r4,-16(fp)
 8016168:	e17ffd15 	stw	r5,-12(fp)
 801616c:	e1bffe15 	stw	r6,-8(fp)
 8016170:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8016174:	e0800217 	ldw	r2,8(fp)
 8016178:	d8800015 	stw	r2,0(sp)
 801617c:	e1ffff17 	ldw	r7,-4(fp)
 8016180:	e1bffe17 	ldw	r6,-8(fp)
 8016184:	e17ffd17 	ldw	r5,-12(fp)
 8016188:	e13ffc17 	ldw	r4,-16(fp)
 801618c:	800425c0 	call	800425c <alt_iic_isr_register>
}  
 8016190:	e037883a 	mov	sp,fp
 8016194:	dfc00117 	ldw	ra,4(sp)
 8016198:	df000017 	ldw	fp,0(sp)
 801619c:	dec00204 	addi	sp,sp,8
 80161a0:	f800283a 	ret

080161a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80161a4:	defff904 	addi	sp,sp,-28
 80161a8:	df000615 	stw	fp,24(sp)
 80161ac:	df000604 	addi	fp,sp,24
 80161b0:	e13ffe15 	stw	r4,-8(fp)
 80161b4:	e17fff15 	stw	r5,-4(fp)
 80161b8:	e0bfff17 	ldw	r2,-4(fp)
 80161bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80161c0:	0005303a 	rdctl	r2,status
 80161c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80161c8:	e0fffb17 	ldw	r3,-20(fp)
 80161cc:	00bfff84 	movi	r2,-2
 80161d0:	1884703a 	and	r2,r3,r2
 80161d4:	1001703a 	wrctl	status,r2
  
  return context;
 80161d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80161dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80161e0:	00c00044 	movi	r3,1
 80161e4:	e0bffa17 	ldw	r2,-24(fp)
 80161e8:	1884983a 	sll	r2,r3,r2
 80161ec:	1007883a 	mov	r3,r2
 80161f0:	d0a8b617 	ldw	r2,-23848(gp)
 80161f4:	1884b03a 	or	r2,r3,r2
 80161f8:	d0a8b615 	stw	r2,-23848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80161fc:	d0a8b617 	ldw	r2,-23848(gp)
 8016200:	100170fa 	wrctl	ienable,r2
 8016204:	e0bffc17 	ldw	r2,-16(fp)
 8016208:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801620c:	e0bffd17 	ldw	r2,-12(fp)
 8016210:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8016214:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8016218:	0001883a 	nop
}
 801621c:	e037883a 	mov	sp,fp
 8016220:	df000017 	ldw	fp,0(sp)
 8016224:	dec00104 	addi	sp,sp,4
 8016228:	f800283a 	ret

0801622c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801622c:	defff904 	addi	sp,sp,-28
 8016230:	df000615 	stw	fp,24(sp)
 8016234:	df000604 	addi	fp,sp,24
 8016238:	e13ffe15 	stw	r4,-8(fp)
 801623c:	e17fff15 	stw	r5,-4(fp)
 8016240:	e0bfff17 	ldw	r2,-4(fp)
 8016244:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016248:	0005303a 	rdctl	r2,status
 801624c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016250:	e0fffb17 	ldw	r3,-20(fp)
 8016254:	00bfff84 	movi	r2,-2
 8016258:	1884703a 	and	r2,r3,r2
 801625c:	1001703a 	wrctl	status,r2
  
  return context;
 8016260:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8016264:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8016268:	00c00044 	movi	r3,1
 801626c:	e0bffa17 	ldw	r2,-24(fp)
 8016270:	1884983a 	sll	r2,r3,r2
 8016274:	0084303a 	nor	r2,zero,r2
 8016278:	1007883a 	mov	r3,r2
 801627c:	d0a8b617 	ldw	r2,-23848(gp)
 8016280:	1884703a 	and	r2,r3,r2
 8016284:	d0a8b615 	stw	r2,-23848(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8016288:	d0a8b617 	ldw	r2,-23848(gp)
 801628c:	100170fa 	wrctl	ienable,r2
 8016290:	e0bffc17 	ldw	r2,-16(fp)
 8016294:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016298:	e0bffd17 	ldw	r2,-12(fp)
 801629c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80162a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80162a4:	0001883a 	nop
}
 80162a8:	e037883a 	mov	sp,fp
 80162ac:	df000017 	ldw	fp,0(sp)
 80162b0:	dec00104 	addi	sp,sp,4
 80162b4:	f800283a 	ret

080162b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80162b8:	defffc04 	addi	sp,sp,-16
 80162bc:	df000315 	stw	fp,12(sp)
 80162c0:	df000304 	addi	fp,sp,12
 80162c4:	e13ffe15 	stw	r4,-8(fp)
 80162c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80162cc:	000530fa 	rdctl	r2,ienable
 80162d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80162d4:	00c00044 	movi	r3,1
 80162d8:	e0bfff17 	ldw	r2,-4(fp)
 80162dc:	1884983a 	sll	r2,r3,r2
 80162e0:	1007883a 	mov	r3,r2
 80162e4:	e0bffd17 	ldw	r2,-12(fp)
 80162e8:	1884703a 	and	r2,r3,r2
 80162ec:	1004c03a 	cmpne	r2,r2,zero
 80162f0:	10803fcc 	andi	r2,r2,255
}
 80162f4:	e037883a 	mov	sp,fp
 80162f8:	df000017 	ldw	fp,0(sp)
 80162fc:	dec00104 	addi	sp,sp,4
 8016300:	f800283a 	ret

08016304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016304:	defffe04 	addi	sp,sp,-8
 8016308:	dfc00115 	stw	ra,4(sp)
 801630c:	df000015 	stw	fp,0(sp)
 8016310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016314:	d0a00e17 	ldw	r2,-32712(gp)
 8016318:	10000326 	beq	r2,zero,8016328 <alt_get_errno+0x24>
 801631c:	d0a00e17 	ldw	r2,-32712(gp)
 8016320:	103ee83a 	callr	r2
 8016324:	00000106 	br	801632c <alt_get_errno+0x28>
 8016328:	d0a8af04 	addi	r2,gp,-23876
}
 801632c:	e037883a 	mov	sp,fp
 8016330:	dfc00117 	ldw	ra,4(sp)
 8016334:	df000017 	ldw	fp,0(sp)
 8016338:	dec00204 	addi	sp,sp,8
 801633c:	f800283a 	ret

08016340 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8016340:	deffed04 	addi	sp,sp,-76
 8016344:	dfc01215 	stw	ra,72(sp)
 8016348:	df001115 	stw	fp,68(sp)
 801634c:	df001104 	addi	fp,sp,68
 8016350:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016354:	e0bfff17 	ldw	r2,-4(fp)
 8016358:	10000816 	blt	r2,zero,801637c <isatty+0x3c>
 801635c:	01400304 	movi	r5,12
 8016360:	e13fff17 	ldw	r4,-4(fp)
 8016364:	80087fc0 	call	80087fc <__mulsi3>
 8016368:	1007883a 	mov	r3,r2
 801636c:	008200b4 	movhi	r2,2050
 8016370:	10accb04 	addi	r2,r2,-19668
 8016374:	1885883a 	add	r2,r3,r2
 8016378:	00000106 	br	8016380 <isatty+0x40>
 801637c:	0005883a 	mov	r2,zero
 8016380:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8016384:	e0bfef17 	ldw	r2,-68(fp)
 8016388:	10000e26 	beq	r2,zero,80163c4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 801638c:	e0bfef17 	ldw	r2,-68(fp)
 8016390:	10800017 	ldw	r2,0(r2)
 8016394:	10800817 	ldw	r2,32(r2)
 8016398:	1000021e 	bne	r2,zero,80163a4 <isatty+0x64>
    {
      return 1;
 801639c:	00800044 	movi	r2,1
 80163a0:	00000d06 	br	80163d8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80163a4:	e0bff004 	addi	r2,fp,-64
 80163a8:	100b883a 	mov	r5,r2
 80163ac:	e13fff17 	ldw	r4,-4(fp)
 80163b0:	801609c0 	call	801609c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80163b4:	e0bff117 	ldw	r2,-60(fp)
 80163b8:	10880020 	cmpeqi	r2,r2,8192
 80163bc:	10803fcc 	andi	r2,r2,255
 80163c0:	00000506 	br	80163d8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80163c4:	80163040 	call	8016304 <alt_get_errno>
 80163c8:	1007883a 	mov	r3,r2
 80163cc:	00801444 	movi	r2,81
 80163d0:	18800015 	stw	r2,0(r3)
    return 0;
 80163d4:	0005883a 	mov	r2,zero
  }
}
 80163d8:	e037883a 	mov	sp,fp
 80163dc:	dfc00117 	ldw	ra,4(sp)
 80163e0:	df000017 	ldw	fp,0(sp)
 80163e4:	dec00204 	addi	sp,sp,8
 80163e8:	f800283a 	ret

080163ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80163ec:	defffc04 	addi	sp,sp,-16
 80163f0:	df000315 	stw	fp,12(sp)
 80163f4:	df000304 	addi	fp,sp,12
 80163f8:	e13ffd15 	stw	r4,-12(fp)
 80163fc:	e17ffe15 	stw	r5,-8(fp)
 8016400:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8016404:	e0fffe17 	ldw	r3,-8(fp)
 8016408:	e0bffd17 	ldw	r2,-12(fp)
 801640c:	18800c26 	beq	r3,r2,8016440 <alt_load_section+0x54>
  {
    while( to != end )
 8016410:	00000806 	br	8016434 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8016414:	e0bffe17 	ldw	r2,-8(fp)
 8016418:	10c00104 	addi	r3,r2,4
 801641c:	e0fffe15 	stw	r3,-8(fp)
 8016420:	e0fffd17 	ldw	r3,-12(fp)
 8016424:	19000104 	addi	r4,r3,4
 8016428:	e13ffd15 	stw	r4,-12(fp)
 801642c:	18c00017 	ldw	r3,0(r3)
 8016430:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8016434:	e0fffe17 	ldw	r3,-8(fp)
 8016438:	e0bfff17 	ldw	r2,-4(fp)
 801643c:	18bff51e 	bne	r3,r2,8016414 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8016440:	0001883a 	nop
 8016444:	e037883a 	mov	sp,fp
 8016448:	df000017 	ldw	fp,0(sp)
 801644c:	dec00104 	addi	sp,sp,4
 8016450:	f800283a 	ret

08016454 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8016454:	defffe04 	addi	sp,sp,-8
 8016458:	dfc00115 	stw	ra,4(sp)
 801645c:	df000015 	stw	fp,0(sp)
 8016460:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8016464:	018200b4 	movhi	r6,2050
 8016468:	31b1cd04 	addi	r6,r6,-14540
 801646c:	014200b4 	movhi	r5,2050
 8016470:	29699804 	addi	r5,r5,-22944
 8016474:	010200b4 	movhi	r4,2050
 8016478:	2131cd04 	addi	r4,r4,-14540
 801647c:	80163ec0 	call	80163ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8016480:	01820034 	movhi	r6,2048
 8016484:	31809404 	addi	r6,r6,592
 8016488:	01420034 	movhi	r5,2048
 801648c:	29400804 	addi	r5,r5,32
 8016490:	01020034 	movhi	r4,2048
 8016494:	21000804 	addi	r4,r4,32
 8016498:	80163ec0 	call	80163ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 801649c:	018200b4 	movhi	r6,2050
 80164a0:	31a99804 	addi	r6,r6,-22944
 80164a4:	014200b4 	movhi	r5,2050
 80164a8:	29680604 	addi	r5,r5,-24552
 80164ac:	010200b4 	movhi	r4,2050
 80164b0:	21280604 	addi	r4,r4,-24552
 80164b4:	80163ec0 	call	80163ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80164b8:	80193b80 	call	80193b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80164bc:	80197d40 	call	80197d4 <alt_icache_flush_all>
}
 80164c0:	0001883a 	nop
 80164c4:	e037883a 	mov	sp,fp
 80164c8:	dfc00117 	ldw	ra,4(sp)
 80164cc:	df000017 	ldw	fp,0(sp)
 80164d0:	dec00204 	addi	sp,sp,8
 80164d4:	f800283a 	ret

080164d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80164d8:	defffe04 	addi	sp,sp,-8
 80164dc:	dfc00115 	stw	ra,4(sp)
 80164e0:	df000015 	stw	fp,0(sp)
 80164e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80164e8:	d0a00e17 	ldw	r2,-32712(gp)
 80164ec:	10000326 	beq	r2,zero,80164fc <alt_get_errno+0x24>
 80164f0:	d0a00e17 	ldw	r2,-32712(gp)
 80164f4:	103ee83a 	callr	r2
 80164f8:	00000106 	br	8016500 <alt_get_errno+0x28>
 80164fc:	d0a8af04 	addi	r2,gp,-23876
}
 8016500:	e037883a 	mov	sp,fp
 8016504:	dfc00117 	ldw	ra,4(sp)
 8016508:	df000017 	ldw	fp,0(sp)
 801650c:	dec00204 	addi	sp,sp,8
 8016510:	f800283a 	ret

08016514 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8016514:	defff904 	addi	sp,sp,-28
 8016518:	dfc00615 	stw	ra,24(sp)
 801651c:	df000515 	stw	fp,20(sp)
 8016520:	df000504 	addi	fp,sp,20
 8016524:	e13ffd15 	stw	r4,-12(fp)
 8016528:	e17ffe15 	stw	r5,-8(fp)
 801652c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8016530:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016534:	e0bffd17 	ldw	r2,-12(fp)
 8016538:	10000816 	blt	r2,zero,801655c <lseek+0x48>
 801653c:	01400304 	movi	r5,12
 8016540:	e13ffd17 	ldw	r4,-12(fp)
 8016544:	80087fc0 	call	80087fc <__mulsi3>
 8016548:	1007883a 	mov	r3,r2
 801654c:	008200b4 	movhi	r2,2050
 8016550:	10accb04 	addi	r2,r2,-19668
 8016554:	1885883a 	add	r2,r3,r2
 8016558:	00000106 	br	8016560 <lseek+0x4c>
 801655c:	0005883a 	mov	r2,zero
 8016560:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8016564:	e0bffc17 	ldw	r2,-16(fp)
 8016568:	10001026 	beq	r2,zero,80165ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 801656c:	e0bffc17 	ldw	r2,-16(fp)
 8016570:	10800017 	ldw	r2,0(r2)
 8016574:	10800717 	ldw	r2,28(r2)
 8016578:	10000926 	beq	r2,zero,80165a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 801657c:	e0bffc17 	ldw	r2,-16(fp)
 8016580:	10800017 	ldw	r2,0(r2)
 8016584:	10800717 	ldw	r2,28(r2)
 8016588:	e1bfff17 	ldw	r6,-4(fp)
 801658c:	e17ffe17 	ldw	r5,-8(fp)
 8016590:	e13ffc17 	ldw	r4,-16(fp)
 8016594:	103ee83a 	callr	r2
 8016598:	e0bffb15 	stw	r2,-20(fp)
 801659c:	00000506 	br	80165b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80165a0:	00bfde84 	movi	r2,-134
 80165a4:	e0bffb15 	stw	r2,-20(fp)
 80165a8:	00000206 	br	80165b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 80165ac:	00bfebc4 	movi	r2,-81
 80165b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80165b4:	e0bffb17 	ldw	r2,-20(fp)
 80165b8:	1000070e 	bge	r2,zero,80165d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 80165bc:	80164d80 	call	80164d8 <alt_get_errno>
 80165c0:	1007883a 	mov	r3,r2
 80165c4:	e0bffb17 	ldw	r2,-20(fp)
 80165c8:	0085c83a 	sub	r2,zero,r2
 80165cc:	18800015 	stw	r2,0(r3)
    rc = -1;
 80165d0:	00bfffc4 	movi	r2,-1
 80165d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80165d8:	e0bffb17 	ldw	r2,-20(fp)
}
 80165dc:	e037883a 	mov	sp,fp
 80165e0:	dfc00117 	ldw	ra,4(sp)
 80165e4:	df000017 	ldw	fp,0(sp)
 80165e8:	dec00204 	addi	sp,sp,8
 80165ec:	f800283a 	ret

080165f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80165f0:	defffd04 	addi	sp,sp,-12
 80165f4:	dfc00215 	stw	ra,8(sp)
 80165f8:	df000115 	stw	fp,4(sp)
 80165fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8016600:	0009883a 	mov	r4,zero
 8016604:	8016f840 	call	8016f84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8016608:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 801660c:	8016fbc0 	call	8016fbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8016610:	018200b4 	movhi	r6,2050
 8016614:	31a97804 	addi	r6,r6,-23072
 8016618:	014200b4 	movhi	r5,2050
 801661c:	29697804 	addi	r5,r5,-23072
 8016620:	010200b4 	movhi	r4,2050
 8016624:	21297804 	addi	r4,r4,-23072
 8016628:	80198d80 	call	80198d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 801662c:	80194b80 	call	80194b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8016630:	010200b4 	movhi	r4,2050
 8016634:	21254604 	addi	r4,r4,-27368
 8016638:	8019b1c0 	call	8019b1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 801663c:	d0a8b717 	ldw	r2,-23844(gp)
 8016640:	d0e8b817 	ldw	r3,-23840(gp)
 8016644:	d128b917 	ldw	r4,-23836(gp)
 8016648:	200d883a 	mov	r6,r4
 801664c:	180b883a 	mov	r5,r3
 8016650:	1009883a 	mov	r4,r2
 8016654:	800028c0 	call	800028c <main>
 8016658:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 801665c:	01000044 	movi	r4,1
 8016660:	8015f5c0 	call	8015f5c <close>
  exit (result);
 8016664:	e13fff17 	ldw	r4,-4(fp)
 8016668:	8019b300 	call	8019b30 <exit>

0801666c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 801666c:	defffe04 	addi	sp,sp,-8
 8016670:	df000115 	stw	fp,4(sp)
 8016674:	df000104 	addi	fp,sp,4
 8016678:	e13fff15 	stw	r4,-4(fp)
}
 801667c:	0001883a 	nop
 8016680:	e037883a 	mov	sp,fp
 8016684:	df000017 	ldw	fp,0(sp)
 8016688:	dec00104 	addi	sp,sp,4
 801668c:	f800283a 	ret

08016690 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8016690:	defffe04 	addi	sp,sp,-8
 8016694:	df000115 	stw	fp,4(sp)
 8016698:	df000104 	addi	fp,sp,4
 801669c:	e13fff15 	stw	r4,-4(fp)
}
 80166a0:	0001883a 	nop
 80166a4:	e037883a 	mov	sp,fp
 80166a8:	df000017 	ldw	fp,0(sp)
 80166ac:	dec00104 	addi	sp,sp,4
 80166b0:	f800283a 	ret

080166b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80166b4:	defffe04 	addi	sp,sp,-8
 80166b8:	dfc00115 	stw	ra,4(sp)
 80166bc:	df000015 	stw	fp,0(sp)
 80166c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80166c4:	d0a00e17 	ldw	r2,-32712(gp)
 80166c8:	10000326 	beq	r2,zero,80166d8 <alt_get_errno+0x24>
 80166cc:	d0a00e17 	ldw	r2,-32712(gp)
 80166d0:	103ee83a 	callr	r2
 80166d4:	00000106 	br	80166dc <alt_get_errno+0x28>
 80166d8:	d0a8af04 	addi	r2,gp,-23876
}
 80166dc:	e037883a 	mov	sp,fp
 80166e0:	dfc00117 	ldw	ra,4(sp)
 80166e4:	df000017 	ldw	fp,0(sp)
 80166e8:	dec00204 	addi	sp,sp,8
 80166ec:	f800283a 	ret

080166f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80166f0:	defffb04 	addi	sp,sp,-20
 80166f4:	dfc00415 	stw	ra,16(sp)
 80166f8:	df000315 	stw	fp,12(sp)
 80166fc:	dc000215 	stw	r16,8(sp)
 8016700:	df000304 	addi	fp,sp,12
 8016704:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8016708:	e0bffe17 	ldw	r2,-8(fp)
 801670c:	10800217 	ldw	r2,8(r2)
 8016710:	10d00034 	orhi	r3,r2,16384
 8016714:	e0bffe17 	ldw	r2,-8(fp)
 8016718:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801671c:	e03ffd15 	stw	zero,-12(fp)
 8016720:	00002306 	br	80167b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016724:	040200b4 	movhi	r16,2050
 8016728:	842ccb04 	addi	r16,r16,-19668
 801672c:	e0bffd17 	ldw	r2,-12(fp)
 8016730:	01400304 	movi	r5,12
 8016734:	1009883a 	mov	r4,r2
 8016738:	80087fc0 	call	80087fc <__mulsi3>
 801673c:	8085883a 	add	r2,r16,r2
 8016740:	10c00017 	ldw	r3,0(r2)
 8016744:	e0bffe17 	ldw	r2,-8(fp)
 8016748:	10800017 	ldw	r2,0(r2)
 801674c:	1880151e 	bne	r3,r2,80167a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016750:	040200b4 	movhi	r16,2050
 8016754:	842ccb04 	addi	r16,r16,-19668
 8016758:	e0bffd17 	ldw	r2,-12(fp)
 801675c:	01400304 	movi	r5,12
 8016760:	1009883a 	mov	r4,r2
 8016764:	80087fc0 	call	80087fc <__mulsi3>
 8016768:	8085883a 	add	r2,r16,r2
 801676c:	10800204 	addi	r2,r2,8
 8016770:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016774:	10000b0e 	bge	r2,zero,80167a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8016778:	01400304 	movi	r5,12
 801677c:	e13ffd17 	ldw	r4,-12(fp)
 8016780:	80087fc0 	call	80087fc <__mulsi3>
 8016784:	1007883a 	mov	r3,r2
 8016788:	008200b4 	movhi	r2,2050
 801678c:	10accb04 	addi	r2,r2,-19668
 8016790:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016794:	e0bffe17 	ldw	r2,-8(fp)
 8016798:	18800226 	beq	r3,r2,80167a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801679c:	00bffcc4 	movi	r2,-13
 80167a0:	00000806 	br	80167c4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80167a4:	e0bffd17 	ldw	r2,-12(fp)
 80167a8:	10800044 	addi	r2,r2,1
 80167ac:	e0bffd15 	stw	r2,-12(fp)
 80167b0:	d0a00d17 	ldw	r2,-32716(gp)
 80167b4:	1007883a 	mov	r3,r2
 80167b8:	e0bffd17 	ldw	r2,-12(fp)
 80167bc:	18bfd92e 	bgeu	r3,r2,8016724 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80167c0:	0005883a 	mov	r2,zero
}
 80167c4:	e6ffff04 	addi	sp,fp,-4
 80167c8:	dfc00217 	ldw	ra,8(sp)
 80167cc:	df000117 	ldw	fp,4(sp)
 80167d0:	dc000017 	ldw	r16,0(sp)
 80167d4:	dec00304 	addi	sp,sp,12
 80167d8:	f800283a 	ret

080167dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80167dc:	defff604 	addi	sp,sp,-40
 80167e0:	dfc00915 	stw	ra,36(sp)
 80167e4:	df000815 	stw	fp,32(sp)
 80167e8:	df000804 	addi	fp,sp,32
 80167ec:	e13ffd15 	stw	r4,-12(fp)
 80167f0:	e17ffe15 	stw	r5,-8(fp)
 80167f4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80167f8:	00bfffc4 	movi	r2,-1
 80167fc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8016800:	00bffb44 	movi	r2,-19
 8016804:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8016808:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801680c:	d1600b04 	addi	r5,gp,-32724
 8016810:	e13ffd17 	ldw	r4,-12(fp)
 8016814:	80195780 	call	8019578 <alt_find_dev>
 8016818:	e0bff815 	stw	r2,-32(fp)
 801681c:	e0bff817 	ldw	r2,-32(fp)
 8016820:	1000051e 	bne	r2,zero,8016838 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8016824:	e13ffd17 	ldw	r4,-12(fp)
 8016828:	80196080 	call	8019608 <alt_find_file>
 801682c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8016830:	00800044 	movi	r2,1
 8016834:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016838:	e0bff817 	ldw	r2,-32(fp)
 801683c:	10002b26 	beq	r2,zero,80168ec <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016840:	e13ff817 	ldw	r4,-32(fp)
 8016844:	80197100 	call	8019710 <alt_get_fd>
 8016848:	e0bff915 	stw	r2,-28(fp)
 801684c:	e0bff917 	ldw	r2,-28(fp)
 8016850:	1000030e 	bge	r2,zero,8016860 <open+0x84>
    {
      status = index;
 8016854:	e0bff917 	ldw	r2,-28(fp)
 8016858:	e0bffa15 	stw	r2,-24(fp)
 801685c:	00002506 	br	80168f4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8016860:	01400304 	movi	r5,12
 8016864:	e13ff917 	ldw	r4,-28(fp)
 8016868:	80087fc0 	call	80087fc <__mulsi3>
 801686c:	1007883a 	mov	r3,r2
 8016870:	008200b4 	movhi	r2,2050
 8016874:	10accb04 	addi	r2,r2,-19668
 8016878:	1885883a 	add	r2,r3,r2
 801687c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8016880:	e0fffe17 	ldw	r3,-8(fp)
 8016884:	00900034 	movhi	r2,16384
 8016888:	10bfffc4 	addi	r2,r2,-1
 801688c:	1886703a 	and	r3,r3,r2
 8016890:	e0bffc17 	ldw	r2,-16(fp)
 8016894:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8016898:	e0bffb17 	ldw	r2,-20(fp)
 801689c:	1000051e 	bne	r2,zero,80168b4 <open+0xd8>
 80168a0:	e13ffc17 	ldw	r4,-16(fp)
 80168a4:	80166f00 	call	80166f0 <alt_file_locked>
 80168a8:	e0bffa15 	stw	r2,-24(fp)
 80168ac:	e0bffa17 	ldw	r2,-24(fp)
 80168b0:	10001016 	blt	r2,zero,80168f4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80168b4:	e0bff817 	ldw	r2,-32(fp)
 80168b8:	10800317 	ldw	r2,12(r2)
 80168bc:	10000826 	beq	r2,zero,80168e0 <open+0x104>
 80168c0:	e0bff817 	ldw	r2,-32(fp)
 80168c4:	10800317 	ldw	r2,12(r2)
 80168c8:	e1ffff17 	ldw	r7,-4(fp)
 80168cc:	e1bffe17 	ldw	r6,-8(fp)
 80168d0:	e17ffd17 	ldw	r5,-12(fp)
 80168d4:	e13ffc17 	ldw	r4,-16(fp)
 80168d8:	103ee83a 	callr	r2
 80168dc:	00000106 	br	80168e4 <open+0x108>
 80168e0:	0005883a 	mov	r2,zero
 80168e4:	e0bffa15 	stw	r2,-24(fp)
 80168e8:	00000206 	br	80168f4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80168ec:	00bffb44 	movi	r2,-19
 80168f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80168f4:	e0bffa17 	ldw	r2,-24(fp)
 80168f8:	1000090e 	bge	r2,zero,8016920 <open+0x144>
  {
    alt_release_fd (index);  
 80168fc:	e13ff917 	ldw	r4,-28(fp)
 8016900:	8016ce00 	call	8016ce0 <alt_release_fd>
    ALT_ERRNO = -status;
 8016904:	80166b40 	call	80166b4 <alt_get_errno>
 8016908:	1007883a 	mov	r3,r2
 801690c:	e0bffa17 	ldw	r2,-24(fp)
 8016910:	0085c83a 	sub	r2,zero,r2
 8016914:	18800015 	stw	r2,0(r3)
    return -1;
 8016918:	00bfffc4 	movi	r2,-1
 801691c:	00000106 	br	8016924 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8016920:	e0bff917 	ldw	r2,-28(fp)
}
 8016924:	e037883a 	mov	sp,fp
 8016928:	dfc00117 	ldw	ra,4(sp)
 801692c:	df000017 	ldw	fp,0(sp)
 8016930:	dec00204 	addi	sp,sp,8
 8016934:	f800283a 	ret

08016938 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8016938:	defff204 	addi	sp,sp,-56
 801693c:	dfc00a15 	stw	ra,40(sp)
 8016940:	df000915 	stw	fp,36(sp)
 8016944:	df000904 	addi	fp,sp,36
 8016948:	e13fff15 	stw	r4,-4(fp)
 801694c:	e1400215 	stw	r5,8(fp)
 8016950:	e1800315 	stw	r6,12(fp)
 8016954:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8016958:	e0800204 	addi	r2,fp,8
 801695c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8016960:	e0bfff17 	ldw	r2,-4(fp)
 8016964:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8016968:	00006f06 	br	8016b28 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 801696c:	e0bff807 	ldb	r2,-32(fp)
 8016970:	10800960 	cmpeqi	r2,r2,37
 8016974:	1000041e 	bne	r2,zero,8016988 <alt_printf+0x50>
        {
            alt_putchar(c);
 8016978:	e0bff807 	ldb	r2,-32(fp)
 801697c:	1009883a 	mov	r4,r2
 8016980:	8016b640 	call	8016b64 <alt_putchar>
 8016984:	00006806 	br	8016b28 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8016988:	e0bff717 	ldw	r2,-36(fp)
 801698c:	10c00044 	addi	r3,r2,1
 8016990:	e0fff715 	stw	r3,-36(fp)
 8016994:	10800003 	ldbu	r2,0(r2)
 8016998:	e0bff805 	stb	r2,-32(fp)
 801699c:	e0bff807 	ldb	r2,-32(fp)
 80169a0:	10006926 	beq	r2,zero,8016b48 <alt_printf+0x210>
            {
                if (c == '%')
 80169a4:	e0bff807 	ldb	r2,-32(fp)
 80169a8:	10800958 	cmpnei	r2,r2,37
 80169ac:	1000041e 	bne	r2,zero,80169c0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 80169b0:	e0bff807 	ldb	r2,-32(fp)
 80169b4:	1009883a 	mov	r4,r2
 80169b8:	8016b640 	call	8016b64 <alt_putchar>
 80169bc:	00005a06 	br	8016b28 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 80169c0:	e0bff807 	ldb	r2,-32(fp)
 80169c4:	108018d8 	cmpnei	r2,r2,99
 80169c8:	1000081e 	bne	r2,zero,80169ec <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 80169cc:	e0bffe17 	ldw	r2,-8(fp)
 80169d0:	10c00104 	addi	r3,r2,4
 80169d4:	e0fffe15 	stw	r3,-8(fp)
 80169d8:	10800017 	ldw	r2,0(r2)
 80169dc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 80169e0:	e13ffd17 	ldw	r4,-12(fp)
 80169e4:	8016b640 	call	8016b64 <alt_putchar>
 80169e8:	00004f06 	br	8016b28 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 80169ec:	e0bff807 	ldb	r2,-32(fp)
 80169f0:	10801e18 	cmpnei	r2,r2,120
 80169f4:	1000341e 	bne	r2,zero,8016ac8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 80169f8:	e0bffe17 	ldw	r2,-8(fp)
 80169fc:	10c00104 	addi	r3,r2,4
 8016a00:	e0fffe15 	stw	r3,-8(fp)
 8016a04:	10800017 	ldw	r2,0(r2)
 8016a08:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8016a0c:	e0bffb17 	ldw	r2,-20(fp)
 8016a10:	1000031e 	bne	r2,zero,8016a20 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8016a14:	01000c04 	movi	r4,48
 8016a18:	8016b640 	call	8016b64 <alt_putchar>
                        continue;
 8016a1c:	00004206 	br	8016b28 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8016a20:	00800704 	movi	r2,28
 8016a24:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8016a28:	00000306 	br	8016a38 <alt_printf+0x100>
                        digit_shift -= 4;
 8016a2c:	e0bff917 	ldw	r2,-28(fp)
 8016a30:	10bfff04 	addi	r2,r2,-4
 8016a34:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8016a38:	00c003c4 	movi	r3,15
 8016a3c:	e0bff917 	ldw	r2,-28(fp)
 8016a40:	1884983a 	sll	r2,r3,r2
 8016a44:	1007883a 	mov	r3,r2
 8016a48:	e0bffb17 	ldw	r2,-20(fp)
 8016a4c:	1884703a 	and	r2,r3,r2
 8016a50:	103ff626 	beq	r2,zero,8016a2c <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8016a54:	00001906 	br	8016abc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8016a58:	00c003c4 	movi	r3,15
 8016a5c:	e0bff917 	ldw	r2,-28(fp)
 8016a60:	1884983a 	sll	r2,r3,r2
 8016a64:	1007883a 	mov	r3,r2
 8016a68:	e0bffb17 	ldw	r2,-20(fp)
 8016a6c:	1886703a 	and	r3,r3,r2
 8016a70:	e0bff917 	ldw	r2,-28(fp)
 8016a74:	1884d83a 	srl	r2,r3,r2
 8016a78:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8016a7c:	e0bffc17 	ldw	r2,-16(fp)
 8016a80:	108002a8 	cmpgeui	r2,r2,10
 8016a84:	1000041e 	bne	r2,zero,8016a98 <alt_printf+0x160>
                            c = '0' + digit;
 8016a88:	e0bffc17 	ldw	r2,-16(fp)
 8016a8c:	10800c04 	addi	r2,r2,48
 8016a90:	e0bff805 	stb	r2,-32(fp)
 8016a94:	00000306 	br	8016aa4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8016a98:	e0bffc17 	ldw	r2,-16(fp)
 8016a9c:	108015c4 	addi	r2,r2,87
 8016aa0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8016aa4:	e0bff807 	ldb	r2,-32(fp)
 8016aa8:	1009883a 	mov	r4,r2
 8016aac:	8016b640 	call	8016b64 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8016ab0:	e0bff917 	ldw	r2,-28(fp)
 8016ab4:	10bfff04 	addi	r2,r2,-4
 8016ab8:	e0bff915 	stw	r2,-28(fp)
 8016abc:	e0bff917 	ldw	r2,-28(fp)
 8016ac0:	103fe50e 	bge	r2,zero,8016a58 <alt_printf+0x120>
 8016ac4:	00001806 	br	8016b28 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8016ac8:	e0bff807 	ldb	r2,-32(fp)
 8016acc:	10801cd8 	cmpnei	r2,r2,115
 8016ad0:	1000151e 	bne	r2,zero,8016b28 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8016ad4:	e0bffe17 	ldw	r2,-8(fp)
 8016ad8:	10c00104 	addi	r3,r2,4
 8016adc:	e0fffe15 	stw	r3,-8(fp)
 8016ae0:	10800017 	ldw	r2,0(r2)
 8016ae4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8016ae8:	00000906 	br	8016b10 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8016aec:	e0bffa17 	ldw	r2,-24(fp)
 8016af0:	10c00044 	addi	r3,r2,1
 8016af4:	e0fffa15 	stw	r3,-24(fp)
 8016af8:	10800003 	ldbu	r2,0(r2)
 8016afc:	10803fcc 	andi	r2,r2,255
 8016b00:	1080201c 	xori	r2,r2,128
 8016b04:	10bfe004 	addi	r2,r2,-128
 8016b08:	1009883a 	mov	r4,r2
 8016b0c:	8016b640 	call	8016b64 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8016b10:	e0bffa17 	ldw	r2,-24(fp)
 8016b14:	10800003 	ldbu	r2,0(r2)
 8016b18:	10803fcc 	andi	r2,r2,255
 8016b1c:	1080201c 	xori	r2,r2,128
 8016b20:	10bfe004 	addi	r2,r2,-128
 8016b24:	103ff11e 	bne	r2,zero,8016aec <alt_printf+0x1b4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8016b28:	e0bff717 	ldw	r2,-36(fp)
 8016b2c:	10c00044 	addi	r3,r2,1
 8016b30:	e0fff715 	stw	r3,-36(fp)
 8016b34:	10800003 	ldbu	r2,0(r2)
 8016b38:	e0bff805 	stb	r2,-32(fp)
 8016b3c:	e0bff807 	ldb	r2,-32(fp)
 8016b40:	103f8a1e 	bne	r2,zero,801696c <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8016b44:	00000106 	br	8016b4c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8016b48:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8016b4c:	0001883a 	nop
 8016b50:	e037883a 	mov	sp,fp
 8016b54:	dfc00117 	ldw	ra,4(sp)
 8016b58:	df000017 	ldw	fp,0(sp)
 8016b5c:	dec00504 	addi	sp,sp,20
 8016b60:	f800283a 	ret

08016b64 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8016b64:	defffd04 	addi	sp,sp,-12
 8016b68:	dfc00215 	stw	ra,8(sp)
 8016b6c:	df000115 	stw	fp,4(sp)
 8016b70:	df000104 	addi	fp,sp,4
 8016b74:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8016b78:	d0a00417 	ldw	r2,-32752(gp)
 8016b7c:	10800217 	ldw	r2,8(r2)
 8016b80:	100b883a 	mov	r5,r2
 8016b84:	e13fff17 	ldw	r4,-4(fp)
 8016b88:	8019c840 	call	8019c84 <putc>
#endif
#endif
}
 8016b8c:	e037883a 	mov	sp,fp
 8016b90:	dfc00117 	ldw	ra,4(sp)
 8016b94:	df000017 	ldw	fp,0(sp)
 8016b98:	dec00204 	addi	sp,sp,8
 8016b9c:	f800283a 	ret

08016ba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016ba0:	defffe04 	addi	sp,sp,-8
 8016ba4:	dfc00115 	stw	ra,4(sp)
 8016ba8:	df000015 	stw	fp,0(sp)
 8016bac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016bb0:	d0a00e17 	ldw	r2,-32712(gp)
 8016bb4:	10000326 	beq	r2,zero,8016bc4 <alt_get_errno+0x24>
 8016bb8:	d0a00e17 	ldw	r2,-32712(gp)
 8016bbc:	103ee83a 	callr	r2
 8016bc0:	00000106 	br	8016bc8 <alt_get_errno+0x28>
 8016bc4:	d0a8af04 	addi	r2,gp,-23876
}
 8016bc8:	e037883a 	mov	sp,fp
 8016bcc:	dfc00117 	ldw	ra,4(sp)
 8016bd0:	df000017 	ldw	fp,0(sp)
 8016bd4:	dec00204 	addi	sp,sp,8
 8016bd8:	f800283a 	ret

08016bdc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8016bdc:	defff904 	addi	sp,sp,-28
 8016be0:	dfc00615 	stw	ra,24(sp)
 8016be4:	df000515 	stw	fp,20(sp)
 8016be8:	df000504 	addi	fp,sp,20
 8016bec:	e13ffd15 	stw	r4,-12(fp)
 8016bf0:	e17ffe15 	stw	r5,-8(fp)
 8016bf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016bf8:	e0bffd17 	ldw	r2,-12(fp)
 8016bfc:	10000816 	blt	r2,zero,8016c20 <read+0x44>
 8016c00:	01400304 	movi	r5,12
 8016c04:	e13ffd17 	ldw	r4,-12(fp)
 8016c08:	80087fc0 	call	80087fc <__mulsi3>
 8016c0c:	1007883a 	mov	r3,r2
 8016c10:	008200b4 	movhi	r2,2050
 8016c14:	10accb04 	addi	r2,r2,-19668
 8016c18:	1885883a 	add	r2,r3,r2
 8016c1c:	00000106 	br	8016c24 <read+0x48>
 8016c20:	0005883a 	mov	r2,zero
 8016c24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016c28:	e0bffb17 	ldw	r2,-20(fp)
 8016c2c:	10002226 	beq	r2,zero,8016cb8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016c30:	e0bffb17 	ldw	r2,-20(fp)
 8016c34:	10800217 	ldw	r2,8(r2)
 8016c38:	108000cc 	andi	r2,r2,3
 8016c3c:	10800060 	cmpeqi	r2,r2,1
 8016c40:	1000181e 	bne	r2,zero,8016ca4 <read+0xc8>
        (fd->dev->read))
 8016c44:	e0bffb17 	ldw	r2,-20(fp)
 8016c48:	10800017 	ldw	r2,0(r2)
 8016c4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016c50:	10001426 	beq	r2,zero,8016ca4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8016c54:	e0bffb17 	ldw	r2,-20(fp)
 8016c58:	10800017 	ldw	r2,0(r2)
 8016c5c:	10800517 	ldw	r2,20(r2)
 8016c60:	e0ffff17 	ldw	r3,-4(fp)
 8016c64:	180d883a 	mov	r6,r3
 8016c68:	e17ffe17 	ldw	r5,-8(fp)
 8016c6c:	e13ffb17 	ldw	r4,-20(fp)
 8016c70:	103ee83a 	callr	r2
 8016c74:	e0bffc15 	stw	r2,-16(fp)
 8016c78:	e0bffc17 	ldw	r2,-16(fp)
 8016c7c:	1000070e 	bge	r2,zero,8016c9c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8016c80:	8016ba00 	call	8016ba0 <alt_get_errno>
 8016c84:	1007883a 	mov	r3,r2
 8016c88:	e0bffc17 	ldw	r2,-16(fp)
 8016c8c:	0085c83a 	sub	r2,zero,r2
 8016c90:	18800015 	stw	r2,0(r3)
          return -1;
 8016c94:	00bfffc4 	movi	r2,-1
 8016c98:	00000c06 	br	8016ccc <read+0xf0>
        }
        return rval;
 8016c9c:	e0bffc17 	ldw	r2,-16(fp)
 8016ca0:	00000a06 	br	8016ccc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8016ca4:	8016ba00 	call	8016ba0 <alt_get_errno>
 8016ca8:	1007883a 	mov	r3,r2
 8016cac:	00800344 	movi	r2,13
 8016cb0:	18800015 	stw	r2,0(r3)
 8016cb4:	00000406 	br	8016cc8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8016cb8:	8016ba00 	call	8016ba0 <alt_get_errno>
 8016cbc:	1007883a 	mov	r3,r2
 8016cc0:	00801444 	movi	r2,81
 8016cc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016cc8:	00bfffc4 	movi	r2,-1
}
 8016ccc:	e037883a 	mov	sp,fp
 8016cd0:	dfc00117 	ldw	ra,4(sp)
 8016cd4:	df000017 	ldw	fp,0(sp)
 8016cd8:	dec00204 	addi	sp,sp,8
 8016cdc:	f800283a 	ret

08016ce0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8016ce0:	defffc04 	addi	sp,sp,-16
 8016ce4:	dfc00315 	stw	ra,12(sp)
 8016ce8:	df000215 	stw	fp,8(sp)
 8016cec:	dc000115 	stw	r16,4(sp)
 8016cf0:	df000204 	addi	fp,sp,8
 8016cf4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8016cf8:	e0bffe17 	ldw	r2,-8(fp)
 8016cfc:	108000d0 	cmplti	r2,r2,3
 8016d00:	1000111e 	bne	r2,zero,8016d48 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8016d04:	040200b4 	movhi	r16,2050
 8016d08:	842ccb04 	addi	r16,r16,-19668
 8016d0c:	e0bffe17 	ldw	r2,-8(fp)
 8016d10:	01400304 	movi	r5,12
 8016d14:	1009883a 	mov	r4,r2
 8016d18:	80087fc0 	call	80087fc <__mulsi3>
 8016d1c:	8085883a 	add	r2,r16,r2
 8016d20:	10800204 	addi	r2,r2,8
 8016d24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8016d28:	040200b4 	movhi	r16,2050
 8016d2c:	842ccb04 	addi	r16,r16,-19668
 8016d30:	e0bffe17 	ldw	r2,-8(fp)
 8016d34:	01400304 	movi	r5,12
 8016d38:	1009883a 	mov	r4,r2
 8016d3c:	80087fc0 	call	80087fc <__mulsi3>
 8016d40:	8085883a 	add	r2,r16,r2
 8016d44:	10000015 	stw	zero,0(r2)
  }
}
 8016d48:	0001883a 	nop
 8016d4c:	e6ffff04 	addi	sp,fp,-4
 8016d50:	dfc00217 	ldw	ra,8(sp)
 8016d54:	df000117 	ldw	fp,4(sp)
 8016d58:	dc000017 	ldw	r16,0(sp)
 8016d5c:	dec00304 	addi	sp,sp,12
 8016d60:	f800283a 	ret

08016d64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8016d64:	defff904 	addi	sp,sp,-28
 8016d68:	df000615 	stw	fp,24(sp)
 8016d6c:	df000604 	addi	fp,sp,24
 8016d70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016d74:	0005303a 	rdctl	r2,status
 8016d78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016d7c:	e0fffe17 	ldw	r3,-8(fp)
 8016d80:	00bfff84 	movi	r2,-2
 8016d84:	1884703a 	and	r2,r3,r2
 8016d88:	1001703a 	wrctl	status,r2
  
  return context;
 8016d8c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8016d90:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8016d94:	d0a01017 	ldw	r2,-32704(gp)
 8016d98:	10c000c4 	addi	r3,r2,3
 8016d9c:	00bfff04 	movi	r2,-4
 8016da0:	1884703a 	and	r2,r3,r2
 8016da4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8016da8:	d0e01017 	ldw	r3,-32704(gp)
 8016dac:	e0bfff17 	ldw	r2,-4(fp)
 8016db0:	1887883a 	add	r3,r3,r2
 8016db4:	00840034 	movhi	r2,4096
 8016db8:	10800004 	addi	r2,r2,0
 8016dbc:	10c0062e 	bgeu	r2,r3,8016dd8 <sbrk+0x74>
 8016dc0:	e0bffb17 	ldw	r2,-20(fp)
 8016dc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016dc8:	e0bffa17 	ldw	r2,-24(fp)
 8016dcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8016dd0:	00bfffc4 	movi	r2,-1
 8016dd4:	00000b06 	br	8016e04 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8016dd8:	d0a01017 	ldw	r2,-32704(gp)
 8016ddc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8016de0:	d0e01017 	ldw	r3,-32704(gp)
 8016de4:	e0bfff17 	ldw	r2,-4(fp)
 8016de8:	1885883a 	add	r2,r3,r2
 8016dec:	d0a01015 	stw	r2,-32704(gp)
 8016df0:	e0bffb17 	ldw	r2,-20(fp)
 8016df4:	e0bffc15 	stw	r2,-16(fp)
 8016df8:	e0bffc17 	ldw	r2,-16(fp)
 8016dfc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8016e00:	e0bffd17 	ldw	r2,-12(fp)
} 
 8016e04:	e037883a 	mov	sp,fp
 8016e08:	df000017 	ldw	fp,0(sp)
 8016e0c:	dec00104 	addi	sp,sp,4
 8016e10:	f800283a 	ret

08016e14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016e14:	defffe04 	addi	sp,sp,-8
 8016e18:	dfc00115 	stw	ra,4(sp)
 8016e1c:	df000015 	stw	fp,0(sp)
 8016e20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016e24:	d0a00e17 	ldw	r2,-32712(gp)
 8016e28:	10000326 	beq	r2,zero,8016e38 <alt_get_errno+0x24>
 8016e2c:	d0a00e17 	ldw	r2,-32712(gp)
 8016e30:	103ee83a 	callr	r2
 8016e34:	00000106 	br	8016e3c <alt_get_errno+0x28>
 8016e38:	d0a8af04 	addi	r2,gp,-23876
}
 8016e3c:	e037883a 	mov	sp,fp
 8016e40:	dfc00117 	ldw	ra,4(sp)
 8016e44:	df000017 	ldw	fp,0(sp)
 8016e48:	dec00204 	addi	sp,sp,8
 8016e4c:	f800283a 	ret

08016e50 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8016e50:	defff904 	addi	sp,sp,-28
 8016e54:	dfc00615 	stw	ra,24(sp)
 8016e58:	df000515 	stw	fp,20(sp)
 8016e5c:	df000504 	addi	fp,sp,20
 8016e60:	e13ffd15 	stw	r4,-12(fp)
 8016e64:	e17ffe15 	stw	r5,-8(fp)
 8016e68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016e6c:	e0bffd17 	ldw	r2,-12(fp)
 8016e70:	10000816 	blt	r2,zero,8016e94 <write+0x44>
 8016e74:	01400304 	movi	r5,12
 8016e78:	e13ffd17 	ldw	r4,-12(fp)
 8016e7c:	80087fc0 	call	80087fc <__mulsi3>
 8016e80:	1007883a 	mov	r3,r2
 8016e84:	008200b4 	movhi	r2,2050
 8016e88:	10accb04 	addi	r2,r2,-19668
 8016e8c:	1885883a 	add	r2,r3,r2
 8016e90:	00000106 	br	8016e98 <write+0x48>
 8016e94:	0005883a 	mov	r2,zero
 8016e98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016e9c:	e0bffb17 	ldw	r2,-20(fp)
 8016ea0:	10002126 	beq	r2,zero,8016f28 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8016ea4:	e0bffb17 	ldw	r2,-20(fp)
 8016ea8:	10800217 	ldw	r2,8(r2)
 8016eac:	108000cc 	andi	r2,r2,3
 8016eb0:	10001826 	beq	r2,zero,8016f14 <write+0xc4>
 8016eb4:	e0bffb17 	ldw	r2,-20(fp)
 8016eb8:	10800017 	ldw	r2,0(r2)
 8016ebc:	10800617 	ldw	r2,24(r2)
 8016ec0:	10001426 	beq	r2,zero,8016f14 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8016ec4:	e0bffb17 	ldw	r2,-20(fp)
 8016ec8:	10800017 	ldw	r2,0(r2)
 8016ecc:	10800617 	ldw	r2,24(r2)
 8016ed0:	e0ffff17 	ldw	r3,-4(fp)
 8016ed4:	180d883a 	mov	r6,r3
 8016ed8:	e17ffe17 	ldw	r5,-8(fp)
 8016edc:	e13ffb17 	ldw	r4,-20(fp)
 8016ee0:	103ee83a 	callr	r2
 8016ee4:	e0bffc15 	stw	r2,-16(fp)
 8016ee8:	e0bffc17 	ldw	r2,-16(fp)
 8016eec:	1000070e 	bge	r2,zero,8016f0c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8016ef0:	8016e140 	call	8016e14 <alt_get_errno>
 8016ef4:	1007883a 	mov	r3,r2
 8016ef8:	e0bffc17 	ldw	r2,-16(fp)
 8016efc:	0085c83a 	sub	r2,zero,r2
 8016f00:	18800015 	stw	r2,0(r3)
        return -1;
 8016f04:	00bfffc4 	movi	r2,-1
 8016f08:	00000c06 	br	8016f3c <write+0xec>
      }
      return rval;
 8016f0c:	e0bffc17 	ldw	r2,-16(fp)
 8016f10:	00000a06 	br	8016f3c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8016f14:	8016e140 	call	8016e14 <alt_get_errno>
 8016f18:	1007883a 	mov	r3,r2
 8016f1c:	00800344 	movi	r2,13
 8016f20:	18800015 	stw	r2,0(r3)
 8016f24:	00000406 	br	8016f38 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8016f28:	8016e140 	call	8016e14 <alt_get_errno>
 8016f2c:	1007883a 	mov	r3,r2
 8016f30:	00801444 	movi	r2,81
 8016f34:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016f38:	00bfffc4 	movi	r2,-1
}
 8016f3c:	e037883a 	mov	sp,fp
 8016f40:	dfc00117 	ldw	ra,4(sp)
 8016f44:	df000017 	ldw	fp,0(sp)
 8016f48:	dec00204 	addi	sp,sp,8
 8016f4c:	f800283a 	ret

08016f50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8016f50:	defffd04 	addi	sp,sp,-12
 8016f54:	dfc00215 	stw	ra,8(sp)
 8016f58:	df000115 	stw	fp,4(sp)
 8016f5c:	df000104 	addi	fp,sp,4
 8016f60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8016f64:	d1600b04 	addi	r5,gp,-32724
 8016f68:	e13fff17 	ldw	r4,-4(fp)
 8016f6c:	80194140 	call	8019414 <alt_dev_llist_insert>
}
 8016f70:	e037883a 	mov	sp,fp
 8016f74:	dfc00117 	ldw	ra,4(sp)
 8016f78:	df000017 	ldw	fp,0(sp)
 8016f7c:	dec00204 	addi	sp,sp,8
 8016f80:	f800283a 	ret

08016f84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8016f84:	defffd04 	addi	sp,sp,-12
 8016f88:	dfc00215 	stw	ra,8(sp)
 8016f8c:	df000115 	stw	fp,4(sp)
 8016f90:	df000104 	addi	fp,sp,4
 8016f94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8016f98:	8019af80 	call	8019af8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8016f9c:	00800044 	movi	r2,1
 8016fa0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8016fa4:	0001883a 	nop
 8016fa8:	e037883a 	mov	sp,fp
 8016fac:	dfc00117 	ldw	ra,4(sp)
 8016fb0:	df000017 	ldw	fp,0(sp)
 8016fb4:	dec00204 	addi	sp,sp,8
 8016fb8:	f800283a 	ret

08016fbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8016fbc:	defffe04 	addi	sp,sp,-8
 8016fc0:	dfc00115 	stw	ra,4(sp)
 8016fc4:	df000015 	stw	fp,0(sp)
 8016fc8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 8016fcc:	01c0fa04 	movi	r7,1000
 8016fd0:	01800044 	movi	r6,1
 8016fd4:	000b883a 	mov	r5,zero
 8016fd8:	01040034 	movhi	r4,4096
 8016fdc:	21112804 	addi	r4,r4,17568
 8016fe0:	80189100 	call	8018910 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 8016fe4:	000d883a 	mov	r6,zero
 8016fe8:	000b883a 	mov	r5,zero
 8016fec:	010200b4 	movhi	r4,2050
 8016ff0:	212d3504 	addi	r4,r4,-19244
 8016ff4:	80172000 	call	8017200 <altera_avalon_jtag_uart_init>
 8016ff8:	010200b4 	movhi	r4,2050
 8016ffc:	212d2b04 	addi	r4,r4,-19284
 8017000:	8016f500 	call	8016f50 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 8017004:	018000c4 	movi	r6,3
 8017008:	000b883a 	mov	r5,zero
 801700c:	010200b4 	movhi	r4,2050
 8017010:	21314304 	addi	r4,r4,-15092
 8017014:	80187f00 	call	80187f0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 8017018:	01800104 	movi	r6,4
 801701c:	000b883a 	mov	r5,zero
 8017020:	010200b4 	movhi	r4,2050
 8017024:	21314f04 	addi	r4,r4,-15044
 8017028:	80187f00 	call	80187f0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 801702c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 8017030:	01800084 	movi	r6,2
 8017034:	000b883a 	mov	r5,zero
 8017038:	010200b4 	movhi	r4,2050
 801703c:	21316504 	addi	r4,r4,-14956
 8017040:	8018a9c0 	call	8018a9c <altera_avalon_uart_init>
 8017044:	010200b4 	movhi	r4,2050
 8017048:	21315b04 	addi	r4,r4,-14996
 801704c:	8016f500 	call	8016f50 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
 8017050:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 8017054:	010200b4 	movhi	r4,2050
 8017058:	21318c04 	addi	r4,r4,-14800
 801705c:	8016f500 	call	8016f50 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 8017060:	010200b4 	movhi	r4,2050
 8017064:	21319704 	addi	r4,r4,-14756
 8017068:	8016f500 	call	8016f50 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 801706c:	010200b4 	movhi	r4,2050
 8017070:	2131a204 	addi	r4,r4,-14712
 8017074:	8016f500 	call	8016f50 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 8017078:	010200b4 	movhi	r4,2050
 801707c:	2131ad04 	addi	r4,r4,-14668
 8017080:	8016f500 	call	8016f50 <alt_dev_reg>
}
 8017084:	0001883a 	nop
 8017088:	e037883a 	mov	sp,fp
 801708c:	dfc00117 	ldw	ra,4(sp)
 8017090:	df000017 	ldw	fp,0(sp)
 8017094:	dec00204 	addi	sp,sp,8
 8017098:	f800283a 	ret

0801709c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801709c:	defffa04 	addi	sp,sp,-24
 80170a0:	dfc00515 	stw	ra,20(sp)
 80170a4:	df000415 	stw	fp,16(sp)
 80170a8:	df000404 	addi	fp,sp,16
 80170ac:	e13ffd15 	stw	r4,-12(fp)
 80170b0:	e17ffe15 	stw	r5,-8(fp)
 80170b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80170b8:	e0bffd17 	ldw	r2,-12(fp)
 80170bc:	10800017 	ldw	r2,0(r2)
 80170c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80170c4:	e0bffc17 	ldw	r2,-16(fp)
 80170c8:	10c00a04 	addi	r3,r2,40
 80170cc:	e0bffd17 	ldw	r2,-12(fp)
 80170d0:	10800217 	ldw	r2,8(r2)
 80170d4:	100f883a 	mov	r7,r2
 80170d8:	e1bfff17 	ldw	r6,-4(fp)
 80170dc:	e17ffe17 	ldw	r5,-8(fp)
 80170e0:	1809883a 	mov	r4,r3
 80170e4:	80176c40 	call	80176c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80170e8:	e037883a 	mov	sp,fp
 80170ec:	dfc00117 	ldw	ra,4(sp)
 80170f0:	df000017 	ldw	fp,0(sp)
 80170f4:	dec00204 	addi	sp,sp,8
 80170f8:	f800283a 	ret

080170fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80170fc:	defffa04 	addi	sp,sp,-24
 8017100:	dfc00515 	stw	ra,20(sp)
 8017104:	df000415 	stw	fp,16(sp)
 8017108:	df000404 	addi	fp,sp,16
 801710c:	e13ffd15 	stw	r4,-12(fp)
 8017110:	e17ffe15 	stw	r5,-8(fp)
 8017114:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8017118:	e0bffd17 	ldw	r2,-12(fp)
 801711c:	10800017 	ldw	r2,0(r2)
 8017120:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8017124:	e0bffc17 	ldw	r2,-16(fp)
 8017128:	10c00a04 	addi	r3,r2,40
 801712c:	e0bffd17 	ldw	r2,-12(fp)
 8017130:	10800217 	ldw	r2,8(r2)
 8017134:	100f883a 	mov	r7,r2
 8017138:	e1bfff17 	ldw	r6,-4(fp)
 801713c:	e17ffe17 	ldw	r5,-8(fp)
 8017140:	1809883a 	mov	r4,r3
 8017144:	80178e00 	call	80178e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8017148:	e037883a 	mov	sp,fp
 801714c:	dfc00117 	ldw	ra,4(sp)
 8017150:	df000017 	ldw	fp,0(sp)
 8017154:	dec00204 	addi	sp,sp,8
 8017158:	f800283a 	ret

0801715c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801715c:	defffc04 	addi	sp,sp,-16
 8017160:	dfc00315 	stw	ra,12(sp)
 8017164:	df000215 	stw	fp,8(sp)
 8017168:	df000204 	addi	fp,sp,8
 801716c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8017170:	e0bfff17 	ldw	r2,-4(fp)
 8017174:	10800017 	ldw	r2,0(r2)
 8017178:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801717c:	e0bffe17 	ldw	r2,-8(fp)
 8017180:	10c00a04 	addi	r3,r2,40
 8017184:	e0bfff17 	ldw	r2,-4(fp)
 8017188:	10800217 	ldw	r2,8(r2)
 801718c:	100b883a 	mov	r5,r2
 8017190:	1809883a 	mov	r4,r3
 8017194:	801756c0 	call	801756c <altera_avalon_jtag_uart_close>
}
 8017198:	e037883a 	mov	sp,fp
 801719c:	dfc00117 	ldw	ra,4(sp)
 80171a0:	df000017 	ldw	fp,0(sp)
 80171a4:	dec00204 	addi	sp,sp,8
 80171a8:	f800283a 	ret

080171ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80171ac:	defffa04 	addi	sp,sp,-24
 80171b0:	dfc00515 	stw	ra,20(sp)
 80171b4:	df000415 	stw	fp,16(sp)
 80171b8:	df000404 	addi	fp,sp,16
 80171bc:	e13ffd15 	stw	r4,-12(fp)
 80171c0:	e17ffe15 	stw	r5,-8(fp)
 80171c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80171c8:	e0bffd17 	ldw	r2,-12(fp)
 80171cc:	10800017 	ldw	r2,0(r2)
 80171d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80171d4:	e0bffc17 	ldw	r2,-16(fp)
 80171d8:	10800a04 	addi	r2,r2,40
 80171dc:	e1bfff17 	ldw	r6,-4(fp)
 80171e0:	e17ffe17 	ldw	r5,-8(fp)
 80171e4:	1009883a 	mov	r4,r2
 80171e8:	80175d40 	call	80175d4 <altera_avalon_jtag_uart_ioctl>
}
 80171ec:	e037883a 	mov	sp,fp
 80171f0:	dfc00117 	ldw	ra,4(sp)
 80171f4:	df000017 	ldw	fp,0(sp)
 80171f8:	dec00204 	addi	sp,sp,8
 80171fc:	f800283a 	ret

08017200 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8017200:	defffa04 	addi	sp,sp,-24
 8017204:	dfc00515 	stw	ra,20(sp)
 8017208:	df000415 	stw	fp,16(sp)
 801720c:	df000404 	addi	fp,sp,16
 8017210:	e13ffd15 	stw	r4,-12(fp)
 8017214:	e17ffe15 	stw	r5,-8(fp)
 8017218:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801721c:	e0bffd17 	ldw	r2,-12(fp)
 8017220:	00c00044 	movi	r3,1
 8017224:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8017228:	e0bffd17 	ldw	r2,-12(fp)
 801722c:	10800017 	ldw	r2,0(r2)
 8017230:	10800104 	addi	r2,r2,4
 8017234:	1007883a 	mov	r3,r2
 8017238:	e0bffd17 	ldw	r2,-12(fp)
 801723c:	10800817 	ldw	r2,32(r2)
 8017240:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8017244:	e0bffe17 	ldw	r2,-8(fp)
 8017248:	e0ffff17 	ldw	r3,-4(fp)
 801724c:	d8000015 	stw	zero,0(sp)
 8017250:	e1fffd17 	ldw	r7,-12(fp)
 8017254:	01820074 	movhi	r6,2049
 8017258:	319cb004 	addi	r6,r6,29376
 801725c:	180b883a 	mov	r5,r3
 8017260:	1009883a 	mov	r4,r2
 8017264:	80161540 	call	8016154 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8017268:	e0bffd17 	ldw	r2,-12(fp)
 801726c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8017270:	e0bffd17 	ldw	r2,-12(fp)
 8017274:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8017278:	d0e8ba17 	ldw	r3,-23832(gp)
 801727c:	e1fffd17 	ldw	r7,-12(fp)
 8017280:	01820074 	movhi	r6,2049
 8017284:	319d3304 	addi	r6,r6,29900
 8017288:	180b883a 	mov	r5,r3
 801728c:	1009883a 	mov	r4,r2
 8017290:	80192640 	call	8019264 <alt_alarm_start>
 8017294:	1000040e 	bge	r2,zero,80172a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8017298:	e0fffd17 	ldw	r3,-12(fp)
 801729c:	00a00034 	movhi	r2,32768
 80172a0:	10bfffc4 	addi	r2,r2,-1
 80172a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80172a8:	0001883a 	nop
 80172ac:	e037883a 	mov	sp,fp
 80172b0:	dfc00117 	ldw	ra,4(sp)
 80172b4:	df000017 	ldw	fp,0(sp)
 80172b8:	dec00204 	addi	sp,sp,8
 80172bc:	f800283a 	ret

080172c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80172c0:	defff804 	addi	sp,sp,-32
 80172c4:	df000715 	stw	fp,28(sp)
 80172c8:	df000704 	addi	fp,sp,28
 80172cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80172d0:	e0bfff17 	ldw	r2,-4(fp)
 80172d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80172d8:	e0bffb17 	ldw	r2,-20(fp)
 80172dc:	10800017 	ldw	r2,0(r2)
 80172e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80172e4:	e0bffc17 	ldw	r2,-16(fp)
 80172e8:	10800104 	addi	r2,r2,4
 80172ec:	10800037 	ldwio	r2,0(r2)
 80172f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80172f4:	e0bffd17 	ldw	r2,-12(fp)
 80172f8:	1080c00c 	andi	r2,r2,768
 80172fc:	10006d26 	beq	r2,zero,80174b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8017300:	e0bffd17 	ldw	r2,-12(fp)
 8017304:	1080400c 	andi	r2,r2,256
 8017308:	10003526 	beq	r2,zero,80173e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801730c:	00800074 	movhi	r2,1
 8017310:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017314:	e0bffb17 	ldw	r2,-20(fp)
 8017318:	10800a17 	ldw	r2,40(r2)
 801731c:	10800044 	addi	r2,r2,1
 8017320:	1081ffcc 	andi	r2,r2,2047
 8017324:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8017328:	e0bffb17 	ldw	r2,-20(fp)
 801732c:	10c00b17 	ldw	r3,44(r2)
 8017330:	e0bffe17 	ldw	r2,-8(fp)
 8017334:	18801526 	beq	r3,r2,801738c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8017338:	e0bffc17 	ldw	r2,-16(fp)
 801733c:	10800037 	ldwio	r2,0(r2)
 8017340:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8017344:	e0bff917 	ldw	r2,-28(fp)
 8017348:	10a0000c 	andi	r2,r2,32768
 801734c:	10001126 	beq	r2,zero,8017394 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8017350:	e0bffb17 	ldw	r2,-20(fp)
 8017354:	10800a17 	ldw	r2,40(r2)
 8017358:	e0fff917 	ldw	r3,-28(fp)
 801735c:	1809883a 	mov	r4,r3
 8017360:	e0fffb17 	ldw	r3,-20(fp)
 8017364:	1885883a 	add	r2,r3,r2
 8017368:	10800e04 	addi	r2,r2,56
 801736c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017370:	e0bffb17 	ldw	r2,-20(fp)
 8017374:	10800a17 	ldw	r2,40(r2)
 8017378:	10800044 	addi	r2,r2,1
 801737c:	10c1ffcc 	andi	r3,r2,2047
 8017380:	e0bffb17 	ldw	r2,-20(fp)
 8017384:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8017388:	003fe206 	br	8017314 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 801738c:	0001883a 	nop
 8017390:	00000106 	br	8017398 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8017394:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8017398:	e0bff917 	ldw	r2,-28(fp)
 801739c:	10bfffec 	andhi	r2,r2,65535
 80173a0:	10000f26 	beq	r2,zero,80173e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80173a4:	e0bffb17 	ldw	r2,-20(fp)
 80173a8:	10c00817 	ldw	r3,32(r2)
 80173ac:	00bfff84 	movi	r2,-2
 80173b0:	1886703a 	and	r3,r3,r2
 80173b4:	e0bffb17 	ldw	r2,-20(fp)
 80173b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80173bc:	e0bffc17 	ldw	r2,-16(fp)
 80173c0:	10800104 	addi	r2,r2,4
 80173c4:	1007883a 	mov	r3,r2
 80173c8:	e0bffb17 	ldw	r2,-20(fp)
 80173cc:	10800817 	ldw	r2,32(r2)
 80173d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80173d4:	e0bffc17 	ldw	r2,-16(fp)
 80173d8:	10800104 	addi	r2,r2,4
 80173dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80173e0:	e0bffd17 	ldw	r2,-12(fp)
 80173e4:	1080800c 	andi	r2,r2,512
 80173e8:	103fbe26 	beq	r2,zero,80172e4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80173ec:	e0bffd17 	ldw	r2,-12(fp)
 80173f0:	1004d43a 	srli	r2,r2,16
 80173f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80173f8:	00001406 	br	801744c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80173fc:	e0bffc17 	ldw	r2,-16(fp)
 8017400:	e0fffb17 	ldw	r3,-20(fp)
 8017404:	18c00d17 	ldw	r3,52(r3)
 8017408:	e13ffb17 	ldw	r4,-20(fp)
 801740c:	20c7883a 	add	r3,r4,r3
 8017410:	18c20e04 	addi	r3,r3,2104
 8017414:	18c00003 	ldbu	r3,0(r3)
 8017418:	18c03fcc 	andi	r3,r3,255
 801741c:	18c0201c 	xori	r3,r3,128
 8017420:	18ffe004 	addi	r3,r3,-128
 8017424:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017428:	e0bffb17 	ldw	r2,-20(fp)
 801742c:	10800d17 	ldw	r2,52(r2)
 8017430:	10800044 	addi	r2,r2,1
 8017434:	10c1ffcc 	andi	r3,r2,2047
 8017438:	e0bffb17 	ldw	r2,-20(fp)
 801743c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8017440:	e0bffa17 	ldw	r2,-24(fp)
 8017444:	10bfffc4 	addi	r2,r2,-1
 8017448:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801744c:	e0bffa17 	ldw	r2,-24(fp)
 8017450:	10000526 	beq	r2,zero,8017468 <altera_avalon_jtag_uart_irq+0x1a8>
 8017454:	e0bffb17 	ldw	r2,-20(fp)
 8017458:	10c00d17 	ldw	r3,52(r2)
 801745c:	e0bffb17 	ldw	r2,-20(fp)
 8017460:	10800c17 	ldw	r2,48(r2)
 8017464:	18bfe51e 	bne	r3,r2,80173fc <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8017468:	e0bffa17 	ldw	r2,-24(fp)
 801746c:	103f9d26 	beq	r2,zero,80172e4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017470:	e0bffb17 	ldw	r2,-20(fp)
 8017474:	10c00817 	ldw	r3,32(r2)
 8017478:	00bfff44 	movi	r2,-3
 801747c:	1886703a 	and	r3,r3,r2
 8017480:	e0bffb17 	ldw	r2,-20(fp)
 8017484:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017488:	e0bffb17 	ldw	r2,-20(fp)
 801748c:	10800017 	ldw	r2,0(r2)
 8017490:	10800104 	addi	r2,r2,4
 8017494:	1007883a 	mov	r3,r2
 8017498:	e0bffb17 	ldw	r2,-20(fp)
 801749c:	10800817 	ldw	r2,32(r2)
 80174a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80174a4:	e0bffc17 	ldw	r2,-16(fp)
 80174a8:	10800104 	addi	r2,r2,4
 80174ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80174b0:	003f8c06 	br	80172e4 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80174b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80174b8:	0001883a 	nop
 80174bc:	e037883a 	mov	sp,fp
 80174c0:	df000017 	ldw	fp,0(sp)
 80174c4:	dec00104 	addi	sp,sp,4
 80174c8:	f800283a 	ret

080174cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80174cc:	defff804 	addi	sp,sp,-32
 80174d0:	df000715 	stw	fp,28(sp)
 80174d4:	df000704 	addi	fp,sp,28
 80174d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80174dc:	e0bffb17 	ldw	r2,-20(fp)
 80174e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80174e4:	e0bff917 	ldw	r2,-28(fp)
 80174e8:	10800017 	ldw	r2,0(r2)
 80174ec:	10800104 	addi	r2,r2,4
 80174f0:	10800037 	ldwio	r2,0(r2)
 80174f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80174f8:	e0bffa17 	ldw	r2,-24(fp)
 80174fc:	1081000c 	andi	r2,r2,1024
 8017500:	10000b26 	beq	r2,zero,8017530 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8017504:	e0bff917 	ldw	r2,-28(fp)
 8017508:	10800017 	ldw	r2,0(r2)
 801750c:	10800104 	addi	r2,r2,4
 8017510:	1007883a 	mov	r3,r2
 8017514:	e0bff917 	ldw	r2,-28(fp)
 8017518:	10800817 	ldw	r2,32(r2)
 801751c:	10810014 	ori	r2,r2,1024
 8017520:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8017524:	e0bff917 	ldw	r2,-28(fp)
 8017528:	10000915 	stw	zero,36(r2)
 801752c:	00000a06 	br	8017558 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8017530:	e0bff917 	ldw	r2,-28(fp)
 8017534:	10c00917 	ldw	r3,36(r2)
 8017538:	00a00034 	movhi	r2,32768
 801753c:	10bfff04 	addi	r2,r2,-4
 8017540:	10c00536 	bltu	r2,r3,8017558 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8017544:	e0bff917 	ldw	r2,-28(fp)
 8017548:	10800917 	ldw	r2,36(r2)
 801754c:	10c00044 	addi	r3,r2,1
 8017550:	e0bff917 	ldw	r2,-28(fp)
 8017554:	10c00915 	stw	r3,36(r2)
 8017558:	d0a8ba17 	ldw	r2,-23832(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801755c:	e037883a 	mov	sp,fp
 8017560:	df000017 	ldw	fp,0(sp)
 8017564:	dec00104 	addi	sp,sp,4
 8017568:	f800283a 	ret

0801756c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801756c:	defffd04 	addi	sp,sp,-12
 8017570:	df000215 	stw	fp,8(sp)
 8017574:	df000204 	addi	fp,sp,8
 8017578:	e13ffe15 	stw	r4,-8(fp)
 801757c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8017580:	00000506 	br	8017598 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8017584:	e0bfff17 	ldw	r2,-4(fp)
 8017588:	1090000c 	andi	r2,r2,16384
 801758c:	10000226 	beq	r2,zero,8017598 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8017590:	00bffd44 	movi	r2,-11
 8017594:	00000b06 	br	80175c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8017598:	e0bffe17 	ldw	r2,-8(fp)
 801759c:	10c00d17 	ldw	r3,52(r2)
 80175a0:	e0bffe17 	ldw	r2,-8(fp)
 80175a4:	10800c17 	ldw	r2,48(r2)
 80175a8:	18800526 	beq	r3,r2,80175c0 <altera_avalon_jtag_uart_close+0x54>
 80175ac:	e0bffe17 	ldw	r2,-8(fp)
 80175b0:	10c00917 	ldw	r3,36(r2)
 80175b4:	e0bffe17 	ldw	r2,-8(fp)
 80175b8:	10800117 	ldw	r2,4(r2)
 80175bc:	18bff136 	bltu	r3,r2,8017584 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80175c0:	0005883a 	mov	r2,zero
}
 80175c4:	e037883a 	mov	sp,fp
 80175c8:	df000017 	ldw	fp,0(sp)
 80175cc:	dec00104 	addi	sp,sp,4
 80175d0:	f800283a 	ret

080175d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80175d4:	defffa04 	addi	sp,sp,-24
 80175d8:	df000515 	stw	fp,20(sp)
 80175dc:	df000504 	addi	fp,sp,20
 80175e0:	e13ffd15 	stw	r4,-12(fp)
 80175e4:	e17ffe15 	stw	r5,-8(fp)
 80175e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80175ec:	00bff9c4 	movi	r2,-25
 80175f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80175f4:	e0bffe17 	ldw	r2,-8(fp)
 80175f8:	10da8060 	cmpeqi	r3,r2,27137
 80175fc:	1800031e 	bne	r3,zero,801760c <altera_avalon_jtag_uart_ioctl+0x38>
 8017600:	109a80a0 	cmpeqi	r2,r2,27138
 8017604:	1000181e 	bne	r2,zero,8017668 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8017608:	00002906 	br	80176b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801760c:	e0bffd17 	ldw	r2,-12(fp)
 8017610:	10c00117 	ldw	r3,4(r2)
 8017614:	00a00034 	movhi	r2,32768
 8017618:	10bfffc4 	addi	r2,r2,-1
 801761c:	18802126 	beq	r3,r2,80176a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8017620:	e0bfff17 	ldw	r2,-4(fp)
 8017624:	10800017 	ldw	r2,0(r2)
 8017628:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801762c:	e0bffc17 	ldw	r2,-16(fp)
 8017630:	10800090 	cmplti	r2,r2,2
 8017634:	1000061e 	bne	r2,zero,8017650 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017638:	e0fffc17 	ldw	r3,-16(fp)
 801763c:	00a00034 	movhi	r2,32768
 8017640:	10bfffc4 	addi	r2,r2,-1
 8017644:	18800226 	beq	r3,r2,8017650 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017648:	e0bffc17 	ldw	r2,-16(fp)
 801764c:	00000206 	br	8017658 <altera_avalon_jtag_uart_ioctl+0x84>
 8017650:	00a00034 	movhi	r2,32768
 8017654:	10bfff84 	addi	r2,r2,-2
 8017658:	e0fffd17 	ldw	r3,-12(fp)
 801765c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8017660:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8017664:	00000f06 	br	80176a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8017668:	e0bffd17 	ldw	r2,-12(fp)
 801766c:	10c00117 	ldw	r3,4(r2)
 8017670:	00a00034 	movhi	r2,32768
 8017674:	10bfffc4 	addi	r2,r2,-1
 8017678:	18800c26 	beq	r3,r2,80176ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801767c:	e0bffd17 	ldw	r2,-12(fp)
 8017680:	10c00917 	ldw	r3,36(r2)
 8017684:	e0bffd17 	ldw	r2,-12(fp)
 8017688:	10800117 	ldw	r2,4(r2)
 801768c:	1885803a 	cmpltu	r2,r3,r2
 8017690:	10c03fcc 	andi	r3,r2,255
 8017694:	e0bfff17 	ldw	r2,-4(fp)
 8017698:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801769c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80176a0:	00000206 	br	80176ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80176a4:	0001883a 	nop
 80176a8:	00000106 	br	80176b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80176ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80176b0:	e0bffb17 	ldw	r2,-20(fp)
}
 80176b4:	e037883a 	mov	sp,fp
 80176b8:	df000017 	ldw	fp,0(sp)
 80176bc:	dec00104 	addi	sp,sp,4
 80176c0:	f800283a 	ret

080176c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80176c4:	defff304 	addi	sp,sp,-52
 80176c8:	dfc00c15 	stw	ra,48(sp)
 80176cc:	df000b15 	stw	fp,44(sp)
 80176d0:	df000b04 	addi	fp,sp,44
 80176d4:	e13ffc15 	stw	r4,-16(fp)
 80176d8:	e17ffd15 	stw	r5,-12(fp)
 80176dc:	e1bffe15 	stw	r6,-8(fp)
 80176e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80176e4:	e0bffd17 	ldw	r2,-12(fp)
 80176e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80176ec:	00004706 	br	801780c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80176f0:	e0bffc17 	ldw	r2,-16(fp)
 80176f4:	10800a17 	ldw	r2,40(r2)
 80176f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80176fc:	e0bffc17 	ldw	r2,-16(fp)
 8017700:	10800b17 	ldw	r2,44(r2)
 8017704:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8017708:	e0fff717 	ldw	r3,-36(fp)
 801770c:	e0bff817 	ldw	r2,-32(fp)
 8017710:	18800536 	bltu	r3,r2,8017728 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8017714:	e0fff717 	ldw	r3,-36(fp)
 8017718:	e0bff817 	ldw	r2,-32(fp)
 801771c:	1885c83a 	sub	r2,r3,r2
 8017720:	e0bff615 	stw	r2,-40(fp)
 8017724:	00000406 	br	8017738 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8017728:	00c20004 	movi	r3,2048
 801772c:	e0bff817 	ldw	r2,-32(fp)
 8017730:	1885c83a 	sub	r2,r3,r2
 8017734:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8017738:	e0bff617 	ldw	r2,-40(fp)
 801773c:	10001e26 	beq	r2,zero,80177b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8017740:	e0fffe17 	ldw	r3,-8(fp)
 8017744:	e0bff617 	ldw	r2,-40(fp)
 8017748:	1880022e 	bgeu	r3,r2,8017754 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 801774c:	e0bffe17 	ldw	r2,-8(fp)
 8017750:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8017754:	e0bffc17 	ldw	r2,-16(fp)
 8017758:	10c00e04 	addi	r3,r2,56
 801775c:	e0bff817 	ldw	r2,-32(fp)
 8017760:	1885883a 	add	r2,r3,r2
 8017764:	e1bff617 	ldw	r6,-40(fp)
 8017768:	100b883a 	mov	r5,r2
 801776c:	e13ff517 	ldw	r4,-44(fp)
 8017770:	80098e40 	call	80098e4 <memcpy>
      ptr   += n;
 8017774:	e0fff517 	ldw	r3,-44(fp)
 8017778:	e0bff617 	ldw	r2,-40(fp)
 801777c:	1885883a 	add	r2,r3,r2
 8017780:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8017784:	e0fffe17 	ldw	r3,-8(fp)
 8017788:	e0bff617 	ldw	r2,-40(fp)
 801778c:	1885c83a 	sub	r2,r3,r2
 8017790:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017794:	e0fff817 	ldw	r3,-32(fp)
 8017798:	e0bff617 	ldw	r2,-40(fp)
 801779c:	1885883a 	add	r2,r3,r2
 80177a0:	10c1ffcc 	andi	r3,r2,2047
 80177a4:	e0bffc17 	ldw	r2,-16(fp)
 80177a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80177ac:	e0bffe17 	ldw	r2,-8(fp)
 80177b0:	00bfcf16 	blt	zero,r2,80176f0 <altera_avalon_jtag_uart_read+0x2c>
 80177b4:	00000106 	br	80177bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80177b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80177bc:	e0fff517 	ldw	r3,-44(fp)
 80177c0:	e0bffd17 	ldw	r2,-12(fp)
 80177c4:	1880141e 	bne	r3,r2,8017818 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80177c8:	e0bfff17 	ldw	r2,-4(fp)
 80177cc:	1090000c 	andi	r2,r2,16384
 80177d0:	1000131e 	bne	r2,zero,8017820 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80177d4:	0001883a 	nop
 80177d8:	e0bffc17 	ldw	r2,-16(fp)
 80177dc:	10c00a17 	ldw	r3,40(r2)
 80177e0:	e0bff717 	ldw	r2,-36(fp)
 80177e4:	1880051e 	bne	r3,r2,80177fc <altera_avalon_jtag_uart_read+0x138>
 80177e8:	e0bffc17 	ldw	r2,-16(fp)
 80177ec:	10c00917 	ldw	r3,36(r2)
 80177f0:	e0bffc17 	ldw	r2,-16(fp)
 80177f4:	10800117 	ldw	r2,4(r2)
 80177f8:	18bff736 	bltu	r3,r2,80177d8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80177fc:	e0bffc17 	ldw	r2,-16(fp)
 8017800:	10c00a17 	ldw	r3,40(r2)
 8017804:	e0bff717 	ldw	r2,-36(fp)
 8017808:	18800726 	beq	r3,r2,8017828 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801780c:	e0bffe17 	ldw	r2,-8(fp)
 8017810:	00bfb716 	blt	zero,r2,80176f0 <altera_avalon_jtag_uart_read+0x2c>
 8017814:	00000506 	br	801782c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8017818:	0001883a 	nop
 801781c:	00000306 	br	801782c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8017820:	0001883a 	nop
 8017824:	00000106 	br	801782c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8017828:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801782c:	e0fff517 	ldw	r3,-44(fp)
 8017830:	e0bffd17 	ldw	r2,-12(fp)
 8017834:	18801826 	beq	r3,r2,8017898 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017838:	0005303a 	rdctl	r2,status
 801783c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017840:	e0fffb17 	ldw	r3,-20(fp)
 8017844:	00bfff84 	movi	r2,-2
 8017848:	1884703a 	and	r2,r3,r2
 801784c:	1001703a 	wrctl	status,r2
  
  return context;
 8017850:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8017854:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8017858:	e0bffc17 	ldw	r2,-16(fp)
 801785c:	10800817 	ldw	r2,32(r2)
 8017860:	10c00054 	ori	r3,r2,1
 8017864:	e0bffc17 	ldw	r2,-16(fp)
 8017868:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801786c:	e0bffc17 	ldw	r2,-16(fp)
 8017870:	10800017 	ldw	r2,0(r2)
 8017874:	10800104 	addi	r2,r2,4
 8017878:	1007883a 	mov	r3,r2
 801787c:	e0bffc17 	ldw	r2,-16(fp)
 8017880:	10800817 	ldw	r2,32(r2)
 8017884:	18800035 	stwio	r2,0(r3)
 8017888:	e0bffa17 	ldw	r2,-24(fp)
 801788c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017890:	e0bff917 	ldw	r2,-28(fp)
 8017894:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8017898:	e0fff517 	ldw	r3,-44(fp)
 801789c:	e0bffd17 	ldw	r2,-12(fp)
 80178a0:	18800426 	beq	r3,r2,80178b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80178a4:	e0fff517 	ldw	r3,-44(fp)
 80178a8:	e0bffd17 	ldw	r2,-12(fp)
 80178ac:	1885c83a 	sub	r2,r3,r2
 80178b0:	00000606 	br	80178cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80178b4:	e0bfff17 	ldw	r2,-4(fp)
 80178b8:	1090000c 	andi	r2,r2,16384
 80178bc:	10000226 	beq	r2,zero,80178c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80178c0:	00bffd44 	movi	r2,-11
 80178c4:	00000106 	br	80178cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80178c8:	00bffec4 	movi	r2,-5
}
 80178cc:	e037883a 	mov	sp,fp
 80178d0:	dfc00117 	ldw	ra,4(sp)
 80178d4:	df000017 	ldw	fp,0(sp)
 80178d8:	dec00204 	addi	sp,sp,8
 80178dc:	f800283a 	ret

080178e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80178e0:	defff304 	addi	sp,sp,-52
 80178e4:	dfc00c15 	stw	ra,48(sp)
 80178e8:	df000b15 	stw	fp,44(sp)
 80178ec:	df000b04 	addi	fp,sp,44
 80178f0:	e13ffc15 	stw	r4,-16(fp)
 80178f4:	e17ffd15 	stw	r5,-12(fp)
 80178f8:	e1bffe15 	stw	r6,-8(fp)
 80178fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8017900:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8017904:	e0bffd17 	ldw	r2,-12(fp)
 8017908:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801790c:	00003706 	br	80179ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8017910:	e0bffc17 	ldw	r2,-16(fp)
 8017914:	10800c17 	ldw	r2,48(r2)
 8017918:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801791c:	e0bffc17 	ldw	r2,-16(fp)
 8017920:	10800d17 	ldw	r2,52(r2)
 8017924:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8017928:	e0fff917 	ldw	r3,-28(fp)
 801792c:	e0bff517 	ldw	r2,-44(fp)
 8017930:	1880062e 	bgeu	r3,r2,801794c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8017934:	e0fff517 	ldw	r3,-44(fp)
 8017938:	e0bff917 	ldw	r2,-28(fp)
 801793c:	1885c83a 	sub	r2,r3,r2
 8017940:	10bfffc4 	addi	r2,r2,-1
 8017944:	e0bff615 	stw	r2,-40(fp)
 8017948:	00000b06 	br	8017978 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801794c:	e0bff517 	ldw	r2,-44(fp)
 8017950:	10000526 	beq	r2,zero,8017968 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8017954:	00c20004 	movi	r3,2048
 8017958:	e0bff917 	ldw	r2,-28(fp)
 801795c:	1885c83a 	sub	r2,r3,r2
 8017960:	e0bff615 	stw	r2,-40(fp)
 8017964:	00000406 	br	8017978 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8017968:	00c1ffc4 	movi	r3,2047
 801796c:	e0bff917 	ldw	r2,-28(fp)
 8017970:	1885c83a 	sub	r2,r3,r2
 8017974:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8017978:	e0bff617 	ldw	r2,-40(fp)
 801797c:	10001e26 	beq	r2,zero,80179f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8017980:	e0fffe17 	ldw	r3,-8(fp)
 8017984:	e0bff617 	ldw	r2,-40(fp)
 8017988:	1880022e 	bgeu	r3,r2,8017994 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801798c:	e0bffe17 	ldw	r2,-8(fp)
 8017990:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8017994:	e0bffc17 	ldw	r2,-16(fp)
 8017998:	10c20e04 	addi	r3,r2,2104
 801799c:	e0bff917 	ldw	r2,-28(fp)
 80179a0:	1885883a 	add	r2,r3,r2
 80179a4:	e1bff617 	ldw	r6,-40(fp)
 80179a8:	e17ffd17 	ldw	r5,-12(fp)
 80179ac:	1009883a 	mov	r4,r2
 80179b0:	80098e40 	call	80098e4 <memcpy>
      ptr   += n;
 80179b4:	e0fffd17 	ldw	r3,-12(fp)
 80179b8:	e0bff617 	ldw	r2,-40(fp)
 80179bc:	1885883a 	add	r2,r3,r2
 80179c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80179c4:	e0fffe17 	ldw	r3,-8(fp)
 80179c8:	e0bff617 	ldw	r2,-40(fp)
 80179cc:	1885c83a 	sub	r2,r3,r2
 80179d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80179d4:	e0fff917 	ldw	r3,-28(fp)
 80179d8:	e0bff617 	ldw	r2,-40(fp)
 80179dc:	1885883a 	add	r2,r3,r2
 80179e0:	10c1ffcc 	andi	r3,r2,2047
 80179e4:	e0bffc17 	ldw	r2,-16(fp)
 80179e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80179ec:	e0bffe17 	ldw	r2,-8(fp)
 80179f0:	00bfc716 	blt	zero,r2,8017910 <altera_avalon_jtag_uart_write+0x30>
 80179f4:	00000106 	br	80179fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80179f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80179fc:	0005303a 	rdctl	r2,status
 8017a00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017a04:	e0fffb17 	ldw	r3,-20(fp)
 8017a08:	00bfff84 	movi	r2,-2
 8017a0c:	1884703a 	and	r2,r3,r2
 8017a10:	1001703a 	wrctl	status,r2
  
  return context;
 8017a14:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8017a18:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017a1c:	e0bffc17 	ldw	r2,-16(fp)
 8017a20:	10800817 	ldw	r2,32(r2)
 8017a24:	10c00094 	ori	r3,r2,2
 8017a28:	e0bffc17 	ldw	r2,-16(fp)
 8017a2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017a30:	e0bffc17 	ldw	r2,-16(fp)
 8017a34:	10800017 	ldw	r2,0(r2)
 8017a38:	10800104 	addi	r2,r2,4
 8017a3c:	1007883a 	mov	r3,r2
 8017a40:	e0bffc17 	ldw	r2,-16(fp)
 8017a44:	10800817 	ldw	r2,32(r2)
 8017a48:	18800035 	stwio	r2,0(r3)
 8017a4c:	e0bffa17 	ldw	r2,-24(fp)
 8017a50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017a54:	e0bff817 	ldw	r2,-32(fp)
 8017a58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8017a5c:	e0bffe17 	ldw	r2,-8(fp)
 8017a60:	0080100e 	bge	zero,r2,8017aa4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8017a64:	e0bfff17 	ldw	r2,-4(fp)
 8017a68:	1090000c 	andi	r2,r2,16384
 8017a6c:	1000101e 	bne	r2,zero,8017ab0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8017a70:	0001883a 	nop
 8017a74:	e0bffc17 	ldw	r2,-16(fp)
 8017a78:	10c00d17 	ldw	r3,52(r2)
 8017a7c:	e0bff517 	ldw	r2,-44(fp)
 8017a80:	1880051e 	bne	r3,r2,8017a98 <altera_avalon_jtag_uart_write+0x1b8>
 8017a84:	e0bffc17 	ldw	r2,-16(fp)
 8017a88:	10c00917 	ldw	r3,36(r2)
 8017a8c:	e0bffc17 	ldw	r2,-16(fp)
 8017a90:	10800117 	ldw	r2,4(r2)
 8017a94:	18bff736 	bltu	r3,r2,8017a74 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8017a98:	e0bffc17 	ldw	r2,-16(fp)
 8017a9c:	10800917 	ldw	r2,36(r2)
 8017aa0:	1000051e 	bne	r2,zero,8017ab8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8017aa4:	e0bffe17 	ldw	r2,-8(fp)
 8017aa8:	00bfd016 	blt	zero,r2,80179ec <altera_avalon_jtag_uart_write+0x10c>
 8017aac:	00000306 	br	8017abc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8017ab0:	0001883a 	nop
 8017ab4:	00000106 	br	8017abc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8017ab8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8017abc:	e0fffd17 	ldw	r3,-12(fp)
 8017ac0:	e0bff717 	ldw	r2,-36(fp)
 8017ac4:	18800426 	beq	r3,r2,8017ad8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8017ac8:	e0fffd17 	ldw	r3,-12(fp)
 8017acc:	e0bff717 	ldw	r2,-36(fp)
 8017ad0:	1885c83a 	sub	r2,r3,r2
 8017ad4:	00000606 	br	8017af0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8017ad8:	e0bfff17 	ldw	r2,-4(fp)
 8017adc:	1090000c 	andi	r2,r2,16384
 8017ae0:	10000226 	beq	r2,zero,8017aec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8017ae4:	00bffd44 	movi	r2,-11
 8017ae8:	00000106 	br	8017af0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8017aec:	00bffec4 	movi	r2,-5
}
 8017af0:	e037883a 	mov	sp,fp
 8017af4:	dfc00117 	ldw	ra,4(sp)
 8017af8:	df000017 	ldw	fp,0(sp)
 8017afc:	dec00204 	addi	sp,sp,8
 8017b00:	f800283a 	ret

08017b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017b04:	defffe04 	addi	sp,sp,-8
 8017b08:	dfc00115 	stw	ra,4(sp)
 8017b0c:	df000015 	stw	fp,0(sp)
 8017b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017b14:	d0a00e17 	ldw	r2,-32712(gp)
 8017b18:	10000326 	beq	r2,zero,8017b28 <alt_get_errno+0x24>
 8017b1c:	d0a00e17 	ldw	r2,-32712(gp)
 8017b20:	103ee83a 	callr	r2
 8017b24:	00000106 	br	8017b2c <alt_get_errno+0x28>
 8017b28:	d0a8af04 	addi	r2,gp,-23876
}
 8017b2c:	e037883a 	mov	sp,fp
 8017b30:	dfc00117 	ldw	ra,4(sp)
 8017b34:	df000017 	ldw	fp,0(sp)
 8017b38:	dec00204 	addi	sp,sp,8
 8017b3c:	f800283a 	ret

08017b40 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8017b40:	defffc04 	addi	sp,sp,-16
 8017b44:	df000315 	stw	fp,12(sp)
 8017b48:	df000304 	addi	fp,sp,12
 8017b4c:	e13ffe15 	stw	r4,-8(fp)
 8017b50:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8017b54:	e0bffe17 	ldw	r2,-8(fp)
 8017b58:	10800317 	ldw	r2,12(r2)
 8017b5c:	10800037 	ldwio	r2,0(r2)
 8017b60:	1080040c 	andi	r2,r2,16
 8017b64:	10000226 	beq	r2,zero,8017b70 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 8017b68:	00bffc04 	movi	r2,-16
 8017b6c:	00003906 	br	8017c54 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8017b70:	e0bffe17 	ldw	r2,-8(fp)
 8017b74:	10800317 	ldw	r2,12(r2)
 8017b78:	10800404 	addi	r2,r2,16
 8017b7c:	e0fffe17 	ldw	r3,-8(fp)
 8017b80:	18c00317 	ldw	r3,12(r3)
 8017b84:	18c00404 	addi	r3,r3,16
 8017b88:	19000037 	ldwio	r4,0(r3)
 8017b8c:	00fff7c4 	movi	r3,-33
 8017b90:	20c6703a 	and	r3,r4,r3
 8017b94:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8017b98:	e0bffe17 	ldw	r2,-8(fp)
 8017b9c:	10800317 	ldw	r2,12(r2)
 8017ba0:	00c03fc4 	movi	r3,255
 8017ba4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 8017ba8:	e0bffe17 	ldw	r2,-8(fp)
 8017bac:	10800317 	ldw	r2,12(r2)
 8017bb0:	10800804 	addi	r2,r2,32
 8017bb4:	e0ffff17 	ldw	r3,-4(fp)
 8017bb8:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 8017bbc:	e0bffe17 	ldw	r2,-8(fp)
 8017bc0:	10800917 	ldw	r2,36(r2)
 8017bc4:	10001126 	beq	r2,zero,8017c0c <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017bc8:	e0bffe17 	ldw	r2,-8(fp)
 8017bcc:	10800317 	ldw	r2,12(r2)
 8017bd0:	10800404 	addi	r2,r2,16
 8017bd4:	10800037 	ldwio	r2,0(r2)
 8017bd8:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 8017bdc:	e0bffe17 	ldw	r2,-8(fp)
 8017be0:	10c00b17 	ldw	r3,44(r2)
 8017be4:	e0bffd17 	ldw	r2,-12(fp)
 8017be8:	1884b03a 	or	r2,r3,r2
 8017bec:	10801814 	ori	r2,r2,96
 8017bf0:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017bf4:	e0bffe17 	ldw	r2,-8(fp)
 8017bf8:	10800317 	ldw	r2,12(r2)
 8017bfc:	10800404 	addi	r2,r2,16
 8017c00:	e0fffd17 	ldw	r3,-12(fp)
 8017c04:	10c00035 	stwio	r3,0(r2)
 8017c08:	00001106 	br	8017c50 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8017c0c:	e0bffe17 	ldw	r2,-8(fp)
 8017c10:	10800317 	ldw	r2,12(r2)
 8017c14:	10800404 	addi	r2,r2,16
 8017c18:	10800037 	ldwio	r2,0(r2)
 8017c1c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 8017c20:	e0bffd17 	ldw	r2,-12(fp)
 8017c24:	10801814 	ori	r2,r2,96
 8017c28:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 8017c2c:	e0fffd17 	ldw	r3,-12(fp)
 8017c30:	00bffbc4 	movi	r2,-17
 8017c34:	1884703a 	and	r2,r3,r2
 8017c38:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8017c3c:	e0bffe17 	ldw	r2,-8(fp)
 8017c40:	10800317 	ldw	r2,12(r2)
 8017c44:	10800404 	addi	r2,r2,16
 8017c48:	e0fffd17 	ldw	r3,-12(fp)
 8017c4c:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 8017c50:	0005883a 	mov	r2,zero
}
 8017c54:	e037883a 	mov	sp,fp
 8017c58:	df000017 	ldw	fp,0(sp)
 8017c5c:	dec00104 	addi	sp,sp,4
 8017c60:	f800283a 	ret

08017c64 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8017c64:	defffc04 	addi	sp,sp,-16
 8017c68:	df000315 	stw	fp,12(sp)
 8017c6c:	df000304 	addi	fp,sp,12
 8017c70:	e13ffe15 	stw	r4,-8(fp)
 8017c74:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8017c78:	0001883a 	nop
 8017c7c:	e0bffe17 	ldw	r2,-8(fp)
 8017c80:	10800317 	ldw	r2,12(r2)
 8017c84:	10800037 	ldwio	r2,0(r2)
 8017c88:	1080040c 	andi	r2,r2,16
 8017c8c:	103ffb1e 	bne	r2,zero,8017c7c <alt_avalon_sgdma_do_sync_transfer+0x18>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8017c90:	e0bffe17 	ldw	r2,-8(fp)
 8017c94:	10800317 	ldw	r2,12(r2)
 8017c98:	10800404 	addi	r2,r2,16
 8017c9c:	e0fffe17 	ldw	r3,-8(fp)
 8017ca0:	18c00317 	ldw	r3,12(r3)
 8017ca4:	18c00404 	addi	r3,r3,16
 8017ca8:	19000037 	ldwio	r4,0(r3)
 8017cac:	00fff7c4 	movi	r3,-33
 8017cb0:	20c6703a 	and	r3,r4,r3
 8017cb4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8017cb8:	e0bffe17 	ldw	r2,-8(fp)
 8017cbc:	10800317 	ldw	r2,12(r2)
 8017cc0:	00c03fc4 	movi	r3,255
 8017cc4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 8017cc8:	e0bffe17 	ldw	r2,-8(fp)
 8017ccc:	10800317 	ldw	r2,12(r2)
 8017cd0:	10800804 	addi	r2,r2,32
 8017cd4:	e0ffff17 	ldw	r3,-4(fp)
 8017cd8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8017cdc:	e0bffe17 	ldw	r2,-8(fp)
 8017ce0:	10800317 	ldw	r2,12(r2)
 8017ce4:	10800404 	addi	r2,r2,16
 8017ce8:	e0fffe17 	ldw	r3,-8(fp)
 8017cec:	18c00317 	ldw	r3,12(r3)
 8017cf0:	18c00404 	addi	r3,r3,16
 8017cf4:	18c00037 	ldwio	r3,0(r3)
 8017cf8:	18c01814 	ori	r3,r3,96
 8017cfc:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8017d00:	0001883a 	nop
 8017d04:	e0bffe17 	ldw	r2,-8(fp)
 8017d08:	10800317 	ldw	r2,12(r2)
 8017d0c:	10800037 	ldwio	r2,0(r2)
 8017d10:	1080040c 	andi	r2,r2,16
 8017d14:	103ffb1e 	bne	r2,zero,8017d04 <alt_avalon_sgdma_do_sync_transfer+0xa0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8017d18:	e0bffe17 	ldw	r2,-8(fp)
 8017d1c:	10800317 	ldw	r2,12(r2)
 8017d20:	10800404 	addi	r2,r2,16
 8017d24:	e0fffe17 	ldw	r3,-8(fp)
 8017d28:	18c00317 	ldw	r3,12(r3)
 8017d2c:	18c00404 	addi	r3,r3,16
 8017d30:	19000037 	ldwio	r4,0(r3)
 8017d34:	00fff7c4 	movi	r3,-33
 8017d38:	20c6703a 	and	r3,r4,r3
 8017d3c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 8017d40:	e0bffe17 	ldw	r2,-8(fp)
 8017d44:	10800317 	ldw	r2,12(r2)
 8017d48:	10800037 	ldwio	r2,0(r2)
 8017d4c:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8017d50:	e0bffe17 	ldw	r2,-8(fp)
 8017d54:	10800317 	ldw	r2,12(r2)
 8017d58:	00c03fc4 	movi	r3,255
 8017d5c:	10c00035 	stwio	r3,0(r2)

  return status;
 8017d60:	e0bffd03 	ldbu	r2,-12(fp)
}
 8017d64:	e037883a 	mov	sp,fp
 8017d68:	df000017 	ldw	fp,0(sp)
 8017d6c:	dec00104 	addi	sp,sp,4
 8017d70:	f800283a 	ret

08017d74 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 8017d74:	defff404 	addi	sp,sp,-48
 8017d78:	dfc00b15 	stw	ra,44(sp)
 8017d7c:	df000a15 	stw	fp,40(sp)
 8017d80:	df000a04 	addi	fp,sp,40
 8017d84:	e13ffb15 	stw	r4,-20(fp)
 8017d88:	e17ffc15 	stw	r5,-16(fp)
 8017d8c:	e1bffd15 	stw	r6,-12(fp)
 8017d90:	e1fffe15 	stw	r7,-8(fp)
 8017d94:	e0800217 	ldw	r2,8(fp)
 8017d98:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 8017d9c:	e0bfff0b 	ldhu	r2,-4(fp)
 8017da0:	d8000415 	stw	zero,16(sp)
 8017da4:	d8000315 	stw	zero,12(sp)
 8017da8:	e0c00417 	ldw	r3,16(fp)
 8017dac:	d8c00215 	stw	r3,8(sp)
 8017db0:	e0c00317 	ldw	r3,12(fp)
 8017db4:	d8c00115 	stw	r3,4(sp)
 8017db8:	d8800015 	stw	r2,0(sp)
 8017dbc:	e1fffe17 	ldw	r7,-8(fp)
 8017dc0:	e1bffd17 	ldw	r6,-12(fp)
 8017dc4:	e17ffc17 	ldw	r5,-16(fp)
 8017dc8:	e13ffb17 	ldw	r4,-20(fp)
 8017dcc:	8017de80 	call	8017de8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 8017dd0:	0001883a 	nop
 8017dd4:	e037883a 	mov	sp,fp
 8017dd8:	dfc00117 	ldw	ra,4(sp)
 8017ddc:	df000017 	ldw	fp,0(sp)
 8017de0:	dec00204 	addi	sp,sp,8
 8017de4:	f800283a 	ret

08017de8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 8017de8:	defff204 	addi	sp,sp,-56
 8017dec:	dfc00d15 	stw	ra,52(sp)
 8017df0:	df000c15 	stw	fp,48(sp)
 8017df4:	df000c04 	addi	fp,sp,48
 8017df8:	e13ffb15 	stw	r4,-20(fp)
 8017dfc:	e17ffc15 	stw	r5,-16(fp)
 8017e00:	e1bffd15 	stw	r6,-12(fp)
 8017e04:	e1fffe15 	stw	r7,-8(fp)
 8017e08:	e0800217 	ldw	r2,8(fp)
 8017e0c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017e10:	e0bfff0b 	ldhu	r2,-4(fp)
 8017e14:	d8000615 	stw	zero,24(sp)
 8017e18:	e0c00617 	ldw	r3,24(fp)
 8017e1c:	d8c00515 	stw	r3,20(sp)
 8017e20:	e0c00517 	ldw	r3,20(fp)
 8017e24:	d8c00415 	stw	r3,16(sp)
 8017e28:	e0c00417 	ldw	r3,16(fp)
 8017e2c:	d8c00315 	stw	r3,12(sp)
 8017e30:	e0c00317 	ldw	r3,12(fp)
 8017e34:	d8c00215 	stw	r3,8(sp)
 8017e38:	d8000115 	stw	zero,4(sp)
 8017e3c:	d8800015 	stw	r2,0(sp)
 8017e40:	e1fffe17 	ldw	r7,-8(fp)
 8017e44:	e1bffd17 	ldw	r6,-12(fp)
 8017e48:	e17ffc17 	ldw	r5,-16(fp)
 8017e4c:	e13ffb17 	ldw	r4,-20(fp)
 8017e50:	801837c0 	call	801837c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 8017e54:	0001883a 	nop
 8017e58:	e037883a 	mov	sp,fp
 8017e5c:	dfc00117 	ldw	ra,4(sp)
 8017e60:	df000017 	ldw	fp,0(sp)
 8017e64:	dec00204 	addi	sp,sp,8
 8017e68:	f800283a 	ret

08017e6c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 8017e6c:	defff804 	addi	sp,sp,-32
 8017e70:	dfc00715 	stw	ra,28(sp)
 8017e74:	df000615 	stw	fp,24(sp)
 8017e78:	df000604 	addi	fp,sp,24
 8017e7c:	e13ffc15 	stw	r4,-16(fp)
 8017e80:	e17ffd15 	stw	r5,-12(fp)
 8017e84:	e1bffe15 	stw	r6,-8(fp)
 8017e88:	3805883a 	mov	r2,r7
 8017e8c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 8017e90:	e0ffff0b 	ldhu	r3,-4(fp)
 8017e94:	d8000115 	stw	zero,4(sp)
 8017e98:	e0800217 	ldw	r2,8(fp)
 8017e9c:	d8800015 	stw	r2,0(sp)
 8017ea0:	180f883a 	mov	r7,r3
 8017ea4:	e1bffe17 	ldw	r6,-8(fp)
 8017ea8:	e17ffd17 	ldw	r5,-12(fp)
 8017eac:	e13ffc17 	ldw	r4,-16(fp)
 8017eb0:	8017ecc0 	call	8017ecc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 8017eb4:	0001883a 	nop
 8017eb8:	e037883a 	mov	sp,fp
 8017ebc:	dfc00117 	ldw	ra,4(sp)
 8017ec0:	df000017 	ldw	fp,0(sp)
 8017ec4:	dec00204 	addi	sp,sp,8
 8017ec8:	f800283a 	ret

08017ecc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 8017ecc:	defff304 	addi	sp,sp,-52
 8017ed0:	dfc00c15 	stw	ra,48(sp)
 8017ed4:	df000b15 	stw	fp,44(sp)
 8017ed8:	df000b04 	addi	fp,sp,44
 8017edc:	e13ffc15 	stw	r4,-16(fp)
 8017ee0:	e17ffd15 	stw	r5,-12(fp)
 8017ee4:	e1bffe15 	stw	r6,-8(fp)
 8017ee8:	3805883a 	mov	r2,r7
 8017eec:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017ef0:	e0bfff0b 	ldhu	r2,-4(fp)
 8017ef4:	d8000615 	stw	zero,24(sp)
 8017ef8:	e0c00317 	ldw	r3,12(fp)
 8017efc:	d8c00515 	stw	r3,20(sp)
 8017f00:	d8000415 	stw	zero,16(sp)
 8017f04:	e0c00217 	ldw	r3,8(fp)
 8017f08:	d8c00315 	stw	r3,12(sp)
 8017f0c:	d8000215 	stw	zero,8(sp)
 8017f10:	d8000115 	stw	zero,4(sp)
 8017f14:	d8800015 	stw	r2,0(sp)
 8017f18:	e1fffe17 	ldw	r7,-8(fp)
 8017f1c:	000d883a 	mov	r6,zero
 8017f20:	e17ffd17 	ldw	r5,-12(fp)
 8017f24:	e13ffc17 	ldw	r4,-16(fp)
 8017f28:	801837c0 	call	801837c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 8017f2c:	0001883a 	nop
 8017f30:	e037883a 	mov	sp,fp
 8017f34:	dfc00117 	ldw	ra,4(sp)
 8017f38:	df000017 	ldw	fp,0(sp)
 8017f3c:	dec00204 	addi	sp,sp,8
 8017f40:	f800283a 	ret

08017f44 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 8017f44:	defff404 	addi	sp,sp,-48
 8017f48:	dfc00b15 	stw	ra,44(sp)
 8017f4c:	df000a15 	stw	fp,40(sp)
 8017f50:	df000a04 	addi	fp,sp,40
 8017f54:	e13ffb15 	stw	r4,-20(fp)
 8017f58:	e17ffc15 	stw	r5,-16(fp)
 8017f5c:	e1bffd15 	stw	r6,-12(fp)
 8017f60:	3807883a 	mov	r3,r7
 8017f64:	e0800517 	ldw	r2,20(fp)
 8017f68:	e0fffe0d 	sth	r3,-8(fp)
 8017f6c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 8017f70:	e0fffe0b 	ldhu	r3,-8(fp)
 8017f74:	e0bfff03 	ldbu	r2,-4(fp)
 8017f78:	d8800415 	stw	r2,16(sp)
 8017f7c:	d8000315 	stw	zero,12(sp)
 8017f80:	e0800417 	ldw	r2,16(fp)
 8017f84:	d8800215 	stw	r2,8(sp)
 8017f88:	e0800317 	ldw	r2,12(fp)
 8017f8c:	d8800115 	stw	r2,4(sp)
 8017f90:	e0800217 	ldw	r2,8(fp)
 8017f94:	d8800015 	stw	r2,0(sp)
 8017f98:	180f883a 	mov	r7,r3
 8017f9c:	e1bffd17 	ldw	r6,-12(fp)
 8017fa0:	e17ffc17 	ldw	r5,-16(fp)
 8017fa4:	e13ffb17 	ldw	r4,-20(fp)
 8017fa8:	8017fc40 	call	8017fc4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 8017fac:	0001883a 	nop
 8017fb0:	e037883a 	mov	sp,fp
 8017fb4:	dfc00117 	ldw	ra,4(sp)
 8017fb8:	df000017 	ldw	fp,0(sp)
 8017fbc:	dec00204 	addi	sp,sp,8
 8017fc0:	f800283a 	ret

08017fc4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 8017fc4:	defff204 	addi	sp,sp,-56
 8017fc8:	dfc00d15 	stw	ra,52(sp)
 8017fcc:	df000c15 	stw	fp,48(sp)
 8017fd0:	df000c04 	addi	fp,sp,48
 8017fd4:	e13ffb15 	stw	r4,-20(fp)
 8017fd8:	e17ffc15 	stw	r5,-16(fp)
 8017fdc:	e1bffd15 	stw	r6,-12(fp)
 8017fe0:	3807883a 	mov	r3,r7
 8017fe4:	e0800617 	ldw	r2,24(fp)
 8017fe8:	e0fffe0d 	sth	r3,-8(fp)
 8017fec:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8017ff0:	e0bffe0b 	ldhu	r2,-8(fp)
 8017ff4:	e0ffff03 	ldbu	r3,-4(fp)
 8017ff8:	d8c00615 	stw	r3,24(sp)
 8017ffc:	d8000515 	stw	zero,20(sp)
 8018000:	e0c00517 	ldw	r3,20(fp)
 8018004:	d8c00415 	stw	r3,16(sp)
 8018008:	e0c00317 	ldw	r3,12(fp)
 801800c:	d8c00315 	stw	r3,12(sp)
 8018010:	e0c00217 	ldw	r3,8(fp)
 8018014:	d8c00215 	stw	r3,8(sp)
 8018018:	e0c00417 	ldw	r3,16(fp)
 801801c:	d8c00115 	stw	r3,4(sp)
 8018020:	d8800015 	stw	r2,0(sp)
 8018024:	000f883a 	mov	r7,zero
 8018028:	e1bffd17 	ldw	r6,-12(fp)
 801802c:	e17ffc17 	ldw	r5,-16(fp)
 8018030:	e13ffb17 	ldw	r4,-20(fp)
 8018034:	801837c0 	call	801837c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 8018038:	0001883a 	nop
 801803c:	e037883a 	mov	sp,fp
 8018040:	dfc00117 	ldw	ra,4(sp)
 8018044:	df000017 	ldw	fp,0(sp)
 8018048:	dec00204 	addi	sp,sp,8
 801804c:	f800283a 	ret

08018050 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 8018050:	defffb04 	addi	sp,sp,-20
 8018054:	df000415 	stw	fp,16(sp)
 8018058:	df000404 	addi	fp,sp,16
 801805c:	e13ffc15 	stw	r4,-16(fp)
 8018060:	e17ffd15 	stw	r5,-12(fp)
 8018064:	e1bffe15 	stw	r6,-8(fp)
 8018068:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 801806c:	e0bffc17 	ldw	r2,-16(fp)
 8018070:	e0fffd17 	ldw	r3,-12(fp)
 8018074:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 8018078:	e0bffc17 	ldw	r2,-16(fp)
 801807c:	e0ffff17 	ldw	r3,-4(fp)
 8018080:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 8018084:	e0bffc17 	ldw	r2,-16(fp)
 8018088:	e0fffe17 	ldw	r3,-8(fp)
 801808c:	10c00b15 	stw	r3,44(r2)
}
 8018090:	0001883a 	nop
 8018094:	e037883a 	mov	sp,fp
 8018098:	df000017 	ldw	fp,0(sp)
 801809c:	dec00104 	addi	sp,sp,4
 80180a0:	f800283a 	ret

080180a4 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 80180a4:	defffd04 	addi	sp,sp,-12
 80180a8:	df000215 	stw	fp,8(sp)
 80180ac:	df000204 	addi	fp,sp,8
 80180b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80180b4:	e0bfff17 	ldw	r2,-4(fp)
 80180b8:	10800317 	ldw	r2,12(r2)
 80180bc:	10800404 	addi	r2,r2,16
 80180c0:	10800037 	ldwio	r2,0(r2)
 80180c4:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 80180c8:	e0bffe17 	ldw	r2,-8(fp)
 80180cc:	10800814 	ori	r2,r2,32
 80180d0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 80180d4:	e0bfff17 	ldw	r2,-4(fp)
 80180d8:	10800317 	ldw	r2,12(r2)
 80180dc:	10800404 	addi	r2,r2,16
 80180e0:	e0fffe17 	ldw	r3,-8(fp)
 80180e4:	10c00035 	stwio	r3,0(r2)
}
 80180e8:	0001883a 	nop
 80180ec:	e037883a 	mov	sp,fp
 80180f0:	df000017 	ldw	fp,0(sp)
 80180f4:	dec00104 	addi	sp,sp,4
 80180f8:	f800283a 	ret

080180fc <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 80180fc:	defffd04 	addi	sp,sp,-12
 8018100:	df000215 	stw	fp,8(sp)
 8018104:	df000204 	addi	fp,sp,8
 8018108:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801810c:	e0bfff17 	ldw	r2,-4(fp)
 8018110:	10800317 	ldw	r2,12(r2)
 8018114:	10800404 	addi	r2,r2,16
 8018118:	10800037 	ldwio	r2,0(r2)
 801811c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 8018120:	e0fffe17 	ldw	r3,-8(fp)
 8018124:	00bff7c4 	movi	r2,-33
 8018128:	1884703a 	and	r2,r3,r2
 801812c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8018130:	e0bfff17 	ldw	r2,-4(fp)
 8018134:	10800317 	ldw	r2,12(r2)
 8018138:	10800404 	addi	r2,r2,16
 801813c:	e0fffe17 	ldw	r3,-8(fp)
 8018140:	10c00035 	stwio	r3,0(r2)
}
 8018144:	0001883a 	nop
 8018148:	e037883a 	mov	sp,fp
 801814c:	df000017 	ldw	fp,0(sp)
 8018150:	dec00104 	addi	sp,sp,4
 8018154:	f800283a 	ret

08018158 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 8018158:	defffe04 	addi	sp,sp,-8
 801815c:	df000115 	stw	fp,4(sp)
 8018160:	df000104 	addi	fp,sp,4
 8018164:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 8018168:	e0bfff17 	ldw	r2,-4(fp)
 801816c:	10800784 	addi	r2,r2,30
 8018170:	10800023 	ldbuio	r2,0(r2)
 8018174:	10803fcc 	andi	r2,r2,255
 8018178:	10801fcc 	andi	r2,r2,127
 801817c:	10000226 	beq	r2,zero,8018188 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 8018180:	00bffec4 	movi	r2,-5
 8018184:	00000906 	br	80181ac <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 8018188:	e0bfff17 	ldw	r2,-4(fp)
 801818c:	108007c4 	addi	r2,r2,31
 8018190:	10800023 	ldbuio	r2,0(r2)
 8018194:	10803fcc 	andi	r2,r2,255
 8018198:	1080200c 	andi	r2,r2,128
 801819c:	10000226 	beq	r2,zero,80181a8 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 80181a0:	00bfe244 	movi	r2,-119
 80181a4:	00000106 	br	80181ac <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 80181a8:	0005883a 	mov	r2,zero
}
 80181ac:	e037883a 	mov	sp,fp
 80181b0:	df000017 	ldw	fp,0(sp)
 80181b4:	dec00104 	addi	sp,sp,4
 80181b8:	f800283a 	ret

080181bc <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 80181bc:	defffc04 	addi	sp,sp,-16
 80181c0:	dfc00315 	stw	ra,12(sp)
 80181c4:	df000215 	stw	fp,8(sp)
 80181c8:	df000204 	addi	fp,sp,8
 80181cc:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 80181d0:	d1601104 	addi	r5,gp,-32700
 80181d4:	e13fff17 	ldw	r4,-4(fp)
 80181d8:	80195780 	call	8019578 <alt_find_dev>
 80181dc:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 80181e0:	e0bffe17 	ldw	r2,-8(fp)
 80181e4:	1000041e 	bne	r2,zero,80181f8 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 80181e8:	8017b040 	call	8017b04 <alt_get_errno>
 80181ec:	1007883a 	mov	r3,r2
 80181f0:	008004c4 	movi	r2,19
 80181f4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80181f8:	e0bffe17 	ldw	r2,-8(fp)
}
 80181fc:	e037883a 	mov	sp,fp
 8018200:	dfc00117 	ldw	ra,4(sp)
 8018204:	df000017 	ldw	fp,0(sp)
 8018208:	dec00204 	addi	sp,sp,8
 801820c:	f800283a 	ret

08018210 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 8018210:	defff104 	addi	sp,sp,-60
 8018214:	dfc00e15 	stw	ra,56(sp)
 8018218:	df000d15 	stw	fp,52(sp)
 801821c:	df000d04 	addi	fp,sp,52
 8018220:	e13ffa15 	stw	r4,-24(fp)
 8018224:	e17ffb15 	stw	r5,-20(fp)
 8018228:	e1bffc15 	stw	r6,-16(fp)
 801822c:	e1fffd15 	stw	r7,-12(fp)
 8018230:	e0c00217 	ldw	r3,8(fp)
 8018234:	e0800617 	ldw	r2,24(fp)
 8018238:	e0fffe0d 	sth	r3,-8(fp)
 801823c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 8018240:	e0bffe0b 	ldhu	r2,-8(fp)
 8018244:	e0ffff03 	ldbu	r3,-4(fp)
 8018248:	d8c00615 	stw	r3,24(sp)
 801824c:	d8000515 	stw	zero,20(sp)
 8018250:	d8000415 	stw	zero,16(sp)
 8018254:	e0c00517 	ldw	r3,20(fp)
 8018258:	d8c00315 	stw	r3,12(sp)
 801825c:	e0c00417 	ldw	r3,16(fp)
 8018260:	d8c00215 	stw	r3,8(sp)
 8018264:	e0c00317 	ldw	r3,12(fp)
 8018268:	d8c00115 	stw	r3,4(sp)
 801826c:	d8800015 	stw	r2,0(sp)
 8018270:	e1fffd17 	ldw	r7,-12(fp)
 8018274:	e1bffc17 	ldw	r6,-16(fp)
 8018278:	e17ffb17 	ldw	r5,-20(fp)
 801827c:	e13ffa17 	ldw	r4,-24(fp)
 8018280:	801837c0 	call	801837c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 8018284:	0001883a 	nop
 8018288:	e037883a 	mov	sp,fp
 801828c:	dfc00117 	ldw	ra,4(sp)
 8018290:	df000017 	ldw	fp,0(sp)
 8018294:	dec00204 	addi	sp,sp,8
 8018298:	f800283a 	ret

0801829c <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 801829c:	defffc04 	addi	sp,sp,-16
 80182a0:	df000315 	stw	fp,12(sp)
 80182a4:	df000304 	addi	fp,sp,12
 80182a8:	e13ffe15 	stw	r4,-8(fp)
 80182ac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80182b0:	e0bffe17 	ldw	r2,-8(fp)
 80182b4:	10800317 	ldw	r2,12(r2)
 80182b8:	10800404 	addi	r2,r2,16
 80182bc:	10800037 	ldwio	r2,0(r2)
 80182c0:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 80182c4:	e0fffd17 	ldw	r3,-12(fp)
 80182c8:	00a00434 	movhi	r2,32784
 80182cc:	10bfffc4 	addi	r2,r2,-1
 80182d0:	1884703a 	and	r2,r3,r2
 80182d4:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 80182d8:	e0bfff17 	ldw	r2,-4(fp)
 80182dc:	1004953a 	slli	r2,r2,20
 80182e0:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 80182e4:	e0bffd17 	ldw	r2,-12(fp)
 80182e8:	1884b03a 	or	r2,r3,r2
 80182ec:	10800134 	orhi	r2,r2,4
 80182f0:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 80182f4:	e0bffe17 	ldw	r2,-8(fp)
 80182f8:	10800317 	ldw	r2,12(r2)
 80182fc:	10800404 	addi	r2,r2,16
 8018300:	e0fffd17 	ldw	r3,-12(fp)
 8018304:	10c00035 	stwio	r3,0(r2)
  
  return;
 8018308:	0001883a 	nop
}
 801830c:	e037883a 	mov	sp,fp
 8018310:	df000017 	ldw	fp,0(sp)
 8018314:	dec00104 	addi	sp,sp,4
 8018318:	f800283a 	ret

0801831c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 801831c:	defffd04 	addi	sp,sp,-12
 8018320:	df000215 	stw	fp,8(sp)
 8018324:	df000204 	addi	fp,sp,8
 8018328:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801832c:	e0bfff17 	ldw	r2,-4(fp)
 8018330:	10800317 	ldw	r2,12(r2)
 8018334:	10800404 	addi	r2,r2,16
 8018338:	10800037 	ldwio	r2,0(r2)
 801833c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 8018340:	e0fffe17 	ldw	r3,-8(fp)
 8018344:	00bfff34 	movhi	r2,65532
 8018348:	10bfffc4 	addi	r2,r2,-1
 801834c:	1884703a 	and	r2,r3,r2
 8018350:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8018354:	e0bfff17 	ldw	r2,-4(fp)
 8018358:	10800317 	ldw	r2,12(r2)
 801835c:	10800404 	addi	r2,r2,16
 8018360:	e0fffe17 	ldw	r3,-8(fp)
 8018364:	10c00035 	stwio	r3,0(r2)
  
  return;
 8018368:	0001883a 	nop
}
 801836c:	e037883a 	mov	sp,fp
 8018370:	df000017 	ldw	fp,0(sp)
 8018374:	dec00104 	addi	sp,sp,4
 8018378:	f800283a 	ret

0801837c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 801837c:	defff804 	addi	sp,sp,-32
 8018380:	dfc00715 	stw	ra,28(sp)
 8018384:	df000615 	stw	fp,24(sp)
 8018388:	df000604 	addi	fp,sp,24
 801838c:	e13ffa15 	stw	r4,-24(fp)
 8018390:	e17ffb15 	stw	r5,-20(fp)
 8018394:	e1bffc15 	stw	r6,-16(fp)
 8018398:	e1fffd15 	stw	r7,-12(fp)
 801839c:	e0c00217 	ldw	r3,8(fp)
 80183a0:	e0800817 	ldw	r2,32(fp)
 80183a4:	e0fffe0d 	sth	r3,-8(fp)
 80183a8:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 80183ac:	e0bffb17 	ldw	r2,-20(fp)
 80183b0:	108007c4 	addi	r2,r2,31
 80183b4:	e0fffb17 	ldw	r3,-20(fp)
 80183b8:	18c007c3 	ldbu	r3,31(r3)
 80183bc:	19003fcc 	andi	r4,r3,255
 80183c0:	00ffdfc4 	movi	r3,-129
 80183c4:	20c6703a 	and	r3,r4,r3
 80183c8:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 80183cc:	e0bffa17 	ldw	r2,-24(fp)
 80183d0:	e0fffc17 	ldw	r3,-16(fp)
 80183d4:	19403fcc 	andi	r5,r3,255
 80183d8:	10c00003 	ldbu	r3,0(r2)
 80183dc:	1806703a 	and	r3,r3,zero
 80183e0:	1809883a 	mov	r4,r3
 80183e4:	2807883a 	mov	r3,r5
 80183e8:	20c6b03a 	or	r3,r4,r3
 80183ec:	10c00005 	stb	r3,0(r2)
 80183f0:	e0fffc17 	ldw	r3,-16(fp)
 80183f4:	1806d23a 	srli	r3,r3,8
 80183f8:	19403fcc 	andi	r5,r3,255
 80183fc:	10c00043 	ldbu	r3,1(r2)
 8018400:	1806703a 	and	r3,r3,zero
 8018404:	1809883a 	mov	r4,r3
 8018408:	2807883a 	mov	r3,r5
 801840c:	20c6b03a 	or	r3,r4,r3
 8018410:	10c00045 	stb	r3,1(r2)
 8018414:	e0fffc17 	ldw	r3,-16(fp)
 8018418:	1806d43a 	srli	r3,r3,16
 801841c:	19403fcc 	andi	r5,r3,255
 8018420:	10c00083 	ldbu	r3,2(r2)
 8018424:	1806703a 	and	r3,r3,zero
 8018428:	1809883a 	mov	r4,r3
 801842c:	2807883a 	mov	r3,r5
 8018430:	20c6b03a 	or	r3,r4,r3
 8018434:	10c00085 	stb	r3,2(r2)
 8018438:	e0fffc17 	ldw	r3,-16(fp)
 801843c:	180ad63a 	srli	r5,r3,24
 8018440:	10c000c3 	ldbu	r3,3(r2)
 8018444:	1806703a 	and	r3,r3,zero
 8018448:	1809883a 	mov	r4,r3
 801844c:	2807883a 	mov	r3,r5
 8018450:	20c6b03a 	or	r3,r4,r3
 8018454:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 8018458:	e0bffa17 	ldw	r2,-24(fp)
 801845c:	e0fffd17 	ldw	r3,-12(fp)
 8018460:	19403fcc 	andi	r5,r3,255
 8018464:	10c00203 	ldbu	r3,8(r2)
 8018468:	1806703a 	and	r3,r3,zero
 801846c:	1809883a 	mov	r4,r3
 8018470:	2807883a 	mov	r3,r5
 8018474:	20c6b03a 	or	r3,r4,r3
 8018478:	10c00205 	stb	r3,8(r2)
 801847c:	e0fffd17 	ldw	r3,-12(fp)
 8018480:	1806d23a 	srli	r3,r3,8
 8018484:	19403fcc 	andi	r5,r3,255
 8018488:	10c00243 	ldbu	r3,9(r2)
 801848c:	1806703a 	and	r3,r3,zero
 8018490:	1809883a 	mov	r4,r3
 8018494:	2807883a 	mov	r3,r5
 8018498:	20c6b03a 	or	r3,r4,r3
 801849c:	10c00245 	stb	r3,9(r2)
 80184a0:	e0fffd17 	ldw	r3,-12(fp)
 80184a4:	1806d43a 	srli	r3,r3,16
 80184a8:	19403fcc 	andi	r5,r3,255
 80184ac:	10c00283 	ldbu	r3,10(r2)
 80184b0:	1806703a 	and	r3,r3,zero
 80184b4:	1809883a 	mov	r4,r3
 80184b8:	2807883a 	mov	r3,r5
 80184bc:	20c6b03a 	or	r3,r4,r3
 80184c0:	10c00285 	stb	r3,10(r2)
 80184c4:	e0fffd17 	ldw	r3,-12(fp)
 80184c8:	180ad63a 	srli	r5,r3,24
 80184cc:	10c002c3 	ldbu	r3,11(r2)
 80184d0:	1806703a 	and	r3,r3,zero
 80184d4:	1809883a 	mov	r4,r3
 80184d8:	2807883a 	mov	r3,r5
 80184dc:	20c6b03a 	or	r3,r4,r3
 80184e0:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 80184e4:	e0bffa17 	ldw	r2,-24(fp)
 80184e8:	e0fffb17 	ldw	r3,-20(fp)
 80184ec:	19403fcc 	andi	r5,r3,255
 80184f0:	10c00403 	ldbu	r3,16(r2)
 80184f4:	1806703a 	and	r3,r3,zero
 80184f8:	1809883a 	mov	r4,r3
 80184fc:	2807883a 	mov	r3,r5
 8018500:	20c6b03a 	or	r3,r4,r3
 8018504:	10c00405 	stb	r3,16(r2)
 8018508:	e0fffb17 	ldw	r3,-20(fp)
 801850c:	1806d23a 	srli	r3,r3,8
 8018510:	19403fcc 	andi	r5,r3,255
 8018514:	10c00443 	ldbu	r3,17(r2)
 8018518:	1806703a 	and	r3,r3,zero
 801851c:	1809883a 	mov	r4,r3
 8018520:	2807883a 	mov	r3,r5
 8018524:	20c6b03a 	or	r3,r4,r3
 8018528:	10c00445 	stb	r3,17(r2)
 801852c:	e0fffb17 	ldw	r3,-20(fp)
 8018530:	1806d43a 	srli	r3,r3,16
 8018534:	19403fcc 	andi	r5,r3,255
 8018538:	10c00483 	ldbu	r3,18(r2)
 801853c:	1806703a 	and	r3,r3,zero
 8018540:	1809883a 	mov	r4,r3
 8018544:	2807883a 	mov	r3,r5
 8018548:	20c6b03a 	or	r3,r4,r3
 801854c:	10c00485 	stb	r3,18(r2)
 8018550:	e0fffb17 	ldw	r3,-20(fp)
 8018554:	180ad63a 	srli	r5,r3,24
 8018558:	10c004c3 	ldbu	r3,19(r2)
 801855c:	1806703a 	and	r3,r3,zero
 8018560:	1809883a 	mov	r4,r3
 8018564:	2807883a 	mov	r3,r5
 8018568:	20c6b03a 	or	r3,r4,r3
 801856c:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 8018570:	e0bffa17 	ldw	r2,-24(fp)
 8018574:	10c00103 	ldbu	r3,4(r2)
 8018578:	1806703a 	and	r3,r3,zero
 801857c:	10c00105 	stb	r3,4(r2)
 8018580:	10c00143 	ldbu	r3,5(r2)
 8018584:	1806703a 	and	r3,r3,zero
 8018588:	10c00145 	stb	r3,5(r2)
 801858c:	10c00183 	ldbu	r3,6(r2)
 8018590:	1806703a 	and	r3,r3,zero
 8018594:	10c00185 	stb	r3,6(r2)
 8018598:	10c001c3 	ldbu	r3,7(r2)
 801859c:	1806703a 	and	r3,r3,zero
 80185a0:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 80185a4:	e0bffa17 	ldw	r2,-24(fp)
 80185a8:	10c00303 	ldbu	r3,12(r2)
 80185ac:	1806703a 	and	r3,r3,zero
 80185b0:	10c00305 	stb	r3,12(r2)
 80185b4:	10c00343 	ldbu	r3,13(r2)
 80185b8:	1806703a 	and	r3,r3,zero
 80185bc:	10c00345 	stb	r3,13(r2)
 80185c0:	10c00383 	ldbu	r3,14(r2)
 80185c4:	1806703a 	and	r3,r3,zero
 80185c8:	10c00385 	stb	r3,14(r2)
 80185cc:	10c003c3 	ldbu	r3,15(r2)
 80185d0:	1806703a 	and	r3,r3,zero
 80185d4:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 80185d8:	e0bffa17 	ldw	r2,-24(fp)
 80185dc:	10c00503 	ldbu	r3,20(r2)
 80185e0:	1806703a 	and	r3,r3,zero
 80185e4:	10c00505 	stb	r3,20(r2)
 80185e8:	10c00543 	ldbu	r3,21(r2)
 80185ec:	1806703a 	and	r3,r3,zero
 80185f0:	10c00545 	stb	r3,21(r2)
 80185f4:	10c00583 	ldbu	r3,22(r2)
 80185f8:	1806703a 	and	r3,r3,zero
 80185fc:	10c00585 	stb	r3,22(r2)
 8018600:	10c005c3 	ldbu	r3,23(r2)
 8018604:	1806703a 	and	r3,r3,zero
 8018608:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 801860c:	e0bffa17 	ldw	r2,-24(fp)
 8018610:	e0fffe17 	ldw	r3,-8(fp)
 8018614:	19403fcc 	andi	r5,r3,255
 8018618:	10c00603 	ldbu	r3,24(r2)
 801861c:	1806703a 	and	r3,r3,zero
 8018620:	1809883a 	mov	r4,r3
 8018624:	2807883a 	mov	r3,r5
 8018628:	20c6b03a 	or	r3,r4,r3
 801862c:	10c00605 	stb	r3,24(r2)
 8018630:	e0fffe17 	ldw	r3,-8(fp)
 8018634:	1806d23a 	srli	r3,r3,8
 8018638:	19403fcc 	andi	r5,r3,255
 801863c:	10c00643 	ldbu	r3,25(r2)
 8018640:	1806703a 	and	r3,r3,zero
 8018644:	1809883a 	mov	r4,r3
 8018648:	2807883a 	mov	r3,r5
 801864c:	20c6b03a 	or	r3,r4,r3
 8018650:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 8018654:	e0bffa17 	ldw	r2,-24(fp)
 8018658:	10c00703 	ldbu	r3,28(r2)
 801865c:	1806703a 	and	r3,r3,zero
 8018660:	10c00705 	stb	r3,28(r2)
 8018664:	10c00743 	ldbu	r3,29(r2)
 8018668:	1806703a 	and	r3,r3,zero
 801866c:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 8018670:	e0bffa17 	ldw	r2,-24(fp)
 8018674:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 8018678:	e0800617 	ldw	r2,24(fp)
 801867c:	1007883a 	mov	r3,r2
 8018680:	e0bffa17 	ldw	r2,-24(fp)
 8018684:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 8018688:	e0800717 	ldw	r2,28(fp)
 801868c:	1007883a 	mov	r3,r2
 8018690:	e0bffa17 	ldw	r2,-24(fp)
 8018694:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 8018698:	e0800317 	ldw	r2,12(fp)
 801869c:	10000226 	beq	r2,zero,80186a8 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 80186a0:	00bfe044 	movi	r2,-127
 80186a4:	00000106 	br	80186ac <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 80186a8:	00bfe004 	movi	r2,-128
 80186ac:	e0c00417 	ldw	r3,16(fp)
 80186b0:	18000226 	beq	r3,zero,80186bc <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 80186b4:	00c00084 	movi	r3,2
 80186b8:	00000106 	br	80186c0 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 80186bc:	0007883a 	mov	r3,zero
 80186c0:	10c4b03a 	or	r2,r2,r3
 80186c4:	1007883a 	mov	r3,r2
 80186c8:	e0800517 	ldw	r2,20(fp)
 80186cc:	10000226 	beq	r2,zero,80186d8 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 80186d0:	00800104 	movi	r2,4
 80186d4:	00000106 	br	80186dc <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 80186d8:	0005883a 	mov	r2,zero
 80186dc:	1884b03a 	or	r2,r3,r2
 80186e0:	1007883a 	mov	r3,r2
 80186e4:	e0bfff03 	ldbu	r2,-4(fp)
 80186e8:	10000426 	beq	r2,zero,80186fc <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 80186ec:	e0bfff03 	ldbu	r2,-4(fp)
 80186f0:	108003cc 	andi	r2,r2,15
 80186f4:	100490fa 	slli	r2,r2,3
 80186f8:	00000106 	br	8018700 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 80186fc:	0005883a 	mov	r2,zero
 8018700:	1884b03a 	or	r2,r3,r2
 8018704:	1007883a 	mov	r3,r2
 8018708:	e0bffa17 	ldw	r2,-24(fp)
 801870c:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 8018710:	01400804 	movi	r5,32
 8018714:	e13ffa17 	ldw	r4,-24(fp)
 8018718:	80193900 	call	8019390 <alt_dcache_flush>
}
 801871c:	0001883a 	nop
 8018720:	e037883a 	mov	sp,fp
 8018724:	dfc00117 	ldw	ra,4(sp)
 8018728:	df000017 	ldw	fp,0(sp)
 801872c:	dec00204 	addi	sp,sp,8
 8018730:	f800283a 	ret

08018734 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 8018734:	defff904 	addi	sp,sp,-28
 8018738:	dfc00615 	stw	ra,24(sp)
 801873c:	df000515 	stw	fp,20(sp)
 8018740:	df000504 	addi	fp,sp,20
 8018744:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 8018748:	e0bfff17 	ldw	r2,-4(fp)
 801874c:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8018750:	e0bffb17 	ldw	r2,-20(fp)
 8018754:	10800317 	ldw	r2,12(r2)
 8018758:	10800404 	addi	r2,r2,16
 801875c:	e0fffb17 	ldw	r3,-20(fp)
 8018760:	18c00317 	ldw	r3,12(r3)
 8018764:	18c00404 	addi	r3,r3,16
 8018768:	18c00037 	ldwio	r3,0(r3)
 801876c:	18e00034 	orhi	r3,r3,32768
 8018770:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8018774:	e0bffb17 	ldw	r2,-20(fp)
 8018778:	10800317 	ldw	r2,12(r2)
 801877c:	10800404 	addi	r2,r2,16
 8018780:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 8018784:	e0bffb17 	ldw	r2,-20(fp)
 8018788:	10800917 	ldw	r2,36(r2)
 801878c:	10001226 	beq	r2,zero,80187d8 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018790:	0005303a 	rdctl	r2,status
 8018794:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018798:	e0fffd17 	ldw	r3,-12(fp)
 801879c:	00bfff84 	movi	r2,-2
 80187a0:	1884703a 	and	r2,r3,r2
 80187a4:	1001703a 	wrctl	status,r2
  
  return context;
 80187a8:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 80187ac:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 80187b0:	e0bffb17 	ldw	r2,-20(fp)
 80187b4:	10800917 	ldw	r2,36(r2)
 80187b8:	e0fffb17 	ldw	r3,-20(fp)
 80187bc:	18c00a17 	ldw	r3,40(r3)
 80187c0:	1809883a 	mov	r4,r3
 80187c4:	103ee83a 	callr	r2
 80187c8:	e0bffc17 	ldw	r2,-16(fp)
 80187cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80187d0:	e0bffe17 	ldw	r2,-8(fp)
 80187d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 80187d8:	0001883a 	nop
 80187dc:	e037883a 	mov	sp,fp
 80187e0:	dfc00117 	ldw	ra,4(sp)
 80187e4:	df000017 	ldw	fp,0(sp)
 80187e8:	dec00204 	addi	sp,sp,8
 80187ec:	f800283a 	ret

080187f0 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 80187f0:	defffa04 	addi	sp,sp,-24
 80187f4:	dfc00515 	stw	ra,20(sp)
 80187f8:	df000415 	stw	fp,16(sp)
 80187fc:	df000404 	addi	fp,sp,16
 8018800:	e13ffd15 	stw	r4,-12(fp)
 8018804:	e17ffe15 	stw	r5,-8(fp)
 8018808:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801880c:	e0bffd17 	ldw	r2,-12(fp)
 8018810:	10800317 	ldw	r2,12(r2)
 8018814:	10800404 	addi	r2,r2,16
 8018818:	00c00074 	movhi	r3,1
 801881c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8018820:	e0bffd17 	ldw	r2,-12(fp)
 8018824:	10800317 	ldw	r2,12(r2)
 8018828:	10800404 	addi	r2,r2,16
 801882c:	00c00074 	movhi	r3,1
 8018830:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 8018834:	e0bffd17 	ldw	r2,-12(fp)
 8018838:	10800317 	ldw	r2,12(r2)
 801883c:	10800404 	addi	r2,r2,16
 8018840:	0007883a 	mov	r3,zero
 8018844:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8018848:	e0bffd17 	ldw	r2,-12(fp)
 801884c:	10800317 	ldw	r2,12(r2)
 8018850:	00c03fc4 	movi	r3,255
 8018854:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 8018858:	d1601104 	addi	r5,gp,-32700
 801885c:	e13ffd17 	ldw	r4,-12(fp)
 8018860:	80194140 	call	8019414 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 8018864:	d8000015 	stw	zero,0(sp)
 8018868:	e1fffd17 	ldw	r7,-12(fp)
 801886c:	018200b4 	movhi	r6,2050
 8018870:	31a1cd04 	addi	r6,r6,-30924
 8018874:	e17fff17 	ldw	r5,-4(fp)
 8018878:	e13ffe17 	ldw	r4,-8(fp)
 801887c:	80161540 	call	8016154 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 8018880:	0001883a 	nop
 8018884:	e037883a 	mov	sp,fp
 8018888:	dfc00117 	ldw	ra,4(sp)
 801888c:	df000017 	ldw	fp,0(sp)
 8018890:	dec00204 	addi	sp,sp,8
 8018894:	f800283a 	ret

08018898 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8018898:	defffa04 	addi	sp,sp,-24
 801889c:	dfc00515 	stw	ra,20(sp)
 80188a0:	df000415 	stw	fp,16(sp)
 80188a4:	df000404 	addi	fp,sp,16
 80188a8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80188ac:	0007883a 	mov	r3,zero
 80188b0:	e0bfff17 	ldw	r2,-4(fp)
 80188b4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80188b8:	e0bfff17 	ldw	r2,-4(fp)
 80188bc:	10800104 	addi	r2,r2,4
 80188c0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80188c4:	0005303a 	rdctl	r2,status
 80188c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80188cc:	e0fffd17 	ldw	r3,-12(fp)
 80188d0:	00bfff84 	movi	r2,-2
 80188d4:	1884703a 	and	r2,r3,r2
 80188d8:	1001703a 	wrctl	status,r2
  
  return context;
 80188dc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80188e0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80188e4:	80199f00 	call	80199f0 <alt_tick>
 80188e8:	e0bffc17 	ldw	r2,-16(fp)
 80188ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80188f0:	e0bffe17 	ldw	r2,-8(fp)
 80188f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80188f8:	0001883a 	nop
 80188fc:	e037883a 	mov	sp,fp
 8018900:	dfc00117 	ldw	ra,4(sp)
 8018904:	df000017 	ldw	fp,0(sp)
 8018908:	dec00204 	addi	sp,sp,8
 801890c:	f800283a 	ret

08018910 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8018910:	defff804 	addi	sp,sp,-32
 8018914:	dfc00715 	stw	ra,28(sp)
 8018918:	df000615 	stw	fp,24(sp)
 801891c:	df000604 	addi	fp,sp,24
 8018920:	e13ffc15 	stw	r4,-16(fp)
 8018924:	e17ffd15 	stw	r5,-12(fp)
 8018928:	e1bffe15 	stw	r6,-8(fp)
 801892c:	e1ffff15 	stw	r7,-4(fp)
 8018930:	e0bfff17 	ldw	r2,-4(fp)
 8018934:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8018938:	d0a8ba17 	ldw	r2,-23832(gp)
 801893c:	1000021e 	bne	r2,zero,8018948 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8018940:	e0bffb17 	ldw	r2,-20(fp)
 8018944:	d0a8ba15 	stw	r2,-23832(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8018948:	e0bffc17 	ldw	r2,-16(fp)
 801894c:	10800104 	addi	r2,r2,4
 8018950:	00c001c4 	movi	r3,7
 8018954:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8018958:	d8000015 	stw	zero,0(sp)
 801895c:	e1fffc17 	ldw	r7,-16(fp)
 8018960:	018200b4 	movhi	r6,2050
 8018964:	31a22604 	addi	r6,r6,-30568
 8018968:	e17ffe17 	ldw	r5,-8(fp)
 801896c:	e13ffd17 	ldw	r4,-12(fp)
 8018970:	80161540 	call	8016154 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8018974:	0001883a 	nop
 8018978:	e037883a 	mov	sp,fp
 801897c:	dfc00117 	ldw	ra,4(sp)
 8018980:	df000017 	ldw	fp,0(sp)
 8018984:	dec00204 	addi	sp,sp,8
 8018988:	f800283a 	ret

0801898c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801898c:	defffa04 	addi	sp,sp,-24
 8018990:	dfc00515 	stw	ra,20(sp)
 8018994:	df000415 	stw	fp,16(sp)
 8018998:	df000404 	addi	fp,sp,16
 801899c:	e13ffd15 	stw	r4,-12(fp)
 80189a0:	e17ffe15 	stw	r5,-8(fp)
 80189a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80189a8:	e0bffd17 	ldw	r2,-12(fp)
 80189ac:	10800017 	ldw	r2,0(r2)
 80189b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 80189b4:	e0bffc17 	ldw	r2,-16(fp)
 80189b8:	10c00a04 	addi	r3,r2,40
 80189bc:	e0bffd17 	ldw	r2,-12(fp)
 80189c0:	10800217 	ldw	r2,8(r2)
 80189c4:	100f883a 	mov	r7,r2
 80189c8:	e1bfff17 	ldw	r6,-4(fp)
 80189cc:	e17ffe17 	ldw	r5,-8(fp)
 80189d0:	1809883a 	mov	r4,r3
 80189d4:	8018ea00 	call	8018ea0 <altera_avalon_uart_read>
      fd->fd_flags);
}
 80189d8:	e037883a 	mov	sp,fp
 80189dc:	dfc00117 	ldw	ra,4(sp)
 80189e0:	df000017 	ldw	fp,0(sp)
 80189e4:	dec00204 	addi	sp,sp,8
 80189e8:	f800283a 	ret

080189ec <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80189ec:	defffa04 	addi	sp,sp,-24
 80189f0:	dfc00515 	stw	ra,20(sp)
 80189f4:	df000415 	stw	fp,16(sp)
 80189f8:	df000404 	addi	fp,sp,16
 80189fc:	e13ffd15 	stw	r4,-12(fp)
 8018a00:	e17ffe15 	stw	r5,-8(fp)
 8018a04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8018a08:	e0bffd17 	ldw	r2,-12(fp)
 8018a0c:	10800017 	ldw	r2,0(r2)
 8018a10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 8018a14:	e0bffc17 	ldw	r2,-16(fp)
 8018a18:	10c00a04 	addi	r3,r2,40
 8018a1c:	e0bffd17 	ldw	r2,-12(fp)
 8018a20:	10800217 	ldw	r2,8(r2)
 8018a24:	100f883a 	mov	r7,r2
 8018a28:	e1bfff17 	ldw	r6,-4(fp)
 8018a2c:	e17ffe17 	ldw	r5,-8(fp)
 8018a30:	1809883a 	mov	r4,r3
 8018a34:	80190b80 	call	80190b8 <altera_avalon_uart_write>
      fd->fd_flags);
}
 8018a38:	e037883a 	mov	sp,fp
 8018a3c:	dfc00117 	ldw	ra,4(sp)
 8018a40:	df000017 	ldw	fp,0(sp)
 8018a44:	dec00204 	addi	sp,sp,8
 8018a48:	f800283a 	ret

08018a4c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 8018a4c:	defffc04 	addi	sp,sp,-16
 8018a50:	dfc00315 	stw	ra,12(sp)
 8018a54:	df000215 	stw	fp,8(sp)
 8018a58:	df000204 	addi	fp,sp,8
 8018a5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8018a60:	e0bfff17 	ldw	r2,-4(fp)
 8018a64:	10800017 	ldw	r2,0(r2)
 8018a68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 8018a6c:	e0bffe17 	ldw	r2,-8(fp)
 8018a70:	10c00a04 	addi	r3,r2,40
 8018a74:	e0bfff17 	ldw	r2,-4(fp)
 8018a78:	10800217 	ldw	r2,8(r2)
 8018a7c:	100b883a 	mov	r5,r2
 8018a80:	1809883a 	mov	r4,r3
 8018a84:	8018e100 	call	8018e10 <altera_avalon_uart_close>
}
 8018a88:	e037883a 	mov	sp,fp
 8018a8c:	dfc00117 	ldw	ra,4(sp)
 8018a90:	df000017 	ldw	fp,0(sp)
 8018a94:	dec00204 	addi	sp,sp,8
 8018a98:	f800283a 	ret

08018a9c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 8018a9c:	defff804 	addi	sp,sp,-32
 8018aa0:	dfc00715 	stw	ra,28(sp)
 8018aa4:	df000615 	stw	fp,24(sp)
 8018aa8:	df000604 	addi	fp,sp,24
 8018aac:	e13ffd15 	stw	r4,-12(fp)
 8018ab0:	e17ffe15 	stw	r5,-8(fp)
 8018ab4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 8018ab8:	e0bffd17 	ldw	r2,-12(fp)
 8018abc:	10800017 	ldw	r2,0(r2)
 8018ac0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8018ac4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8018ac8:	1000041e 	bne	r2,zero,8018adc <altera_avalon_uart_init+0x40>
 8018acc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8018ad0:	1000021e 	bne	r2,zero,8018adc <altera_avalon_uart_init+0x40>
 8018ad4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 8018ad8:	10000226 	beq	r2,zero,8018ae4 <altera_avalon_uart_init+0x48>
 8018adc:	00800044 	movi	r2,1
 8018ae0:	00000106 	br	8018ae8 <altera_avalon_uart_init+0x4c>
 8018ae4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 8018ae8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 8018aec:	e0bffc17 	ldw	r2,-16(fp)
 8018af0:	10000f1e 	bne	r2,zero,8018b30 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 8018af4:	e0bffd17 	ldw	r2,-12(fp)
 8018af8:	00c32004 	movi	r3,3200
 8018afc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 8018b00:	e0bffb17 	ldw	r2,-20(fp)
 8018b04:	10800304 	addi	r2,r2,12
 8018b08:	e0fffd17 	ldw	r3,-12(fp)
 8018b0c:	18c00117 	ldw	r3,4(r3)
 8018b10:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 8018b14:	d8000015 	stw	zero,0(sp)
 8018b18:	e1fffd17 	ldw	r7,-12(fp)
 8018b1c:	018200b4 	movhi	r6,2050
 8018b20:	31a2d204 	addi	r6,r6,-29880
 8018b24:	e17fff17 	ldw	r5,-4(fp)
 8018b28:	e13ffe17 	ldw	r4,-8(fp)
 8018b2c:	80161540 	call	8016154 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8018b30:	0001883a 	nop
 8018b34:	e037883a 	mov	sp,fp
 8018b38:	dfc00117 	ldw	ra,4(sp)
 8018b3c:	df000017 	ldw	fp,0(sp)
 8018b40:	dec00204 	addi	sp,sp,8
 8018b44:	f800283a 	ret

08018b48 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 8018b48:	defffa04 	addi	sp,sp,-24
 8018b4c:	dfc00515 	stw	ra,20(sp)
 8018b50:	df000415 	stw	fp,16(sp)
 8018b54:	df000404 	addi	fp,sp,16
 8018b58:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 8018b5c:	e0bfff17 	ldw	r2,-4(fp)
 8018b60:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 8018b64:	e0bffc17 	ldw	r2,-16(fp)
 8018b68:	10800017 	ldw	r2,0(r2)
 8018b6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 8018b70:	e0bffd17 	ldw	r2,-12(fp)
 8018b74:	10800204 	addi	r2,r2,8
 8018b78:	10800037 	ldwio	r2,0(r2)
 8018b7c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 8018b80:	e0bffd17 	ldw	r2,-12(fp)
 8018b84:	10800204 	addi	r2,r2,8
 8018b88:	0007883a 	mov	r3,zero
 8018b8c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 8018b90:	e0bffd17 	ldw	r2,-12(fp)
 8018b94:	10800204 	addi	r2,r2,8
 8018b98:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 8018b9c:	e0bffe17 	ldw	r2,-8(fp)
 8018ba0:	1080200c 	andi	r2,r2,128
 8018ba4:	10000326 	beq	r2,zero,8018bb4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 8018ba8:	e17ffe17 	ldw	r5,-8(fp)
 8018bac:	e13ffc17 	ldw	r4,-16(fp)
 8018bb0:	8018be40 	call	8018be4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 8018bb4:	e0bffe17 	ldw	r2,-8(fp)
 8018bb8:	1081100c 	andi	r2,r2,1088
 8018bbc:	10000326 	beq	r2,zero,8018bcc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 8018bc0:	e17ffe17 	ldw	r5,-8(fp)
 8018bc4:	e13ffc17 	ldw	r4,-16(fp)
 8018bc8:	8018cc80 	call	8018cc8 <altera_avalon_uart_txirq>
  }
  

}
 8018bcc:	0001883a 	nop
 8018bd0:	e037883a 	mov	sp,fp
 8018bd4:	dfc00117 	ldw	ra,4(sp)
 8018bd8:	df000017 	ldw	fp,0(sp)
 8018bdc:	dec00204 	addi	sp,sp,8
 8018be0:	f800283a 	ret

08018be4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8018be4:	defffc04 	addi	sp,sp,-16
 8018be8:	df000315 	stw	fp,12(sp)
 8018bec:	df000304 	addi	fp,sp,12
 8018bf0:	e13ffe15 	stw	r4,-8(fp)
 8018bf4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 8018bf8:	e0bfff17 	ldw	r2,-4(fp)
 8018bfc:	108000cc 	andi	r2,r2,3
 8018c00:	10002c1e 	bne	r2,zero,8018cb4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 8018c04:	e0bffe17 	ldw	r2,-8(fp)
 8018c08:	10800317 	ldw	r2,12(r2)
 8018c0c:	e0bffe17 	ldw	r2,-8(fp)
 8018c10:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8018c14:	e0bffe17 	ldw	r2,-8(fp)
 8018c18:	10800317 	ldw	r2,12(r2)
 8018c1c:	10800044 	addi	r2,r2,1
 8018c20:	10800fcc 	andi	r2,r2,63
 8018c24:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 8018c28:	e0bffe17 	ldw	r2,-8(fp)
 8018c2c:	10800317 	ldw	r2,12(r2)
 8018c30:	e0fffe17 	ldw	r3,-8(fp)
 8018c34:	18c00017 	ldw	r3,0(r3)
 8018c38:	18c00037 	ldwio	r3,0(r3)
 8018c3c:	1809883a 	mov	r4,r3
 8018c40:	e0fffe17 	ldw	r3,-8(fp)
 8018c44:	1885883a 	add	r2,r3,r2
 8018c48:	10800704 	addi	r2,r2,28
 8018c4c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 8018c50:	e0bffe17 	ldw	r2,-8(fp)
 8018c54:	e0fffd17 	ldw	r3,-12(fp)
 8018c58:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8018c5c:	e0bffe17 	ldw	r2,-8(fp)
 8018c60:	10800317 	ldw	r2,12(r2)
 8018c64:	10800044 	addi	r2,r2,1
 8018c68:	10800fcc 	andi	r2,r2,63
 8018c6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 8018c70:	e0bffe17 	ldw	r2,-8(fp)
 8018c74:	10c00217 	ldw	r3,8(r2)
 8018c78:	e0bffd17 	ldw	r2,-12(fp)
 8018c7c:	18800e1e 	bne	r3,r2,8018cb8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8018c80:	e0bffe17 	ldw	r2,-8(fp)
 8018c84:	10c00117 	ldw	r3,4(r2)
 8018c88:	00bfdfc4 	movi	r2,-129
 8018c8c:	1886703a 	and	r3,r3,r2
 8018c90:	e0bffe17 	ldw	r2,-8(fp)
 8018c94:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 8018c98:	e0bffe17 	ldw	r2,-8(fp)
 8018c9c:	10800017 	ldw	r2,0(r2)
 8018ca0:	10800304 	addi	r2,r2,12
 8018ca4:	e0fffe17 	ldw	r3,-8(fp)
 8018ca8:	18c00117 	ldw	r3,4(r3)
 8018cac:	10c00035 	stwio	r3,0(r2)
 8018cb0:	00000106 	br	8018cb8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 8018cb4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 8018cb8:	e037883a 	mov	sp,fp
 8018cbc:	df000017 	ldw	fp,0(sp)
 8018cc0:	dec00104 	addi	sp,sp,4
 8018cc4:	f800283a 	ret

08018cc8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 8018cc8:	defffb04 	addi	sp,sp,-20
 8018ccc:	df000415 	stw	fp,16(sp)
 8018cd0:	df000404 	addi	fp,sp,16
 8018cd4:	e13ffc15 	stw	r4,-16(fp)
 8018cd8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 8018cdc:	e0bffc17 	ldw	r2,-16(fp)
 8018ce0:	10c00417 	ldw	r3,16(r2)
 8018ce4:	e0bffc17 	ldw	r2,-16(fp)
 8018ce8:	10800517 	ldw	r2,20(r2)
 8018cec:	18803226 	beq	r3,r2,8018db8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8018cf0:	e0bffc17 	ldw	r2,-16(fp)
 8018cf4:	10800617 	ldw	r2,24(r2)
 8018cf8:	1080008c 	andi	r2,r2,2
 8018cfc:	10000326 	beq	r2,zero,8018d0c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8018d00:	e0bffd17 	ldw	r2,-12(fp)
 8018d04:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 8018d08:	10001d26 	beq	r2,zero,8018d80 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 8018d0c:	e0bffc17 	ldw	r2,-16(fp)
 8018d10:	10800417 	ldw	r2,16(r2)
 8018d14:	e0bffc17 	ldw	r2,-16(fp)
 8018d18:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 8018d1c:	e0bffc17 	ldw	r2,-16(fp)
 8018d20:	10800017 	ldw	r2,0(r2)
 8018d24:	10800104 	addi	r2,r2,4
 8018d28:	e0fffc17 	ldw	r3,-16(fp)
 8018d2c:	18c00417 	ldw	r3,16(r3)
 8018d30:	e13ffc17 	ldw	r4,-16(fp)
 8018d34:	20c7883a 	add	r3,r4,r3
 8018d38:	18c01704 	addi	r3,r3,92
 8018d3c:	18c00003 	ldbu	r3,0(r3)
 8018d40:	18c03fcc 	andi	r3,r3,255
 8018d44:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 8018d48:	e0bffc17 	ldw	r2,-16(fp)
 8018d4c:	10800417 	ldw	r2,16(r2)
 8018d50:	10800044 	addi	r2,r2,1
 8018d54:	e0fffc17 	ldw	r3,-16(fp)
 8018d58:	18800415 	stw	r2,16(r3)
 8018d5c:	10c00fcc 	andi	r3,r2,63
 8018d60:	e0bffc17 	ldw	r2,-16(fp)
 8018d64:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8018d68:	e0bffc17 	ldw	r2,-16(fp)
 8018d6c:	10800117 	ldw	r2,4(r2)
 8018d70:	10c01014 	ori	r3,r2,64
 8018d74:	e0bffc17 	ldw	r2,-16(fp)
 8018d78:	10c00115 	stw	r3,4(r2)
 8018d7c:	00000e06 	br	8018db8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 8018d80:	e0bffc17 	ldw	r2,-16(fp)
 8018d84:	10800017 	ldw	r2,0(r2)
 8018d88:	10800204 	addi	r2,r2,8
 8018d8c:	10800037 	ldwio	r2,0(r2)
 8018d90:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8018d94:	e0bffd17 	ldw	r2,-12(fp)
 8018d98:	1082000c 	andi	r2,r2,2048
 8018d9c:	1000061e 	bne	r2,zero,8018db8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8018da0:	e0bffc17 	ldw	r2,-16(fp)
 8018da4:	10c00117 	ldw	r3,4(r2)
 8018da8:	00bfefc4 	movi	r2,-65
 8018dac:	1886703a 	and	r3,r3,r2
 8018db0:	e0bffc17 	ldw	r2,-16(fp)
 8018db4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 8018db8:	e0bffc17 	ldw	r2,-16(fp)
 8018dbc:	10c00417 	ldw	r3,16(r2)
 8018dc0:	e0bffc17 	ldw	r2,-16(fp)
 8018dc4:	10800517 	ldw	r2,20(r2)
 8018dc8:	1880061e 	bne	r3,r2,8018de4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8018dcc:	e0bffc17 	ldw	r2,-16(fp)
 8018dd0:	10c00117 	ldw	r3,4(r2)
 8018dd4:	00beefc4 	movi	r2,-1089
 8018dd8:	1886703a 	and	r3,r3,r2
 8018ddc:	e0bffc17 	ldw	r2,-16(fp)
 8018de0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018de4:	e0bffc17 	ldw	r2,-16(fp)
 8018de8:	10800017 	ldw	r2,0(r2)
 8018dec:	10800304 	addi	r2,r2,12
 8018df0:	e0fffc17 	ldw	r3,-16(fp)
 8018df4:	18c00117 	ldw	r3,4(r3)
 8018df8:	10c00035 	stwio	r3,0(r2)
}
 8018dfc:	0001883a 	nop
 8018e00:	e037883a 	mov	sp,fp
 8018e04:	df000017 	ldw	fp,0(sp)
 8018e08:	dec00104 	addi	sp,sp,4
 8018e0c:	f800283a 	ret

08018e10 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 8018e10:	defffd04 	addi	sp,sp,-12
 8018e14:	df000215 	stw	fp,8(sp)
 8018e18:	df000204 	addi	fp,sp,8
 8018e1c:	e13ffe15 	stw	r4,-8(fp)
 8018e20:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8018e24:	00000506 	br	8018e3c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8018e28:	e0bfff17 	ldw	r2,-4(fp)
 8018e2c:	1090000c 	andi	r2,r2,16384
 8018e30:	10000226 	beq	r2,zero,8018e3c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8018e34:	00bffd44 	movi	r2,-11
 8018e38:	00000606 	br	8018e54 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8018e3c:	e0bffe17 	ldw	r2,-8(fp)
 8018e40:	10c00417 	ldw	r3,16(r2)
 8018e44:	e0bffe17 	ldw	r2,-8(fp)
 8018e48:	10800517 	ldw	r2,20(r2)
 8018e4c:	18bff61e 	bne	r3,r2,8018e28 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8018e50:	0005883a 	mov	r2,zero
}
 8018e54:	e037883a 	mov	sp,fp
 8018e58:	df000017 	ldw	fp,0(sp)
 8018e5c:	dec00104 	addi	sp,sp,4
 8018e60:	f800283a 	ret

08018e64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018e64:	defffe04 	addi	sp,sp,-8
 8018e68:	dfc00115 	stw	ra,4(sp)
 8018e6c:	df000015 	stw	fp,0(sp)
 8018e70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018e74:	d0a00e17 	ldw	r2,-32712(gp)
 8018e78:	10000326 	beq	r2,zero,8018e88 <alt_get_errno+0x24>
 8018e7c:	d0a00e17 	ldw	r2,-32712(gp)
 8018e80:	103ee83a 	callr	r2
 8018e84:	00000106 	br	8018e8c <alt_get_errno+0x28>
 8018e88:	d0a8af04 	addi	r2,gp,-23876
}
 8018e8c:	e037883a 	mov	sp,fp
 8018e90:	dfc00117 	ldw	ra,4(sp)
 8018e94:	df000017 	ldw	fp,0(sp)
 8018e98:	dec00204 	addi	sp,sp,8
 8018e9c:	f800283a 	ret

08018ea0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 8018ea0:	defff204 	addi	sp,sp,-56
 8018ea4:	dfc00d15 	stw	ra,52(sp)
 8018ea8:	df000c15 	stw	fp,48(sp)
 8018eac:	df000c04 	addi	fp,sp,48
 8018eb0:	e13ffc15 	stw	r4,-16(fp)
 8018eb4:	e17ffd15 	stw	r5,-12(fp)
 8018eb8:	e1bffe15 	stw	r6,-8(fp)
 8018ebc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 8018ec0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 8018ec4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 8018ec8:	e0bfff17 	ldw	r2,-4(fp)
 8018ecc:	1090000c 	andi	r2,r2,16384
 8018ed0:	1005003a 	cmpeq	r2,r2,zero
 8018ed4:	10803fcc 	andi	r2,r2,255
 8018ed8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8018edc:	00001306 	br	8018f2c <altera_avalon_uart_read+0x8c>
    {
      count++;
 8018ee0:	e0bff517 	ldw	r2,-44(fp)
 8018ee4:	10800044 	addi	r2,r2,1
 8018ee8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 8018eec:	e0bffd17 	ldw	r2,-12(fp)
 8018ef0:	10c00044 	addi	r3,r2,1
 8018ef4:	e0fffd15 	stw	r3,-12(fp)
 8018ef8:	e0fffc17 	ldw	r3,-16(fp)
 8018efc:	18c00217 	ldw	r3,8(r3)
 8018f00:	e13ffc17 	ldw	r4,-16(fp)
 8018f04:	20c7883a 	add	r3,r4,r3
 8018f08:	18c00704 	addi	r3,r3,28
 8018f0c:	18c00003 	ldbu	r3,0(r3)
 8018f10:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 8018f14:	e0bffc17 	ldw	r2,-16(fp)
 8018f18:	10800217 	ldw	r2,8(r2)
 8018f1c:	10800044 	addi	r2,r2,1
 8018f20:	10c00fcc 	andi	r3,r2,63
 8018f24:	e0bffc17 	ldw	r2,-16(fp)
 8018f28:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8018f2c:	e0fff517 	ldw	r3,-44(fp)
 8018f30:	e0bffe17 	ldw	r2,-8(fp)
 8018f34:	1880050e 	bge	r3,r2,8018f4c <altera_avalon_uart_read+0xac>
 8018f38:	e0bffc17 	ldw	r2,-16(fp)
 8018f3c:	10c00217 	ldw	r3,8(r2)
 8018f40:	e0bffc17 	ldw	r2,-16(fp)
 8018f44:	10800317 	ldw	r2,12(r2)
 8018f48:	18bfe51e 	bne	r3,r2,8018ee0 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 8018f4c:	e0bff517 	ldw	r2,-44(fp)
 8018f50:	1000251e 	bne	r2,zero,8018fe8 <altera_avalon_uart_read+0x148>
 8018f54:	e0bffc17 	ldw	r2,-16(fp)
 8018f58:	10c00217 	ldw	r3,8(r2)
 8018f5c:	e0bffc17 	ldw	r2,-16(fp)
 8018f60:	10800317 	ldw	r2,12(r2)
 8018f64:	1880201e 	bne	r3,r2,8018fe8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 8018f68:	e0bff617 	ldw	r2,-40(fp)
 8018f6c:	1000071e 	bne	r2,zero,8018f8c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 8018f70:	8018e640 	call	8018e64 <alt_get_errno>
 8018f74:	1007883a 	mov	r3,r2
 8018f78:	008002c4 	movi	r2,11
 8018f7c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 8018f80:	00800044 	movi	r2,1
 8018f84:	e0bff405 	stb	r2,-48(fp)
        break;
 8018f88:	00001b06 	br	8018ff8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018f8c:	0005303a 	rdctl	r2,status
 8018f90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018f94:	e0fff917 	ldw	r3,-28(fp)
 8018f98:	00bfff84 	movi	r2,-2
 8018f9c:	1884703a 	and	r2,r3,r2
 8018fa0:	1001703a 	wrctl	status,r2
  
  return context;
 8018fa4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 8018fa8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8018fac:	e0bffc17 	ldw	r2,-16(fp)
 8018fb0:	10800117 	ldw	r2,4(r2)
 8018fb4:	10c02014 	ori	r3,r2,128
 8018fb8:	e0bffc17 	ldw	r2,-16(fp)
 8018fbc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8018fc0:	e0bffc17 	ldw	r2,-16(fp)
 8018fc4:	10800017 	ldw	r2,0(r2)
 8018fc8:	10800304 	addi	r2,r2,12
 8018fcc:	e0fffc17 	ldw	r3,-16(fp)
 8018fd0:	18c00117 	ldw	r3,4(r3)
 8018fd4:	10c00035 	stwio	r3,0(r2)
 8018fd8:	e0bff817 	ldw	r2,-32(fp)
 8018fdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018fe0:	e0bffa17 	ldw	r2,-24(fp)
 8018fe4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 8018fe8:	e0bff517 	ldw	r2,-44(fp)
 8018fec:	1000021e 	bne	r2,zero,8018ff8 <altera_avalon_uart_read+0x158>
 8018ff0:	e0bffe17 	ldw	r2,-8(fp)
 8018ff4:	103fcd1e 	bne	r2,zero,8018f2c <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018ff8:	0005303a 	rdctl	r2,status
 8018ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019000:	e0fffb17 	ldw	r3,-20(fp)
 8019004:	00bfff84 	movi	r2,-2
 8019008:	1884703a 	and	r2,r3,r2
 801900c:	1001703a 	wrctl	status,r2
  
  return context;
 8019010:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 8019014:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8019018:	e0bffc17 	ldw	r2,-16(fp)
 801901c:	10800117 	ldw	r2,4(r2)
 8019020:	10c02014 	ori	r3,r2,128
 8019024:	e0bffc17 	ldw	r2,-16(fp)
 8019028:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 801902c:	e0bffc17 	ldw	r2,-16(fp)
 8019030:	10800017 	ldw	r2,0(r2)
 8019034:	10800304 	addi	r2,r2,12
 8019038:	e0fffc17 	ldw	r3,-16(fp)
 801903c:	18c00117 	ldw	r3,4(r3)
 8019040:	10c00035 	stwio	r3,0(r2)
 8019044:	e0bff817 	ldw	r2,-32(fp)
 8019048:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801904c:	e0bff717 	ldw	r2,-36(fp)
 8019050:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8019054:	e0bff403 	ldbu	r2,-48(fp)
 8019058:	10000226 	beq	r2,zero,8019064 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 801905c:	00bffd44 	movi	r2,-11
 8019060:	00000106 	br	8019068 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8019064:	e0bff517 	ldw	r2,-44(fp)
  }
}
 8019068:	e037883a 	mov	sp,fp
 801906c:	dfc00117 	ldw	ra,4(sp)
 8019070:	df000017 	ldw	fp,0(sp)
 8019074:	dec00204 	addi	sp,sp,8
 8019078:	f800283a 	ret

0801907c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801907c:	defffe04 	addi	sp,sp,-8
 8019080:	dfc00115 	stw	ra,4(sp)
 8019084:	df000015 	stw	fp,0(sp)
 8019088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801908c:	d0a00e17 	ldw	r2,-32712(gp)
 8019090:	10000326 	beq	r2,zero,80190a0 <alt_get_errno+0x24>
 8019094:	d0a00e17 	ldw	r2,-32712(gp)
 8019098:	103ee83a 	callr	r2
 801909c:	00000106 	br	80190a4 <alt_get_errno+0x28>
 80190a0:	d0a8af04 	addi	r2,gp,-23876
}
 80190a4:	e037883a 	mov	sp,fp
 80190a8:	dfc00117 	ldw	ra,4(sp)
 80190ac:	df000017 	ldw	fp,0(sp)
 80190b0:	dec00204 	addi	sp,sp,8
 80190b4:	f800283a 	ret

080190b8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 80190b8:	defff204 	addi	sp,sp,-56
 80190bc:	dfc00d15 	stw	ra,52(sp)
 80190c0:	df000c15 	stw	fp,48(sp)
 80190c4:	df000c04 	addi	fp,sp,48
 80190c8:	e13ffc15 	stw	r4,-16(fp)
 80190cc:	e17ffd15 	stw	r5,-12(fp)
 80190d0:	e1bffe15 	stw	r6,-8(fp)
 80190d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 80190d8:	e0bffe17 	ldw	r2,-8(fp)
 80190dc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 80190e0:	e0bfff17 	ldw	r2,-4(fp)
 80190e4:	1090000c 	andi	r2,r2,16384
 80190e8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 80190ec:	00003c06 	br	80191e0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 80190f0:	e0bffc17 	ldw	r2,-16(fp)
 80190f4:	10800517 	ldw	r2,20(r2)
 80190f8:	10800044 	addi	r2,r2,1
 80190fc:	10800fcc 	andi	r2,r2,63
 8019100:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 8019104:	e0bffc17 	ldw	r2,-16(fp)
 8019108:	10c00417 	ldw	r3,16(r2)
 801910c:	e0bff717 	ldw	r2,-36(fp)
 8019110:	1880221e 	bne	r3,r2,801919c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 8019114:	e0bff517 	ldw	r2,-44(fp)
 8019118:	10000526 	beq	r2,zero,8019130 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 801911c:	801907c0 	call	801907c <alt_get_errno>
 8019120:	1007883a 	mov	r3,r2
 8019124:	008002c4 	movi	r2,11
 8019128:	18800015 	stw	r2,0(r3)
        break;
 801912c:	00002e06 	br	80191e8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019130:	0005303a 	rdctl	r2,status
 8019134:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019138:	e0fff917 	ldw	r3,-28(fp)
 801913c:	00bfff84 	movi	r2,-2
 8019140:	1884703a 	and	r2,r3,r2
 8019144:	1001703a 	wrctl	status,r2
  
  return context;
 8019148:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 801914c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8019150:	e0bffc17 	ldw	r2,-16(fp)
 8019154:	10800117 	ldw	r2,4(r2)
 8019158:	10c11014 	ori	r3,r2,1088
 801915c:	e0bffc17 	ldw	r2,-16(fp)
 8019160:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8019164:	e0bffc17 	ldw	r2,-16(fp)
 8019168:	10800017 	ldw	r2,0(r2)
 801916c:	10800304 	addi	r2,r2,12
 8019170:	e0fffc17 	ldw	r3,-16(fp)
 8019174:	18c00117 	ldw	r3,4(r3)
 8019178:	10c00035 	stwio	r3,0(r2)
 801917c:	e0bff817 	ldw	r2,-32(fp)
 8019180:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019184:	e0bff617 	ldw	r2,-40(fp)
 8019188:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 801918c:	e0bffc17 	ldw	r2,-16(fp)
 8019190:	10c00417 	ldw	r3,16(r2)
 8019194:	e0bff717 	ldw	r2,-36(fp)
 8019198:	18bffc26 	beq	r3,r2,801918c <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 801919c:	e0bff417 	ldw	r2,-48(fp)
 80191a0:	10bfffc4 	addi	r2,r2,-1
 80191a4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 80191a8:	e0bffc17 	ldw	r2,-16(fp)
 80191ac:	10c00517 	ldw	r3,20(r2)
 80191b0:	e0bffd17 	ldw	r2,-12(fp)
 80191b4:	11000044 	addi	r4,r2,1
 80191b8:	e13ffd15 	stw	r4,-12(fp)
 80191bc:	10800003 	ldbu	r2,0(r2)
 80191c0:	1009883a 	mov	r4,r2
 80191c4:	e0bffc17 	ldw	r2,-16(fp)
 80191c8:	10c5883a 	add	r2,r2,r3
 80191cc:	10801704 	addi	r2,r2,92
 80191d0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 80191d4:	e0bffc17 	ldw	r2,-16(fp)
 80191d8:	e0fff717 	ldw	r3,-36(fp)
 80191dc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 80191e0:	e0bff417 	ldw	r2,-48(fp)
 80191e4:	103fc21e 	bne	r2,zero,80190f0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80191e8:	0005303a 	rdctl	r2,status
 80191ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80191f0:	e0fffb17 	ldw	r3,-20(fp)
 80191f4:	00bfff84 	movi	r2,-2
 80191f8:	1884703a 	and	r2,r3,r2
 80191fc:	1001703a 	wrctl	status,r2
  
  return context;
 8019200:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 8019204:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8019208:	e0bffc17 	ldw	r2,-16(fp)
 801920c:	10800117 	ldw	r2,4(r2)
 8019210:	10c11014 	ori	r3,r2,1088
 8019214:	e0bffc17 	ldw	r2,-16(fp)
 8019218:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 801921c:	e0bffc17 	ldw	r2,-16(fp)
 8019220:	10800017 	ldw	r2,0(r2)
 8019224:	10800304 	addi	r2,r2,12
 8019228:	e0fffc17 	ldw	r3,-16(fp)
 801922c:	18c00117 	ldw	r3,4(r3)
 8019230:	10c00035 	stwio	r3,0(r2)
 8019234:	e0bff817 	ldw	r2,-32(fp)
 8019238:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801923c:	e0bffa17 	ldw	r2,-24(fp)
 8019240:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 8019244:	e0fffe17 	ldw	r3,-8(fp)
 8019248:	e0bff417 	ldw	r2,-48(fp)
 801924c:	1885c83a 	sub	r2,r3,r2
}
 8019250:	e037883a 	mov	sp,fp
 8019254:	dfc00117 	ldw	ra,4(sp)
 8019258:	df000017 	ldw	fp,0(sp)
 801925c:	dec00204 	addi	sp,sp,8
 8019260:	f800283a 	ret

08019264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8019264:	defff504 	addi	sp,sp,-44
 8019268:	df000a15 	stw	fp,40(sp)
 801926c:	df000a04 	addi	fp,sp,40
 8019270:	e13ffc15 	stw	r4,-16(fp)
 8019274:	e17ffd15 	stw	r5,-12(fp)
 8019278:	e1bffe15 	stw	r6,-8(fp)
 801927c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8019280:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8019284:	d0a8ba17 	ldw	r2,-23832(gp)
  
  if (alt_ticks_per_second ())
 8019288:	10003c26 	beq	r2,zero,801937c <alt_alarm_start+0x118>
  {
    if (alarm)
 801928c:	e0bffc17 	ldw	r2,-16(fp)
 8019290:	10003826 	beq	r2,zero,8019374 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8019294:	e0bffc17 	ldw	r2,-16(fp)
 8019298:	e0fffe17 	ldw	r3,-8(fp)
 801929c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80192a0:	e0bffc17 	ldw	r2,-16(fp)
 80192a4:	e0ffff17 	ldw	r3,-4(fp)
 80192a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80192ac:	0005303a 	rdctl	r2,status
 80192b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80192b4:	e0fff917 	ldw	r3,-28(fp)
 80192b8:	00bfff84 	movi	r2,-2
 80192bc:	1884703a 	and	r2,r3,r2
 80192c0:	1001703a 	wrctl	status,r2
  
  return context;
 80192c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80192c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80192cc:	d0a8bb17 	ldw	r2,-23828(gp)
      
      current_nticks = alt_nticks();
 80192d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80192d4:	e0fffd17 	ldw	r3,-12(fp)
 80192d8:	e0bff617 	ldw	r2,-40(fp)
 80192dc:	1885883a 	add	r2,r3,r2
 80192e0:	10c00044 	addi	r3,r2,1
 80192e4:	e0bffc17 	ldw	r2,-16(fp)
 80192e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80192ec:	e0bffc17 	ldw	r2,-16(fp)
 80192f0:	10c00217 	ldw	r3,8(r2)
 80192f4:	e0bff617 	ldw	r2,-40(fp)
 80192f8:	1880042e 	bgeu	r3,r2,801930c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80192fc:	e0bffc17 	ldw	r2,-16(fp)
 8019300:	00c00044 	movi	r3,1
 8019304:	10c00405 	stb	r3,16(r2)
 8019308:	00000206 	br	8019314 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 801930c:	e0bffc17 	ldw	r2,-16(fp)
 8019310:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8019314:	e0bffc17 	ldw	r2,-16(fp)
 8019318:	d0e01304 	addi	r3,gp,-32692
 801931c:	e0fffa15 	stw	r3,-24(fp)
 8019320:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8019324:	e0bffb17 	ldw	r2,-20(fp)
 8019328:	e0fffa17 	ldw	r3,-24(fp)
 801932c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8019330:	e0bffa17 	ldw	r2,-24(fp)
 8019334:	10c00017 	ldw	r3,0(r2)
 8019338:	e0bffb17 	ldw	r2,-20(fp)
 801933c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8019340:	e0bffa17 	ldw	r2,-24(fp)
 8019344:	10800017 	ldw	r2,0(r2)
 8019348:	e0fffb17 	ldw	r3,-20(fp)
 801934c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8019350:	e0bffa17 	ldw	r2,-24(fp)
 8019354:	e0fffb17 	ldw	r3,-20(fp)
 8019358:	10c00015 	stw	r3,0(r2)
 801935c:	e0bff817 	ldw	r2,-32(fp)
 8019360:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019364:	e0bff717 	ldw	r2,-36(fp)
 8019368:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801936c:	0005883a 	mov	r2,zero
 8019370:	00000306 	br	8019380 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8019374:	00bffa84 	movi	r2,-22
 8019378:	00000106 	br	8019380 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801937c:	00bfde84 	movi	r2,-134
  }
}
 8019380:	e037883a 	mov	sp,fp
 8019384:	df000017 	ldw	fp,0(sp)
 8019388:	dec00104 	addi	sp,sp,4
 801938c:	f800283a 	ret

08019390 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 8019390:	defffd04 	addi	sp,sp,-12
 8019394:	df000215 	stw	fp,8(sp)
 8019398:	df000204 	addi	fp,sp,8
 801939c:	e13ffe15 	stw	r4,-8(fp)
 80193a0:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80193a4:	0001883a 	nop
 80193a8:	e037883a 	mov	sp,fp
 80193ac:	df000017 	ldw	fp,0(sp)
 80193b0:	dec00104 	addi	sp,sp,4
 80193b4:	f800283a 	ret

080193b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80193b8:	deffff04 	addi	sp,sp,-4
 80193bc:	df000015 	stw	fp,0(sp)
 80193c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80193c4:	0001883a 	nop
 80193c8:	e037883a 	mov	sp,fp
 80193cc:	df000017 	ldw	fp,0(sp)
 80193d0:	dec00104 	addi	sp,sp,4
 80193d4:	f800283a 	ret

080193d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80193d8:	defffe04 	addi	sp,sp,-8
 80193dc:	dfc00115 	stw	ra,4(sp)
 80193e0:	df000015 	stw	fp,0(sp)
 80193e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80193e8:	d0a00e17 	ldw	r2,-32712(gp)
 80193ec:	10000326 	beq	r2,zero,80193fc <alt_get_errno+0x24>
 80193f0:	d0a00e17 	ldw	r2,-32712(gp)
 80193f4:	103ee83a 	callr	r2
 80193f8:	00000106 	br	8019400 <alt_get_errno+0x28>
 80193fc:	d0a8af04 	addi	r2,gp,-23876
}
 8019400:	e037883a 	mov	sp,fp
 8019404:	dfc00117 	ldw	ra,4(sp)
 8019408:	df000017 	ldw	fp,0(sp)
 801940c:	dec00204 	addi	sp,sp,8
 8019410:	f800283a 	ret

08019414 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8019414:	defffa04 	addi	sp,sp,-24
 8019418:	dfc00515 	stw	ra,20(sp)
 801941c:	df000415 	stw	fp,16(sp)
 8019420:	df000404 	addi	fp,sp,16
 8019424:	e13ffe15 	stw	r4,-8(fp)
 8019428:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801942c:	e0bffe17 	ldw	r2,-8(fp)
 8019430:	10000326 	beq	r2,zero,8019440 <alt_dev_llist_insert+0x2c>
 8019434:	e0bffe17 	ldw	r2,-8(fp)
 8019438:	10800217 	ldw	r2,8(r2)
 801943c:	1000061e 	bne	r2,zero,8019458 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8019440:	80193d80 	call	80193d8 <alt_get_errno>
 8019444:	1007883a 	mov	r3,r2
 8019448:	00800584 	movi	r2,22
 801944c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8019450:	00bffa84 	movi	r2,-22
 8019454:	00001306 	br	80194a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8019458:	e0bffe17 	ldw	r2,-8(fp)
 801945c:	e0ffff17 	ldw	r3,-4(fp)
 8019460:	e0fffc15 	stw	r3,-16(fp)
 8019464:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8019468:	e0bffd17 	ldw	r2,-12(fp)
 801946c:	e0fffc17 	ldw	r3,-16(fp)
 8019470:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8019474:	e0bffc17 	ldw	r2,-16(fp)
 8019478:	10c00017 	ldw	r3,0(r2)
 801947c:	e0bffd17 	ldw	r2,-12(fp)
 8019480:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8019484:	e0bffc17 	ldw	r2,-16(fp)
 8019488:	10800017 	ldw	r2,0(r2)
 801948c:	e0fffd17 	ldw	r3,-12(fp)
 8019490:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8019494:	e0bffc17 	ldw	r2,-16(fp)
 8019498:	e0fffd17 	ldw	r3,-12(fp)
 801949c:	10c00015 	stw	r3,0(r2)

  return 0;  
 80194a0:	0005883a 	mov	r2,zero
}
 80194a4:	e037883a 	mov	sp,fp
 80194a8:	dfc00117 	ldw	ra,4(sp)
 80194ac:	df000017 	ldw	fp,0(sp)
 80194b0:	dec00204 	addi	sp,sp,8
 80194b4:	f800283a 	ret

080194b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80194b8:	defffd04 	addi	sp,sp,-12
 80194bc:	dfc00215 	stw	ra,8(sp)
 80194c0:	df000115 	stw	fp,4(sp)
 80194c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80194c8:	008200b4 	movhi	r2,2050
 80194cc:	10a80504 	addi	r2,r2,-24556
 80194d0:	e0bfff15 	stw	r2,-4(fp)
 80194d4:	00000606 	br	80194f0 <_do_ctors+0x38>
        (*ctor) (); 
 80194d8:	e0bfff17 	ldw	r2,-4(fp)
 80194dc:	10800017 	ldw	r2,0(r2)
 80194e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80194e4:	e0bfff17 	ldw	r2,-4(fp)
 80194e8:	10bfff04 	addi	r2,r2,-4
 80194ec:	e0bfff15 	stw	r2,-4(fp)
 80194f0:	e0ffff17 	ldw	r3,-4(fp)
 80194f4:	008200b4 	movhi	r2,2050
 80194f8:	10a80604 	addi	r2,r2,-24552
 80194fc:	18bff62e 	bgeu	r3,r2,80194d8 <_do_ctors+0x20>
        (*ctor) (); 
}
 8019500:	0001883a 	nop
 8019504:	e037883a 	mov	sp,fp
 8019508:	dfc00117 	ldw	ra,4(sp)
 801950c:	df000017 	ldw	fp,0(sp)
 8019510:	dec00204 	addi	sp,sp,8
 8019514:	f800283a 	ret

08019518 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8019518:	defffd04 	addi	sp,sp,-12
 801951c:	dfc00215 	stw	ra,8(sp)
 8019520:	df000115 	stw	fp,4(sp)
 8019524:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8019528:	008200b4 	movhi	r2,2050
 801952c:	10a80504 	addi	r2,r2,-24556
 8019530:	e0bfff15 	stw	r2,-4(fp)
 8019534:	00000606 	br	8019550 <_do_dtors+0x38>
        (*dtor) (); 
 8019538:	e0bfff17 	ldw	r2,-4(fp)
 801953c:	10800017 	ldw	r2,0(r2)
 8019540:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8019544:	e0bfff17 	ldw	r2,-4(fp)
 8019548:	10bfff04 	addi	r2,r2,-4
 801954c:	e0bfff15 	stw	r2,-4(fp)
 8019550:	e0ffff17 	ldw	r3,-4(fp)
 8019554:	008200b4 	movhi	r2,2050
 8019558:	10a80604 	addi	r2,r2,-24552
 801955c:	18bff62e 	bgeu	r3,r2,8019538 <_do_dtors+0x20>
        (*dtor) (); 
}
 8019560:	0001883a 	nop
 8019564:	e037883a 	mov	sp,fp
 8019568:	dfc00117 	ldw	ra,4(sp)
 801956c:	df000017 	ldw	fp,0(sp)
 8019570:	dec00204 	addi	sp,sp,8
 8019574:	f800283a 	ret

08019578 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8019578:	defffa04 	addi	sp,sp,-24
 801957c:	dfc00515 	stw	ra,20(sp)
 8019580:	df000415 	stw	fp,16(sp)
 8019584:	df000404 	addi	fp,sp,16
 8019588:	e13ffe15 	stw	r4,-8(fp)
 801958c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8019590:	e0bfff17 	ldw	r2,-4(fp)
 8019594:	10800017 	ldw	r2,0(r2)
 8019598:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801959c:	e13ffe17 	ldw	r4,-8(fp)
 80195a0:	800a0740 	call	800a074 <strlen>
 80195a4:	10800044 	addi	r2,r2,1
 80195a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80195ac:	00000d06 	br	80195e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80195b0:	e0bffc17 	ldw	r2,-16(fp)
 80195b4:	10800217 	ldw	r2,8(r2)
 80195b8:	e0fffd17 	ldw	r3,-12(fp)
 80195bc:	180d883a 	mov	r6,r3
 80195c0:	e17ffe17 	ldw	r5,-8(fp)
 80195c4:	1009883a 	mov	r4,r2
 80195c8:	8019b680 	call	8019b68 <memcmp>
 80195cc:	1000021e 	bne	r2,zero,80195d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80195d0:	e0bffc17 	ldw	r2,-16(fp)
 80195d4:	00000706 	br	80195f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80195d8:	e0bffc17 	ldw	r2,-16(fp)
 80195dc:	10800017 	ldw	r2,0(r2)
 80195e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80195e4:	e0fffc17 	ldw	r3,-16(fp)
 80195e8:	e0bfff17 	ldw	r2,-4(fp)
 80195ec:	18bff01e 	bne	r3,r2,80195b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80195f0:	0005883a 	mov	r2,zero
}
 80195f4:	e037883a 	mov	sp,fp
 80195f8:	dfc00117 	ldw	ra,4(sp)
 80195fc:	df000017 	ldw	fp,0(sp)
 8019600:	dec00204 	addi	sp,sp,8
 8019604:	f800283a 	ret

08019608 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8019608:	defffb04 	addi	sp,sp,-20
 801960c:	dfc00415 	stw	ra,16(sp)
 8019610:	df000315 	stw	fp,12(sp)
 8019614:	df000304 	addi	fp,sp,12
 8019618:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801961c:	d0a00917 	ldw	r2,-32732(gp)
 8019620:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019624:	00003106 	br	80196ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8019628:	e0bffd17 	ldw	r2,-12(fp)
 801962c:	10800217 	ldw	r2,8(r2)
 8019630:	1009883a 	mov	r4,r2
 8019634:	800a0740 	call	800a074 <strlen>
 8019638:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801963c:	e0bffd17 	ldw	r2,-12(fp)
 8019640:	10c00217 	ldw	r3,8(r2)
 8019644:	e0bffe17 	ldw	r2,-8(fp)
 8019648:	10bfffc4 	addi	r2,r2,-1
 801964c:	1885883a 	add	r2,r3,r2
 8019650:	10800003 	ldbu	r2,0(r2)
 8019654:	10803fcc 	andi	r2,r2,255
 8019658:	1080201c 	xori	r2,r2,128
 801965c:	10bfe004 	addi	r2,r2,-128
 8019660:	10800bd8 	cmpnei	r2,r2,47
 8019664:	1000031e 	bne	r2,zero,8019674 <alt_find_file+0x6c>
    {
      len -= 1;
 8019668:	e0bffe17 	ldw	r2,-8(fp)
 801966c:	10bfffc4 	addi	r2,r2,-1
 8019670:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8019674:	e0bffe17 	ldw	r2,-8(fp)
 8019678:	e0ffff17 	ldw	r3,-4(fp)
 801967c:	1885883a 	add	r2,r3,r2
 8019680:	10800003 	ldbu	r2,0(r2)
 8019684:	10803fcc 	andi	r2,r2,255
 8019688:	1080201c 	xori	r2,r2,128
 801968c:	10bfe004 	addi	r2,r2,-128
 8019690:	10800be0 	cmpeqi	r2,r2,47
 8019694:	1000081e 	bne	r2,zero,80196b8 <alt_find_file+0xb0>
 8019698:	e0bffe17 	ldw	r2,-8(fp)
 801969c:	e0ffff17 	ldw	r3,-4(fp)
 80196a0:	1885883a 	add	r2,r3,r2
 80196a4:	10800003 	ldbu	r2,0(r2)
 80196a8:	10803fcc 	andi	r2,r2,255
 80196ac:	1080201c 	xori	r2,r2,128
 80196b0:	10bfe004 	addi	r2,r2,-128
 80196b4:	10000a1e 	bne	r2,zero,80196e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80196b8:	e0bffd17 	ldw	r2,-12(fp)
 80196bc:	10800217 	ldw	r2,8(r2)
 80196c0:	e0fffe17 	ldw	r3,-8(fp)
 80196c4:	180d883a 	mov	r6,r3
 80196c8:	e17fff17 	ldw	r5,-4(fp)
 80196cc:	1009883a 	mov	r4,r2
 80196d0:	8019b680 	call	8019b68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80196d4:	1000021e 	bne	r2,zero,80196e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80196d8:	e0bffd17 	ldw	r2,-12(fp)
 80196dc:	00000706 	br	80196fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80196e0:	e0bffd17 	ldw	r2,-12(fp)
 80196e4:	10800017 	ldw	r2,0(r2)
 80196e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80196ec:	e0fffd17 	ldw	r3,-12(fp)
 80196f0:	d0a00904 	addi	r2,gp,-32732
 80196f4:	18bfcc1e 	bne	r3,r2,8019628 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80196f8:	0005883a 	mov	r2,zero
}
 80196fc:	e037883a 	mov	sp,fp
 8019700:	dfc00117 	ldw	ra,4(sp)
 8019704:	df000017 	ldw	fp,0(sp)
 8019708:	dec00204 	addi	sp,sp,8
 801970c:	f800283a 	ret

08019710 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8019710:	defffa04 	addi	sp,sp,-24
 8019714:	dfc00515 	stw	ra,20(sp)
 8019718:	df000415 	stw	fp,16(sp)
 801971c:	dc000315 	stw	r16,12(sp)
 8019720:	df000404 	addi	fp,sp,16
 8019724:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8019728:	00bffa04 	movi	r2,-24
 801972c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8019730:	e03ffc15 	stw	zero,-16(fp)
 8019734:	00001d06 	br	80197ac <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8019738:	040200b4 	movhi	r16,2050
 801973c:	842ccb04 	addi	r16,r16,-19668
 8019740:	e0bffc17 	ldw	r2,-16(fp)
 8019744:	01400304 	movi	r5,12
 8019748:	1009883a 	mov	r4,r2
 801974c:	80087fc0 	call	80087fc <__mulsi3>
 8019750:	8085883a 	add	r2,r16,r2
 8019754:	10800017 	ldw	r2,0(r2)
 8019758:	1000111e 	bne	r2,zero,80197a0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 801975c:	040200b4 	movhi	r16,2050
 8019760:	842ccb04 	addi	r16,r16,-19668
 8019764:	e0bffc17 	ldw	r2,-16(fp)
 8019768:	01400304 	movi	r5,12
 801976c:	1009883a 	mov	r4,r2
 8019770:	80087fc0 	call	80087fc <__mulsi3>
 8019774:	8085883a 	add	r2,r16,r2
 8019778:	e0fffe17 	ldw	r3,-8(fp)
 801977c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8019780:	d0e00d17 	ldw	r3,-32716(gp)
 8019784:	e0bffc17 	ldw	r2,-16(fp)
 8019788:	1880020e 	bge	r3,r2,8019794 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 801978c:	e0bffc17 	ldw	r2,-16(fp)
 8019790:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 8019794:	e0bffc17 	ldw	r2,-16(fp)
 8019798:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 801979c:	00000606 	br	80197b8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80197a0:	e0bffc17 	ldw	r2,-16(fp)
 80197a4:	10800044 	addi	r2,r2,1
 80197a8:	e0bffc15 	stw	r2,-16(fp)
 80197ac:	e0bffc17 	ldw	r2,-16(fp)
 80197b0:	10800810 	cmplti	r2,r2,32
 80197b4:	103fe01e 	bne	r2,zero,8019738 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80197b8:	e0bffd17 	ldw	r2,-12(fp)
}
 80197bc:	e6ffff04 	addi	sp,fp,-4
 80197c0:	dfc00217 	ldw	ra,8(sp)
 80197c4:	df000117 	ldw	fp,4(sp)
 80197c8:	dc000017 	ldw	r16,0(sp)
 80197cc:	dec00304 	addi	sp,sp,12
 80197d0:	f800283a 	ret

080197d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80197d4:	deffff04 	addi	sp,sp,-4
 80197d8:	df000015 	stw	fp,0(sp)
 80197dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80197e0:	0001883a 	nop
 80197e4:	e037883a 	mov	sp,fp
 80197e8:	df000017 	ldw	fp,0(sp)
 80197ec:	dec00104 	addi	sp,sp,4
 80197f0:	f800283a 	ret

080197f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80197f4:	defff804 	addi	sp,sp,-32
 80197f8:	dfc00715 	stw	ra,28(sp)
 80197fc:	df000615 	stw	fp,24(sp)
 8019800:	dc000515 	stw	r16,20(sp)
 8019804:	df000604 	addi	fp,sp,24
 8019808:	e13ffb15 	stw	r4,-20(fp)
 801980c:	e17ffc15 	stw	r5,-16(fp)
 8019810:	e1bffd15 	stw	r6,-12(fp)
 8019814:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8019818:	e1bffe17 	ldw	r6,-8(fp)
 801981c:	e17ffd17 	ldw	r5,-12(fp)
 8019820:	e13ffc17 	ldw	r4,-16(fp)
 8019824:	80167dc0 	call	80167dc <open>
 8019828:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801982c:	e0bffa17 	ldw	r2,-24(fp)
 8019830:	10002216 	blt	r2,zero,80198bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8019834:	040200b4 	movhi	r16,2050
 8019838:	842ccb04 	addi	r16,r16,-19668
 801983c:	e0bffa17 	ldw	r2,-24(fp)
 8019840:	01400304 	movi	r5,12
 8019844:	1009883a 	mov	r4,r2
 8019848:	80087fc0 	call	80087fc <__mulsi3>
 801984c:	8085883a 	add	r2,r16,r2
 8019850:	10c00017 	ldw	r3,0(r2)
 8019854:	e0bffb17 	ldw	r2,-20(fp)
 8019858:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801985c:	040200b4 	movhi	r16,2050
 8019860:	842ccb04 	addi	r16,r16,-19668
 8019864:	e0bffa17 	ldw	r2,-24(fp)
 8019868:	01400304 	movi	r5,12
 801986c:	1009883a 	mov	r4,r2
 8019870:	80087fc0 	call	80087fc <__mulsi3>
 8019874:	8085883a 	add	r2,r16,r2
 8019878:	10800104 	addi	r2,r2,4
 801987c:	10c00017 	ldw	r3,0(r2)
 8019880:	e0bffb17 	ldw	r2,-20(fp)
 8019884:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8019888:	040200b4 	movhi	r16,2050
 801988c:	842ccb04 	addi	r16,r16,-19668
 8019890:	e0bffa17 	ldw	r2,-24(fp)
 8019894:	01400304 	movi	r5,12
 8019898:	1009883a 	mov	r4,r2
 801989c:	80087fc0 	call	80087fc <__mulsi3>
 80198a0:	8085883a 	add	r2,r16,r2
 80198a4:	10800204 	addi	r2,r2,8
 80198a8:	10c00017 	ldw	r3,0(r2)
 80198ac:	e0bffb17 	ldw	r2,-20(fp)
 80198b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80198b4:	e13ffa17 	ldw	r4,-24(fp)
 80198b8:	8016ce00 	call	8016ce0 <alt_release_fd>
  }
} 
 80198bc:	0001883a 	nop
 80198c0:	e6ffff04 	addi	sp,fp,-4
 80198c4:	dfc00217 	ldw	ra,8(sp)
 80198c8:	df000117 	ldw	fp,4(sp)
 80198cc:	dc000017 	ldw	r16,0(sp)
 80198d0:	dec00304 	addi	sp,sp,12
 80198d4:	f800283a 	ret

080198d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80198d8:	defffb04 	addi	sp,sp,-20
 80198dc:	dfc00415 	stw	ra,16(sp)
 80198e0:	df000315 	stw	fp,12(sp)
 80198e4:	df000304 	addi	fp,sp,12
 80198e8:	e13ffd15 	stw	r4,-12(fp)
 80198ec:	e17ffe15 	stw	r5,-8(fp)
 80198f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80198f4:	01c07fc4 	movi	r7,511
 80198f8:	01800044 	movi	r6,1
 80198fc:	e17ffd17 	ldw	r5,-12(fp)
 8019900:	010200b4 	movhi	r4,2050
 8019904:	212cce04 	addi	r4,r4,-19656
 8019908:	80197f40 	call	80197f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801990c:	01c07fc4 	movi	r7,511
 8019910:	000d883a 	mov	r6,zero
 8019914:	e17ffe17 	ldw	r5,-8(fp)
 8019918:	010200b4 	movhi	r4,2050
 801991c:	212ccb04 	addi	r4,r4,-19668
 8019920:	80197f40 	call	80197f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8019924:	01c07fc4 	movi	r7,511
 8019928:	01800044 	movi	r6,1
 801992c:	e17fff17 	ldw	r5,-4(fp)
 8019930:	010200b4 	movhi	r4,2050
 8019934:	212cd104 	addi	r4,r4,-19644
 8019938:	80197f40 	call	80197f4 <alt_open_fd>
}  
 801993c:	0001883a 	nop
 8019940:	e037883a 	mov	sp,fp
 8019944:	dfc00117 	ldw	ra,4(sp)
 8019948:	df000017 	ldw	fp,0(sp)
 801994c:	dec00204 	addi	sp,sp,8
 8019950:	f800283a 	ret

08019954 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8019954:	defffa04 	addi	sp,sp,-24
 8019958:	df000515 	stw	fp,20(sp)
 801995c:	df000504 	addi	fp,sp,20
 8019960:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019964:	0005303a 	rdctl	r2,status
 8019968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801996c:	e0fffc17 	ldw	r3,-16(fp)
 8019970:	00bfff84 	movi	r2,-2
 8019974:	1884703a 	and	r2,r3,r2
 8019978:	1001703a 	wrctl	status,r2
  
  return context;
 801997c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8019980:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8019984:	e0bfff17 	ldw	r2,-4(fp)
 8019988:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801998c:	e0bffd17 	ldw	r2,-12(fp)
 8019990:	10800017 	ldw	r2,0(r2)
 8019994:	e0fffd17 	ldw	r3,-12(fp)
 8019998:	18c00117 	ldw	r3,4(r3)
 801999c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80199a0:	e0bffd17 	ldw	r2,-12(fp)
 80199a4:	10800117 	ldw	r2,4(r2)
 80199a8:	e0fffd17 	ldw	r3,-12(fp)
 80199ac:	18c00017 	ldw	r3,0(r3)
 80199b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80199b4:	e0bffd17 	ldw	r2,-12(fp)
 80199b8:	e0fffd17 	ldw	r3,-12(fp)
 80199bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80199c0:	e0bffd17 	ldw	r2,-12(fp)
 80199c4:	e0fffd17 	ldw	r3,-12(fp)
 80199c8:	10c00015 	stw	r3,0(r2)
 80199cc:	e0bffb17 	ldw	r2,-20(fp)
 80199d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80199d4:	e0bffe17 	ldw	r2,-8(fp)
 80199d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80199dc:	0001883a 	nop
 80199e0:	e037883a 	mov	sp,fp
 80199e4:	df000017 	ldw	fp,0(sp)
 80199e8:	dec00104 	addi	sp,sp,4
 80199ec:	f800283a 	ret

080199f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80199f0:	defffb04 	addi	sp,sp,-20
 80199f4:	dfc00415 	stw	ra,16(sp)
 80199f8:	df000315 	stw	fp,12(sp)
 80199fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8019a00:	d0a01317 	ldw	r2,-32692(gp)
 8019a04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8019a08:	d0a8bb17 	ldw	r2,-23828(gp)
 8019a0c:	10800044 	addi	r2,r2,1
 8019a10:	d0a8bb15 	stw	r2,-23828(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8019a14:	00002e06 	br	8019ad0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8019a18:	e0bffd17 	ldw	r2,-12(fp)
 8019a1c:	10800017 	ldw	r2,0(r2)
 8019a20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8019a24:	e0bffd17 	ldw	r2,-12(fp)
 8019a28:	10800403 	ldbu	r2,16(r2)
 8019a2c:	10803fcc 	andi	r2,r2,255
 8019a30:	10000426 	beq	r2,zero,8019a44 <alt_tick+0x54>
 8019a34:	d0a8bb17 	ldw	r2,-23828(gp)
 8019a38:	1000021e 	bne	r2,zero,8019a44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8019a3c:	e0bffd17 	ldw	r2,-12(fp)
 8019a40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8019a44:	e0bffd17 	ldw	r2,-12(fp)
 8019a48:	10800217 	ldw	r2,8(r2)
 8019a4c:	d0e8bb17 	ldw	r3,-23828(gp)
 8019a50:	18801d36 	bltu	r3,r2,8019ac8 <alt_tick+0xd8>
 8019a54:	e0bffd17 	ldw	r2,-12(fp)
 8019a58:	10800403 	ldbu	r2,16(r2)
 8019a5c:	10803fcc 	andi	r2,r2,255
 8019a60:	1000191e 	bne	r2,zero,8019ac8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8019a64:	e0bffd17 	ldw	r2,-12(fp)
 8019a68:	10800317 	ldw	r2,12(r2)
 8019a6c:	e0fffd17 	ldw	r3,-12(fp)
 8019a70:	18c00517 	ldw	r3,20(r3)
 8019a74:	1809883a 	mov	r4,r3
 8019a78:	103ee83a 	callr	r2
 8019a7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8019a80:	e0bfff17 	ldw	r2,-4(fp)
 8019a84:	1000031e 	bne	r2,zero,8019a94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8019a88:	e13ffd17 	ldw	r4,-12(fp)
 8019a8c:	80199540 	call	8019954 <alt_alarm_stop>
 8019a90:	00000d06 	br	8019ac8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8019a94:	e0bffd17 	ldw	r2,-12(fp)
 8019a98:	10c00217 	ldw	r3,8(r2)
 8019a9c:	e0bfff17 	ldw	r2,-4(fp)
 8019aa0:	1887883a 	add	r3,r3,r2
 8019aa4:	e0bffd17 	ldw	r2,-12(fp)
 8019aa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8019aac:	e0bffd17 	ldw	r2,-12(fp)
 8019ab0:	10c00217 	ldw	r3,8(r2)
 8019ab4:	d0a8bb17 	ldw	r2,-23828(gp)
 8019ab8:	1880032e 	bgeu	r3,r2,8019ac8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8019abc:	e0bffd17 	ldw	r2,-12(fp)
 8019ac0:	00c00044 	movi	r3,1
 8019ac4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8019ac8:	e0bffe17 	ldw	r2,-8(fp)
 8019acc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8019ad0:	e0fffd17 	ldw	r3,-12(fp)
 8019ad4:	d0a01304 	addi	r2,gp,-32692
 8019ad8:	18bfcf1e 	bne	r3,r2,8019a18 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8019adc:	0001883a 	nop
}
 8019ae0:	0001883a 	nop
 8019ae4:	e037883a 	mov	sp,fp
 8019ae8:	dfc00117 	ldw	ra,4(sp)
 8019aec:	df000017 	ldw	fp,0(sp)
 8019af0:	dec00204 	addi	sp,sp,8
 8019af4:	f800283a 	ret

08019af8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8019af8:	deffff04 	addi	sp,sp,-4
 8019afc:	df000015 	stw	fp,0(sp)
 8019b00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8019b04:	000170fa 	wrctl	ienable,zero
}
 8019b08:	0001883a 	nop
 8019b0c:	e037883a 	mov	sp,fp
 8019b10:	df000017 	ldw	fp,0(sp)
 8019b14:	dec00104 	addi	sp,sp,4
 8019b18:	f800283a 	ret

08019b1c <atexit>:
 8019b1c:	200b883a 	mov	r5,r4
 8019b20:	000f883a 	mov	r7,zero
 8019b24:	000d883a 	mov	r6,zero
 8019b28:	0009883a 	mov	r4,zero
 8019b2c:	8019d4c1 	jmpi	8019d4c <__register_exitproc>

08019b30 <exit>:
 8019b30:	defffe04 	addi	sp,sp,-8
 8019b34:	000b883a 	mov	r5,zero
 8019b38:	dc000015 	stw	r16,0(sp)
 8019b3c:	dfc00115 	stw	ra,4(sp)
 8019b40:	2021883a 	mov	r16,r4
 8019b44:	8019e640 	call	8019e64 <__call_exitprocs>
 8019b48:	008200b4 	movhi	r2,2050
 8019b4c:	10b1bb04 	addi	r2,r2,-14612
 8019b50:	11000017 	ldw	r4,0(r2)
 8019b54:	20800f17 	ldw	r2,60(r4)
 8019b58:	10000126 	beq	r2,zero,8019b60 <exit+0x30>
 8019b5c:	103ee83a 	callr	r2
 8019b60:	8009883a 	mov	r4,r16
 8019b64:	8019fe40 	call	8019fe4 <_exit>

08019b68 <memcmp>:
 8019b68:	01c000c4 	movi	r7,3
 8019b6c:	3980192e 	bgeu	r7,r6,8019bd4 <memcmp+0x6c>
 8019b70:	2144b03a 	or	r2,r4,r5
 8019b74:	11c4703a 	and	r2,r2,r7
 8019b78:	10000f26 	beq	r2,zero,8019bb8 <memcmp+0x50>
 8019b7c:	20800003 	ldbu	r2,0(r4)
 8019b80:	28c00003 	ldbu	r3,0(r5)
 8019b84:	10c0151e 	bne	r2,r3,8019bdc <memcmp+0x74>
 8019b88:	31bfff84 	addi	r6,r6,-2
 8019b8c:	01ffffc4 	movi	r7,-1
 8019b90:	00000406 	br	8019ba4 <memcmp+0x3c>
 8019b94:	20800003 	ldbu	r2,0(r4)
 8019b98:	28c00003 	ldbu	r3,0(r5)
 8019b9c:	31bfffc4 	addi	r6,r6,-1
 8019ba0:	10c00e1e 	bne	r2,r3,8019bdc <memcmp+0x74>
 8019ba4:	21000044 	addi	r4,r4,1
 8019ba8:	29400044 	addi	r5,r5,1
 8019bac:	31fff91e 	bne	r6,r7,8019b94 <memcmp+0x2c>
 8019bb0:	0005883a 	mov	r2,zero
 8019bb4:	f800283a 	ret
 8019bb8:	20c00017 	ldw	r3,0(r4)
 8019bbc:	28800017 	ldw	r2,0(r5)
 8019bc0:	18bfee1e 	bne	r3,r2,8019b7c <memcmp+0x14>
 8019bc4:	31bfff04 	addi	r6,r6,-4
 8019bc8:	21000104 	addi	r4,r4,4
 8019bcc:	29400104 	addi	r5,r5,4
 8019bd0:	39bff936 	bltu	r7,r6,8019bb8 <memcmp+0x50>
 8019bd4:	303fe91e 	bne	r6,zero,8019b7c <memcmp+0x14>
 8019bd8:	003ff506 	br	8019bb0 <memcmp+0x48>
 8019bdc:	10c5c83a 	sub	r2,r2,r3
 8019be0:	f800283a 	ret

08019be4 <_putc_r>:
 8019be4:	defffc04 	addi	sp,sp,-16
 8019be8:	dc000215 	stw	r16,8(sp)
 8019bec:	dfc00315 	stw	ra,12(sp)
 8019bf0:	2021883a 	mov	r16,r4
 8019bf4:	20000226 	beq	r4,zero,8019c00 <_putc_r+0x1c>
 8019bf8:	20800e17 	ldw	r2,56(r4)
 8019bfc:	10001b26 	beq	r2,zero,8019c6c <_putc_r+0x88>
 8019c00:	30800217 	ldw	r2,8(r6)
 8019c04:	10bfffc4 	addi	r2,r2,-1
 8019c08:	30800215 	stw	r2,8(r6)
 8019c0c:	10000a16 	blt	r2,zero,8019c38 <_putc_r+0x54>
 8019c10:	30800017 	ldw	r2,0(r6)
 8019c14:	11400005 	stb	r5,0(r2)
 8019c18:	30800017 	ldw	r2,0(r6)
 8019c1c:	10c00044 	addi	r3,r2,1
 8019c20:	30c00015 	stw	r3,0(r6)
 8019c24:	10800003 	ldbu	r2,0(r2)
 8019c28:	dfc00317 	ldw	ra,12(sp)
 8019c2c:	dc000217 	ldw	r16,8(sp)
 8019c30:	dec00404 	addi	sp,sp,16
 8019c34:	f800283a 	ret
 8019c38:	30c00617 	ldw	r3,24(r6)
 8019c3c:	10c00616 	blt	r2,r3,8019c58 <_putc_r+0x74>
 8019c40:	30800017 	ldw	r2,0(r6)
 8019c44:	00c00284 	movi	r3,10
 8019c48:	11400005 	stb	r5,0(r2)
 8019c4c:	30800017 	ldw	r2,0(r6)
 8019c50:	11400003 	ldbu	r5,0(r2)
 8019c54:	28fff11e 	bne	r5,r3,8019c1c <_putc_r+0x38>
 8019c58:	8009883a 	mov	r4,r16
 8019c5c:	dfc00317 	ldw	ra,12(sp)
 8019c60:	dc000217 	ldw	r16,8(sp)
 8019c64:	dec00404 	addi	sp,sp,16
 8019c68:	801277c1 	jmpi	801277c <__swbuf_r>
 8019c6c:	d9400015 	stw	r5,0(sp)
 8019c70:	d9800115 	stw	r6,4(sp)
 8019c74:	800e5800 	call	800e580 <__sinit>
 8019c78:	d9800117 	ldw	r6,4(sp)
 8019c7c:	d9400017 	ldw	r5,0(sp)
 8019c80:	003fdf06 	br	8019c00 <_putc_r+0x1c>

08019c84 <putc>:
 8019c84:	008200b4 	movhi	r2,2050
 8019c88:	defffc04 	addi	sp,sp,-16
 8019c8c:	10b1bc04 	addi	r2,r2,-14608
 8019c90:	dc000115 	stw	r16,4(sp)
 8019c94:	14000017 	ldw	r16,0(r2)
 8019c98:	dc400215 	stw	r17,8(sp)
 8019c9c:	dfc00315 	stw	ra,12(sp)
 8019ca0:	2023883a 	mov	r17,r4
 8019ca4:	80000226 	beq	r16,zero,8019cb0 <putc+0x2c>
 8019ca8:	80800e17 	ldw	r2,56(r16)
 8019cac:	10001a26 	beq	r2,zero,8019d18 <putc+0x94>
 8019cb0:	28800217 	ldw	r2,8(r5)
 8019cb4:	10bfffc4 	addi	r2,r2,-1
 8019cb8:	28800215 	stw	r2,8(r5)
 8019cbc:	10000b16 	blt	r2,zero,8019cec <putc+0x68>
 8019cc0:	28800017 	ldw	r2,0(r5)
 8019cc4:	14400005 	stb	r17,0(r2)
 8019cc8:	28800017 	ldw	r2,0(r5)
 8019ccc:	10c00044 	addi	r3,r2,1
 8019cd0:	28c00015 	stw	r3,0(r5)
 8019cd4:	10800003 	ldbu	r2,0(r2)
 8019cd8:	dfc00317 	ldw	ra,12(sp)
 8019cdc:	dc400217 	ldw	r17,8(sp)
 8019ce0:	dc000117 	ldw	r16,4(sp)
 8019ce4:	dec00404 	addi	sp,sp,16
 8019ce8:	f800283a 	ret
 8019cec:	28c00617 	ldw	r3,24(r5)
 8019cf0:	10c00e16 	blt	r2,r3,8019d2c <putc+0xa8>
 8019cf4:	28800017 	ldw	r2,0(r5)
 8019cf8:	01000284 	movi	r4,10
 8019cfc:	14400005 	stb	r17,0(r2)
 8019d00:	28800017 	ldw	r2,0(r5)
 8019d04:	10c00003 	ldbu	r3,0(r2)
 8019d08:	193ff01e 	bne	r3,r4,8019ccc <putc+0x48>
 8019d0c:	280d883a 	mov	r6,r5
 8019d10:	180b883a 	mov	r5,r3
 8019d14:	00000706 	br	8019d34 <putc+0xb0>
 8019d18:	8009883a 	mov	r4,r16
 8019d1c:	d9400015 	stw	r5,0(sp)
 8019d20:	800e5800 	call	800e580 <__sinit>
 8019d24:	d9400017 	ldw	r5,0(sp)
 8019d28:	003fe106 	br	8019cb0 <putc+0x2c>
 8019d2c:	280d883a 	mov	r6,r5
 8019d30:	880b883a 	mov	r5,r17
 8019d34:	8009883a 	mov	r4,r16
 8019d38:	dfc00317 	ldw	ra,12(sp)
 8019d3c:	dc400217 	ldw	r17,8(sp)
 8019d40:	dc000117 	ldw	r16,4(sp)
 8019d44:	dec00404 	addi	sp,sp,16
 8019d48:	801277c1 	jmpi	801277c <__swbuf_r>

08019d4c <__register_exitproc>:
 8019d4c:	defffa04 	addi	sp,sp,-24
 8019d50:	dc000315 	stw	r16,12(sp)
 8019d54:	040200b4 	movhi	r16,2050
 8019d58:	8431bb04 	addi	r16,r16,-14612
 8019d5c:	80c00017 	ldw	r3,0(r16)
 8019d60:	dc400415 	stw	r17,16(sp)
 8019d64:	dfc00515 	stw	ra,20(sp)
 8019d68:	18805217 	ldw	r2,328(r3)
 8019d6c:	2023883a 	mov	r17,r4
 8019d70:	10003726 	beq	r2,zero,8019e50 <__register_exitproc+0x104>
 8019d74:	10c00117 	ldw	r3,4(r2)
 8019d78:	010007c4 	movi	r4,31
 8019d7c:	20c00e16 	blt	r4,r3,8019db8 <__register_exitproc+0x6c>
 8019d80:	1a000044 	addi	r8,r3,1
 8019d84:	8800221e 	bne	r17,zero,8019e10 <__register_exitproc+0xc4>
 8019d88:	18c00084 	addi	r3,r3,2
 8019d8c:	18c7883a 	add	r3,r3,r3
 8019d90:	18c7883a 	add	r3,r3,r3
 8019d94:	12000115 	stw	r8,4(r2)
 8019d98:	10c7883a 	add	r3,r2,r3
 8019d9c:	19400015 	stw	r5,0(r3)
 8019da0:	0005883a 	mov	r2,zero
 8019da4:	dfc00517 	ldw	ra,20(sp)
 8019da8:	dc400417 	ldw	r17,16(sp)
 8019dac:	dc000317 	ldw	r16,12(sp)
 8019db0:	dec00604 	addi	sp,sp,24
 8019db4:	f800283a 	ret
 8019db8:	00800034 	movhi	r2,0
 8019dbc:	10800004 	addi	r2,r2,0
 8019dc0:	10002626 	beq	r2,zero,8019e5c <__register_exitproc+0x110>
 8019dc4:	01006404 	movi	r4,400
 8019dc8:	d9400015 	stw	r5,0(sp)
 8019dcc:	d9800115 	stw	r6,4(sp)
 8019dd0:	d9c00215 	stw	r7,8(sp)
 8019dd4:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8019dd8:	d9400017 	ldw	r5,0(sp)
 8019ddc:	d9800117 	ldw	r6,4(sp)
 8019de0:	d9c00217 	ldw	r7,8(sp)
 8019de4:	10001d26 	beq	r2,zero,8019e5c <__register_exitproc+0x110>
 8019de8:	81000017 	ldw	r4,0(r16)
 8019dec:	10000115 	stw	zero,4(r2)
 8019df0:	02000044 	movi	r8,1
 8019df4:	22405217 	ldw	r9,328(r4)
 8019df8:	0007883a 	mov	r3,zero
 8019dfc:	12400015 	stw	r9,0(r2)
 8019e00:	20805215 	stw	r2,328(r4)
 8019e04:	10006215 	stw	zero,392(r2)
 8019e08:	10006315 	stw	zero,396(r2)
 8019e0c:	883fde26 	beq	r17,zero,8019d88 <__register_exitproc+0x3c>
 8019e10:	18c9883a 	add	r4,r3,r3
 8019e14:	2109883a 	add	r4,r4,r4
 8019e18:	1109883a 	add	r4,r2,r4
 8019e1c:	21802215 	stw	r6,136(r4)
 8019e20:	01800044 	movi	r6,1
 8019e24:	12406217 	ldw	r9,392(r2)
 8019e28:	30cc983a 	sll	r6,r6,r3
 8019e2c:	4992b03a 	or	r9,r9,r6
 8019e30:	12406215 	stw	r9,392(r2)
 8019e34:	21c04215 	stw	r7,264(r4)
 8019e38:	01000084 	movi	r4,2
 8019e3c:	893fd21e 	bne	r17,r4,8019d88 <__register_exitproc+0x3c>
 8019e40:	11006317 	ldw	r4,396(r2)
 8019e44:	218cb03a 	or	r6,r4,r6
 8019e48:	11806315 	stw	r6,396(r2)
 8019e4c:	003fce06 	br	8019d88 <__register_exitproc+0x3c>
 8019e50:	18805304 	addi	r2,r3,332
 8019e54:	18805215 	stw	r2,328(r3)
 8019e58:	003fc606 	br	8019d74 <__register_exitproc+0x28>
 8019e5c:	00bfffc4 	movi	r2,-1
 8019e60:	003fd006 	br	8019da4 <__register_exitproc+0x58>

08019e64 <__call_exitprocs>:
 8019e64:	defff504 	addi	sp,sp,-44
 8019e68:	df000915 	stw	fp,36(sp)
 8019e6c:	dd400615 	stw	r21,24(sp)
 8019e70:	dc800315 	stw	r18,12(sp)
 8019e74:	dfc00a15 	stw	ra,40(sp)
 8019e78:	ddc00815 	stw	r23,32(sp)
 8019e7c:	dd800715 	stw	r22,28(sp)
 8019e80:	dd000515 	stw	r20,20(sp)
 8019e84:	dcc00415 	stw	r19,16(sp)
 8019e88:	dc400215 	stw	r17,8(sp)
 8019e8c:	dc000115 	stw	r16,4(sp)
 8019e90:	d9000015 	stw	r4,0(sp)
 8019e94:	2839883a 	mov	fp,r5
 8019e98:	04800044 	movi	r18,1
 8019e9c:	057fffc4 	movi	r21,-1
 8019ea0:	008200b4 	movhi	r2,2050
 8019ea4:	10b1bb04 	addi	r2,r2,-14612
 8019ea8:	12000017 	ldw	r8,0(r2)
 8019eac:	45005217 	ldw	r20,328(r8)
 8019eb0:	44c05204 	addi	r19,r8,328
 8019eb4:	a0001c26 	beq	r20,zero,8019f28 <__call_exitprocs+0xc4>
 8019eb8:	a0800117 	ldw	r2,4(r20)
 8019ebc:	15ffffc4 	addi	r23,r2,-1
 8019ec0:	b8000d16 	blt	r23,zero,8019ef8 <__call_exitprocs+0x94>
 8019ec4:	14000044 	addi	r16,r2,1
 8019ec8:	8421883a 	add	r16,r16,r16
 8019ecc:	8421883a 	add	r16,r16,r16
 8019ed0:	84402004 	addi	r17,r16,128
 8019ed4:	a463883a 	add	r17,r20,r17
 8019ed8:	a421883a 	add	r16,r20,r16
 8019edc:	e0001e26 	beq	fp,zero,8019f58 <__call_exitprocs+0xf4>
 8019ee0:	80804017 	ldw	r2,256(r16)
 8019ee4:	e0801c26 	beq	fp,r2,8019f58 <__call_exitprocs+0xf4>
 8019ee8:	bdffffc4 	addi	r23,r23,-1
 8019eec:	843fff04 	addi	r16,r16,-4
 8019ef0:	8c7fff04 	addi	r17,r17,-4
 8019ef4:	bd7ff91e 	bne	r23,r21,8019edc <__call_exitprocs+0x78>
 8019ef8:	00800034 	movhi	r2,0
 8019efc:	10800004 	addi	r2,r2,0
 8019f00:	10000926 	beq	r2,zero,8019f28 <__call_exitprocs+0xc4>
 8019f04:	a0800117 	ldw	r2,4(r20)
 8019f08:	1000301e 	bne	r2,zero,8019fcc <__call_exitprocs+0x168>
 8019f0c:	a0800017 	ldw	r2,0(r20)
 8019f10:	10003226 	beq	r2,zero,8019fdc <__call_exitprocs+0x178>
 8019f14:	a009883a 	mov	r4,r20
 8019f18:	98800015 	stw	r2,0(r19)
 8019f1c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8019f20:	9d000017 	ldw	r20,0(r19)
 8019f24:	a03fe41e 	bne	r20,zero,8019eb8 <__call_exitprocs+0x54>
 8019f28:	dfc00a17 	ldw	ra,40(sp)
 8019f2c:	df000917 	ldw	fp,36(sp)
 8019f30:	ddc00817 	ldw	r23,32(sp)
 8019f34:	dd800717 	ldw	r22,28(sp)
 8019f38:	dd400617 	ldw	r21,24(sp)
 8019f3c:	dd000517 	ldw	r20,20(sp)
 8019f40:	dcc00417 	ldw	r19,16(sp)
 8019f44:	dc800317 	ldw	r18,12(sp)
 8019f48:	dc400217 	ldw	r17,8(sp)
 8019f4c:	dc000117 	ldw	r16,4(sp)
 8019f50:	dec00b04 	addi	sp,sp,44
 8019f54:	f800283a 	ret
 8019f58:	a0800117 	ldw	r2,4(r20)
 8019f5c:	80c00017 	ldw	r3,0(r16)
 8019f60:	10bfffc4 	addi	r2,r2,-1
 8019f64:	15c01426 	beq	r2,r23,8019fb8 <__call_exitprocs+0x154>
 8019f68:	80000015 	stw	zero,0(r16)
 8019f6c:	183fde26 	beq	r3,zero,8019ee8 <__call_exitprocs+0x84>
 8019f70:	95c8983a 	sll	r4,r18,r23
 8019f74:	a0806217 	ldw	r2,392(r20)
 8019f78:	a5800117 	ldw	r22,4(r20)
 8019f7c:	2084703a 	and	r2,r4,r2
 8019f80:	10000b26 	beq	r2,zero,8019fb0 <__call_exitprocs+0x14c>
 8019f84:	a0806317 	ldw	r2,396(r20)
 8019f88:	2088703a 	and	r4,r4,r2
 8019f8c:	20000c1e 	bne	r4,zero,8019fc0 <__call_exitprocs+0x15c>
 8019f90:	89400017 	ldw	r5,0(r17)
 8019f94:	d9000017 	ldw	r4,0(sp)
 8019f98:	183ee83a 	callr	r3
 8019f9c:	a0800117 	ldw	r2,4(r20)
 8019fa0:	15bfbf1e 	bne	r2,r22,8019ea0 <__call_exitprocs+0x3c>
 8019fa4:	98800017 	ldw	r2,0(r19)
 8019fa8:	153fcf26 	beq	r2,r20,8019ee8 <__call_exitprocs+0x84>
 8019fac:	003fbc06 	br	8019ea0 <__call_exitprocs+0x3c>
 8019fb0:	183ee83a 	callr	r3
 8019fb4:	003ff906 	br	8019f9c <__call_exitprocs+0x138>
 8019fb8:	a5c00115 	stw	r23,4(r20)
 8019fbc:	003feb06 	br	8019f6c <__call_exitprocs+0x108>
 8019fc0:	89000017 	ldw	r4,0(r17)
 8019fc4:	183ee83a 	callr	r3
 8019fc8:	003ff406 	br	8019f9c <__call_exitprocs+0x138>
 8019fcc:	a0800017 	ldw	r2,0(r20)
 8019fd0:	a027883a 	mov	r19,r20
 8019fd4:	1029883a 	mov	r20,r2
 8019fd8:	003fb606 	br	8019eb4 <__call_exitprocs+0x50>
 8019fdc:	0005883a 	mov	r2,zero
 8019fe0:	003ffb06 	br	8019fd0 <__call_exitprocs+0x16c>

08019fe4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8019fe4:	defffd04 	addi	sp,sp,-12
 8019fe8:	df000215 	stw	fp,8(sp)
 8019fec:	df000204 	addi	fp,sp,8
 8019ff0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8019ff4:	0001883a 	nop
 8019ff8:	e0bfff17 	ldw	r2,-4(fp)
 8019ffc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801a000:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801a004:	10000226 	beq	r2,zero,801a010 <_exit+0x2c>
    ALT_SIM_FAIL();
 801a008:	002af070 	cmpltui	zero,zero,43969
 801a00c:	00000106 	br	801a014 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801a010:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801a014:	003fff06 	br	801a014 <_exit+0x30>
