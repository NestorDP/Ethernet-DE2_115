
ethernet_basic.elf:     file format elf32-littlenios2
ethernet_basic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00006fe8 memsz 0x00006fe8 flags r-x
    LOAD off    0x00008008 vaddr 0x08007008 paddr 0x08008c50 align 2**12
         filesz 0x00001c48 memsz 0x00001c48 flags rw-
    LOAD off    0x0000a898 vaddr 0x0800a898 paddr 0x0800a898 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006d30  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a8  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c48  08007008  08008c50  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0800a898  0800a898  0000a898  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0800a9ec  0800a9ec  00009c50  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  10001000  10001000  00009c50  2**0
                  CONTENTS
  8 .onchip_memory 00000000  10002000  10002000  00009c50  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00009c50  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000af0  00000000  00000000  00009c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001808a  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000068b3  00000000  00000000  000227f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000732e  00000000  00000000  000290a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001af8  00000000  00000000  000303d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ef8  00000000  00000000  00031ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004ada  00000000  00000000  00034dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  000398a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  000398b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003cd06  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0003cd09  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003cd0c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003cd0d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0003cd0e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003cd12  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003cd16  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  0003cd1a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  0003cd1e  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  0003cd22  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000006  00000000  00000000  0003cd26  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000002a  00000000  00000000  0003cd2c  2**0
                  CONTENTS, READONLY
 31 .jdi          00004264  00000000  00000000  0003cd56  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000a711b  00000000  00000000  00040fba  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08006f60 l    d  .rodata	00000000 .rodata
08007008 l    d  .rwdata	00000000 .rwdata
0800a898 l    d  .bss	00000000 .bss
0800a9ec l    d  .sdram	00000000 .sdram
10001000 l    d  .descriptor_memory	00000000 .descriptor_memory
10002000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ethernet_basic_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0800040c l     F .text	00000008 __fp_unlock
08000420 l     F .text	0000019c __sinit.part.1
080005bc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08007008 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
080030ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080031c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080031ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080032e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080033c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080034b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003690 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08008c38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08003904 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08003a40 l     F .text	00000034 alt_dev_reg
080079dc l     O .rwdata	00001060 jtag
08008a3c l     O .rwdata	00000030 sgdma_rx
08008a6c l     O .rwdata	00000030 sgdma_tx
08008a9c l     O .rwdata	000000c4 uart
08008b60 l     O .rwdata	0000002c Button_Pio
08008b8c l     O .rwdata	0000002c IO_Pio
08008bb8 l     O .rwdata	0000002c LED_Pio
08008be4 l     O .rwdata	0000002c Switch_Pio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003db0 l     F .text	0000020c altera_avalon_jtag_uart_irq
08003fbc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
080045f4 l     F .text	0000003c alt_get_errno
08005224 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08005388 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
08005638 l     F .text	0000009c altera_avalon_uart_irq
080056d4 l     F .text	000000e4 altera_avalon_uart_rxirq
080057b8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
08005954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
08005b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08005ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080063b8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08006518 l     F .text	0000003c alt_get_errno
08006554 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800a8c0 g     O .bss	00000004 alt_instruction_exception_handler
08002e7c g     F .text	00000054 _isatty_r
080035cc g     F .text	0000007c alt_main
080002a0 g     F .text	000000c0 _puts_r
0800a8ec g     O .bss	00000100 alt_irq
08002ba4 g     F .text	00000060 _lseek_r
08008c50 g       *ABS*	00000000 __flash_rwdata_start
0800a9ec g       *ABS*	00000000 __alt_heap_start
08004754 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
08002158 g     F .text	0000005c __sseek
0800076c g     F .text	00000010 __sinit
080005c4 g     F .text	00000078 __sfmoreglue
0800366c g     F .text	00000024 __malloc_unlock
08004e6c g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
08001844 g     F .text	0000015c memmove
08000754 g     F .text	00000018 _cleanup
08006940 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
080049bc g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002e20 g     F .text	0000005c _fstat_r
0800a8a4 g     O .bss	00000004 errno
080020d4 g     F .text	00000008 __seofread
0800a8ac g     O .bss	00000004 alt_argv
08010c10 g       *ABS*	00000000 _gp
0800785c g     O .rwdata	00000180 alt_fd_list
08006068 g     F .text	00000090 alt_find_dev
080016fc g     F .text	00000148 memcpy
08000414 g     F .text	0000000c _cleanup_r
0800649c g     F .text	0000007c alt_io_redirect
08006f60 g       *ABS*	00000000 __DTOR_END__
08000360 g     F .text	00000014 puts
08006b30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08004ab4 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
080041b4 g     F .text	0000021c altera_avalon_jtag_uart_read
08002fc8 g     F .text	00000064 .hidden __udivsi3
0800331c g     F .text	000000ac isatty
0800a8a0 g     O .bss	00000004 __malloc_top_pad
080007bc g     F .text	000004c8 __sfvwrite_r
08004bec g     F .text	0000005c alt_avalon_sgdma_stop
0800202c g     F .text	00000054 _sbrk_r
08002dc0 g     F .text	00000060 _read_r
08005e80 g     F .text	00000028 alt_dcache_flush
08008c30 g     O .rwdata	00000004 alt_max_fd
080023c4 g     F .text	000000f0 _fclose_r
08002740 g     F .text	00000030 fflush
0800a89c g     O .bss	00000004 __malloc_max_sbrked_mem
080034f0 g     F .text	000000dc lseek
08008c10 g     O .rwdata	00000004 _global_impure_ptr
08001ac8 g     F .text	00000564 _realloc_r
0800a9ec g       *ABS*	00000000 __bss_end
080062c8 g     F .text	000000f0 alt_iic_isr_register
08004630 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
08006838 g     F .text	00000108 alt_tick
0800558c g     F .text	000000ac altera_avalon_uart_init
0800078c g     F .text	00000018 __fp_lock_all
0800627c g     F .text	0000004c alt_ic_irq_enabled
0800679c g     F .text	0000009c alt_alarm_stop
10001000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0800a8b4 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08007834 g     O .rwdata	00000028 alt_dev_null
08004c48 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
08005ea8 g     F .text	00000020 alt_dcache_flush_all
08008c50 g       *ABS*	00000000 __ram_rwdata_end
10002000 g       *ABS*	00000000 __alt_mem_onchip_memory
08008c28 g     O .rwdata	00000008 alt_dev_list
08003940 g     F .text	00000100 write
08004d8c g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
08007008 g       *ABS*	00000000 __ram_rodata_end
08003228 g     F .text	000000b8 fstat
0800302c g     F .text	00000058 .hidden __umodsi3
08004a34 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
08004b40 g     F .text	00000054 alt_avalon_sgdma_register_callback
0800a9ec g       *ABS*	00000000 end
08005ba8 g     F .text	000001ac altera_avalon_uart_write
08003cf0 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08006f60 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08004e0c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
08005400 g     F .text	0000007c alt_avalon_timer_sc_init
080054dc g     F .text	00000060 altera_avalon_uart_write_fd
0800553c g     F .text	00000050 altera_avalon_uart_close_fd
080043d0 g     F .text	00000224 altera_avalon_jtag_uart_write
08004864 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0800077c g     F .text	00000004 __sfp_lock_acquire
08001618 g     F .text	000000e4 memchr
0800495c g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
08002894 g     F .text	00000310 _free_r
08006dac g     F .text	00000180 __call_exitprocs
08008c18 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0800a8b8 g     O .bss	00000004 _alt_tick_rate
08004cac g     F .text	00000054 alt_avalon_sgdma_open
0800a8bc g     O .bss	00000004 _alt_nticks
080036cc g     F .text	00000104 read
08003aac g     F .text	000000e0 alt_sys_init
08006c94 g     F .text	00000118 __register_exitproc
0800405c g     F .text	00000068 altera_avalon_jtag_uart_close
08003084 g     F .text	00000028 .hidden __mulsi3
08007008 g       *ABS*	00000000 __ram_rwdata_start
08006f60 g       *ABS*	00000000 __ram_rodata_start
0800a8c4 g     O .bss	00000028 __malloc_current_mallinfo
08003b8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006a6c g     F .text	000000c4 alt_get_fd
08002370 g     F .text	00000054 _close_r
08006c18 g     F .text	0000007c memcmp
08003c4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800a9ec g       *ABS*	00000000 __alt_stack_base
08003c9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800221c g     F .text	00000154 __swsetup_r
0800063c g     F .text	00000118 __sfp
0800742c g     O .rwdata	00000408 __malloc_av_
08000788 g     F .text	00000004 __sinit_lock_release
08002080 g     F .text	00000054 __sread
08006964 g     F .text	00000108 alt_find_file
08005f04 g     F .text	000000a4 alt_dev_llist_insert
08003648 g     F .text	00000024 __malloc_lock
08003854 g     F .text	000000b0 sbrk
08004b94 g     F .text	00000058 alt_avalon_sgdma_start
080026e4 g     F .text	0000005c _fflush_r
0800a898 g       *ABS*	00000000 __bss_start
080019a0 g     F .text	00000128 memset
0800026c g     F .text	00000034 main
0800a8b0 g     O .bss	00000004 alt_envp
0800a898 g     O .bss	00000004 __malloc_max_total_mem
08003bec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08008c3c g     O .rwdata	00000008 alt_sgdma_list
080021b4 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080024b4 g     F .text	00000014 fclose
08000e0c g     F .text	0000080c _malloc_r
08008c34 g     O .rwdata	00000004 alt_errno
08000c84 g     F .text	000000c4 _fwalk
08002ed0 g     F .text	00000084 .hidden __divsi3
08002770 g     F .text	00000124 _malloc_trim_r
08006f60 g       *ABS*	00000000 __CTOR_END__
08006f60 g       *ABS*	00000000 __flash_rodata_start
08006f60 g       *ABS*	00000000 __DTOR_LIST__
08003a74 g     F .text	00000038 alt_irq_init
080037d0 g     F .text	00000084 alt_release_fd
08006bcc g     F .text	00000014 atexit
080021bc g     F .text	00000060 _write_r
08008c14 g     O .rwdata	00000004 _impure_ptr
0800a8a8 g     O .bss	00000004 alt_argc
080024c8 g     F .text	0000021c __sflush_r
08006008 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
080007a4 g     F .text	00000018 __fp_unlock_all
08008c20 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006118 g     F .text	00000050 alt_ic_isr_register
08008c50 g       *ABS*	00000000 _edata
0800547c g     F .text	00000060 altera_avalon_uart_read_fd
0800a9ec g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
080040c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080061f0 g     F .text	0000008c alt_ic_irq_disable
08004d00 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
080020dc g     F .text	0000007c __swrite
08008c1c g     O .rwdata	00000004 __malloc_trim_threshold
08006be0 g     F .text	00000038 exit
08000d48 g     F .text	000000c4 _fwalk_reent
08002f54 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000780 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08005900 g     F .text	00000054 altera_avalon_uart_close
08006f2c g     F .text	00000034 _exit
08005d54 g     F .text	0000012c alt_alarm_start
08002c04 g     F .text	000001bc __smakebuf_r
08000374 g     F .text	00000098 strlen
08006640 g     F .text	0000015c open
080060f8 g     F .text	00000020 alt_icache_flush_all
08008c44 g     O .rwdata	00000004 alt_priority_mask
08006168 g     F .text	00000088 alt_ic_irq_enable
08005990 g     F .text	000001dc altera_avalon_uart_read
080048d8 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
08008c48 g     O .rwdata	00000008 alt_alarm_list
08005fa8 g     F .text	00000060 _do_ctors
080030e8 g     F .text	000000d8 close
08003430 g     F .text	00000084 alt_load
080052e0 g     F .text	000000a8 alt_avalon_sgdma_init
08000784 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10aa3b04 	addi	r2,r2,-22292
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10aa3b04 	addi	r2,r2,-22292
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a72c17 	ldw	r2,-25424(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a72c17 	ldw	r2,-25424(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6830414 	ori	gp,gp,3088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10aa2614 	ori	r2,r2,43160

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18ea7b14 	ori	r3,r3,43500

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80034300 	call	8003430 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80035cc0 	call	80035cc <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <alt_after_alt_main>

0800026c <main>:
 */

#include <stdio.h>

int main()
{
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	dfc00115 	stw	ra,4(sp)
 8000274:	df000015 	stw	fp,0(sp)
 8000278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 800027c:	01020034 	movhi	r4,2048
 8000280:	211bd804 	addi	r4,r4,28512
 8000284:	80003600 	call	8000360 <puts>

  return 0;
 8000288:	0005883a 	mov	r2,zero
}
 800028c:	e037883a 	mov	sp,fp
 8000290:	dfc00117 	ldw	ra,4(sp)
 8000294:	df000017 	ldw	fp,0(sp)
 8000298:	dec00204 	addi	sp,sp,8
 800029c:	f800283a 	ret

080002a0 <_puts_r>:
 80002a0:	defff604 	addi	sp,sp,-40
 80002a4:	dc000715 	stw	r16,28(sp)
 80002a8:	2021883a 	mov	r16,r4
 80002ac:	2809883a 	mov	r4,r5
 80002b0:	dc400815 	stw	r17,32(sp)
 80002b4:	dfc00915 	stw	ra,36(sp)
 80002b8:	2823883a 	mov	r17,r5
 80002bc:	80003740 	call	8000374 <strlen>
 80002c0:	10c00044 	addi	r3,r2,1
 80002c4:	d8800115 	stw	r2,4(sp)
 80002c8:	00820034 	movhi	r2,2048
 80002cc:	109bdd04 	addi	r2,r2,28532
 80002d0:	d8800215 	stw	r2,8(sp)
 80002d4:	00800044 	movi	r2,1
 80002d8:	d8800315 	stw	r2,12(sp)
 80002dc:	00800084 	movi	r2,2
 80002e0:	dc400015 	stw	r17,0(sp)
 80002e4:	d8c00615 	stw	r3,24(sp)
 80002e8:	dec00415 	stw	sp,16(sp)
 80002ec:	d8800515 	stw	r2,20(sp)
 80002f0:	80000226 	beq	r16,zero,80002fc <_puts_r+0x5c>
 80002f4:	80800e17 	ldw	r2,56(r16)
 80002f8:	10001426 	beq	r2,zero,800034c <_puts_r+0xac>
 80002fc:	81400217 	ldw	r5,8(r16)
 8000300:	2880030b 	ldhu	r2,12(r5)
 8000304:	10c8000c 	andi	r3,r2,8192
 8000308:	1800061e 	bne	r3,zero,8000324 <_puts_r+0x84>
 800030c:	29001917 	ldw	r4,100(r5)
 8000310:	00f7ffc4 	movi	r3,-8193
 8000314:	10880014 	ori	r2,r2,8192
 8000318:	20c6703a 	and	r3,r4,r3
 800031c:	2880030d 	sth	r2,12(r5)
 8000320:	28c01915 	stw	r3,100(r5)
 8000324:	d9800404 	addi	r6,sp,16
 8000328:	8009883a 	mov	r4,r16
 800032c:	80007bc0 	call	80007bc <__sfvwrite_r>
 8000330:	1000091e 	bne	r2,zero,8000358 <_puts_r+0xb8>
 8000334:	00800284 	movi	r2,10
 8000338:	dfc00917 	ldw	ra,36(sp)
 800033c:	dc400817 	ldw	r17,32(sp)
 8000340:	dc000717 	ldw	r16,28(sp)
 8000344:	dec00a04 	addi	sp,sp,40
 8000348:	f800283a 	ret
 800034c:	8009883a 	mov	r4,r16
 8000350:	800076c0 	call	800076c <__sinit>
 8000354:	003fe906 	br	80002fc <_puts_r+0x5c>
 8000358:	00bfffc4 	movi	r2,-1
 800035c:	003ff606 	br	8000338 <_puts_r+0x98>

08000360 <puts>:
 8000360:	00820074 	movhi	r2,2049
 8000364:	10a30504 	addi	r2,r2,-29676
 8000368:	200b883a 	mov	r5,r4
 800036c:	11000017 	ldw	r4,0(r2)
 8000370:	80002a01 	jmpi	80002a0 <_puts_r>

08000374 <strlen>:
 8000374:	208000cc 	andi	r2,r4,3
 8000378:	10002026 	beq	r2,zero,80003fc <strlen+0x88>
 800037c:	20800007 	ldb	r2,0(r4)
 8000380:	10002026 	beq	r2,zero,8000404 <strlen+0x90>
 8000384:	2005883a 	mov	r2,r4
 8000388:	00000206 	br	8000394 <strlen+0x20>
 800038c:	10c00007 	ldb	r3,0(r2)
 8000390:	18001826 	beq	r3,zero,80003f4 <strlen+0x80>
 8000394:	10800044 	addi	r2,r2,1
 8000398:	10c000cc 	andi	r3,r2,3
 800039c:	183ffb1e 	bne	r3,zero,800038c <strlen+0x18>
 80003a0:	10c00017 	ldw	r3,0(r2)
 80003a4:	01ffbff4 	movhi	r7,65279
 80003a8:	39ffbfc4 	addi	r7,r7,-257
 80003ac:	00ca303a 	nor	r5,zero,r3
 80003b0:	01a02074 	movhi	r6,32897
 80003b4:	19c7883a 	add	r3,r3,r7
 80003b8:	31a02004 	addi	r6,r6,-32640
 80003bc:	1946703a 	and	r3,r3,r5
 80003c0:	1986703a 	and	r3,r3,r6
 80003c4:	1800091e 	bne	r3,zero,80003ec <strlen+0x78>
 80003c8:	10800104 	addi	r2,r2,4
 80003cc:	10c00017 	ldw	r3,0(r2)
 80003d0:	19cb883a 	add	r5,r3,r7
 80003d4:	00c6303a 	nor	r3,zero,r3
 80003d8:	28c6703a 	and	r3,r5,r3
 80003dc:	1986703a 	and	r3,r3,r6
 80003e0:	183ff926 	beq	r3,zero,80003c8 <strlen+0x54>
 80003e4:	00000106 	br	80003ec <strlen+0x78>
 80003e8:	10800044 	addi	r2,r2,1
 80003ec:	10c00007 	ldb	r3,0(r2)
 80003f0:	183ffd1e 	bne	r3,zero,80003e8 <strlen+0x74>
 80003f4:	1105c83a 	sub	r2,r2,r4
 80003f8:	f800283a 	ret
 80003fc:	2005883a 	mov	r2,r4
 8000400:	003fe706 	br	80003a0 <strlen+0x2c>
 8000404:	0005883a 	mov	r2,zero
 8000408:	f800283a 	ret

0800040c <__fp_unlock>:
 800040c:	0005883a 	mov	r2,zero
 8000410:	f800283a 	ret

08000414 <_cleanup_r>:
 8000414:	01420034 	movhi	r5,2048
 8000418:	2948f104 	addi	r5,r5,9156
 800041c:	8000d481 	jmpi	8000d48 <_fwalk_reent>

08000420 <__sinit.part.1>:
 8000420:	defff704 	addi	sp,sp,-36
 8000424:	00c20034 	movhi	r3,2048
 8000428:	dfc00815 	stw	ra,32(sp)
 800042c:	ddc00715 	stw	r23,28(sp)
 8000430:	dd800615 	stw	r22,24(sp)
 8000434:	dd400515 	stw	r21,20(sp)
 8000438:	dd000415 	stw	r20,16(sp)
 800043c:	dcc00315 	stw	r19,12(sp)
 8000440:	dc800215 	stw	r18,8(sp)
 8000444:	dc400115 	stw	r17,4(sp)
 8000448:	dc000015 	stw	r16,0(sp)
 800044c:	18c10504 	addi	r3,r3,1044
 8000450:	24000117 	ldw	r16,4(r4)
 8000454:	20c00f15 	stw	r3,60(r4)
 8000458:	2080bb04 	addi	r2,r4,748
 800045c:	00c000c4 	movi	r3,3
 8000460:	20c0b915 	stw	r3,740(r4)
 8000464:	2080ba15 	stw	r2,744(r4)
 8000468:	2000b815 	stw	zero,736(r4)
 800046c:	05c00204 	movi	r23,8
 8000470:	00800104 	movi	r2,4
 8000474:	2025883a 	mov	r18,r4
 8000478:	b80d883a 	mov	r6,r23
 800047c:	81001704 	addi	r4,r16,92
 8000480:	000b883a 	mov	r5,zero
 8000484:	80000015 	stw	zero,0(r16)
 8000488:	80000115 	stw	zero,4(r16)
 800048c:	80000215 	stw	zero,8(r16)
 8000490:	8080030d 	sth	r2,12(r16)
 8000494:	80001915 	stw	zero,100(r16)
 8000498:	8000038d 	sth	zero,14(r16)
 800049c:	80000415 	stw	zero,16(r16)
 80004a0:	80000515 	stw	zero,20(r16)
 80004a4:	80000615 	stw	zero,24(r16)
 80004a8:	80019a00 	call	80019a0 <memset>
 80004ac:	05820034 	movhi	r22,2048
 80004b0:	94400217 	ldw	r17,8(r18)
 80004b4:	05420034 	movhi	r21,2048
 80004b8:	05020034 	movhi	r20,2048
 80004bc:	04c20034 	movhi	r19,2048
 80004c0:	b5882004 	addi	r22,r22,8320
 80004c4:	ad483704 	addi	r21,r21,8412
 80004c8:	a5085604 	addi	r20,r20,8536
 80004cc:	9cc86d04 	addi	r19,r19,8628
 80004d0:	85800815 	stw	r22,32(r16)
 80004d4:	85400915 	stw	r21,36(r16)
 80004d8:	85000a15 	stw	r20,40(r16)
 80004dc:	84c00b15 	stw	r19,44(r16)
 80004e0:	84000715 	stw	r16,28(r16)
 80004e4:	00800284 	movi	r2,10
 80004e8:	8880030d 	sth	r2,12(r17)
 80004ec:	00800044 	movi	r2,1
 80004f0:	b80d883a 	mov	r6,r23
 80004f4:	89001704 	addi	r4,r17,92
 80004f8:	000b883a 	mov	r5,zero
 80004fc:	88000015 	stw	zero,0(r17)
 8000500:	88000115 	stw	zero,4(r17)
 8000504:	88000215 	stw	zero,8(r17)
 8000508:	88001915 	stw	zero,100(r17)
 800050c:	8880038d 	sth	r2,14(r17)
 8000510:	88000415 	stw	zero,16(r17)
 8000514:	88000515 	stw	zero,20(r17)
 8000518:	88000615 	stw	zero,24(r17)
 800051c:	80019a00 	call	80019a0 <memset>
 8000520:	94000317 	ldw	r16,12(r18)
 8000524:	00800484 	movi	r2,18
 8000528:	8c400715 	stw	r17,28(r17)
 800052c:	8d800815 	stw	r22,32(r17)
 8000530:	8d400915 	stw	r21,36(r17)
 8000534:	8d000a15 	stw	r20,40(r17)
 8000538:	8cc00b15 	stw	r19,44(r17)
 800053c:	8080030d 	sth	r2,12(r16)
 8000540:	00800084 	movi	r2,2
 8000544:	80000015 	stw	zero,0(r16)
 8000548:	80000115 	stw	zero,4(r16)
 800054c:	80000215 	stw	zero,8(r16)
 8000550:	80001915 	stw	zero,100(r16)
 8000554:	8080038d 	sth	r2,14(r16)
 8000558:	80000415 	stw	zero,16(r16)
 800055c:	80000515 	stw	zero,20(r16)
 8000560:	80000615 	stw	zero,24(r16)
 8000564:	b80d883a 	mov	r6,r23
 8000568:	000b883a 	mov	r5,zero
 800056c:	81001704 	addi	r4,r16,92
 8000570:	80019a00 	call	80019a0 <memset>
 8000574:	00800044 	movi	r2,1
 8000578:	84000715 	stw	r16,28(r16)
 800057c:	85800815 	stw	r22,32(r16)
 8000580:	85400915 	stw	r21,36(r16)
 8000584:	85000a15 	stw	r20,40(r16)
 8000588:	84c00b15 	stw	r19,44(r16)
 800058c:	90800e15 	stw	r2,56(r18)
 8000590:	dfc00817 	ldw	ra,32(sp)
 8000594:	ddc00717 	ldw	r23,28(sp)
 8000598:	dd800617 	ldw	r22,24(sp)
 800059c:	dd400517 	ldw	r21,20(sp)
 80005a0:	dd000417 	ldw	r20,16(sp)
 80005a4:	dcc00317 	ldw	r19,12(sp)
 80005a8:	dc800217 	ldw	r18,8(sp)
 80005ac:	dc400117 	ldw	r17,4(sp)
 80005b0:	dc000017 	ldw	r16,0(sp)
 80005b4:	dec00904 	addi	sp,sp,36
 80005b8:	f800283a 	ret

080005bc <__fp_lock>:
 80005bc:	0005883a 	mov	r2,zero
 80005c0:	f800283a 	ret

080005c4 <__sfmoreglue>:
 80005c4:	defffc04 	addi	sp,sp,-16
 80005c8:	dc800215 	stw	r18,8(sp)
 80005cc:	2825883a 	mov	r18,r5
 80005d0:	dc000015 	stw	r16,0(sp)
 80005d4:	01401a04 	movi	r5,104
 80005d8:	2021883a 	mov	r16,r4
 80005dc:	913fffc4 	addi	r4,r18,-1
 80005e0:	dfc00315 	stw	ra,12(sp)
 80005e4:	dc400115 	stw	r17,4(sp)
 80005e8:	80030840 	call	8003084 <__mulsi3>
 80005ec:	8009883a 	mov	r4,r16
 80005f0:	11401d04 	addi	r5,r2,116
 80005f4:	1023883a 	mov	r17,r2
 80005f8:	8000e0c0 	call	8000e0c <_malloc_r>
 80005fc:	1021883a 	mov	r16,r2
 8000600:	10000726 	beq	r2,zero,8000620 <__sfmoreglue+0x5c>
 8000604:	11000304 	addi	r4,r2,12
 8000608:	10000015 	stw	zero,0(r2)
 800060c:	14800115 	stw	r18,4(r2)
 8000610:	11000215 	stw	r4,8(r2)
 8000614:	89801a04 	addi	r6,r17,104
 8000618:	000b883a 	mov	r5,zero
 800061c:	80019a00 	call	80019a0 <memset>
 8000620:	8005883a 	mov	r2,r16
 8000624:	dfc00317 	ldw	ra,12(sp)
 8000628:	dc800217 	ldw	r18,8(sp)
 800062c:	dc400117 	ldw	r17,4(sp)
 8000630:	dc000017 	ldw	r16,0(sp)
 8000634:	dec00404 	addi	sp,sp,16
 8000638:	f800283a 	ret

0800063c <__sfp>:
 800063c:	defffb04 	addi	sp,sp,-20
 8000640:	dc000015 	stw	r16,0(sp)
 8000644:	04020074 	movhi	r16,2049
 8000648:	84230404 	addi	r16,r16,-29680
 800064c:	dcc00315 	stw	r19,12(sp)
 8000650:	2027883a 	mov	r19,r4
 8000654:	81000017 	ldw	r4,0(r16)
 8000658:	dfc00415 	stw	ra,16(sp)
 800065c:	dc800215 	stw	r18,8(sp)
 8000660:	20800e17 	ldw	r2,56(r4)
 8000664:	dc400115 	stw	r17,4(sp)
 8000668:	1000021e 	bne	r2,zero,8000674 <__sfp+0x38>
 800066c:	80004200 	call	8000420 <__sinit.part.1>
 8000670:	81000017 	ldw	r4,0(r16)
 8000674:	2480b804 	addi	r18,r4,736
 8000678:	047fffc4 	movi	r17,-1
 800067c:	91000117 	ldw	r4,4(r18)
 8000680:	94000217 	ldw	r16,8(r18)
 8000684:	213fffc4 	addi	r4,r4,-1
 8000688:	20000a16 	blt	r4,zero,80006b4 <__sfp+0x78>
 800068c:	8080030f 	ldh	r2,12(r16)
 8000690:	10000c26 	beq	r2,zero,80006c4 <__sfp+0x88>
 8000694:	80c01d04 	addi	r3,r16,116
 8000698:	00000206 	br	80006a4 <__sfp+0x68>
 800069c:	18bfe60f 	ldh	r2,-104(r3)
 80006a0:	10000826 	beq	r2,zero,80006c4 <__sfp+0x88>
 80006a4:	213fffc4 	addi	r4,r4,-1
 80006a8:	1c3ffd04 	addi	r16,r3,-12
 80006ac:	18c01a04 	addi	r3,r3,104
 80006b0:	247ffa1e 	bne	r4,r17,800069c <__sfp+0x60>
 80006b4:	90800017 	ldw	r2,0(r18)
 80006b8:	10001d26 	beq	r2,zero,8000730 <__sfp+0xf4>
 80006bc:	1025883a 	mov	r18,r2
 80006c0:	003fee06 	br	800067c <__sfp+0x40>
 80006c4:	00bfffc4 	movi	r2,-1
 80006c8:	8080038d 	sth	r2,14(r16)
 80006cc:	00800044 	movi	r2,1
 80006d0:	8080030d 	sth	r2,12(r16)
 80006d4:	80001915 	stw	zero,100(r16)
 80006d8:	80000015 	stw	zero,0(r16)
 80006dc:	80000215 	stw	zero,8(r16)
 80006e0:	80000115 	stw	zero,4(r16)
 80006e4:	80000415 	stw	zero,16(r16)
 80006e8:	80000515 	stw	zero,20(r16)
 80006ec:	80000615 	stw	zero,24(r16)
 80006f0:	01800204 	movi	r6,8
 80006f4:	000b883a 	mov	r5,zero
 80006f8:	81001704 	addi	r4,r16,92
 80006fc:	80019a00 	call	80019a0 <memset>
 8000700:	8005883a 	mov	r2,r16
 8000704:	80000c15 	stw	zero,48(r16)
 8000708:	80000d15 	stw	zero,52(r16)
 800070c:	80001115 	stw	zero,68(r16)
 8000710:	80001215 	stw	zero,72(r16)
 8000714:	dfc00417 	ldw	ra,16(sp)
 8000718:	dcc00317 	ldw	r19,12(sp)
 800071c:	dc800217 	ldw	r18,8(sp)
 8000720:	dc400117 	ldw	r17,4(sp)
 8000724:	dc000017 	ldw	r16,0(sp)
 8000728:	dec00504 	addi	sp,sp,20
 800072c:	f800283a 	ret
 8000730:	01400104 	movi	r5,4
 8000734:	9809883a 	mov	r4,r19
 8000738:	80005c40 	call	80005c4 <__sfmoreglue>
 800073c:	90800015 	stw	r2,0(r18)
 8000740:	103fde1e 	bne	r2,zero,80006bc <__sfp+0x80>
 8000744:	00800304 	movi	r2,12
 8000748:	98800015 	stw	r2,0(r19)
 800074c:	0005883a 	mov	r2,zero
 8000750:	003ff006 	br	8000714 <__sfp+0xd8>

08000754 <_cleanup>:
 8000754:	00820074 	movhi	r2,2049
 8000758:	10a30404 	addi	r2,r2,-29680
 800075c:	11000017 	ldw	r4,0(r2)
 8000760:	01420034 	movhi	r5,2048
 8000764:	2948f104 	addi	r5,r5,9156
 8000768:	8000d481 	jmpi	8000d48 <_fwalk_reent>

0800076c <__sinit>:
 800076c:	20800e17 	ldw	r2,56(r4)
 8000770:	10000126 	beq	r2,zero,8000778 <__sinit+0xc>
 8000774:	f800283a 	ret
 8000778:	80004201 	jmpi	8000420 <__sinit.part.1>

0800077c <__sfp_lock_acquire>:
 800077c:	f800283a 	ret

08000780 <__sfp_lock_release>:
 8000780:	f800283a 	ret

08000784 <__sinit_lock_acquire>:
 8000784:	f800283a 	ret

08000788 <__sinit_lock_release>:
 8000788:	f800283a 	ret

0800078c <__fp_lock_all>:
 800078c:	00820074 	movhi	r2,2049
 8000790:	10a30504 	addi	r2,r2,-29676
 8000794:	11000017 	ldw	r4,0(r2)
 8000798:	01420034 	movhi	r5,2048
 800079c:	29416f04 	addi	r5,r5,1468
 80007a0:	8000c841 	jmpi	8000c84 <_fwalk>

080007a4 <__fp_unlock_all>:
 80007a4:	00820074 	movhi	r2,2049
 80007a8:	10a30504 	addi	r2,r2,-29676
 80007ac:	11000017 	ldw	r4,0(r2)
 80007b0:	01420034 	movhi	r5,2048
 80007b4:	29410304 	addi	r5,r5,1036
 80007b8:	8000c841 	jmpi	8000c84 <_fwalk>

080007bc <__sfvwrite_r>:
 80007bc:	30800217 	ldw	r2,8(r6)
 80007c0:	10006726 	beq	r2,zero,8000960 <__sfvwrite_r+0x1a4>
 80007c4:	28c0030b 	ldhu	r3,12(r5)
 80007c8:	defff404 	addi	sp,sp,-48
 80007cc:	dd400715 	stw	r21,28(sp)
 80007d0:	dd000615 	stw	r20,24(sp)
 80007d4:	dc000215 	stw	r16,8(sp)
 80007d8:	dfc00b15 	stw	ra,44(sp)
 80007dc:	df000a15 	stw	fp,40(sp)
 80007e0:	ddc00915 	stw	r23,36(sp)
 80007e4:	dd800815 	stw	r22,32(sp)
 80007e8:	dcc00515 	stw	r19,20(sp)
 80007ec:	dc800415 	stw	r18,16(sp)
 80007f0:	dc400315 	stw	r17,12(sp)
 80007f4:	1880020c 	andi	r2,r3,8
 80007f8:	2821883a 	mov	r16,r5
 80007fc:	202b883a 	mov	r21,r4
 8000800:	3029883a 	mov	r20,r6
 8000804:	10002726 	beq	r2,zero,80008a4 <__sfvwrite_r+0xe8>
 8000808:	28800417 	ldw	r2,16(r5)
 800080c:	10002526 	beq	r2,zero,80008a4 <__sfvwrite_r+0xe8>
 8000810:	1880008c 	andi	r2,r3,2
 8000814:	a4400017 	ldw	r17,0(r20)
 8000818:	10002a26 	beq	r2,zero,80008c4 <__sfvwrite_r+0x108>
 800081c:	05a00034 	movhi	r22,32768
 8000820:	0027883a 	mov	r19,zero
 8000824:	0025883a 	mov	r18,zero
 8000828:	b5bf0004 	addi	r22,r22,-1024
 800082c:	980d883a 	mov	r6,r19
 8000830:	a809883a 	mov	r4,r21
 8000834:	90004626 	beq	r18,zero,8000950 <__sfvwrite_r+0x194>
 8000838:	900f883a 	mov	r7,r18
 800083c:	b480022e 	bgeu	r22,r18,8000848 <__sfvwrite_r+0x8c>
 8000840:	01e00034 	movhi	r7,32768
 8000844:	39ff0004 	addi	r7,r7,-1024
 8000848:	80800917 	ldw	r2,36(r16)
 800084c:	81400717 	ldw	r5,28(r16)
 8000850:	103ee83a 	callr	r2
 8000854:	00805a0e 	bge	zero,r2,80009c0 <__sfvwrite_r+0x204>
 8000858:	a0c00217 	ldw	r3,8(r20)
 800085c:	98a7883a 	add	r19,r19,r2
 8000860:	90a5c83a 	sub	r18,r18,r2
 8000864:	1885c83a 	sub	r2,r3,r2
 8000868:	a0800215 	stw	r2,8(r20)
 800086c:	103fef1e 	bne	r2,zero,800082c <__sfvwrite_r+0x70>
 8000870:	0005883a 	mov	r2,zero
 8000874:	dfc00b17 	ldw	ra,44(sp)
 8000878:	df000a17 	ldw	fp,40(sp)
 800087c:	ddc00917 	ldw	r23,36(sp)
 8000880:	dd800817 	ldw	r22,32(sp)
 8000884:	dd400717 	ldw	r21,28(sp)
 8000888:	dd000617 	ldw	r20,24(sp)
 800088c:	dcc00517 	ldw	r19,20(sp)
 8000890:	dc800417 	ldw	r18,16(sp)
 8000894:	dc400317 	ldw	r17,12(sp)
 8000898:	dc000217 	ldw	r16,8(sp)
 800089c:	dec00c04 	addi	sp,sp,48
 80008a0:	f800283a 	ret
 80008a4:	800b883a 	mov	r5,r16
 80008a8:	a809883a 	mov	r4,r21
 80008ac:	800221c0 	call	800221c <__swsetup_r>
 80008b0:	1000ee1e 	bne	r2,zero,8000c6c <__sfvwrite_r+0x4b0>
 80008b4:	80c0030b 	ldhu	r3,12(r16)
 80008b8:	a4400017 	ldw	r17,0(r20)
 80008bc:	1880008c 	andi	r2,r3,2
 80008c0:	103fd61e 	bne	r2,zero,800081c <__sfvwrite_r+0x60>
 80008c4:	1880004c 	andi	r2,r3,1
 80008c8:	1000421e 	bne	r2,zero,80009d4 <__sfvwrite_r+0x218>
 80008cc:	0039883a 	mov	fp,zero
 80008d0:	0025883a 	mov	r18,zero
 80008d4:	90001a26 	beq	r18,zero,8000940 <__sfvwrite_r+0x184>
 80008d8:	1880800c 	andi	r2,r3,512
 80008dc:	84c00217 	ldw	r19,8(r16)
 80008e0:	10002126 	beq	r2,zero,8000968 <__sfvwrite_r+0x1ac>
 80008e4:	982f883a 	mov	r23,r19
 80008e8:	94c09636 	bltu	r18,r19,8000b44 <__sfvwrite_r+0x388>
 80008ec:	1881200c 	andi	r2,r3,1152
 80008f0:	1000a11e 	bne	r2,zero,8000b78 <__sfvwrite_r+0x3bc>
 80008f4:	81000017 	ldw	r4,0(r16)
 80008f8:	b80d883a 	mov	r6,r23
 80008fc:	e00b883a 	mov	r5,fp
 8000900:	80018440 	call	8001844 <memmove>
 8000904:	80c00217 	ldw	r3,8(r16)
 8000908:	81000017 	ldw	r4,0(r16)
 800090c:	9005883a 	mov	r2,r18
 8000910:	1ce7c83a 	sub	r19,r3,r19
 8000914:	25cf883a 	add	r7,r4,r23
 8000918:	84c00215 	stw	r19,8(r16)
 800091c:	81c00015 	stw	r7,0(r16)
 8000920:	a0c00217 	ldw	r3,8(r20)
 8000924:	e0b9883a 	add	fp,fp,r2
 8000928:	90a5c83a 	sub	r18,r18,r2
 800092c:	18a7c83a 	sub	r19,r3,r2
 8000930:	a4c00215 	stw	r19,8(r20)
 8000934:	983fce26 	beq	r19,zero,8000870 <__sfvwrite_r+0xb4>
 8000938:	80c0030b 	ldhu	r3,12(r16)
 800093c:	903fe61e 	bne	r18,zero,80008d8 <__sfvwrite_r+0x11c>
 8000940:	8f000017 	ldw	fp,0(r17)
 8000944:	8c800117 	ldw	r18,4(r17)
 8000948:	8c400204 	addi	r17,r17,8
 800094c:	003fe106 	br	80008d4 <__sfvwrite_r+0x118>
 8000950:	8cc00017 	ldw	r19,0(r17)
 8000954:	8c800117 	ldw	r18,4(r17)
 8000958:	8c400204 	addi	r17,r17,8
 800095c:	003fb306 	br	800082c <__sfvwrite_r+0x70>
 8000960:	0005883a 	mov	r2,zero
 8000964:	f800283a 	ret
 8000968:	81000017 	ldw	r4,0(r16)
 800096c:	80800417 	ldw	r2,16(r16)
 8000970:	11005a36 	bltu	r2,r4,8000adc <__sfvwrite_r+0x320>
 8000974:	85c00517 	ldw	r23,20(r16)
 8000978:	95c05836 	bltu	r18,r23,8000adc <__sfvwrite_r+0x320>
 800097c:	00a00034 	movhi	r2,32768
 8000980:	10bfffc4 	addi	r2,r2,-1
 8000984:	9009883a 	mov	r4,r18
 8000988:	1480012e 	bgeu	r2,r18,8000990 <__sfvwrite_r+0x1d4>
 800098c:	1009883a 	mov	r4,r2
 8000990:	b80b883a 	mov	r5,r23
 8000994:	8002ed00 	call	8002ed0 <__divsi3>
 8000998:	b80b883a 	mov	r5,r23
 800099c:	1009883a 	mov	r4,r2
 80009a0:	80030840 	call	8003084 <__mulsi3>
 80009a4:	81400717 	ldw	r5,28(r16)
 80009a8:	80c00917 	ldw	r3,36(r16)
 80009ac:	100f883a 	mov	r7,r2
 80009b0:	e00d883a 	mov	r6,fp
 80009b4:	a809883a 	mov	r4,r21
 80009b8:	183ee83a 	callr	r3
 80009bc:	00bfd816 	blt	zero,r2,8000920 <__sfvwrite_r+0x164>
 80009c0:	8080030b 	ldhu	r2,12(r16)
 80009c4:	10801014 	ori	r2,r2,64
 80009c8:	8080030d 	sth	r2,12(r16)
 80009cc:	00bfffc4 	movi	r2,-1
 80009d0:	003fa806 	br	8000874 <__sfvwrite_r+0xb8>
 80009d4:	0027883a 	mov	r19,zero
 80009d8:	0011883a 	mov	r8,zero
 80009dc:	0039883a 	mov	fp,zero
 80009e0:	0025883a 	mov	r18,zero
 80009e4:	90001f26 	beq	r18,zero,8000a64 <__sfvwrite_r+0x2a8>
 80009e8:	40005a26 	beq	r8,zero,8000b54 <__sfvwrite_r+0x398>
 80009ec:	982d883a 	mov	r22,r19
 80009f0:	94c0012e 	bgeu	r18,r19,80009f8 <__sfvwrite_r+0x23c>
 80009f4:	902d883a 	mov	r22,r18
 80009f8:	81000017 	ldw	r4,0(r16)
 80009fc:	80800417 	ldw	r2,16(r16)
 8000a00:	b02f883a 	mov	r23,r22
 8000a04:	81c00517 	ldw	r7,20(r16)
 8000a08:	1100032e 	bgeu	r2,r4,8000a18 <__sfvwrite_r+0x25c>
 8000a0c:	80c00217 	ldw	r3,8(r16)
 8000a10:	38c7883a 	add	r3,r7,r3
 8000a14:	1d801816 	blt	r3,r22,8000a78 <__sfvwrite_r+0x2bc>
 8000a18:	b1c03e16 	blt	r22,r7,8000b14 <__sfvwrite_r+0x358>
 8000a1c:	80800917 	ldw	r2,36(r16)
 8000a20:	81400717 	ldw	r5,28(r16)
 8000a24:	e00d883a 	mov	r6,fp
 8000a28:	da000115 	stw	r8,4(sp)
 8000a2c:	a809883a 	mov	r4,r21
 8000a30:	103ee83a 	callr	r2
 8000a34:	102f883a 	mov	r23,r2
 8000a38:	da000117 	ldw	r8,4(sp)
 8000a3c:	00bfe00e 	bge	zero,r2,80009c0 <__sfvwrite_r+0x204>
 8000a40:	9de7c83a 	sub	r19,r19,r23
 8000a44:	98001f26 	beq	r19,zero,8000ac4 <__sfvwrite_r+0x308>
 8000a48:	a0800217 	ldw	r2,8(r20)
 8000a4c:	e5f9883a 	add	fp,fp,r23
 8000a50:	95e5c83a 	sub	r18,r18,r23
 8000a54:	15efc83a 	sub	r23,r2,r23
 8000a58:	a5c00215 	stw	r23,8(r20)
 8000a5c:	b83f8426 	beq	r23,zero,8000870 <__sfvwrite_r+0xb4>
 8000a60:	903fe11e 	bne	r18,zero,80009e8 <__sfvwrite_r+0x22c>
 8000a64:	8f000017 	ldw	fp,0(r17)
 8000a68:	8c800117 	ldw	r18,4(r17)
 8000a6c:	0011883a 	mov	r8,zero
 8000a70:	8c400204 	addi	r17,r17,8
 8000a74:	003fdb06 	br	80009e4 <__sfvwrite_r+0x228>
 8000a78:	180d883a 	mov	r6,r3
 8000a7c:	e00b883a 	mov	r5,fp
 8000a80:	da000115 	stw	r8,4(sp)
 8000a84:	d8c00015 	stw	r3,0(sp)
 8000a88:	80018440 	call	8001844 <memmove>
 8000a8c:	d8c00017 	ldw	r3,0(sp)
 8000a90:	80800017 	ldw	r2,0(r16)
 8000a94:	800b883a 	mov	r5,r16
 8000a98:	a809883a 	mov	r4,r21
 8000a9c:	10c5883a 	add	r2,r2,r3
 8000aa0:	80800015 	stw	r2,0(r16)
 8000aa4:	d8c00015 	stw	r3,0(sp)
 8000aa8:	80026e40 	call	80026e4 <_fflush_r>
 8000aac:	d8c00017 	ldw	r3,0(sp)
 8000ab0:	da000117 	ldw	r8,4(sp)
 8000ab4:	103fc21e 	bne	r2,zero,80009c0 <__sfvwrite_r+0x204>
 8000ab8:	182f883a 	mov	r23,r3
 8000abc:	9de7c83a 	sub	r19,r19,r23
 8000ac0:	983fe11e 	bne	r19,zero,8000a48 <__sfvwrite_r+0x28c>
 8000ac4:	800b883a 	mov	r5,r16
 8000ac8:	a809883a 	mov	r4,r21
 8000acc:	80026e40 	call	80026e4 <_fflush_r>
 8000ad0:	103fbb1e 	bne	r2,zero,80009c0 <__sfvwrite_r+0x204>
 8000ad4:	0011883a 	mov	r8,zero
 8000ad8:	003fdb06 	br	8000a48 <__sfvwrite_r+0x28c>
 8000adc:	94c0012e 	bgeu	r18,r19,8000ae4 <__sfvwrite_r+0x328>
 8000ae0:	9027883a 	mov	r19,r18
 8000ae4:	980d883a 	mov	r6,r19
 8000ae8:	e00b883a 	mov	r5,fp
 8000aec:	80018440 	call	8001844 <memmove>
 8000af0:	80800217 	ldw	r2,8(r16)
 8000af4:	80c00017 	ldw	r3,0(r16)
 8000af8:	14c5c83a 	sub	r2,r2,r19
 8000afc:	1cc7883a 	add	r3,r3,r19
 8000b00:	80800215 	stw	r2,8(r16)
 8000b04:	80c00015 	stw	r3,0(r16)
 8000b08:	10004326 	beq	r2,zero,8000c18 <__sfvwrite_r+0x45c>
 8000b0c:	9805883a 	mov	r2,r19
 8000b10:	003f8306 	br	8000920 <__sfvwrite_r+0x164>
 8000b14:	b00d883a 	mov	r6,r22
 8000b18:	e00b883a 	mov	r5,fp
 8000b1c:	da000115 	stw	r8,4(sp)
 8000b20:	80018440 	call	8001844 <memmove>
 8000b24:	80800217 	ldw	r2,8(r16)
 8000b28:	80c00017 	ldw	r3,0(r16)
 8000b2c:	da000117 	ldw	r8,4(sp)
 8000b30:	1585c83a 	sub	r2,r2,r22
 8000b34:	1dad883a 	add	r22,r3,r22
 8000b38:	80800215 	stw	r2,8(r16)
 8000b3c:	85800015 	stw	r22,0(r16)
 8000b40:	003fbf06 	br	8000a40 <__sfvwrite_r+0x284>
 8000b44:	81000017 	ldw	r4,0(r16)
 8000b48:	9027883a 	mov	r19,r18
 8000b4c:	902f883a 	mov	r23,r18
 8000b50:	003f6906 	br	80008f8 <__sfvwrite_r+0x13c>
 8000b54:	900d883a 	mov	r6,r18
 8000b58:	01400284 	movi	r5,10
 8000b5c:	e009883a 	mov	r4,fp
 8000b60:	80016180 	call	8001618 <memchr>
 8000b64:	10003e26 	beq	r2,zero,8000c60 <__sfvwrite_r+0x4a4>
 8000b68:	10800044 	addi	r2,r2,1
 8000b6c:	1727c83a 	sub	r19,r2,fp
 8000b70:	02000044 	movi	r8,1
 8000b74:	003f9d06 	br	80009ec <__sfvwrite_r+0x230>
 8000b78:	80800517 	ldw	r2,20(r16)
 8000b7c:	81400417 	ldw	r5,16(r16)
 8000b80:	81c00017 	ldw	r7,0(r16)
 8000b84:	10a7883a 	add	r19,r2,r2
 8000b88:	9885883a 	add	r2,r19,r2
 8000b8c:	1026d7fa 	srli	r19,r2,31
 8000b90:	396dc83a 	sub	r22,r7,r5
 8000b94:	b1000044 	addi	r4,r22,1
 8000b98:	9885883a 	add	r2,r19,r2
 8000b9c:	1027d07a 	srai	r19,r2,1
 8000ba0:	2485883a 	add	r2,r4,r18
 8000ba4:	980d883a 	mov	r6,r19
 8000ba8:	9880022e 	bgeu	r19,r2,8000bb4 <__sfvwrite_r+0x3f8>
 8000bac:	1027883a 	mov	r19,r2
 8000bb0:	100d883a 	mov	r6,r2
 8000bb4:	18c1000c 	andi	r3,r3,1024
 8000bb8:	18001c26 	beq	r3,zero,8000c2c <__sfvwrite_r+0x470>
 8000bbc:	300b883a 	mov	r5,r6
 8000bc0:	a809883a 	mov	r4,r21
 8000bc4:	8000e0c0 	call	8000e0c <_malloc_r>
 8000bc8:	102f883a 	mov	r23,r2
 8000bcc:	10002926 	beq	r2,zero,8000c74 <__sfvwrite_r+0x4b8>
 8000bd0:	81400417 	ldw	r5,16(r16)
 8000bd4:	b00d883a 	mov	r6,r22
 8000bd8:	1009883a 	mov	r4,r2
 8000bdc:	80016fc0 	call	80016fc <memcpy>
 8000be0:	8080030b 	ldhu	r2,12(r16)
 8000be4:	00fedfc4 	movi	r3,-1153
 8000be8:	10c4703a 	and	r2,r2,r3
 8000bec:	10802014 	ori	r2,r2,128
 8000bf0:	8080030d 	sth	r2,12(r16)
 8000bf4:	bd89883a 	add	r4,r23,r22
 8000bf8:	9d8fc83a 	sub	r7,r19,r22
 8000bfc:	85c00415 	stw	r23,16(r16)
 8000c00:	84c00515 	stw	r19,20(r16)
 8000c04:	81000015 	stw	r4,0(r16)
 8000c08:	9027883a 	mov	r19,r18
 8000c0c:	81c00215 	stw	r7,8(r16)
 8000c10:	902f883a 	mov	r23,r18
 8000c14:	003f3806 	br	80008f8 <__sfvwrite_r+0x13c>
 8000c18:	800b883a 	mov	r5,r16
 8000c1c:	a809883a 	mov	r4,r21
 8000c20:	80026e40 	call	80026e4 <_fflush_r>
 8000c24:	103fb926 	beq	r2,zero,8000b0c <__sfvwrite_r+0x350>
 8000c28:	003f6506 	br	80009c0 <__sfvwrite_r+0x204>
 8000c2c:	a809883a 	mov	r4,r21
 8000c30:	8001ac80 	call	8001ac8 <_realloc_r>
 8000c34:	102f883a 	mov	r23,r2
 8000c38:	103fee1e 	bne	r2,zero,8000bf4 <__sfvwrite_r+0x438>
 8000c3c:	81400417 	ldw	r5,16(r16)
 8000c40:	a809883a 	mov	r4,r21
 8000c44:	80028940 	call	8002894 <_free_r>
 8000c48:	8080030b 	ldhu	r2,12(r16)
 8000c4c:	00ffdfc4 	movi	r3,-129
 8000c50:	1884703a 	and	r2,r3,r2
 8000c54:	00c00304 	movi	r3,12
 8000c58:	a8c00015 	stw	r3,0(r21)
 8000c5c:	003f5906 	br	80009c4 <__sfvwrite_r+0x208>
 8000c60:	94c00044 	addi	r19,r18,1
 8000c64:	02000044 	movi	r8,1
 8000c68:	003f6006 	br	80009ec <__sfvwrite_r+0x230>
 8000c6c:	00bfffc4 	movi	r2,-1
 8000c70:	003f0006 	br	8000874 <__sfvwrite_r+0xb8>
 8000c74:	00800304 	movi	r2,12
 8000c78:	a8800015 	stw	r2,0(r21)
 8000c7c:	8080030b 	ldhu	r2,12(r16)
 8000c80:	003f5006 	br	80009c4 <__sfvwrite_r+0x208>

08000c84 <_fwalk>:
 8000c84:	defff704 	addi	sp,sp,-36
 8000c88:	dd000415 	stw	r20,16(sp)
 8000c8c:	dfc00815 	stw	ra,32(sp)
 8000c90:	ddc00715 	stw	r23,28(sp)
 8000c94:	dd800615 	stw	r22,24(sp)
 8000c98:	dd400515 	stw	r21,20(sp)
 8000c9c:	dcc00315 	stw	r19,12(sp)
 8000ca0:	dc800215 	stw	r18,8(sp)
 8000ca4:	dc400115 	stw	r17,4(sp)
 8000ca8:	dc000015 	stw	r16,0(sp)
 8000cac:	2500b804 	addi	r20,r4,736
 8000cb0:	a0002326 	beq	r20,zero,8000d40 <_fwalk+0xbc>
 8000cb4:	282b883a 	mov	r21,r5
 8000cb8:	002f883a 	mov	r23,zero
 8000cbc:	05800044 	movi	r22,1
 8000cc0:	04ffffc4 	movi	r19,-1
 8000cc4:	a4400117 	ldw	r17,4(r20)
 8000cc8:	a4800217 	ldw	r18,8(r20)
 8000ccc:	8c7fffc4 	addi	r17,r17,-1
 8000cd0:	88000d16 	blt	r17,zero,8000d08 <_fwalk+0x84>
 8000cd4:	94000304 	addi	r16,r18,12
 8000cd8:	94800384 	addi	r18,r18,14
 8000cdc:	8080000b 	ldhu	r2,0(r16)
 8000ce0:	8c7fffc4 	addi	r17,r17,-1
 8000ce4:	813ffd04 	addi	r4,r16,-12
 8000ce8:	b080042e 	bgeu	r22,r2,8000cfc <_fwalk+0x78>
 8000cec:	9080000f 	ldh	r2,0(r18)
 8000cf0:	14c00226 	beq	r2,r19,8000cfc <_fwalk+0x78>
 8000cf4:	a83ee83a 	callr	r21
 8000cf8:	b8aeb03a 	or	r23,r23,r2
 8000cfc:	84001a04 	addi	r16,r16,104
 8000d00:	94801a04 	addi	r18,r18,104
 8000d04:	8cfff51e 	bne	r17,r19,8000cdc <_fwalk+0x58>
 8000d08:	a5000017 	ldw	r20,0(r20)
 8000d0c:	a03fed1e 	bne	r20,zero,8000cc4 <_fwalk+0x40>
 8000d10:	b805883a 	mov	r2,r23
 8000d14:	dfc00817 	ldw	ra,32(sp)
 8000d18:	ddc00717 	ldw	r23,28(sp)
 8000d1c:	dd800617 	ldw	r22,24(sp)
 8000d20:	dd400517 	ldw	r21,20(sp)
 8000d24:	dd000417 	ldw	r20,16(sp)
 8000d28:	dcc00317 	ldw	r19,12(sp)
 8000d2c:	dc800217 	ldw	r18,8(sp)
 8000d30:	dc400117 	ldw	r17,4(sp)
 8000d34:	dc000017 	ldw	r16,0(sp)
 8000d38:	dec00904 	addi	sp,sp,36
 8000d3c:	f800283a 	ret
 8000d40:	002f883a 	mov	r23,zero
 8000d44:	003ff206 	br	8000d10 <_fwalk+0x8c>

08000d48 <_fwalk_reent>:
 8000d48:	defff704 	addi	sp,sp,-36
 8000d4c:	dd000415 	stw	r20,16(sp)
 8000d50:	dfc00815 	stw	ra,32(sp)
 8000d54:	ddc00715 	stw	r23,28(sp)
 8000d58:	dd800615 	stw	r22,24(sp)
 8000d5c:	dd400515 	stw	r21,20(sp)
 8000d60:	dcc00315 	stw	r19,12(sp)
 8000d64:	dc800215 	stw	r18,8(sp)
 8000d68:	dc400115 	stw	r17,4(sp)
 8000d6c:	dc000015 	stw	r16,0(sp)
 8000d70:	2500b804 	addi	r20,r4,736
 8000d74:	a0002326 	beq	r20,zero,8000e04 <_fwalk_reent+0xbc>
 8000d78:	282b883a 	mov	r21,r5
 8000d7c:	2027883a 	mov	r19,r4
 8000d80:	002f883a 	mov	r23,zero
 8000d84:	05800044 	movi	r22,1
 8000d88:	04bfffc4 	movi	r18,-1
 8000d8c:	a4400117 	ldw	r17,4(r20)
 8000d90:	a4000217 	ldw	r16,8(r20)
 8000d94:	8c7fffc4 	addi	r17,r17,-1
 8000d98:	88000c16 	blt	r17,zero,8000dcc <_fwalk_reent+0x84>
 8000d9c:	84000304 	addi	r16,r16,12
 8000da0:	8080000b 	ldhu	r2,0(r16)
 8000da4:	8c7fffc4 	addi	r17,r17,-1
 8000da8:	817ffd04 	addi	r5,r16,-12
 8000dac:	b080052e 	bgeu	r22,r2,8000dc4 <_fwalk_reent+0x7c>
 8000db0:	8080008f 	ldh	r2,2(r16)
 8000db4:	9809883a 	mov	r4,r19
 8000db8:	14800226 	beq	r2,r18,8000dc4 <_fwalk_reent+0x7c>
 8000dbc:	a83ee83a 	callr	r21
 8000dc0:	b8aeb03a 	or	r23,r23,r2
 8000dc4:	84001a04 	addi	r16,r16,104
 8000dc8:	8cbff51e 	bne	r17,r18,8000da0 <_fwalk_reent+0x58>
 8000dcc:	a5000017 	ldw	r20,0(r20)
 8000dd0:	a03fee1e 	bne	r20,zero,8000d8c <_fwalk_reent+0x44>
 8000dd4:	b805883a 	mov	r2,r23
 8000dd8:	dfc00817 	ldw	ra,32(sp)
 8000ddc:	ddc00717 	ldw	r23,28(sp)
 8000de0:	dd800617 	ldw	r22,24(sp)
 8000de4:	dd400517 	ldw	r21,20(sp)
 8000de8:	dd000417 	ldw	r20,16(sp)
 8000dec:	dcc00317 	ldw	r19,12(sp)
 8000df0:	dc800217 	ldw	r18,8(sp)
 8000df4:	dc400117 	ldw	r17,4(sp)
 8000df8:	dc000017 	ldw	r16,0(sp)
 8000dfc:	dec00904 	addi	sp,sp,36
 8000e00:	f800283a 	ret
 8000e04:	002f883a 	mov	r23,zero
 8000e08:	003ff206 	br	8000dd4 <_fwalk_reent+0x8c>

08000e0c <_malloc_r>:
 8000e0c:	defff504 	addi	sp,sp,-44
 8000e10:	dc800315 	stw	r18,12(sp)
 8000e14:	dfc00a15 	stw	ra,40(sp)
 8000e18:	df000915 	stw	fp,36(sp)
 8000e1c:	ddc00815 	stw	r23,32(sp)
 8000e20:	dd800715 	stw	r22,28(sp)
 8000e24:	dd400615 	stw	r21,24(sp)
 8000e28:	dd000515 	stw	r20,20(sp)
 8000e2c:	dcc00415 	stw	r19,16(sp)
 8000e30:	dc400215 	stw	r17,8(sp)
 8000e34:	dc000115 	stw	r16,4(sp)
 8000e38:	288002c4 	addi	r2,r5,11
 8000e3c:	00c00584 	movi	r3,22
 8000e40:	2025883a 	mov	r18,r4
 8000e44:	18807f2e 	bgeu	r3,r2,8001044 <_malloc_r+0x238>
 8000e48:	047ffe04 	movi	r17,-8
 8000e4c:	1462703a 	and	r17,r2,r17
 8000e50:	8800a316 	blt	r17,zero,80010e0 <_malloc_r+0x2d4>
 8000e54:	8940a236 	bltu	r17,r5,80010e0 <_malloc_r+0x2d4>
 8000e58:	80036480 	call	8003648 <__malloc_lock>
 8000e5c:	00807dc4 	movi	r2,503
 8000e60:	1441e92e 	bgeu	r2,r17,8001608 <_malloc_r+0x7fc>
 8000e64:	8804d27a 	srli	r2,r17,9
 8000e68:	1000a126 	beq	r2,zero,80010f0 <_malloc_r+0x2e4>
 8000e6c:	00c00104 	movi	r3,4
 8000e70:	18811e36 	bltu	r3,r2,80012ec <_malloc_r+0x4e0>
 8000e74:	8804d1ba 	srli	r2,r17,6
 8000e78:	12000e44 	addi	r8,r2,57
 8000e7c:	11c00e04 	addi	r7,r2,56
 8000e80:	4209883a 	add	r4,r8,r8
 8000e84:	04c20034 	movhi	r19,2048
 8000e88:	2109883a 	add	r4,r4,r4
 8000e8c:	9cdd0b04 	addi	r19,r19,29740
 8000e90:	2109883a 	add	r4,r4,r4
 8000e94:	9909883a 	add	r4,r19,r4
 8000e98:	24000117 	ldw	r16,4(r4)
 8000e9c:	213ffe04 	addi	r4,r4,-8
 8000ea0:	24009726 	beq	r4,r16,8001100 <_malloc_r+0x2f4>
 8000ea4:	80800117 	ldw	r2,4(r16)
 8000ea8:	01bfff04 	movi	r6,-4
 8000eac:	014003c4 	movi	r5,15
 8000eb0:	1184703a 	and	r2,r2,r6
 8000eb4:	1447c83a 	sub	r3,r2,r17
 8000eb8:	28c00716 	blt	r5,r3,8000ed8 <_malloc_r+0xcc>
 8000ebc:	1800920e 	bge	r3,zero,8001108 <_malloc_r+0x2fc>
 8000ec0:	84000317 	ldw	r16,12(r16)
 8000ec4:	24008e26 	beq	r4,r16,8001100 <_malloc_r+0x2f4>
 8000ec8:	80800117 	ldw	r2,4(r16)
 8000ecc:	1184703a 	and	r2,r2,r6
 8000ed0:	1447c83a 	sub	r3,r2,r17
 8000ed4:	28fff90e 	bge	r5,r3,8000ebc <_malloc_r+0xb0>
 8000ed8:	3809883a 	mov	r4,r7
 8000edc:	01820034 	movhi	r6,2048
 8000ee0:	9c000417 	ldw	r16,16(r19)
 8000ee4:	319d0b04 	addi	r6,r6,29740
 8000ee8:	32000204 	addi	r8,r6,8
 8000eec:	82013426 	beq	r16,r8,80013c0 <_malloc_r+0x5b4>
 8000ef0:	80c00117 	ldw	r3,4(r16)
 8000ef4:	00bfff04 	movi	r2,-4
 8000ef8:	188e703a 	and	r7,r3,r2
 8000efc:	3c45c83a 	sub	r2,r7,r17
 8000f00:	00c003c4 	movi	r3,15
 8000f04:	18811f16 	blt	r3,r2,8001384 <_malloc_r+0x578>
 8000f08:	32000515 	stw	r8,20(r6)
 8000f0c:	32000415 	stw	r8,16(r6)
 8000f10:	10007f0e 	bge	r2,zero,8001110 <_malloc_r+0x304>
 8000f14:	00807fc4 	movi	r2,511
 8000f18:	11c0fd36 	bltu	r2,r7,8001310 <_malloc_r+0x504>
 8000f1c:	3806d0fa 	srli	r3,r7,3
 8000f20:	01c00044 	movi	r7,1
 8000f24:	30800117 	ldw	r2,4(r6)
 8000f28:	19400044 	addi	r5,r3,1
 8000f2c:	294b883a 	add	r5,r5,r5
 8000f30:	1807d0ba 	srai	r3,r3,2
 8000f34:	294b883a 	add	r5,r5,r5
 8000f38:	294b883a 	add	r5,r5,r5
 8000f3c:	298b883a 	add	r5,r5,r6
 8000f40:	38c6983a 	sll	r3,r7,r3
 8000f44:	29c00017 	ldw	r7,0(r5)
 8000f48:	2a7ffe04 	addi	r9,r5,-8
 8000f4c:	1886b03a 	or	r3,r3,r2
 8000f50:	82400315 	stw	r9,12(r16)
 8000f54:	81c00215 	stw	r7,8(r16)
 8000f58:	30c00115 	stw	r3,4(r6)
 8000f5c:	2c000015 	stw	r16,0(r5)
 8000f60:	3c000315 	stw	r16,12(r7)
 8000f64:	2005d0ba 	srai	r2,r4,2
 8000f68:	01400044 	movi	r5,1
 8000f6c:	288a983a 	sll	r5,r5,r2
 8000f70:	19406f36 	bltu	r3,r5,8001130 <_malloc_r+0x324>
 8000f74:	28c4703a 	and	r2,r5,r3
 8000f78:	10000a1e 	bne	r2,zero,8000fa4 <_malloc_r+0x198>
 8000f7c:	00bfff04 	movi	r2,-4
 8000f80:	294b883a 	add	r5,r5,r5
 8000f84:	2088703a 	and	r4,r4,r2
 8000f88:	28c4703a 	and	r2,r5,r3
 8000f8c:	21000104 	addi	r4,r4,4
 8000f90:	1000041e 	bne	r2,zero,8000fa4 <_malloc_r+0x198>
 8000f94:	294b883a 	add	r5,r5,r5
 8000f98:	28c4703a 	and	r2,r5,r3
 8000f9c:	21000104 	addi	r4,r4,4
 8000fa0:	103ffc26 	beq	r2,zero,8000f94 <_malloc_r+0x188>
 8000fa4:	02bfff04 	movi	r10,-4
 8000fa8:	024003c4 	movi	r9,15
 8000fac:	21800044 	addi	r6,r4,1
 8000fb0:	318d883a 	add	r6,r6,r6
 8000fb4:	318d883a 	add	r6,r6,r6
 8000fb8:	318d883a 	add	r6,r6,r6
 8000fbc:	998d883a 	add	r6,r19,r6
 8000fc0:	333ffe04 	addi	r12,r6,-8
 8000fc4:	2017883a 	mov	r11,r4
 8000fc8:	31800104 	addi	r6,r6,4
 8000fcc:	34000017 	ldw	r16,0(r6)
 8000fd0:	31fffd04 	addi	r7,r6,-12
 8000fd4:	81c0041e 	bne	r16,r7,8000fe8 <_malloc_r+0x1dc>
 8000fd8:	0000fb06 	br	80013c8 <_malloc_r+0x5bc>
 8000fdc:	1801030e 	bge	r3,zero,80013ec <_malloc_r+0x5e0>
 8000fe0:	84000317 	ldw	r16,12(r16)
 8000fe4:	81c0f826 	beq	r16,r7,80013c8 <_malloc_r+0x5bc>
 8000fe8:	80800117 	ldw	r2,4(r16)
 8000fec:	1284703a 	and	r2,r2,r10
 8000ff0:	1447c83a 	sub	r3,r2,r17
 8000ff4:	48fff90e 	bge	r9,r3,8000fdc <_malloc_r+0x1d0>
 8000ff8:	80800317 	ldw	r2,12(r16)
 8000ffc:	81000217 	ldw	r4,8(r16)
 8001000:	89400054 	ori	r5,r17,1
 8001004:	81400115 	stw	r5,4(r16)
 8001008:	20800315 	stw	r2,12(r4)
 800100c:	11000215 	stw	r4,8(r2)
 8001010:	8463883a 	add	r17,r16,r17
 8001014:	9c400515 	stw	r17,20(r19)
 8001018:	9c400415 	stw	r17,16(r19)
 800101c:	18800054 	ori	r2,r3,1
 8001020:	88800115 	stw	r2,4(r17)
 8001024:	8a000315 	stw	r8,12(r17)
 8001028:	8a000215 	stw	r8,8(r17)
 800102c:	88e3883a 	add	r17,r17,r3
 8001030:	88c00015 	stw	r3,0(r17)
 8001034:	9009883a 	mov	r4,r18
 8001038:	800366c0 	call	800366c <__malloc_unlock>
 800103c:	80800204 	addi	r2,r16,8
 8001040:	00001b06 	br	80010b0 <_malloc_r+0x2a4>
 8001044:	04400404 	movi	r17,16
 8001048:	89402536 	bltu	r17,r5,80010e0 <_malloc_r+0x2d4>
 800104c:	80036480 	call	8003648 <__malloc_lock>
 8001050:	00800184 	movi	r2,6
 8001054:	01000084 	movi	r4,2
 8001058:	04c20034 	movhi	r19,2048
 800105c:	1085883a 	add	r2,r2,r2
 8001060:	9cdd0b04 	addi	r19,r19,29740
 8001064:	1085883a 	add	r2,r2,r2
 8001068:	9885883a 	add	r2,r19,r2
 800106c:	14000117 	ldw	r16,4(r2)
 8001070:	10fffe04 	addi	r3,r2,-8
 8001074:	80c0d926 	beq	r16,r3,80013dc <_malloc_r+0x5d0>
 8001078:	80c00117 	ldw	r3,4(r16)
 800107c:	81000317 	ldw	r4,12(r16)
 8001080:	00bfff04 	movi	r2,-4
 8001084:	1884703a 	and	r2,r3,r2
 8001088:	81400217 	ldw	r5,8(r16)
 800108c:	8085883a 	add	r2,r16,r2
 8001090:	10c00117 	ldw	r3,4(r2)
 8001094:	29000315 	stw	r4,12(r5)
 8001098:	21400215 	stw	r5,8(r4)
 800109c:	18c00054 	ori	r3,r3,1
 80010a0:	10c00115 	stw	r3,4(r2)
 80010a4:	9009883a 	mov	r4,r18
 80010a8:	800366c0 	call	800366c <__malloc_unlock>
 80010ac:	80800204 	addi	r2,r16,8
 80010b0:	dfc00a17 	ldw	ra,40(sp)
 80010b4:	df000917 	ldw	fp,36(sp)
 80010b8:	ddc00817 	ldw	r23,32(sp)
 80010bc:	dd800717 	ldw	r22,28(sp)
 80010c0:	dd400617 	ldw	r21,24(sp)
 80010c4:	dd000517 	ldw	r20,20(sp)
 80010c8:	dcc00417 	ldw	r19,16(sp)
 80010cc:	dc800317 	ldw	r18,12(sp)
 80010d0:	dc400217 	ldw	r17,8(sp)
 80010d4:	dc000117 	ldw	r16,4(sp)
 80010d8:	dec00b04 	addi	sp,sp,44
 80010dc:	f800283a 	ret
 80010e0:	00800304 	movi	r2,12
 80010e4:	90800015 	stw	r2,0(r18)
 80010e8:	0005883a 	mov	r2,zero
 80010ec:	003ff006 	br	80010b0 <_malloc_r+0x2a4>
 80010f0:	01002004 	movi	r4,128
 80010f4:	02001004 	movi	r8,64
 80010f8:	01c00fc4 	movi	r7,63
 80010fc:	003f6106 	br	8000e84 <_malloc_r+0x78>
 8001100:	4009883a 	mov	r4,r8
 8001104:	003f7506 	br	8000edc <_malloc_r+0xd0>
 8001108:	81000317 	ldw	r4,12(r16)
 800110c:	003fde06 	br	8001088 <_malloc_r+0x27c>
 8001110:	81c5883a 	add	r2,r16,r7
 8001114:	11400117 	ldw	r5,4(r2)
 8001118:	9009883a 	mov	r4,r18
 800111c:	29400054 	ori	r5,r5,1
 8001120:	11400115 	stw	r5,4(r2)
 8001124:	800366c0 	call	800366c <__malloc_unlock>
 8001128:	80800204 	addi	r2,r16,8
 800112c:	003fe006 	br	80010b0 <_malloc_r+0x2a4>
 8001130:	9c000217 	ldw	r16,8(r19)
 8001134:	00bfff04 	movi	r2,-4
 8001138:	85800117 	ldw	r22,4(r16)
 800113c:	b0ac703a 	and	r22,r22,r2
 8001140:	b4400336 	bltu	r22,r17,8001150 <_malloc_r+0x344>
 8001144:	b445c83a 	sub	r2,r22,r17
 8001148:	00c003c4 	movi	r3,15
 800114c:	18805d16 	blt	r3,r2,80012c4 <_malloc_r+0x4b8>
 8001150:	05c20074 	movhi	r23,2049
 8001154:	00820074 	movhi	r2,2049
 8001158:	10aa2804 	addi	r2,r2,-22368
 800115c:	bde30604 	addi	r23,r23,-29672
 8001160:	15400017 	ldw	r21,0(r2)
 8001164:	b8c00017 	ldw	r3,0(r23)
 8001168:	00bfffc4 	movi	r2,-1
 800116c:	858d883a 	add	r6,r16,r22
 8001170:	8d6b883a 	add	r21,r17,r21
 8001174:	1880ea26 	beq	r3,r2,8001520 <_malloc_r+0x714>
 8001178:	ad4403c4 	addi	r21,r21,4111
 800117c:	00bc0004 	movi	r2,-4096
 8001180:	a8aa703a 	and	r21,r21,r2
 8001184:	a80b883a 	mov	r5,r21
 8001188:	9009883a 	mov	r4,r18
 800118c:	d9800015 	stw	r6,0(sp)
 8001190:	800202c0 	call	800202c <_sbrk_r>
 8001194:	1029883a 	mov	r20,r2
 8001198:	00bfffc4 	movi	r2,-1
 800119c:	d9800017 	ldw	r6,0(sp)
 80011a0:	a080e826 	beq	r20,r2,8001544 <_malloc_r+0x738>
 80011a4:	a180a636 	bltu	r20,r6,8001440 <_malloc_r+0x634>
 80011a8:	07020074 	movhi	fp,2049
 80011ac:	e72a3104 	addi	fp,fp,-22332
 80011b0:	e0800017 	ldw	r2,0(fp)
 80011b4:	a887883a 	add	r3,r21,r2
 80011b8:	e0c00015 	stw	r3,0(fp)
 80011bc:	3500e626 	beq	r6,r20,8001558 <_malloc_r+0x74c>
 80011c0:	b9000017 	ldw	r4,0(r23)
 80011c4:	00bfffc4 	movi	r2,-1
 80011c8:	2080ee26 	beq	r4,r2,8001584 <_malloc_r+0x778>
 80011cc:	a185c83a 	sub	r2,r20,r6
 80011d0:	10c5883a 	add	r2,r2,r3
 80011d4:	e0800015 	stw	r2,0(fp)
 80011d8:	a0c001cc 	andi	r3,r20,7
 80011dc:	1800bc26 	beq	r3,zero,80014d0 <_malloc_r+0x6c4>
 80011e0:	a0e9c83a 	sub	r20,r20,r3
 80011e4:	00840204 	movi	r2,4104
 80011e8:	a5000204 	addi	r20,r20,8
 80011ec:	10c7c83a 	sub	r3,r2,r3
 80011f0:	a545883a 	add	r2,r20,r21
 80011f4:	1083ffcc 	andi	r2,r2,4095
 80011f8:	18abc83a 	sub	r21,r3,r2
 80011fc:	a80b883a 	mov	r5,r21
 8001200:	9009883a 	mov	r4,r18
 8001204:	800202c0 	call	800202c <_sbrk_r>
 8001208:	00ffffc4 	movi	r3,-1
 800120c:	10c0e126 	beq	r2,r3,8001594 <_malloc_r+0x788>
 8001210:	1505c83a 	sub	r2,r2,r20
 8001214:	1545883a 	add	r2,r2,r21
 8001218:	10800054 	ori	r2,r2,1
 800121c:	e0c00017 	ldw	r3,0(fp)
 8001220:	9d000215 	stw	r20,8(r19)
 8001224:	a0800115 	stw	r2,4(r20)
 8001228:	a8c7883a 	add	r3,r21,r3
 800122c:	e0c00015 	stw	r3,0(fp)
 8001230:	84c00e26 	beq	r16,r19,800126c <_malloc_r+0x460>
 8001234:	018003c4 	movi	r6,15
 8001238:	3580a72e 	bgeu	r6,r22,80014d8 <_malloc_r+0x6cc>
 800123c:	81400117 	ldw	r5,4(r16)
 8001240:	013ffe04 	movi	r4,-8
 8001244:	b0bffd04 	addi	r2,r22,-12
 8001248:	1104703a 	and	r2,r2,r4
 800124c:	2900004c 	andi	r4,r5,1
 8001250:	2088b03a 	or	r4,r4,r2
 8001254:	81000115 	stw	r4,4(r16)
 8001258:	01400144 	movi	r5,5
 800125c:	8089883a 	add	r4,r16,r2
 8001260:	21400115 	stw	r5,4(r4)
 8001264:	21400215 	stw	r5,8(r4)
 8001268:	3080cd36 	bltu	r6,r2,80015a0 <_malloc_r+0x794>
 800126c:	00820074 	movhi	r2,2049
 8001270:	10aa2704 	addi	r2,r2,-22372
 8001274:	11000017 	ldw	r4,0(r2)
 8001278:	20c0012e 	bgeu	r4,r3,8001280 <_malloc_r+0x474>
 800127c:	10c00015 	stw	r3,0(r2)
 8001280:	00820074 	movhi	r2,2049
 8001284:	10aa2604 	addi	r2,r2,-22376
 8001288:	11000017 	ldw	r4,0(r2)
 800128c:	9c000217 	ldw	r16,8(r19)
 8001290:	20c0012e 	bgeu	r4,r3,8001298 <_malloc_r+0x48c>
 8001294:	10c00015 	stw	r3,0(r2)
 8001298:	80c00117 	ldw	r3,4(r16)
 800129c:	00bfff04 	movi	r2,-4
 80012a0:	1886703a 	and	r3,r3,r2
 80012a4:	1c45c83a 	sub	r2,r3,r17
 80012a8:	1c400236 	bltu	r3,r17,80012b4 <_malloc_r+0x4a8>
 80012ac:	00c003c4 	movi	r3,15
 80012b0:	18800416 	blt	r3,r2,80012c4 <_malloc_r+0x4b8>
 80012b4:	9009883a 	mov	r4,r18
 80012b8:	800366c0 	call	800366c <__malloc_unlock>
 80012bc:	0005883a 	mov	r2,zero
 80012c0:	003f7b06 	br	80010b0 <_malloc_r+0x2a4>
 80012c4:	88c00054 	ori	r3,r17,1
 80012c8:	80c00115 	stw	r3,4(r16)
 80012cc:	8463883a 	add	r17,r16,r17
 80012d0:	10800054 	ori	r2,r2,1
 80012d4:	9c400215 	stw	r17,8(r19)
 80012d8:	88800115 	stw	r2,4(r17)
 80012dc:	9009883a 	mov	r4,r18
 80012e0:	800366c0 	call	800366c <__malloc_unlock>
 80012e4:	80800204 	addi	r2,r16,8
 80012e8:	003f7106 	br	80010b0 <_malloc_r+0x2a4>
 80012ec:	00c00504 	movi	r3,20
 80012f0:	18804a2e 	bgeu	r3,r2,800141c <_malloc_r+0x610>
 80012f4:	00c01504 	movi	r3,84
 80012f8:	18806e36 	bltu	r3,r2,80014b4 <_malloc_r+0x6a8>
 80012fc:	8804d33a 	srli	r2,r17,12
 8001300:	12001bc4 	addi	r8,r2,111
 8001304:	11c01b84 	addi	r7,r2,110
 8001308:	4209883a 	add	r4,r8,r8
 800130c:	003edd06 	br	8000e84 <_malloc_r+0x78>
 8001310:	3804d27a 	srli	r2,r7,9
 8001314:	00c00104 	movi	r3,4
 8001318:	1880442e 	bgeu	r3,r2,800142c <_malloc_r+0x620>
 800131c:	00c00504 	movi	r3,20
 8001320:	18808136 	bltu	r3,r2,8001528 <_malloc_r+0x71c>
 8001324:	11401704 	addi	r5,r2,92
 8001328:	10c016c4 	addi	r3,r2,91
 800132c:	294b883a 	add	r5,r5,r5
 8001330:	294b883a 	add	r5,r5,r5
 8001334:	294b883a 	add	r5,r5,r5
 8001338:	994b883a 	add	r5,r19,r5
 800133c:	28800017 	ldw	r2,0(r5)
 8001340:	01820034 	movhi	r6,2048
 8001344:	297ffe04 	addi	r5,r5,-8
 8001348:	319d0b04 	addi	r6,r6,29740
 800134c:	28806526 	beq	r5,r2,80014e4 <_malloc_r+0x6d8>
 8001350:	01bfff04 	movi	r6,-4
 8001354:	10c00117 	ldw	r3,4(r2)
 8001358:	1986703a 	and	r3,r3,r6
 800135c:	38c0022e 	bgeu	r7,r3,8001368 <_malloc_r+0x55c>
 8001360:	10800217 	ldw	r2,8(r2)
 8001364:	28bffb1e 	bne	r5,r2,8001354 <_malloc_r+0x548>
 8001368:	11400317 	ldw	r5,12(r2)
 800136c:	98c00117 	ldw	r3,4(r19)
 8001370:	81400315 	stw	r5,12(r16)
 8001374:	80800215 	stw	r2,8(r16)
 8001378:	2c000215 	stw	r16,8(r5)
 800137c:	14000315 	stw	r16,12(r2)
 8001380:	003ef806 	br	8000f64 <_malloc_r+0x158>
 8001384:	88c00054 	ori	r3,r17,1
 8001388:	80c00115 	stw	r3,4(r16)
 800138c:	8463883a 	add	r17,r16,r17
 8001390:	34400515 	stw	r17,20(r6)
 8001394:	34400415 	stw	r17,16(r6)
 8001398:	10c00054 	ori	r3,r2,1
 800139c:	8a000315 	stw	r8,12(r17)
 80013a0:	8a000215 	stw	r8,8(r17)
 80013a4:	88c00115 	stw	r3,4(r17)
 80013a8:	88a3883a 	add	r17,r17,r2
 80013ac:	88800015 	stw	r2,0(r17)
 80013b0:	9009883a 	mov	r4,r18
 80013b4:	800366c0 	call	800366c <__malloc_unlock>
 80013b8:	80800204 	addi	r2,r16,8
 80013bc:	003f3c06 	br	80010b0 <_malloc_r+0x2a4>
 80013c0:	30c00117 	ldw	r3,4(r6)
 80013c4:	003ee706 	br	8000f64 <_malloc_r+0x158>
 80013c8:	5ac00044 	addi	r11,r11,1
 80013cc:	588000cc 	andi	r2,r11,3
 80013d0:	31800204 	addi	r6,r6,8
 80013d4:	103efd1e 	bne	r2,zero,8000fcc <_malloc_r+0x1c0>
 80013d8:	00002406 	br	800146c <_malloc_r+0x660>
 80013dc:	14000317 	ldw	r16,12(r2)
 80013e0:	143f251e 	bne	r2,r16,8001078 <_malloc_r+0x26c>
 80013e4:	21000084 	addi	r4,r4,2
 80013e8:	003ebc06 	br	8000edc <_malloc_r+0xd0>
 80013ec:	8085883a 	add	r2,r16,r2
 80013f0:	10c00117 	ldw	r3,4(r2)
 80013f4:	81000317 	ldw	r4,12(r16)
 80013f8:	81400217 	ldw	r5,8(r16)
 80013fc:	18c00054 	ori	r3,r3,1
 8001400:	10c00115 	stw	r3,4(r2)
 8001404:	29000315 	stw	r4,12(r5)
 8001408:	21400215 	stw	r5,8(r4)
 800140c:	9009883a 	mov	r4,r18
 8001410:	800366c0 	call	800366c <__malloc_unlock>
 8001414:	80800204 	addi	r2,r16,8
 8001418:	003f2506 	br	80010b0 <_malloc_r+0x2a4>
 800141c:	12001704 	addi	r8,r2,92
 8001420:	11c016c4 	addi	r7,r2,91
 8001424:	4209883a 	add	r4,r8,r8
 8001428:	003e9606 	br	8000e84 <_malloc_r+0x78>
 800142c:	3804d1ba 	srli	r2,r7,6
 8001430:	11400e44 	addi	r5,r2,57
 8001434:	10c00e04 	addi	r3,r2,56
 8001438:	294b883a 	add	r5,r5,r5
 800143c:	003fbc06 	br	8001330 <_malloc_r+0x524>
 8001440:	84ff5926 	beq	r16,r19,80011a8 <_malloc_r+0x39c>
 8001444:	00820034 	movhi	r2,2048
 8001448:	109d0b04 	addi	r2,r2,29740
 800144c:	14000217 	ldw	r16,8(r2)
 8001450:	00bfff04 	movi	r2,-4
 8001454:	80c00117 	ldw	r3,4(r16)
 8001458:	1886703a 	and	r3,r3,r2
 800145c:	003f9106 	br	80012a4 <_malloc_r+0x498>
 8001460:	60800217 	ldw	r2,8(r12)
 8001464:	213fffc4 	addi	r4,r4,-1
 8001468:	1300651e 	bne	r2,r12,8001600 <_malloc_r+0x7f4>
 800146c:	208000cc 	andi	r2,r4,3
 8001470:	633ffe04 	addi	r12,r12,-8
 8001474:	103ffa1e 	bne	r2,zero,8001460 <_malloc_r+0x654>
 8001478:	98800117 	ldw	r2,4(r19)
 800147c:	0146303a 	nor	r3,zero,r5
 8001480:	1884703a 	and	r2,r3,r2
 8001484:	98800115 	stw	r2,4(r19)
 8001488:	294b883a 	add	r5,r5,r5
 800148c:	117f2836 	bltu	r2,r5,8001130 <_malloc_r+0x324>
 8001490:	283f2726 	beq	r5,zero,8001130 <_malloc_r+0x324>
 8001494:	2886703a 	and	r3,r5,r2
 8001498:	5809883a 	mov	r4,r11
 800149c:	183ec31e 	bne	r3,zero,8000fac <_malloc_r+0x1a0>
 80014a0:	294b883a 	add	r5,r5,r5
 80014a4:	2886703a 	and	r3,r5,r2
 80014a8:	21000104 	addi	r4,r4,4
 80014ac:	183ffc26 	beq	r3,zero,80014a0 <_malloc_r+0x694>
 80014b0:	003ebe06 	br	8000fac <_malloc_r+0x1a0>
 80014b4:	00c05504 	movi	r3,340
 80014b8:	18801236 	bltu	r3,r2,8001504 <_malloc_r+0x6f8>
 80014bc:	8804d3fa 	srli	r2,r17,15
 80014c0:	12001e04 	addi	r8,r2,120
 80014c4:	11c01dc4 	addi	r7,r2,119
 80014c8:	4209883a 	add	r4,r8,r8
 80014cc:	003e6d06 	br	8000e84 <_malloc_r+0x78>
 80014d0:	00c40004 	movi	r3,4096
 80014d4:	003f4606 	br	80011f0 <_malloc_r+0x3e4>
 80014d8:	00800044 	movi	r2,1
 80014dc:	a0800115 	stw	r2,4(r20)
 80014e0:	003f7406 	br	80012b4 <_malloc_r+0x4a8>
 80014e4:	1805d0ba 	srai	r2,r3,2
 80014e8:	01c00044 	movi	r7,1
 80014ec:	30c00117 	ldw	r3,4(r6)
 80014f0:	388e983a 	sll	r7,r7,r2
 80014f4:	2805883a 	mov	r2,r5
 80014f8:	38c6b03a 	or	r3,r7,r3
 80014fc:	30c00115 	stw	r3,4(r6)
 8001500:	003f9b06 	br	8001370 <_malloc_r+0x564>
 8001504:	00c15504 	movi	r3,1364
 8001508:	18801a36 	bltu	r3,r2,8001574 <_malloc_r+0x768>
 800150c:	8804d4ba 	srli	r2,r17,18
 8001510:	12001f44 	addi	r8,r2,125
 8001514:	11c01f04 	addi	r7,r2,124
 8001518:	4209883a 	add	r4,r8,r8
 800151c:	003e5906 	br	8000e84 <_malloc_r+0x78>
 8001520:	ad400404 	addi	r21,r21,16
 8001524:	003f1706 	br	8001184 <_malloc_r+0x378>
 8001528:	00c01504 	movi	r3,84
 800152c:	18802336 	bltu	r3,r2,80015bc <_malloc_r+0x7b0>
 8001530:	3804d33a 	srli	r2,r7,12
 8001534:	11401bc4 	addi	r5,r2,111
 8001538:	10c01b84 	addi	r3,r2,110
 800153c:	294b883a 	add	r5,r5,r5
 8001540:	003f7b06 	br	8001330 <_malloc_r+0x524>
 8001544:	9c000217 	ldw	r16,8(r19)
 8001548:	00bfff04 	movi	r2,-4
 800154c:	80c00117 	ldw	r3,4(r16)
 8001550:	1886703a 	and	r3,r3,r2
 8001554:	003f5306 	br	80012a4 <_malloc_r+0x498>
 8001558:	3083ffcc 	andi	r2,r6,4095
 800155c:	103f181e 	bne	r2,zero,80011c0 <_malloc_r+0x3b4>
 8001560:	99000217 	ldw	r4,8(r19)
 8001564:	b545883a 	add	r2,r22,r21
 8001568:	10800054 	ori	r2,r2,1
 800156c:	20800115 	stw	r2,4(r4)
 8001570:	003f3e06 	br	800126c <_malloc_r+0x460>
 8001574:	01003f84 	movi	r4,254
 8001578:	02001fc4 	movi	r8,127
 800157c:	01c01f84 	movi	r7,126
 8001580:	003e4006 	br	8000e84 <_malloc_r+0x78>
 8001584:	00820074 	movhi	r2,2049
 8001588:	10a30604 	addi	r2,r2,-29672
 800158c:	15000015 	stw	r20,0(r2)
 8001590:	003f1106 	br	80011d8 <_malloc_r+0x3cc>
 8001594:	00800044 	movi	r2,1
 8001598:	002b883a 	mov	r21,zero
 800159c:	003f1f06 	br	800121c <_malloc_r+0x410>
 80015a0:	81400204 	addi	r5,r16,8
 80015a4:	9009883a 	mov	r4,r18
 80015a8:	80028940 	call	8002894 <_free_r>
 80015ac:	00820074 	movhi	r2,2049
 80015b0:	10aa3104 	addi	r2,r2,-22332
 80015b4:	10c00017 	ldw	r3,0(r2)
 80015b8:	003f2c06 	br	800126c <_malloc_r+0x460>
 80015bc:	00c05504 	movi	r3,340
 80015c0:	18800536 	bltu	r3,r2,80015d8 <_malloc_r+0x7cc>
 80015c4:	3804d3fa 	srli	r2,r7,15
 80015c8:	11401e04 	addi	r5,r2,120
 80015cc:	10c01dc4 	addi	r3,r2,119
 80015d0:	294b883a 	add	r5,r5,r5
 80015d4:	003f5606 	br	8001330 <_malloc_r+0x524>
 80015d8:	00c15504 	movi	r3,1364
 80015dc:	18800536 	bltu	r3,r2,80015f4 <_malloc_r+0x7e8>
 80015e0:	3804d4ba 	srli	r2,r7,18
 80015e4:	11401f44 	addi	r5,r2,125
 80015e8:	10c01f04 	addi	r3,r2,124
 80015ec:	294b883a 	add	r5,r5,r5
 80015f0:	003f4f06 	br	8001330 <_malloc_r+0x524>
 80015f4:	01403f84 	movi	r5,254
 80015f8:	00c01f84 	movi	r3,126
 80015fc:	003f4c06 	br	8001330 <_malloc_r+0x524>
 8001600:	98800117 	ldw	r2,4(r19)
 8001604:	003fa006 	br	8001488 <_malloc_r+0x67c>
 8001608:	8808d0fa 	srli	r4,r17,3
 800160c:	20800044 	addi	r2,r4,1
 8001610:	1085883a 	add	r2,r2,r2
 8001614:	003e9006 	br	8001058 <_malloc_r+0x24c>

08001618 <memchr>:
 8001618:	208000cc 	andi	r2,r4,3
 800161c:	280f883a 	mov	r7,r5
 8001620:	10003426 	beq	r2,zero,80016f4 <memchr+0xdc>
 8001624:	30bfffc4 	addi	r2,r6,-1
 8001628:	30001a26 	beq	r6,zero,8001694 <memchr+0x7c>
 800162c:	20c00003 	ldbu	r3,0(r4)
 8001630:	29803fcc 	andi	r6,r5,255
 8001634:	30c0051e 	bne	r6,r3,800164c <memchr+0x34>
 8001638:	00001806 	br	800169c <memchr+0x84>
 800163c:	10001526 	beq	r2,zero,8001694 <memchr+0x7c>
 8001640:	20c00003 	ldbu	r3,0(r4)
 8001644:	10bfffc4 	addi	r2,r2,-1
 8001648:	30c01426 	beq	r6,r3,800169c <memchr+0x84>
 800164c:	21000044 	addi	r4,r4,1
 8001650:	20c000cc 	andi	r3,r4,3
 8001654:	183ff91e 	bne	r3,zero,800163c <memchr+0x24>
 8001658:	020000c4 	movi	r8,3
 800165c:	40801136 	bltu	r8,r2,80016a4 <memchr+0x8c>
 8001660:	10000c26 	beq	r2,zero,8001694 <memchr+0x7c>
 8001664:	20c00003 	ldbu	r3,0(r4)
 8001668:	29403fcc 	andi	r5,r5,255
 800166c:	28c00b26 	beq	r5,r3,800169c <memchr+0x84>
 8001670:	20c00044 	addi	r3,r4,1
 8001674:	39803fcc 	andi	r6,r7,255
 8001678:	2089883a 	add	r4,r4,r2
 800167c:	00000306 	br	800168c <memchr+0x74>
 8001680:	18c00044 	addi	r3,r3,1
 8001684:	197fffc3 	ldbu	r5,-1(r3)
 8001688:	31400526 	beq	r6,r5,80016a0 <memchr+0x88>
 800168c:	1805883a 	mov	r2,r3
 8001690:	20fffb1e 	bne	r4,r3,8001680 <memchr+0x68>
 8001694:	0005883a 	mov	r2,zero
 8001698:	f800283a 	ret
 800169c:	2005883a 	mov	r2,r4
 80016a0:	f800283a 	ret
 80016a4:	28c03fcc 	andi	r3,r5,255
 80016a8:	1812923a 	slli	r9,r3,8
 80016ac:	02ffbff4 	movhi	r11,65279
 80016b0:	02a02074 	movhi	r10,32897
 80016b4:	48d2b03a 	or	r9,r9,r3
 80016b8:	4806943a 	slli	r3,r9,16
 80016bc:	5affbfc4 	addi	r11,r11,-257
 80016c0:	52a02004 	addi	r10,r10,-32640
 80016c4:	48d2b03a 	or	r9,r9,r3
 80016c8:	20c00017 	ldw	r3,0(r4)
 80016cc:	48c6f03a 	xor	r3,r9,r3
 80016d0:	1acd883a 	add	r6,r3,r11
 80016d4:	00c6303a 	nor	r3,zero,r3
 80016d8:	30c6703a 	and	r3,r6,r3
 80016dc:	1a86703a 	and	r3,r3,r10
 80016e0:	183fe01e 	bne	r3,zero,8001664 <memchr+0x4c>
 80016e4:	10bfff04 	addi	r2,r2,-4
 80016e8:	21000104 	addi	r4,r4,4
 80016ec:	40bff636 	bltu	r8,r2,80016c8 <memchr+0xb0>
 80016f0:	003fdb06 	br	8001660 <memchr+0x48>
 80016f4:	3005883a 	mov	r2,r6
 80016f8:	003fd706 	br	8001658 <memchr+0x40>

080016fc <memcpy>:
 80016fc:	defffd04 	addi	sp,sp,-12
 8001700:	dfc00215 	stw	ra,8(sp)
 8001704:	dc400115 	stw	r17,4(sp)
 8001708:	dc000015 	stw	r16,0(sp)
 800170c:	00c003c4 	movi	r3,15
 8001710:	2005883a 	mov	r2,r4
 8001714:	1980452e 	bgeu	r3,r6,800182c <memcpy+0x130>
 8001718:	2906b03a 	or	r3,r5,r4
 800171c:	18c000cc 	andi	r3,r3,3
 8001720:	1800441e 	bne	r3,zero,8001834 <memcpy+0x138>
 8001724:	347ffc04 	addi	r17,r6,-16
 8001728:	8822d13a 	srli	r17,r17,4
 800172c:	28c00104 	addi	r3,r5,4
 8001730:	23400104 	addi	r13,r4,4
 8001734:	8820913a 	slli	r16,r17,4
 8001738:	2b000204 	addi	r12,r5,8
 800173c:	22c00204 	addi	r11,r4,8
 8001740:	84000504 	addi	r16,r16,20
 8001744:	2a800304 	addi	r10,r5,12
 8001748:	22400304 	addi	r9,r4,12
 800174c:	2c21883a 	add	r16,r5,r16
 8001750:	2811883a 	mov	r8,r5
 8001754:	200f883a 	mov	r7,r4
 8001758:	41000017 	ldw	r4,0(r8)
 800175c:	1fc00017 	ldw	ra,0(r3)
 8001760:	63c00017 	ldw	r15,0(r12)
 8001764:	39000015 	stw	r4,0(r7)
 8001768:	53800017 	ldw	r14,0(r10)
 800176c:	6fc00015 	stw	ra,0(r13)
 8001770:	5bc00015 	stw	r15,0(r11)
 8001774:	4b800015 	stw	r14,0(r9)
 8001778:	18c00404 	addi	r3,r3,16
 800177c:	39c00404 	addi	r7,r7,16
 8001780:	42000404 	addi	r8,r8,16
 8001784:	6b400404 	addi	r13,r13,16
 8001788:	63000404 	addi	r12,r12,16
 800178c:	5ac00404 	addi	r11,r11,16
 8001790:	52800404 	addi	r10,r10,16
 8001794:	4a400404 	addi	r9,r9,16
 8001798:	1c3fef1e 	bne	r3,r16,8001758 <memcpy+0x5c>
 800179c:	89c00044 	addi	r7,r17,1
 80017a0:	380e913a 	slli	r7,r7,4
 80017a4:	310003cc 	andi	r4,r6,15
 80017a8:	02c000c4 	movi	r11,3
 80017ac:	11c7883a 	add	r3,r2,r7
 80017b0:	29cb883a 	add	r5,r5,r7
 80017b4:	5900212e 	bgeu	r11,r4,800183c <memcpy+0x140>
 80017b8:	1813883a 	mov	r9,r3
 80017bc:	2811883a 	mov	r8,r5
 80017c0:	200f883a 	mov	r7,r4
 80017c4:	42800017 	ldw	r10,0(r8)
 80017c8:	4a400104 	addi	r9,r9,4
 80017cc:	39ffff04 	addi	r7,r7,-4
 80017d0:	4abfff15 	stw	r10,-4(r9)
 80017d4:	42000104 	addi	r8,r8,4
 80017d8:	59fffa36 	bltu	r11,r7,80017c4 <memcpy+0xc8>
 80017dc:	213fff04 	addi	r4,r4,-4
 80017e0:	2008d0ba 	srli	r4,r4,2
 80017e4:	318000cc 	andi	r6,r6,3
 80017e8:	21000044 	addi	r4,r4,1
 80017ec:	2109883a 	add	r4,r4,r4
 80017f0:	2109883a 	add	r4,r4,r4
 80017f4:	1907883a 	add	r3,r3,r4
 80017f8:	290b883a 	add	r5,r5,r4
 80017fc:	30000626 	beq	r6,zero,8001818 <memcpy+0x11c>
 8001800:	198d883a 	add	r6,r3,r6
 8001804:	29c00003 	ldbu	r7,0(r5)
 8001808:	18c00044 	addi	r3,r3,1
 800180c:	29400044 	addi	r5,r5,1
 8001810:	19ffffc5 	stb	r7,-1(r3)
 8001814:	19bffb1e 	bne	r3,r6,8001804 <memcpy+0x108>
 8001818:	dfc00217 	ldw	ra,8(sp)
 800181c:	dc400117 	ldw	r17,4(sp)
 8001820:	dc000017 	ldw	r16,0(sp)
 8001824:	dec00304 	addi	sp,sp,12
 8001828:	f800283a 	ret
 800182c:	2007883a 	mov	r3,r4
 8001830:	003ff206 	br	80017fc <memcpy+0x100>
 8001834:	2007883a 	mov	r3,r4
 8001838:	003ff106 	br	8001800 <memcpy+0x104>
 800183c:	200d883a 	mov	r6,r4
 8001840:	003fee06 	br	80017fc <memcpy+0x100>

08001844 <memmove>:
 8001844:	2005883a 	mov	r2,r4
 8001848:	29000b2e 	bgeu	r5,r4,8001878 <memmove+0x34>
 800184c:	298f883a 	add	r7,r5,r6
 8001850:	21c0092e 	bgeu	r4,r7,8001878 <memmove+0x34>
 8001854:	2187883a 	add	r3,r4,r6
 8001858:	198bc83a 	sub	r5,r3,r6
 800185c:	30004826 	beq	r6,zero,8001980 <memmove+0x13c>
 8001860:	39ffffc4 	addi	r7,r7,-1
 8001864:	39000003 	ldbu	r4,0(r7)
 8001868:	18ffffc4 	addi	r3,r3,-1
 800186c:	19000005 	stb	r4,0(r3)
 8001870:	28fffb1e 	bne	r5,r3,8001860 <memmove+0x1c>
 8001874:	f800283a 	ret
 8001878:	00c003c4 	movi	r3,15
 800187c:	1980412e 	bgeu	r3,r6,8001984 <memmove+0x140>
 8001880:	2886b03a 	or	r3,r5,r2
 8001884:	18c000cc 	andi	r3,r3,3
 8001888:	1800401e 	bne	r3,zero,800198c <memmove+0x148>
 800188c:	33fffc04 	addi	r15,r6,-16
 8001890:	781ed13a 	srli	r15,r15,4
 8001894:	28c00104 	addi	r3,r5,4
 8001898:	13400104 	addi	r13,r2,4
 800189c:	781c913a 	slli	r14,r15,4
 80018a0:	2b000204 	addi	r12,r5,8
 80018a4:	12c00204 	addi	r11,r2,8
 80018a8:	73800504 	addi	r14,r14,20
 80018ac:	2a800304 	addi	r10,r5,12
 80018b0:	12400304 	addi	r9,r2,12
 80018b4:	2b9d883a 	add	r14,r5,r14
 80018b8:	2811883a 	mov	r8,r5
 80018bc:	100f883a 	mov	r7,r2
 80018c0:	41000017 	ldw	r4,0(r8)
 80018c4:	39c00404 	addi	r7,r7,16
 80018c8:	18c00404 	addi	r3,r3,16
 80018cc:	393ffc15 	stw	r4,-16(r7)
 80018d0:	193ffc17 	ldw	r4,-16(r3)
 80018d4:	6b400404 	addi	r13,r13,16
 80018d8:	5ac00404 	addi	r11,r11,16
 80018dc:	693ffc15 	stw	r4,-16(r13)
 80018e0:	61000017 	ldw	r4,0(r12)
 80018e4:	4a400404 	addi	r9,r9,16
 80018e8:	42000404 	addi	r8,r8,16
 80018ec:	593ffc15 	stw	r4,-16(r11)
 80018f0:	51000017 	ldw	r4,0(r10)
 80018f4:	63000404 	addi	r12,r12,16
 80018f8:	52800404 	addi	r10,r10,16
 80018fc:	493ffc15 	stw	r4,-16(r9)
 8001900:	1bbfef1e 	bne	r3,r14,80018c0 <memmove+0x7c>
 8001904:	79000044 	addi	r4,r15,1
 8001908:	2008913a 	slli	r4,r4,4
 800190c:	328003cc 	andi	r10,r6,15
 8001910:	02c000c4 	movi	r11,3
 8001914:	1107883a 	add	r3,r2,r4
 8001918:	290b883a 	add	r5,r5,r4
 800191c:	5a801e2e 	bgeu	r11,r10,8001998 <memmove+0x154>
 8001920:	1813883a 	mov	r9,r3
 8001924:	2811883a 	mov	r8,r5
 8001928:	500f883a 	mov	r7,r10
 800192c:	41000017 	ldw	r4,0(r8)
 8001930:	4a400104 	addi	r9,r9,4
 8001934:	39ffff04 	addi	r7,r7,-4
 8001938:	493fff15 	stw	r4,-4(r9)
 800193c:	42000104 	addi	r8,r8,4
 8001940:	59fffa36 	bltu	r11,r7,800192c <memmove+0xe8>
 8001944:	513fff04 	addi	r4,r10,-4
 8001948:	2008d0ba 	srli	r4,r4,2
 800194c:	318000cc 	andi	r6,r6,3
 8001950:	21000044 	addi	r4,r4,1
 8001954:	2109883a 	add	r4,r4,r4
 8001958:	2109883a 	add	r4,r4,r4
 800195c:	1907883a 	add	r3,r3,r4
 8001960:	290b883a 	add	r5,r5,r4
 8001964:	30000b26 	beq	r6,zero,8001994 <memmove+0x150>
 8001968:	198d883a 	add	r6,r3,r6
 800196c:	29c00003 	ldbu	r7,0(r5)
 8001970:	18c00044 	addi	r3,r3,1
 8001974:	29400044 	addi	r5,r5,1
 8001978:	19ffffc5 	stb	r7,-1(r3)
 800197c:	19bffb1e 	bne	r3,r6,800196c <memmove+0x128>
 8001980:	f800283a 	ret
 8001984:	1007883a 	mov	r3,r2
 8001988:	003ff606 	br	8001964 <memmove+0x120>
 800198c:	1007883a 	mov	r3,r2
 8001990:	003ff506 	br	8001968 <memmove+0x124>
 8001994:	f800283a 	ret
 8001998:	500d883a 	mov	r6,r10
 800199c:	003ff106 	br	8001964 <memmove+0x120>

080019a0 <memset>:
 80019a0:	20c000cc 	andi	r3,r4,3
 80019a4:	2005883a 	mov	r2,r4
 80019a8:	18004426 	beq	r3,zero,8001abc <memset+0x11c>
 80019ac:	31ffffc4 	addi	r7,r6,-1
 80019b0:	30004026 	beq	r6,zero,8001ab4 <memset+0x114>
 80019b4:	2813883a 	mov	r9,r5
 80019b8:	200d883a 	mov	r6,r4
 80019bc:	2007883a 	mov	r3,r4
 80019c0:	00000406 	br	80019d4 <memset+0x34>
 80019c4:	3a3fffc4 	addi	r8,r7,-1
 80019c8:	31800044 	addi	r6,r6,1
 80019cc:	38003926 	beq	r7,zero,8001ab4 <memset+0x114>
 80019d0:	400f883a 	mov	r7,r8
 80019d4:	18c00044 	addi	r3,r3,1
 80019d8:	32400005 	stb	r9,0(r6)
 80019dc:	1a0000cc 	andi	r8,r3,3
 80019e0:	403ff81e 	bne	r8,zero,80019c4 <memset+0x24>
 80019e4:	010000c4 	movi	r4,3
 80019e8:	21c02d2e 	bgeu	r4,r7,8001aa0 <memset+0x100>
 80019ec:	29003fcc 	andi	r4,r5,255
 80019f0:	200c923a 	slli	r6,r4,8
 80019f4:	3108b03a 	or	r4,r6,r4
 80019f8:	200c943a 	slli	r6,r4,16
 80019fc:	218cb03a 	or	r6,r4,r6
 8001a00:	010003c4 	movi	r4,15
 8001a04:	21c0182e 	bgeu	r4,r7,8001a68 <memset+0xc8>
 8001a08:	3b3ffc04 	addi	r12,r7,-16
 8001a0c:	6018d13a 	srli	r12,r12,4
 8001a10:	1a000104 	addi	r8,r3,4
 8001a14:	1ac00204 	addi	r11,r3,8
 8001a18:	6008913a 	slli	r4,r12,4
 8001a1c:	1a800304 	addi	r10,r3,12
 8001a20:	1813883a 	mov	r9,r3
 8001a24:	21000504 	addi	r4,r4,20
 8001a28:	1909883a 	add	r4,r3,r4
 8001a2c:	49800015 	stw	r6,0(r9)
 8001a30:	41800015 	stw	r6,0(r8)
 8001a34:	59800015 	stw	r6,0(r11)
 8001a38:	51800015 	stw	r6,0(r10)
 8001a3c:	42000404 	addi	r8,r8,16
 8001a40:	4a400404 	addi	r9,r9,16
 8001a44:	5ac00404 	addi	r11,r11,16
 8001a48:	52800404 	addi	r10,r10,16
 8001a4c:	413ff71e 	bne	r8,r4,8001a2c <memset+0x8c>
 8001a50:	63000044 	addi	r12,r12,1
 8001a54:	6018913a 	slli	r12,r12,4
 8001a58:	39c003cc 	andi	r7,r7,15
 8001a5c:	010000c4 	movi	r4,3
 8001a60:	1b07883a 	add	r3,r3,r12
 8001a64:	21c00e2e 	bgeu	r4,r7,8001aa0 <memset+0x100>
 8001a68:	1813883a 	mov	r9,r3
 8001a6c:	3811883a 	mov	r8,r7
 8001a70:	010000c4 	movi	r4,3
 8001a74:	49800015 	stw	r6,0(r9)
 8001a78:	423fff04 	addi	r8,r8,-4
 8001a7c:	4a400104 	addi	r9,r9,4
 8001a80:	223ffc36 	bltu	r4,r8,8001a74 <memset+0xd4>
 8001a84:	393fff04 	addi	r4,r7,-4
 8001a88:	2008d0ba 	srli	r4,r4,2
 8001a8c:	39c000cc 	andi	r7,r7,3
 8001a90:	21000044 	addi	r4,r4,1
 8001a94:	2109883a 	add	r4,r4,r4
 8001a98:	2109883a 	add	r4,r4,r4
 8001a9c:	1907883a 	add	r3,r3,r4
 8001aa0:	38000526 	beq	r7,zero,8001ab8 <memset+0x118>
 8001aa4:	19cf883a 	add	r7,r3,r7
 8001aa8:	19400005 	stb	r5,0(r3)
 8001aac:	18c00044 	addi	r3,r3,1
 8001ab0:	38fffd1e 	bne	r7,r3,8001aa8 <memset+0x108>
 8001ab4:	f800283a 	ret
 8001ab8:	f800283a 	ret
 8001abc:	2007883a 	mov	r3,r4
 8001ac0:	300f883a 	mov	r7,r6
 8001ac4:	003fc706 	br	80019e4 <memset+0x44>

08001ac8 <_realloc_r>:
 8001ac8:	defff604 	addi	sp,sp,-40
 8001acc:	dc800215 	stw	r18,8(sp)
 8001ad0:	dfc00915 	stw	ra,36(sp)
 8001ad4:	df000815 	stw	fp,32(sp)
 8001ad8:	ddc00715 	stw	r23,28(sp)
 8001adc:	dd800615 	stw	r22,24(sp)
 8001ae0:	dd400515 	stw	r21,20(sp)
 8001ae4:	dd000415 	stw	r20,16(sp)
 8001ae8:	dcc00315 	stw	r19,12(sp)
 8001aec:	dc400115 	stw	r17,4(sp)
 8001af0:	dc000015 	stw	r16,0(sp)
 8001af4:	3025883a 	mov	r18,r6
 8001af8:	2800b726 	beq	r5,zero,8001dd8 <_realloc_r+0x310>
 8001afc:	282b883a 	mov	r21,r5
 8001b00:	2029883a 	mov	r20,r4
 8001b04:	80036480 	call	8003648 <__malloc_lock>
 8001b08:	a8bfff17 	ldw	r2,-4(r21)
 8001b0c:	043fff04 	movi	r16,-4
 8001b10:	90c002c4 	addi	r3,r18,11
 8001b14:	01000584 	movi	r4,22
 8001b18:	acfffe04 	addi	r19,r21,-8
 8001b1c:	1420703a 	and	r16,r2,r16
 8001b20:	20c0332e 	bgeu	r4,r3,8001bf0 <_realloc_r+0x128>
 8001b24:	047ffe04 	movi	r17,-8
 8001b28:	1c62703a 	and	r17,r3,r17
 8001b2c:	8807883a 	mov	r3,r17
 8001b30:	88005816 	blt	r17,zero,8001c94 <_realloc_r+0x1cc>
 8001b34:	8c805736 	bltu	r17,r18,8001c94 <_realloc_r+0x1cc>
 8001b38:	80c0300e 	bge	r16,r3,8001bfc <_realloc_r+0x134>
 8001b3c:	07020034 	movhi	fp,2048
 8001b40:	e71d0b04 	addi	fp,fp,29740
 8001b44:	e1c00217 	ldw	r7,8(fp)
 8001b48:	9c09883a 	add	r4,r19,r16
 8001b4c:	22000117 	ldw	r8,4(r4)
 8001b50:	21c06326 	beq	r4,r7,8001ce0 <_realloc_r+0x218>
 8001b54:	017fff84 	movi	r5,-2
 8001b58:	414a703a 	and	r5,r8,r5
 8001b5c:	214b883a 	add	r5,r4,r5
 8001b60:	29800117 	ldw	r6,4(r5)
 8001b64:	3180004c 	andi	r6,r6,1
 8001b68:	30003f26 	beq	r6,zero,8001c68 <_realloc_r+0x1a0>
 8001b6c:	1080004c 	andi	r2,r2,1
 8001b70:	10008326 	beq	r2,zero,8001d80 <_realloc_r+0x2b8>
 8001b74:	900b883a 	mov	r5,r18
 8001b78:	a009883a 	mov	r4,r20
 8001b7c:	8000e0c0 	call	8000e0c <_malloc_r>
 8001b80:	1025883a 	mov	r18,r2
 8001b84:	10011e26 	beq	r2,zero,8002000 <_realloc_r+0x538>
 8001b88:	a93fff17 	ldw	r4,-4(r21)
 8001b8c:	10fffe04 	addi	r3,r2,-8
 8001b90:	00bfff84 	movi	r2,-2
 8001b94:	2084703a 	and	r2,r4,r2
 8001b98:	9885883a 	add	r2,r19,r2
 8001b9c:	1880ee26 	beq	r3,r2,8001f58 <_realloc_r+0x490>
 8001ba0:	81bfff04 	addi	r6,r16,-4
 8001ba4:	00800904 	movi	r2,36
 8001ba8:	1180b836 	bltu	r2,r6,8001e8c <_realloc_r+0x3c4>
 8001bac:	00c004c4 	movi	r3,19
 8001bb0:	19809636 	bltu	r3,r6,8001e0c <_realloc_r+0x344>
 8001bb4:	9005883a 	mov	r2,r18
 8001bb8:	a807883a 	mov	r3,r21
 8001bbc:	19000017 	ldw	r4,0(r3)
 8001bc0:	11000015 	stw	r4,0(r2)
 8001bc4:	19000117 	ldw	r4,4(r3)
 8001bc8:	11000115 	stw	r4,4(r2)
 8001bcc:	18c00217 	ldw	r3,8(r3)
 8001bd0:	10c00215 	stw	r3,8(r2)
 8001bd4:	a80b883a 	mov	r5,r21
 8001bd8:	a009883a 	mov	r4,r20
 8001bdc:	80028940 	call	8002894 <_free_r>
 8001be0:	a009883a 	mov	r4,r20
 8001be4:	800366c0 	call	800366c <__malloc_unlock>
 8001be8:	9005883a 	mov	r2,r18
 8001bec:	00001206 	br	8001c38 <_realloc_r+0x170>
 8001bf0:	00c00404 	movi	r3,16
 8001bf4:	1823883a 	mov	r17,r3
 8001bf8:	003fce06 	br	8001b34 <_realloc_r+0x6c>
 8001bfc:	a825883a 	mov	r18,r21
 8001c00:	8445c83a 	sub	r2,r16,r17
 8001c04:	00c003c4 	movi	r3,15
 8001c08:	18802636 	bltu	r3,r2,8001ca4 <_realloc_r+0x1dc>
 8001c0c:	99800117 	ldw	r6,4(r19)
 8001c10:	9c07883a 	add	r3,r19,r16
 8001c14:	3180004c 	andi	r6,r6,1
 8001c18:	3420b03a 	or	r16,r6,r16
 8001c1c:	9c000115 	stw	r16,4(r19)
 8001c20:	18800117 	ldw	r2,4(r3)
 8001c24:	10800054 	ori	r2,r2,1
 8001c28:	18800115 	stw	r2,4(r3)
 8001c2c:	a009883a 	mov	r4,r20
 8001c30:	800366c0 	call	800366c <__malloc_unlock>
 8001c34:	9005883a 	mov	r2,r18
 8001c38:	dfc00917 	ldw	ra,36(sp)
 8001c3c:	df000817 	ldw	fp,32(sp)
 8001c40:	ddc00717 	ldw	r23,28(sp)
 8001c44:	dd800617 	ldw	r22,24(sp)
 8001c48:	dd400517 	ldw	r21,20(sp)
 8001c4c:	dd000417 	ldw	r20,16(sp)
 8001c50:	dcc00317 	ldw	r19,12(sp)
 8001c54:	dc800217 	ldw	r18,8(sp)
 8001c58:	dc400117 	ldw	r17,4(sp)
 8001c5c:	dc000017 	ldw	r16,0(sp)
 8001c60:	dec00a04 	addi	sp,sp,40
 8001c64:	f800283a 	ret
 8001c68:	017fff04 	movi	r5,-4
 8001c6c:	414a703a 	and	r5,r8,r5
 8001c70:	814d883a 	add	r6,r16,r5
 8001c74:	30c01f16 	blt	r6,r3,8001cf4 <_realloc_r+0x22c>
 8001c78:	20800317 	ldw	r2,12(r4)
 8001c7c:	20c00217 	ldw	r3,8(r4)
 8001c80:	a825883a 	mov	r18,r21
 8001c84:	3021883a 	mov	r16,r6
 8001c88:	18800315 	stw	r2,12(r3)
 8001c8c:	10c00215 	stw	r3,8(r2)
 8001c90:	003fdb06 	br	8001c00 <_realloc_r+0x138>
 8001c94:	00800304 	movi	r2,12
 8001c98:	a0800015 	stw	r2,0(r20)
 8001c9c:	0005883a 	mov	r2,zero
 8001ca0:	003fe506 	br	8001c38 <_realloc_r+0x170>
 8001ca4:	98c00117 	ldw	r3,4(r19)
 8001ca8:	9c4b883a 	add	r5,r19,r17
 8001cac:	11000054 	ori	r4,r2,1
 8001cb0:	18c0004c 	andi	r3,r3,1
 8001cb4:	1c62b03a 	or	r17,r3,r17
 8001cb8:	9c400115 	stw	r17,4(r19)
 8001cbc:	29000115 	stw	r4,4(r5)
 8001cc0:	2885883a 	add	r2,r5,r2
 8001cc4:	10c00117 	ldw	r3,4(r2)
 8001cc8:	29400204 	addi	r5,r5,8
 8001ccc:	a009883a 	mov	r4,r20
 8001cd0:	18c00054 	ori	r3,r3,1
 8001cd4:	10c00115 	stw	r3,4(r2)
 8001cd8:	80028940 	call	8002894 <_free_r>
 8001cdc:	003fd306 	br	8001c2c <_realloc_r+0x164>
 8001ce0:	017fff04 	movi	r5,-4
 8001ce4:	414a703a 	and	r5,r8,r5
 8001ce8:	89800404 	addi	r6,r17,16
 8001cec:	8151883a 	add	r8,r16,r5
 8001cf0:	4180590e 	bge	r8,r6,8001e58 <_realloc_r+0x390>
 8001cf4:	1080004c 	andi	r2,r2,1
 8001cf8:	103f9e1e 	bne	r2,zero,8001b74 <_realloc_r+0xac>
 8001cfc:	adbffe17 	ldw	r22,-8(r21)
 8001d00:	00bfff04 	movi	r2,-4
 8001d04:	9dadc83a 	sub	r22,r19,r22
 8001d08:	b1800117 	ldw	r6,4(r22)
 8001d0c:	3084703a 	and	r2,r6,r2
 8001d10:	20002026 	beq	r4,zero,8001d94 <_realloc_r+0x2cc>
 8001d14:	80af883a 	add	r23,r16,r2
 8001d18:	b96f883a 	add	r23,r23,r5
 8001d1c:	21c05f26 	beq	r4,r7,8001e9c <_realloc_r+0x3d4>
 8001d20:	b8c01c16 	blt	r23,r3,8001d94 <_realloc_r+0x2cc>
 8001d24:	20800317 	ldw	r2,12(r4)
 8001d28:	20c00217 	ldw	r3,8(r4)
 8001d2c:	81bfff04 	addi	r6,r16,-4
 8001d30:	01000904 	movi	r4,36
 8001d34:	18800315 	stw	r2,12(r3)
 8001d38:	10c00215 	stw	r3,8(r2)
 8001d3c:	b0c00217 	ldw	r3,8(r22)
 8001d40:	b0800317 	ldw	r2,12(r22)
 8001d44:	b4800204 	addi	r18,r22,8
 8001d48:	18800315 	stw	r2,12(r3)
 8001d4c:	10c00215 	stw	r3,8(r2)
 8001d50:	21801b36 	bltu	r4,r6,8001dc0 <_realloc_r+0x2f8>
 8001d54:	008004c4 	movi	r2,19
 8001d58:	1180352e 	bgeu	r2,r6,8001e30 <_realloc_r+0x368>
 8001d5c:	a8800017 	ldw	r2,0(r21)
 8001d60:	b0800215 	stw	r2,8(r22)
 8001d64:	a8800117 	ldw	r2,4(r21)
 8001d68:	b0800315 	stw	r2,12(r22)
 8001d6c:	008006c4 	movi	r2,27
 8001d70:	11807f36 	bltu	r2,r6,8001f70 <_realloc_r+0x4a8>
 8001d74:	b0800404 	addi	r2,r22,16
 8001d78:	ad400204 	addi	r21,r21,8
 8001d7c:	00002d06 	br	8001e34 <_realloc_r+0x36c>
 8001d80:	adbffe17 	ldw	r22,-8(r21)
 8001d84:	00bfff04 	movi	r2,-4
 8001d88:	9dadc83a 	sub	r22,r19,r22
 8001d8c:	b1000117 	ldw	r4,4(r22)
 8001d90:	2084703a 	and	r2,r4,r2
 8001d94:	b03f7726 	beq	r22,zero,8001b74 <_realloc_r+0xac>
 8001d98:	80af883a 	add	r23,r16,r2
 8001d9c:	b8ff7516 	blt	r23,r3,8001b74 <_realloc_r+0xac>
 8001da0:	b0800317 	ldw	r2,12(r22)
 8001da4:	b0c00217 	ldw	r3,8(r22)
 8001da8:	81bfff04 	addi	r6,r16,-4
 8001dac:	01000904 	movi	r4,36
 8001db0:	18800315 	stw	r2,12(r3)
 8001db4:	10c00215 	stw	r3,8(r2)
 8001db8:	b4800204 	addi	r18,r22,8
 8001dbc:	21bfe52e 	bgeu	r4,r6,8001d54 <_realloc_r+0x28c>
 8001dc0:	a80b883a 	mov	r5,r21
 8001dc4:	9009883a 	mov	r4,r18
 8001dc8:	80018440 	call	8001844 <memmove>
 8001dcc:	b821883a 	mov	r16,r23
 8001dd0:	b027883a 	mov	r19,r22
 8001dd4:	003f8a06 	br	8001c00 <_realloc_r+0x138>
 8001dd8:	300b883a 	mov	r5,r6
 8001ddc:	dfc00917 	ldw	ra,36(sp)
 8001de0:	df000817 	ldw	fp,32(sp)
 8001de4:	ddc00717 	ldw	r23,28(sp)
 8001de8:	dd800617 	ldw	r22,24(sp)
 8001dec:	dd400517 	ldw	r21,20(sp)
 8001df0:	dd000417 	ldw	r20,16(sp)
 8001df4:	dcc00317 	ldw	r19,12(sp)
 8001df8:	dc800217 	ldw	r18,8(sp)
 8001dfc:	dc400117 	ldw	r17,4(sp)
 8001e00:	dc000017 	ldw	r16,0(sp)
 8001e04:	dec00a04 	addi	sp,sp,40
 8001e08:	8000e0c1 	jmpi	8000e0c <_malloc_r>
 8001e0c:	a8c00017 	ldw	r3,0(r21)
 8001e10:	90c00015 	stw	r3,0(r18)
 8001e14:	a8c00117 	ldw	r3,4(r21)
 8001e18:	90c00115 	stw	r3,4(r18)
 8001e1c:	00c006c4 	movi	r3,27
 8001e20:	19804536 	bltu	r3,r6,8001f38 <_realloc_r+0x470>
 8001e24:	90800204 	addi	r2,r18,8
 8001e28:	a8c00204 	addi	r3,r21,8
 8001e2c:	003f6306 	br	8001bbc <_realloc_r+0xf4>
 8001e30:	9005883a 	mov	r2,r18
 8001e34:	a8c00017 	ldw	r3,0(r21)
 8001e38:	b821883a 	mov	r16,r23
 8001e3c:	b027883a 	mov	r19,r22
 8001e40:	10c00015 	stw	r3,0(r2)
 8001e44:	a8c00117 	ldw	r3,4(r21)
 8001e48:	10c00115 	stw	r3,4(r2)
 8001e4c:	a8c00217 	ldw	r3,8(r21)
 8001e50:	10c00215 	stw	r3,8(r2)
 8001e54:	003f6a06 	br	8001c00 <_realloc_r+0x138>
 8001e58:	9c67883a 	add	r19,r19,r17
 8001e5c:	4445c83a 	sub	r2,r8,r17
 8001e60:	e4c00215 	stw	r19,8(fp)
 8001e64:	10800054 	ori	r2,r2,1
 8001e68:	98800115 	stw	r2,4(r19)
 8001e6c:	a8bfff17 	ldw	r2,-4(r21)
 8001e70:	a009883a 	mov	r4,r20
 8001e74:	1080004c 	andi	r2,r2,1
 8001e78:	1462b03a 	or	r17,r2,r17
 8001e7c:	ac7fff15 	stw	r17,-4(r21)
 8001e80:	800366c0 	call	800366c <__malloc_unlock>
 8001e84:	a805883a 	mov	r2,r21
 8001e88:	003f6b06 	br	8001c38 <_realloc_r+0x170>
 8001e8c:	a80b883a 	mov	r5,r21
 8001e90:	9009883a 	mov	r4,r18
 8001e94:	80018440 	call	8001844 <memmove>
 8001e98:	003f4e06 	br	8001bd4 <_realloc_r+0x10c>
 8001e9c:	89000404 	addi	r4,r17,16
 8001ea0:	b93fbc16 	blt	r23,r4,8001d94 <_realloc_r+0x2cc>
 8001ea4:	b0800317 	ldw	r2,12(r22)
 8001ea8:	b0c00217 	ldw	r3,8(r22)
 8001eac:	81bfff04 	addi	r6,r16,-4
 8001eb0:	01000904 	movi	r4,36
 8001eb4:	18800315 	stw	r2,12(r3)
 8001eb8:	10c00215 	stw	r3,8(r2)
 8001ebc:	b4800204 	addi	r18,r22,8
 8001ec0:	21804336 	bltu	r4,r6,8001fd0 <_realloc_r+0x508>
 8001ec4:	008004c4 	movi	r2,19
 8001ec8:	11803f2e 	bgeu	r2,r6,8001fc8 <_realloc_r+0x500>
 8001ecc:	a8800017 	ldw	r2,0(r21)
 8001ed0:	b0800215 	stw	r2,8(r22)
 8001ed4:	a8800117 	ldw	r2,4(r21)
 8001ed8:	b0800315 	stw	r2,12(r22)
 8001edc:	008006c4 	movi	r2,27
 8001ee0:	11803f36 	bltu	r2,r6,8001fe0 <_realloc_r+0x518>
 8001ee4:	b0800404 	addi	r2,r22,16
 8001ee8:	ad400204 	addi	r21,r21,8
 8001eec:	a8c00017 	ldw	r3,0(r21)
 8001ef0:	10c00015 	stw	r3,0(r2)
 8001ef4:	a8c00117 	ldw	r3,4(r21)
 8001ef8:	10c00115 	stw	r3,4(r2)
 8001efc:	a8c00217 	ldw	r3,8(r21)
 8001f00:	10c00215 	stw	r3,8(r2)
 8001f04:	b447883a 	add	r3,r22,r17
 8001f08:	bc45c83a 	sub	r2,r23,r17
 8001f0c:	e0c00215 	stw	r3,8(fp)
 8001f10:	10800054 	ori	r2,r2,1
 8001f14:	18800115 	stw	r2,4(r3)
 8001f18:	b0800117 	ldw	r2,4(r22)
 8001f1c:	a009883a 	mov	r4,r20
 8001f20:	1080004c 	andi	r2,r2,1
 8001f24:	1462b03a 	or	r17,r2,r17
 8001f28:	b4400115 	stw	r17,4(r22)
 8001f2c:	800366c0 	call	800366c <__malloc_unlock>
 8001f30:	9005883a 	mov	r2,r18
 8001f34:	003f4006 	br	8001c38 <_realloc_r+0x170>
 8001f38:	a8c00217 	ldw	r3,8(r21)
 8001f3c:	90c00215 	stw	r3,8(r18)
 8001f40:	a8c00317 	ldw	r3,12(r21)
 8001f44:	90c00315 	stw	r3,12(r18)
 8001f48:	30801126 	beq	r6,r2,8001f90 <_realloc_r+0x4c8>
 8001f4c:	90800404 	addi	r2,r18,16
 8001f50:	a8c00404 	addi	r3,r21,16
 8001f54:	003f1906 	br	8001bbc <_realloc_r+0xf4>
 8001f58:	90ffff17 	ldw	r3,-4(r18)
 8001f5c:	00bfff04 	movi	r2,-4
 8001f60:	a825883a 	mov	r18,r21
 8001f64:	1884703a 	and	r2,r3,r2
 8001f68:	80a1883a 	add	r16,r16,r2
 8001f6c:	003f2406 	br	8001c00 <_realloc_r+0x138>
 8001f70:	a8800217 	ldw	r2,8(r21)
 8001f74:	b0800415 	stw	r2,16(r22)
 8001f78:	a8800317 	ldw	r2,12(r21)
 8001f7c:	b0800515 	stw	r2,20(r22)
 8001f80:	31000a26 	beq	r6,r4,8001fac <_realloc_r+0x4e4>
 8001f84:	b0800604 	addi	r2,r22,24
 8001f88:	ad400404 	addi	r21,r21,16
 8001f8c:	003fa906 	br	8001e34 <_realloc_r+0x36c>
 8001f90:	a9000417 	ldw	r4,16(r21)
 8001f94:	90800604 	addi	r2,r18,24
 8001f98:	a8c00604 	addi	r3,r21,24
 8001f9c:	91000415 	stw	r4,16(r18)
 8001fa0:	a9000517 	ldw	r4,20(r21)
 8001fa4:	91000515 	stw	r4,20(r18)
 8001fa8:	003f0406 	br	8001bbc <_realloc_r+0xf4>
 8001fac:	a8c00417 	ldw	r3,16(r21)
 8001fb0:	ad400604 	addi	r21,r21,24
 8001fb4:	b0800804 	addi	r2,r22,32
 8001fb8:	b0c00615 	stw	r3,24(r22)
 8001fbc:	a8ffff17 	ldw	r3,-4(r21)
 8001fc0:	b0c00715 	stw	r3,28(r22)
 8001fc4:	003f9b06 	br	8001e34 <_realloc_r+0x36c>
 8001fc8:	9005883a 	mov	r2,r18
 8001fcc:	003fc706 	br	8001eec <_realloc_r+0x424>
 8001fd0:	a80b883a 	mov	r5,r21
 8001fd4:	9009883a 	mov	r4,r18
 8001fd8:	80018440 	call	8001844 <memmove>
 8001fdc:	003fc906 	br	8001f04 <_realloc_r+0x43c>
 8001fe0:	a8800217 	ldw	r2,8(r21)
 8001fe4:	b0800415 	stw	r2,16(r22)
 8001fe8:	a8800317 	ldw	r2,12(r21)
 8001fec:	b0800515 	stw	r2,20(r22)
 8001ff0:	31000726 	beq	r6,r4,8002010 <_realloc_r+0x548>
 8001ff4:	b0800604 	addi	r2,r22,24
 8001ff8:	ad400404 	addi	r21,r21,16
 8001ffc:	003fbb06 	br	8001eec <_realloc_r+0x424>
 8002000:	a009883a 	mov	r4,r20
 8002004:	800366c0 	call	800366c <__malloc_unlock>
 8002008:	0005883a 	mov	r2,zero
 800200c:	003f0a06 	br	8001c38 <_realloc_r+0x170>
 8002010:	a8c00417 	ldw	r3,16(r21)
 8002014:	ad400604 	addi	r21,r21,24
 8002018:	b0800804 	addi	r2,r22,32
 800201c:	b0c00615 	stw	r3,24(r22)
 8002020:	a8ffff17 	ldw	r3,-4(r21)
 8002024:	b0c00715 	stw	r3,28(r22)
 8002028:	003fb006 	br	8001eec <_realloc_r+0x424>

0800202c <_sbrk_r>:
 800202c:	defffd04 	addi	sp,sp,-12
 8002030:	dc000015 	stw	r16,0(sp)
 8002034:	04020074 	movhi	r16,2049
 8002038:	dc400115 	stw	r17,4(sp)
 800203c:	842a2904 	addi	r16,r16,-22364
 8002040:	2023883a 	mov	r17,r4
 8002044:	2809883a 	mov	r4,r5
 8002048:	dfc00215 	stw	ra,8(sp)
 800204c:	80000015 	stw	zero,0(r16)
 8002050:	80038540 	call	8003854 <sbrk>
 8002054:	00ffffc4 	movi	r3,-1
 8002058:	10c00526 	beq	r2,r3,8002070 <_sbrk_r+0x44>
 800205c:	dfc00217 	ldw	ra,8(sp)
 8002060:	dc400117 	ldw	r17,4(sp)
 8002064:	dc000017 	ldw	r16,0(sp)
 8002068:	dec00304 	addi	sp,sp,12
 800206c:	f800283a 	ret
 8002070:	80c00017 	ldw	r3,0(r16)
 8002074:	183ff926 	beq	r3,zero,800205c <_sbrk_r+0x30>
 8002078:	88c00015 	stw	r3,0(r17)
 800207c:	003ff706 	br	800205c <_sbrk_r+0x30>

08002080 <__sread>:
 8002080:	defffe04 	addi	sp,sp,-8
 8002084:	dc000015 	stw	r16,0(sp)
 8002088:	2821883a 	mov	r16,r5
 800208c:	2940038f 	ldh	r5,14(r5)
 8002090:	dfc00115 	stw	ra,4(sp)
 8002094:	8002dc00 	call	8002dc0 <_read_r>
 8002098:	10000716 	blt	r2,zero,80020b8 <__sread+0x38>
 800209c:	80c01417 	ldw	r3,80(r16)
 80020a0:	1887883a 	add	r3,r3,r2
 80020a4:	80c01415 	stw	r3,80(r16)
 80020a8:	dfc00117 	ldw	ra,4(sp)
 80020ac:	dc000017 	ldw	r16,0(sp)
 80020b0:	dec00204 	addi	sp,sp,8
 80020b4:	f800283a 	ret
 80020b8:	80c0030b 	ldhu	r3,12(r16)
 80020bc:	18fbffcc 	andi	r3,r3,61439
 80020c0:	80c0030d 	sth	r3,12(r16)
 80020c4:	dfc00117 	ldw	ra,4(sp)
 80020c8:	dc000017 	ldw	r16,0(sp)
 80020cc:	dec00204 	addi	sp,sp,8
 80020d0:	f800283a 	ret

080020d4 <__seofread>:
 80020d4:	0005883a 	mov	r2,zero
 80020d8:	f800283a 	ret

080020dc <__swrite>:
 80020dc:	2880030b 	ldhu	r2,12(r5)
 80020e0:	defffb04 	addi	sp,sp,-20
 80020e4:	dcc00315 	stw	r19,12(sp)
 80020e8:	dc800215 	stw	r18,8(sp)
 80020ec:	dc400115 	stw	r17,4(sp)
 80020f0:	dc000015 	stw	r16,0(sp)
 80020f4:	dfc00415 	stw	ra,16(sp)
 80020f8:	10c0400c 	andi	r3,r2,256
 80020fc:	2821883a 	mov	r16,r5
 8002100:	2023883a 	mov	r17,r4
 8002104:	3025883a 	mov	r18,r6
 8002108:	3827883a 	mov	r19,r7
 800210c:	18000526 	beq	r3,zero,8002124 <__swrite+0x48>
 8002110:	2940038f 	ldh	r5,14(r5)
 8002114:	01c00084 	movi	r7,2
 8002118:	000d883a 	mov	r6,zero
 800211c:	8002ba40 	call	8002ba4 <_lseek_r>
 8002120:	8080030b 	ldhu	r2,12(r16)
 8002124:	8140038f 	ldh	r5,14(r16)
 8002128:	10bbffcc 	andi	r2,r2,61439
 800212c:	980f883a 	mov	r7,r19
 8002130:	900d883a 	mov	r6,r18
 8002134:	8809883a 	mov	r4,r17
 8002138:	8080030d 	sth	r2,12(r16)
 800213c:	dfc00417 	ldw	ra,16(sp)
 8002140:	dcc00317 	ldw	r19,12(sp)
 8002144:	dc800217 	ldw	r18,8(sp)
 8002148:	dc400117 	ldw	r17,4(sp)
 800214c:	dc000017 	ldw	r16,0(sp)
 8002150:	dec00504 	addi	sp,sp,20
 8002154:	80021bc1 	jmpi	80021bc <_write_r>

08002158 <__sseek>:
 8002158:	defffe04 	addi	sp,sp,-8
 800215c:	dc000015 	stw	r16,0(sp)
 8002160:	2821883a 	mov	r16,r5
 8002164:	2940038f 	ldh	r5,14(r5)
 8002168:	dfc00115 	stw	ra,4(sp)
 800216c:	8002ba40 	call	8002ba4 <_lseek_r>
 8002170:	00ffffc4 	movi	r3,-1
 8002174:	10c00826 	beq	r2,r3,8002198 <__sseek+0x40>
 8002178:	80c0030b 	ldhu	r3,12(r16)
 800217c:	80801415 	stw	r2,80(r16)
 8002180:	18c40014 	ori	r3,r3,4096
 8002184:	80c0030d 	sth	r3,12(r16)
 8002188:	dfc00117 	ldw	ra,4(sp)
 800218c:	dc000017 	ldw	r16,0(sp)
 8002190:	dec00204 	addi	sp,sp,8
 8002194:	f800283a 	ret
 8002198:	80c0030b 	ldhu	r3,12(r16)
 800219c:	18fbffcc 	andi	r3,r3,61439
 80021a0:	80c0030d 	sth	r3,12(r16)
 80021a4:	dfc00117 	ldw	ra,4(sp)
 80021a8:	dc000017 	ldw	r16,0(sp)
 80021ac:	dec00204 	addi	sp,sp,8
 80021b0:	f800283a 	ret

080021b4 <__sclose>:
 80021b4:	2940038f 	ldh	r5,14(r5)
 80021b8:	80023701 	jmpi	8002370 <_close_r>

080021bc <_write_r>:
 80021bc:	defffd04 	addi	sp,sp,-12
 80021c0:	2805883a 	mov	r2,r5
 80021c4:	dc000015 	stw	r16,0(sp)
 80021c8:	04020074 	movhi	r16,2049
 80021cc:	dc400115 	stw	r17,4(sp)
 80021d0:	300b883a 	mov	r5,r6
 80021d4:	842a2904 	addi	r16,r16,-22364
 80021d8:	2023883a 	mov	r17,r4
 80021dc:	380d883a 	mov	r6,r7
 80021e0:	1009883a 	mov	r4,r2
 80021e4:	dfc00215 	stw	ra,8(sp)
 80021e8:	80000015 	stw	zero,0(r16)
 80021ec:	80039400 	call	8003940 <write>
 80021f0:	00ffffc4 	movi	r3,-1
 80021f4:	10c00526 	beq	r2,r3,800220c <_write_r+0x50>
 80021f8:	dfc00217 	ldw	ra,8(sp)
 80021fc:	dc400117 	ldw	r17,4(sp)
 8002200:	dc000017 	ldw	r16,0(sp)
 8002204:	dec00304 	addi	sp,sp,12
 8002208:	f800283a 	ret
 800220c:	80c00017 	ldw	r3,0(r16)
 8002210:	183ff926 	beq	r3,zero,80021f8 <_write_r+0x3c>
 8002214:	88c00015 	stw	r3,0(r17)
 8002218:	003ff706 	br	80021f8 <_write_r+0x3c>

0800221c <__swsetup_r>:
 800221c:	00820074 	movhi	r2,2049
 8002220:	defffd04 	addi	sp,sp,-12
 8002224:	10a30504 	addi	r2,r2,-29676
 8002228:	dc400115 	stw	r17,4(sp)
 800222c:	2023883a 	mov	r17,r4
 8002230:	11000017 	ldw	r4,0(r2)
 8002234:	dc000015 	stw	r16,0(sp)
 8002238:	dfc00215 	stw	ra,8(sp)
 800223c:	2821883a 	mov	r16,r5
 8002240:	20000226 	beq	r4,zero,800224c <__swsetup_r+0x30>
 8002244:	20800e17 	ldw	r2,56(r4)
 8002248:	10003126 	beq	r2,zero,8002310 <__swsetup_r+0xf4>
 800224c:	8080030b 	ldhu	r2,12(r16)
 8002250:	10c0020c 	andi	r3,r2,8
 8002254:	1009883a 	mov	r4,r2
 8002258:	18000f26 	beq	r3,zero,8002298 <__swsetup_r+0x7c>
 800225c:	80c00417 	ldw	r3,16(r16)
 8002260:	18001526 	beq	r3,zero,80022b8 <__swsetup_r+0x9c>
 8002264:	1100004c 	andi	r4,r2,1
 8002268:	20001c1e 	bne	r4,zero,80022dc <__swsetup_r+0xc0>
 800226c:	1080008c 	andi	r2,r2,2
 8002270:	1000291e 	bne	r2,zero,8002318 <__swsetup_r+0xfc>
 8002274:	80800517 	ldw	r2,20(r16)
 8002278:	80800215 	stw	r2,8(r16)
 800227c:	18001c26 	beq	r3,zero,80022f0 <__swsetup_r+0xd4>
 8002280:	0005883a 	mov	r2,zero
 8002284:	dfc00217 	ldw	ra,8(sp)
 8002288:	dc400117 	ldw	r17,4(sp)
 800228c:	dc000017 	ldw	r16,0(sp)
 8002290:	dec00304 	addi	sp,sp,12
 8002294:	f800283a 	ret
 8002298:	2080040c 	andi	r2,r4,16
 800229c:	10002e26 	beq	r2,zero,8002358 <__swsetup_r+0x13c>
 80022a0:	2080010c 	andi	r2,r4,4
 80022a4:	10001e1e 	bne	r2,zero,8002320 <__swsetup_r+0x104>
 80022a8:	80c00417 	ldw	r3,16(r16)
 80022ac:	20800214 	ori	r2,r4,8
 80022b0:	8080030d 	sth	r2,12(r16)
 80022b4:	183feb1e 	bne	r3,zero,8002264 <__swsetup_r+0x48>
 80022b8:	1100a00c 	andi	r4,r2,640
 80022bc:	01408004 	movi	r5,512
 80022c0:	217fe826 	beq	r4,r5,8002264 <__swsetup_r+0x48>
 80022c4:	800b883a 	mov	r5,r16
 80022c8:	8809883a 	mov	r4,r17
 80022cc:	8002c040 	call	8002c04 <__smakebuf_r>
 80022d0:	8080030b 	ldhu	r2,12(r16)
 80022d4:	80c00417 	ldw	r3,16(r16)
 80022d8:	003fe206 	br	8002264 <__swsetup_r+0x48>
 80022dc:	80800517 	ldw	r2,20(r16)
 80022e0:	80000215 	stw	zero,8(r16)
 80022e4:	0085c83a 	sub	r2,zero,r2
 80022e8:	80800615 	stw	r2,24(r16)
 80022ec:	183fe41e 	bne	r3,zero,8002280 <__swsetup_r+0x64>
 80022f0:	80c0030b 	ldhu	r3,12(r16)
 80022f4:	0005883a 	mov	r2,zero
 80022f8:	1900200c 	andi	r4,r3,128
 80022fc:	203fe126 	beq	r4,zero,8002284 <__swsetup_r+0x68>
 8002300:	18c01014 	ori	r3,r3,64
 8002304:	80c0030d 	sth	r3,12(r16)
 8002308:	00bfffc4 	movi	r2,-1
 800230c:	003fdd06 	br	8002284 <__swsetup_r+0x68>
 8002310:	800076c0 	call	800076c <__sinit>
 8002314:	003fcd06 	br	800224c <__swsetup_r+0x30>
 8002318:	0005883a 	mov	r2,zero
 800231c:	003fd606 	br	8002278 <__swsetup_r+0x5c>
 8002320:	81400c17 	ldw	r5,48(r16)
 8002324:	28000626 	beq	r5,zero,8002340 <__swsetup_r+0x124>
 8002328:	80801004 	addi	r2,r16,64
 800232c:	28800326 	beq	r5,r2,800233c <__swsetup_r+0x120>
 8002330:	8809883a 	mov	r4,r17
 8002334:	80028940 	call	8002894 <_free_r>
 8002338:	8100030b 	ldhu	r4,12(r16)
 800233c:	80000c15 	stw	zero,48(r16)
 8002340:	80c00417 	ldw	r3,16(r16)
 8002344:	00bff6c4 	movi	r2,-37
 8002348:	1108703a 	and	r4,r2,r4
 800234c:	80000115 	stw	zero,4(r16)
 8002350:	80c00015 	stw	r3,0(r16)
 8002354:	003fd506 	br	80022ac <__swsetup_r+0x90>
 8002358:	00800244 	movi	r2,9
 800235c:	88800015 	stw	r2,0(r17)
 8002360:	20801014 	ori	r2,r4,64
 8002364:	8080030d 	sth	r2,12(r16)
 8002368:	00bfffc4 	movi	r2,-1
 800236c:	003fc506 	br	8002284 <__swsetup_r+0x68>

08002370 <_close_r>:
 8002370:	defffd04 	addi	sp,sp,-12
 8002374:	dc000015 	stw	r16,0(sp)
 8002378:	04020074 	movhi	r16,2049
 800237c:	dc400115 	stw	r17,4(sp)
 8002380:	842a2904 	addi	r16,r16,-22364
 8002384:	2023883a 	mov	r17,r4
 8002388:	2809883a 	mov	r4,r5
 800238c:	dfc00215 	stw	ra,8(sp)
 8002390:	80000015 	stw	zero,0(r16)
 8002394:	80030e80 	call	80030e8 <close>
 8002398:	00ffffc4 	movi	r3,-1
 800239c:	10c00526 	beq	r2,r3,80023b4 <_close_r+0x44>
 80023a0:	dfc00217 	ldw	ra,8(sp)
 80023a4:	dc400117 	ldw	r17,4(sp)
 80023a8:	dc000017 	ldw	r16,0(sp)
 80023ac:	dec00304 	addi	sp,sp,12
 80023b0:	f800283a 	ret
 80023b4:	80c00017 	ldw	r3,0(r16)
 80023b8:	183ff926 	beq	r3,zero,80023a0 <_close_r+0x30>
 80023bc:	88c00015 	stw	r3,0(r17)
 80023c0:	003ff706 	br	80023a0 <_close_r+0x30>

080023c4 <_fclose_r>:
 80023c4:	28003926 	beq	r5,zero,80024ac <_fclose_r+0xe8>
 80023c8:	defffc04 	addi	sp,sp,-16
 80023cc:	dc400115 	stw	r17,4(sp)
 80023d0:	dc000015 	stw	r16,0(sp)
 80023d4:	dfc00315 	stw	ra,12(sp)
 80023d8:	dc800215 	stw	r18,8(sp)
 80023dc:	2023883a 	mov	r17,r4
 80023e0:	2821883a 	mov	r16,r5
 80023e4:	20000226 	beq	r4,zero,80023f0 <_fclose_r+0x2c>
 80023e8:	20800e17 	ldw	r2,56(r4)
 80023ec:	10002726 	beq	r2,zero,800248c <_fclose_r+0xc8>
 80023f0:	8080030f 	ldh	r2,12(r16)
 80023f4:	1000071e 	bne	r2,zero,8002414 <_fclose_r+0x50>
 80023f8:	0005883a 	mov	r2,zero
 80023fc:	dfc00317 	ldw	ra,12(sp)
 8002400:	dc800217 	ldw	r18,8(sp)
 8002404:	dc400117 	ldw	r17,4(sp)
 8002408:	dc000017 	ldw	r16,0(sp)
 800240c:	dec00404 	addi	sp,sp,16
 8002410:	f800283a 	ret
 8002414:	800b883a 	mov	r5,r16
 8002418:	8809883a 	mov	r4,r17
 800241c:	80024c80 	call	80024c8 <__sflush_r>
 8002420:	1025883a 	mov	r18,r2
 8002424:	80800b17 	ldw	r2,44(r16)
 8002428:	10000426 	beq	r2,zero,800243c <_fclose_r+0x78>
 800242c:	81400717 	ldw	r5,28(r16)
 8002430:	8809883a 	mov	r4,r17
 8002434:	103ee83a 	callr	r2
 8002438:	10001616 	blt	r2,zero,8002494 <_fclose_r+0xd0>
 800243c:	8080030b 	ldhu	r2,12(r16)
 8002440:	1080200c 	andi	r2,r2,128
 8002444:	1000151e 	bne	r2,zero,800249c <_fclose_r+0xd8>
 8002448:	81400c17 	ldw	r5,48(r16)
 800244c:	28000526 	beq	r5,zero,8002464 <_fclose_r+0xa0>
 8002450:	80801004 	addi	r2,r16,64
 8002454:	28800226 	beq	r5,r2,8002460 <_fclose_r+0x9c>
 8002458:	8809883a 	mov	r4,r17
 800245c:	80028940 	call	8002894 <_free_r>
 8002460:	80000c15 	stw	zero,48(r16)
 8002464:	81401117 	ldw	r5,68(r16)
 8002468:	28000326 	beq	r5,zero,8002478 <_fclose_r+0xb4>
 800246c:	8809883a 	mov	r4,r17
 8002470:	80028940 	call	8002894 <_free_r>
 8002474:	80001115 	stw	zero,68(r16)
 8002478:	800077c0 	call	800077c <__sfp_lock_acquire>
 800247c:	8000030d 	sth	zero,12(r16)
 8002480:	80007800 	call	8000780 <__sfp_lock_release>
 8002484:	9005883a 	mov	r2,r18
 8002488:	003fdc06 	br	80023fc <_fclose_r+0x38>
 800248c:	800076c0 	call	800076c <__sinit>
 8002490:	003fd706 	br	80023f0 <_fclose_r+0x2c>
 8002494:	04bfffc4 	movi	r18,-1
 8002498:	003fe806 	br	800243c <_fclose_r+0x78>
 800249c:	81400417 	ldw	r5,16(r16)
 80024a0:	8809883a 	mov	r4,r17
 80024a4:	80028940 	call	8002894 <_free_r>
 80024a8:	003fe706 	br	8002448 <_fclose_r+0x84>
 80024ac:	0005883a 	mov	r2,zero
 80024b0:	f800283a 	ret

080024b4 <fclose>:
 80024b4:	00820074 	movhi	r2,2049
 80024b8:	10a30504 	addi	r2,r2,-29676
 80024bc:	200b883a 	mov	r5,r4
 80024c0:	11000017 	ldw	r4,0(r2)
 80024c4:	80023c41 	jmpi	80023c4 <_fclose_r>

080024c8 <__sflush_r>:
 80024c8:	2880030b 	ldhu	r2,12(r5)
 80024cc:	defffb04 	addi	sp,sp,-20
 80024d0:	dcc00315 	stw	r19,12(sp)
 80024d4:	dc400115 	stw	r17,4(sp)
 80024d8:	dfc00415 	stw	ra,16(sp)
 80024dc:	dc800215 	stw	r18,8(sp)
 80024e0:	dc000015 	stw	r16,0(sp)
 80024e4:	10c0020c 	andi	r3,r2,8
 80024e8:	2823883a 	mov	r17,r5
 80024ec:	2027883a 	mov	r19,r4
 80024f0:	1800311e 	bne	r3,zero,80025b8 <__sflush_r+0xf0>
 80024f4:	28c00117 	ldw	r3,4(r5)
 80024f8:	10820014 	ori	r2,r2,2048
 80024fc:	2880030d 	sth	r2,12(r5)
 8002500:	00c04b0e 	bge	zero,r3,8002630 <__sflush_r+0x168>
 8002504:	8a000a17 	ldw	r8,40(r17)
 8002508:	40002326 	beq	r8,zero,8002598 <__sflush_r+0xd0>
 800250c:	9c000017 	ldw	r16,0(r19)
 8002510:	10c4000c 	andi	r3,r2,4096
 8002514:	98000015 	stw	zero,0(r19)
 8002518:	18004826 	beq	r3,zero,800263c <__sflush_r+0x174>
 800251c:	89801417 	ldw	r6,80(r17)
 8002520:	10c0010c 	andi	r3,r2,4
 8002524:	18000626 	beq	r3,zero,8002540 <__sflush_r+0x78>
 8002528:	88c00117 	ldw	r3,4(r17)
 800252c:	88800c17 	ldw	r2,48(r17)
 8002530:	30cdc83a 	sub	r6,r6,r3
 8002534:	10000226 	beq	r2,zero,8002540 <__sflush_r+0x78>
 8002538:	88800f17 	ldw	r2,60(r17)
 800253c:	308dc83a 	sub	r6,r6,r2
 8002540:	89400717 	ldw	r5,28(r17)
 8002544:	000f883a 	mov	r7,zero
 8002548:	9809883a 	mov	r4,r19
 800254c:	403ee83a 	callr	r8
 8002550:	00ffffc4 	movi	r3,-1
 8002554:	10c04426 	beq	r2,r3,8002668 <__sflush_r+0x1a0>
 8002558:	88c0030b 	ldhu	r3,12(r17)
 800255c:	89000417 	ldw	r4,16(r17)
 8002560:	88000115 	stw	zero,4(r17)
 8002564:	197dffcc 	andi	r5,r3,63487
 8002568:	8940030d 	sth	r5,12(r17)
 800256c:	89000015 	stw	r4,0(r17)
 8002570:	18c4000c 	andi	r3,r3,4096
 8002574:	18002c1e 	bne	r3,zero,8002628 <__sflush_r+0x160>
 8002578:	89400c17 	ldw	r5,48(r17)
 800257c:	9c000015 	stw	r16,0(r19)
 8002580:	28000526 	beq	r5,zero,8002598 <__sflush_r+0xd0>
 8002584:	88801004 	addi	r2,r17,64
 8002588:	28800226 	beq	r5,r2,8002594 <__sflush_r+0xcc>
 800258c:	9809883a 	mov	r4,r19
 8002590:	80028940 	call	8002894 <_free_r>
 8002594:	88000c15 	stw	zero,48(r17)
 8002598:	0005883a 	mov	r2,zero
 800259c:	dfc00417 	ldw	ra,16(sp)
 80025a0:	dcc00317 	ldw	r19,12(sp)
 80025a4:	dc800217 	ldw	r18,8(sp)
 80025a8:	dc400117 	ldw	r17,4(sp)
 80025ac:	dc000017 	ldw	r16,0(sp)
 80025b0:	dec00504 	addi	sp,sp,20
 80025b4:	f800283a 	ret
 80025b8:	2c800417 	ldw	r18,16(r5)
 80025bc:	903ff626 	beq	r18,zero,8002598 <__sflush_r+0xd0>
 80025c0:	2c000017 	ldw	r16,0(r5)
 80025c4:	108000cc 	andi	r2,r2,3
 80025c8:	2c800015 	stw	r18,0(r5)
 80025cc:	84a1c83a 	sub	r16,r16,r18
 80025d0:	1000131e 	bne	r2,zero,8002620 <__sflush_r+0x158>
 80025d4:	28800517 	ldw	r2,20(r5)
 80025d8:	88800215 	stw	r2,8(r17)
 80025dc:	04000316 	blt	zero,r16,80025ec <__sflush_r+0x124>
 80025e0:	003fed06 	br	8002598 <__sflush_r+0xd0>
 80025e4:	90a5883a 	add	r18,r18,r2
 80025e8:	043feb0e 	bge	zero,r16,8002598 <__sflush_r+0xd0>
 80025ec:	88800917 	ldw	r2,36(r17)
 80025f0:	89400717 	ldw	r5,28(r17)
 80025f4:	800f883a 	mov	r7,r16
 80025f8:	900d883a 	mov	r6,r18
 80025fc:	9809883a 	mov	r4,r19
 8002600:	103ee83a 	callr	r2
 8002604:	80a1c83a 	sub	r16,r16,r2
 8002608:	00bff616 	blt	zero,r2,80025e4 <__sflush_r+0x11c>
 800260c:	88c0030b 	ldhu	r3,12(r17)
 8002610:	00bfffc4 	movi	r2,-1
 8002614:	18c01014 	ori	r3,r3,64
 8002618:	88c0030d 	sth	r3,12(r17)
 800261c:	003fdf06 	br	800259c <__sflush_r+0xd4>
 8002620:	0005883a 	mov	r2,zero
 8002624:	003fec06 	br	80025d8 <__sflush_r+0x110>
 8002628:	88801415 	stw	r2,80(r17)
 800262c:	003fd206 	br	8002578 <__sflush_r+0xb0>
 8002630:	28c00f17 	ldw	r3,60(r5)
 8002634:	00ffb316 	blt	zero,r3,8002504 <__sflush_r+0x3c>
 8002638:	003fd706 	br	8002598 <__sflush_r+0xd0>
 800263c:	89400717 	ldw	r5,28(r17)
 8002640:	000d883a 	mov	r6,zero
 8002644:	01c00044 	movi	r7,1
 8002648:	9809883a 	mov	r4,r19
 800264c:	403ee83a 	callr	r8
 8002650:	100d883a 	mov	r6,r2
 8002654:	00bfffc4 	movi	r2,-1
 8002658:	30801426 	beq	r6,r2,80026ac <__sflush_r+0x1e4>
 800265c:	8880030b 	ldhu	r2,12(r17)
 8002660:	8a000a17 	ldw	r8,40(r17)
 8002664:	003fae06 	br	8002520 <__sflush_r+0x58>
 8002668:	98c00017 	ldw	r3,0(r19)
 800266c:	183fba26 	beq	r3,zero,8002558 <__sflush_r+0x90>
 8002670:	01000744 	movi	r4,29
 8002674:	19000626 	beq	r3,r4,8002690 <__sflush_r+0x1c8>
 8002678:	01000584 	movi	r4,22
 800267c:	19000426 	beq	r3,r4,8002690 <__sflush_r+0x1c8>
 8002680:	88c0030b 	ldhu	r3,12(r17)
 8002684:	18c01014 	ori	r3,r3,64
 8002688:	88c0030d 	sth	r3,12(r17)
 800268c:	003fc306 	br	800259c <__sflush_r+0xd4>
 8002690:	8880030b 	ldhu	r2,12(r17)
 8002694:	88c00417 	ldw	r3,16(r17)
 8002698:	88000115 	stw	zero,4(r17)
 800269c:	10bdffcc 	andi	r2,r2,63487
 80026a0:	8880030d 	sth	r2,12(r17)
 80026a4:	88c00015 	stw	r3,0(r17)
 80026a8:	003fb306 	br	8002578 <__sflush_r+0xb0>
 80026ac:	98800017 	ldw	r2,0(r19)
 80026b0:	103fea26 	beq	r2,zero,800265c <__sflush_r+0x194>
 80026b4:	00c00744 	movi	r3,29
 80026b8:	10c00226 	beq	r2,r3,80026c4 <__sflush_r+0x1fc>
 80026bc:	00c00584 	movi	r3,22
 80026c0:	10c0031e 	bne	r2,r3,80026d0 <__sflush_r+0x208>
 80026c4:	9c000015 	stw	r16,0(r19)
 80026c8:	0005883a 	mov	r2,zero
 80026cc:	003fb306 	br	800259c <__sflush_r+0xd4>
 80026d0:	88c0030b 	ldhu	r3,12(r17)
 80026d4:	3005883a 	mov	r2,r6
 80026d8:	18c01014 	ori	r3,r3,64
 80026dc:	88c0030d 	sth	r3,12(r17)
 80026e0:	003fae06 	br	800259c <__sflush_r+0xd4>

080026e4 <_fflush_r>:
 80026e4:	defffd04 	addi	sp,sp,-12
 80026e8:	dc000115 	stw	r16,4(sp)
 80026ec:	dfc00215 	stw	ra,8(sp)
 80026f0:	2021883a 	mov	r16,r4
 80026f4:	20000226 	beq	r4,zero,8002700 <_fflush_r+0x1c>
 80026f8:	20800e17 	ldw	r2,56(r4)
 80026fc:	10000c26 	beq	r2,zero,8002730 <_fflush_r+0x4c>
 8002700:	2880030f 	ldh	r2,12(r5)
 8002704:	1000051e 	bne	r2,zero,800271c <_fflush_r+0x38>
 8002708:	0005883a 	mov	r2,zero
 800270c:	dfc00217 	ldw	ra,8(sp)
 8002710:	dc000117 	ldw	r16,4(sp)
 8002714:	dec00304 	addi	sp,sp,12
 8002718:	f800283a 	ret
 800271c:	8009883a 	mov	r4,r16
 8002720:	dfc00217 	ldw	ra,8(sp)
 8002724:	dc000117 	ldw	r16,4(sp)
 8002728:	dec00304 	addi	sp,sp,12
 800272c:	80024c81 	jmpi	80024c8 <__sflush_r>
 8002730:	d9400015 	stw	r5,0(sp)
 8002734:	800076c0 	call	800076c <__sinit>
 8002738:	d9400017 	ldw	r5,0(sp)
 800273c:	003ff006 	br	8002700 <_fflush_r+0x1c>

08002740 <fflush>:
 8002740:	20000526 	beq	r4,zero,8002758 <fflush+0x18>
 8002744:	00820074 	movhi	r2,2049
 8002748:	10a30504 	addi	r2,r2,-29676
 800274c:	200b883a 	mov	r5,r4
 8002750:	11000017 	ldw	r4,0(r2)
 8002754:	80026e41 	jmpi	80026e4 <_fflush_r>
 8002758:	00820074 	movhi	r2,2049
 800275c:	10a30404 	addi	r2,r2,-29680
 8002760:	11000017 	ldw	r4,0(r2)
 8002764:	01420034 	movhi	r5,2048
 8002768:	2949b904 	addi	r5,r5,9956
 800276c:	8000d481 	jmpi	8000d48 <_fwalk_reent>

08002770 <_malloc_trim_r>:
 8002770:	defffb04 	addi	sp,sp,-20
 8002774:	dcc00315 	stw	r19,12(sp)
 8002778:	04c20034 	movhi	r19,2048
 800277c:	dc800215 	stw	r18,8(sp)
 8002780:	dc400115 	stw	r17,4(sp)
 8002784:	dc000015 	stw	r16,0(sp)
 8002788:	dfc00415 	stw	ra,16(sp)
 800278c:	2821883a 	mov	r16,r5
 8002790:	9cdd0b04 	addi	r19,r19,29740
 8002794:	2025883a 	mov	r18,r4
 8002798:	80036480 	call	8003648 <__malloc_lock>
 800279c:	98800217 	ldw	r2,8(r19)
 80027a0:	14400117 	ldw	r17,4(r2)
 80027a4:	00bfff04 	movi	r2,-4
 80027a8:	88a2703a 	and	r17,r17,r2
 80027ac:	8c21c83a 	sub	r16,r17,r16
 80027b0:	8403fbc4 	addi	r16,r16,4079
 80027b4:	8020d33a 	srli	r16,r16,12
 80027b8:	0083ffc4 	movi	r2,4095
 80027bc:	843fffc4 	addi	r16,r16,-1
 80027c0:	8020933a 	slli	r16,r16,12
 80027c4:	1400060e 	bge	r2,r16,80027e0 <_malloc_trim_r+0x70>
 80027c8:	000b883a 	mov	r5,zero
 80027cc:	9009883a 	mov	r4,r18
 80027d0:	800202c0 	call	800202c <_sbrk_r>
 80027d4:	98c00217 	ldw	r3,8(r19)
 80027d8:	1c47883a 	add	r3,r3,r17
 80027dc:	10c00a26 	beq	r2,r3,8002808 <_malloc_trim_r+0x98>
 80027e0:	9009883a 	mov	r4,r18
 80027e4:	800366c0 	call	800366c <__malloc_unlock>
 80027e8:	0005883a 	mov	r2,zero
 80027ec:	dfc00417 	ldw	ra,16(sp)
 80027f0:	dcc00317 	ldw	r19,12(sp)
 80027f4:	dc800217 	ldw	r18,8(sp)
 80027f8:	dc400117 	ldw	r17,4(sp)
 80027fc:	dc000017 	ldw	r16,0(sp)
 8002800:	dec00504 	addi	sp,sp,20
 8002804:	f800283a 	ret
 8002808:	040bc83a 	sub	r5,zero,r16
 800280c:	9009883a 	mov	r4,r18
 8002810:	800202c0 	call	800202c <_sbrk_r>
 8002814:	00ffffc4 	movi	r3,-1
 8002818:	10c00d26 	beq	r2,r3,8002850 <_malloc_trim_r+0xe0>
 800281c:	00c20074 	movhi	r3,2049
 8002820:	18ea3104 	addi	r3,r3,-22332
 8002824:	18800017 	ldw	r2,0(r3)
 8002828:	99000217 	ldw	r4,8(r19)
 800282c:	8c23c83a 	sub	r17,r17,r16
 8002830:	8c400054 	ori	r17,r17,1
 8002834:	1421c83a 	sub	r16,r2,r16
 8002838:	24400115 	stw	r17,4(r4)
 800283c:	9009883a 	mov	r4,r18
 8002840:	1c000015 	stw	r16,0(r3)
 8002844:	800366c0 	call	800366c <__malloc_unlock>
 8002848:	00800044 	movi	r2,1
 800284c:	003fe706 	br	80027ec <_malloc_trim_r+0x7c>
 8002850:	000b883a 	mov	r5,zero
 8002854:	9009883a 	mov	r4,r18
 8002858:	800202c0 	call	800202c <_sbrk_r>
 800285c:	99000217 	ldw	r4,8(r19)
 8002860:	014003c4 	movi	r5,15
 8002864:	1107c83a 	sub	r3,r2,r4
 8002868:	28ffdd0e 	bge	r5,r3,80027e0 <_malloc_trim_r+0x70>
 800286c:	01420074 	movhi	r5,2049
 8002870:	29630604 	addi	r5,r5,-29672
 8002874:	29400017 	ldw	r5,0(r5)
 8002878:	18c00054 	ori	r3,r3,1
 800287c:	20c00115 	stw	r3,4(r4)
 8002880:	00c20074 	movhi	r3,2049
 8002884:	1145c83a 	sub	r2,r2,r5
 8002888:	18ea3104 	addi	r3,r3,-22332
 800288c:	18800015 	stw	r2,0(r3)
 8002890:	003fd306 	br	80027e0 <_malloc_trim_r+0x70>

08002894 <_free_r>:
 8002894:	28004126 	beq	r5,zero,800299c <_free_r+0x108>
 8002898:	defffd04 	addi	sp,sp,-12
 800289c:	dc400115 	stw	r17,4(sp)
 80028a0:	dc000015 	stw	r16,0(sp)
 80028a4:	2023883a 	mov	r17,r4
 80028a8:	2821883a 	mov	r16,r5
 80028ac:	dfc00215 	stw	ra,8(sp)
 80028b0:	80036480 	call	8003648 <__malloc_lock>
 80028b4:	81ffff17 	ldw	r7,-4(r16)
 80028b8:	00bfff84 	movi	r2,-2
 80028bc:	01020034 	movhi	r4,2048
 80028c0:	81bffe04 	addi	r6,r16,-8
 80028c4:	3884703a 	and	r2,r7,r2
 80028c8:	211d0b04 	addi	r4,r4,29740
 80028cc:	308b883a 	add	r5,r6,r2
 80028d0:	2a400117 	ldw	r9,4(r5)
 80028d4:	22000217 	ldw	r8,8(r4)
 80028d8:	00ffff04 	movi	r3,-4
 80028dc:	48c6703a 	and	r3,r9,r3
 80028e0:	2a005726 	beq	r5,r8,8002a40 <_free_r+0x1ac>
 80028e4:	28c00115 	stw	r3,4(r5)
 80028e8:	39c0004c 	andi	r7,r7,1
 80028ec:	3800091e 	bne	r7,zero,8002914 <_free_r+0x80>
 80028f0:	823ffe17 	ldw	r8,-8(r16)
 80028f4:	22400204 	addi	r9,r4,8
 80028f8:	320dc83a 	sub	r6,r6,r8
 80028fc:	31c00217 	ldw	r7,8(r6)
 8002900:	1205883a 	add	r2,r2,r8
 8002904:	3a406526 	beq	r7,r9,8002a9c <_free_r+0x208>
 8002908:	32000317 	ldw	r8,12(r6)
 800290c:	3a000315 	stw	r8,12(r7)
 8002910:	41c00215 	stw	r7,8(r8)
 8002914:	28cf883a 	add	r7,r5,r3
 8002918:	39c00117 	ldw	r7,4(r7)
 800291c:	39c0004c 	andi	r7,r7,1
 8002920:	38003a26 	beq	r7,zero,8002a0c <_free_r+0x178>
 8002924:	10c00054 	ori	r3,r2,1
 8002928:	30c00115 	stw	r3,4(r6)
 800292c:	3087883a 	add	r3,r6,r2
 8002930:	18800015 	stw	r2,0(r3)
 8002934:	00c07fc4 	movi	r3,511
 8002938:	18801936 	bltu	r3,r2,80029a0 <_free_r+0x10c>
 800293c:	1004d0fa 	srli	r2,r2,3
 8002940:	01c00044 	movi	r7,1
 8002944:	21400117 	ldw	r5,4(r4)
 8002948:	10c00044 	addi	r3,r2,1
 800294c:	18c7883a 	add	r3,r3,r3
 8002950:	1005d0ba 	srai	r2,r2,2
 8002954:	18c7883a 	add	r3,r3,r3
 8002958:	18c7883a 	add	r3,r3,r3
 800295c:	1907883a 	add	r3,r3,r4
 8002960:	3884983a 	sll	r2,r7,r2
 8002964:	19c00017 	ldw	r7,0(r3)
 8002968:	1a3ffe04 	addi	r8,r3,-8
 800296c:	1144b03a 	or	r2,r2,r5
 8002970:	32000315 	stw	r8,12(r6)
 8002974:	31c00215 	stw	r7,8(r6)
 8002978:	20800115 	stw	r2,4(r4)
 800297c:	19800015 	stw	r6,0(r3)
 8002980:	39800315 	stw	r6,12(r7)
 8002984:	8809883a 	mov	r4,r17
 8002988:	dfc00217 	ldw	ra,8(sp)
 800298c:	dc400117 	ldw	r17,4(sp)
 8002990:	dc000017 	ldw	r16,0(sp)
 8002994:	dec00304 	addi	sp,sp,12
 8002998:	800366c1 	jmpi	800366c <__malloc_unlock>
 800299c:	f800283a 	ret
 80029a0:	100ad27a 	srli	r5,r2,9
 80029a4:	00c00104 	movi	r3,4
 80029a8:	19404a36 	bltu	r3,r5,8002ad4 <_free_r+0x240>
 80029ac:	100ad1ba 	srli	r5,r2,6
 80029b0:	28c00e44 	addi	r3,r5,57
 80029b4:	18c7883a 	add	r3,r3,r3
 80029b8:	29400e04 	addi	r5,r5,56
 80029bc:	18c7883a 	add	r3,r3,r3
 80029c0:	18c7883a 	add	r3,r3,r3
 80029c4:	1909883a 	add	r4,r3,r4
 80029c8:	20c00017 	ldw	r3,0(r4)
 80029cc:	01c20034 	movhi	r7,2048
 80029d0:	213ffe04 	addi	r4,r4,-8
 80029d4:	39dd0b04 	addi	r7,r7,29740
 80029d8:	20c04426 	beq	r4,r3,8002aec <_free_r+0x258>
 80029dc:	01ffff04 	movi	r7,-4
 80029e0:	19400117 	ldw	r5,4(r3)
 80029e4:	29ca703a 	and	r5,r5,r7
 80029e8:	1140022e 	bgeu	r2,r5,80029f4 <_free_r+0x160>
 80029ec:	18c00217 	ldw	r3,8(r3)
 80029f0:	20fffb1e 	bne	r4,r3,80029e0 <_free_r+0x14c>
 80029f4:	19000317 	ldw	r4,12(r3)
 80029f8:	31000315 	stw	r4,12(r6)
 80029fc:	30c00215 	stw	r3,8(r6)
 8002a00:	21800215 	stw	r6,8(r4)
 8002a04:	19800315 	stw	r6,12(r3)
 8002a08:	003fde06 	br	8002984 <_free_r+0xf0>
 8002a0c:	29c00217 	ldw	r7,8(r5)
 8002a10:	10c5883a 	add	r2,r2,r3
 8002a14:	00c20034 	movhi	r3,2048
 8002a18:	18dd0d04 	addi	r3,r3,29748
 8002a1c:	38c03b26 	beq	r7,r3,8002b0c <_free_r+0x278>
 8002a20:	2a000317 	ldw	r8,12(r5)
 8002a24:	11400054 	ori	r5,r2,1
 8002a28:	3087883a 	add	r3,r6,r2
 8002a2c:	3a000315 	stw	r8,12(r7)
 8002a30:	41c00215 	stw	r7,8(r8)
 8002a34:	31400115 	stw	r5,4(r6)
 8002a38:	18800015 	stw	r2,0(r3)
 8002a3c:	003fbd06 	br	8002934 <_free_r+0xa0>
 8002a40:	39c0004c 	andi	r7,r7,1
 8002a44:	10c5883a 	add	r2,r2,r3
 8002a48:	3800071e 	bne	r7,zero,8002a68 <_free_r+0x1d4>
 8002a4c:	81fffe17 	ldw	r7,-8(r16)
 8002a50:	31cdc83a 	sub	r6,r6,r7
 8002a54:	30c00317 	ldw	r3,12(r6)
 8002a58:	31400217 	ldw	r5,8(r6)
 8002a5c:	11c5883a 	add	r2,r2,r7
 8002a60:	28c00315 	stw	r3,12(r5)
 8002a64:	19400215 	stw	r5,8(r3)
 8002a68:	10c00054 	ori	r3,r2,1
 8002a6c:	30c00115 	stw	r3,4(r6)
 8002a70:	00c20074 	movhi	r3,2049
 8002a74:	18e30704 	addi	r3,r3,-29668
 8002a78:	18c00017 	ldw	r3,0(r3)
 8002a7c:	21800215 	stw	r6,8(r4)
 8002a80:	10ffc036 	bltu	r2,r3,8002984 <_free_r+0xf0>
 8002a84:	00820074 	movhi	r2,2049
 8002a88:	10aa2804 	addi	r2,r2,-22368
 8002a8c:	11400017 	ldw	r5,0(r2)
 8002a90:	8809883a 	mov	r4,r17
 8002a94:	80027700 	call	8002770 <_malloc_trim_r>
 8002a98:	003fba06 	br	8002984 <_free_r+0xf0>
 8002a9c:	28c9883a 	add	r4,r5,r3
 8002aa0:	21000117 	ldw	r4,4(r4)
 8002aa4:	2100004c 	andi	r4,r4,1
 8002aa8:	2000391e 	bne	r4,zero,8002b90 <_free_r+0x2fc>
 8002aac:	29c00217 	ldw	r7,8(r5)
 8002ab0:	29000317 	ldw	r4,12(r5)
 8002ab4:	1885883a 	add	r2,r3,r2
 8002ab8:	10c00054 	ori	r3,r2,1
 8002abc:	39000315 	stw	r4,12(r7)
 8002ac0:	21c00215 	stw	r7,8(r4)
 8002ac4:	30c00115 	stw	r3,4(r6)
 8002ac8:	308d883a 	add	r6,r6,r2
 8002acc:	30800015 	stw	r2,0(r6)
 8002ad0:	003fac06 	br	8002984 <_free_r+0xf0>
 8002ad4:	00c00504 	movi	r3,20
 8002ad8:	19401536 	bltu	r3,r5,8002b30 <_free_r+0x29c>
 8002adc:	28c01704 	addi	r3,r5,92
 8002ae0:	18c7883a 	add	r3,r3,r3
 8002ae4:	294016c4 	addi	r5,r5,91
 8002ae8:	003fb406 	br	80029bc <_free_r+0x128>
 8002aec:	280bd0ba 	srai	r5,r5,2
 8002af0:	00c00044 	movi	r3,1
 8002af4:	38800117 	ldw	r2,4(r7)
 8002af8:	194a983a 	sll	r5,r3,r5
 8002afc:	2007883a 	mov	r3,r4
 8002b00:	2884b03a 	or	r2,r5,r2
 8002b04:	38800115 	stw	r2,4(r7)
 8002b08:	003fbb06 	br	80029f8 <_free_r+0x164>
 8002b0c:	21800515 	stw	r6,20(r4)
 8002b10:	21800415 	stw	r6,16(r4)
 8002b14:	10c00054 	ori	r3,r2,1
 8002b18:	31c00315 	stw	r7,12(r6)
 8002b1c:	31c00215 	stw	r7,8(r6)
 8002b20:	30c00115 	stw	r3,4(r6)
 8002b24:	308d883a 	add	r6,r6,r2
 8002b28:	30800015 	stw	r2,0(r6)
 8002b2c:	003f9506 	br	8002984 <_free_r+0xf0>
 8002b30:	00c01504 	movi	r3,84
 8002b34:	19400536 	bltu	r3,r5,8002b4c <_free_r+0x2b8>
 8002b38:	100ad33a 	srli	r5,r2,12
 8002b3c:	28c01bc4 	addi	r3,r5,111
 8002b40:	18c7883a 	add	r3,r3,r3
 8002b44:	29401b84 	addi	r5,r5,110
 8002b48:	003f9c06 	br	80029bc <_free_r+0x128>
 8002b4c:	00c05504 	movi	r3,340
 8002b50:	19400536 	bltu	r3,r5,8002b68 <_free_r+0x2d4>
 8002b54:	100ad3fa 	srli	r5,r2,15
 8002b58:	28c01e04 	addi	r3,r5,120
 8002b5c:	18c7883a 	add	r3,r3,r3
 8002b60:	29401dc4 	addi	r5,r5,119
 8002b64:	003f9506 	br	80029bc <_free_r+0x128>
 8002b68:	00c15504 	movi	r3,1364
 8002b6c:	19400536 	bltu	r3,r5,8002b84 <_free_r+0x2f0>
 8002b70:	100ad4ba 	srli	r5,r2,18
 8002b74:	28c01f44 	addi	r3,r5,125
 8002b78:	18c7883a 	add	r3,r3,r3
 8002b7c:	29401f04 	addi	r5,r5,124
 8002b80:	003f8e06 	br	80029bc <_free_r+0x128>
 8002b84:	00c03f84 	movi	r3,254
 8002b88:	01401f84 	movi	r5,126
 8002b8c:	003f8b06 	br	80029bc <_free_r+0x128>
 8002b90:	10c00054 	ori	r3,r2,1
 8002b94:	30c00115 	stw	r3,4(r6)
 8002b98:	308d883a 	add	r6,r6,r2
 8002b9c:	30800015 	stw	r2,0(r6)
 8002ba0:	003f7806 	br	8002984 <_free_r+0xf0>

08002ba4 <_lseek_r>:
 8002ba4:	defffd04 	addi	sp,sp,-12
 8002ba8:	2805883a 	mov	r2,r5
 8002bac:	dc000015 	stw	r16,0(sp)
 8002bb0:	04020074 	movhi	r16,2049
 8002bb4:	dc400115 	stw	r17,4(sp)
 8002bb8:	300b883a 	mov	r5,r6
 8002bbc:	842a2904 	addi	r16,r16,-22364
 8002bc0:	2023883a 	mov	r17,r4
 8002bc4:	380d883a 	mov	r6,r7
 8002bc8:	1009883a 	mov	r4,r2
 8002bcc:	dfc00215 	stw	ra,8(sp)
 8002bd0:	80000015 	stw	zero,0(r16)
 8002bd4:	80034f00 	call	80034f0 <lseek>
 8002bd8:	00ffffc4 	movi	r3,-1
 8002bdc:	10c00526 	beq	r2,r3,8002bf4 <_lseek_r+0x50>
 8002be0:	dfc00217 	ldw	ra,8(sp)
 8002be4:	dc400117 	ldw	r17,4(sp)
 8002be8:	dc000017 	ldw	r16,0(sp)
 8002bec:	dec00304 	addi	sp,sp,12
 8002bf0:	f800283a 	ret
 8002bf4:	80c00017 	ldw	r3,0(r16)
 8002bf8:	183ff926 	beq	r3,zero,8002be0 <_lseek_r+0x3c>
 8002bfc:	88c00015 	stw	r3,0(r17)
 8002c00:	003ff706 	br	8002be0 <_lseek_r+0x3c>

08002c04 <__smakebuf_r>:
 8002c04:	2880030b 	ldhu	r2,12(r5)
 8002c08:	10c0008c 	andi	r3,r2,2
 8002c0c:	1800411e 	bne	r3,zero,8002d14 <__smakebuf_r+0x110>
 8002c10:	deffec04 	addi	sp,sp,-80
 8002c14:	dc000f15 	stw	r16,60(sp)
 8002c18:	2821883a 	mov	r16,r5
 8002c1c:	2940038f 	ldh	r5,14(r5)
 8002c20:	dc401015 	stw	r17,64(sp)
 8002c24:	dfc01315 	stw	ra,76(sp)
 8002c28:	dcc01215 	stw	r19,72(sp)
 8002c2c:	dc801115 	stw	r18,68(sp)
 8002c30:	2023883a 	mov	r17,r4
 8002c34:	28001c16 	blt	r5,zero,8002ca8 <__smakebuf_r+0xa4>
 8002c38:	d80d883a 	mov	r6,sp
 8002c3c:	8002e200 	call	8002e20 <_fstat_r>
 8002c40:	10001816 	blt	r2,zero,8002ca4 <__smakebuf_r+0xa0>
 8002c44:	d8800117 	ldw	r2,4(sp)
 8002c48:	00e00014 	movui	r3,32768
 8002c4c:	10bc000c 	andi	r2,r2,61440
 8002c50:	14c80020 	cmpeqi	r19,r2,8192
 8002c54:	10c03726 	beq	r2,r3,8002d34 <__smakebuf_r+0x130>
 8002c58:	80c0030b 	ldhu	r3,12(r16)
 8002c5c:	18c20014 	ori	r3,r3,2048
 8002c60:	80c0030d 	sth	r3,12(r16)
 8002c64:	00c80004 	movi	r3,8192
 8002c68:	10c0521e 	bne	r2,r3,8002db4 <__smakebuf_r+0x1b0>
 8002c6c:	8140038f 	ldh	r5,14(r16)
 8002c70:	8809883a 	mov	r4,r17
 8002c74:	8002e7c0 	call	8002e7c <_isatty_r>
 8002c78:	10004c26 	beq	r2,zero,8002dac <__smakebuf_r+0x1a8>
 8002c7c:	8080030b 	ldhu	r2,12(r16)
 8002c80:	80c010c4 	addi	r3,r16,67
 8002c84:	80c00015 	stw	r3,0(r16)
 8002c88:	10800054 	ori	r2,r2,1
 8002c8c:	8080030d 	sth	r2,12(r16)
 8002c90:	00800044 	movi	r2,1
 8002c94:	80c00415 	stw	r3,16(r16)
 8002c98:	80800515 	stw	r2,20(r16)
 8002c9c:	04810004 	movi	r18,1024
 8002ca0:	00000706 	br	8002cc0 <__smakebuf_r+0xbc>
 8002ca4:	8080030b 	ldhu	r2,12(r16)
 8002ca8:	10c0200c 	andi	r3,r2,128
 8002cac:	18001f1e 	bne	r3,zero,8002d2c <__smakebuf_r+0x128>
 8002cb0:	04810004 	movi	r18,1024
 8002cb4:	10820014 	ori	r2,r2,2048
 8002cb8:	8080030d 	sth	r2,12(r16)
 8002cbc:	0027883a 	mov	r19,zero
 8002cc0:	900b883a 	mov	r5,r18
 8002cc4:	8809883a 	mov	r4,r17
 8002cc8:	8000e0c0 	call	8000e0c <_malloc_r>
 8002ccc:	10002c26 	beq	r2,zero,8002d80 <__smakebuf_r+0x17c>
 8002cd0:	80c0030b 	ldhu	r3,12(r16)
 8002cd4:	01020034 	movhi	r4,2048
 8002cd8:	21010504 	addi	r4,r4,1044
 8002cdc:	89000f15 	stw	r4,60(r17)
 8002ce0:	18c02014 	ori	r3,r3,128
 8002ce4:	80c0030d 	sth	r3,12(r16)
 8002ce8:	80800015 	stw	r2,0(r16)
 8002cec:	80800415 	stw	r2,16(r16)
 8002cf0:	84800515 	stw	r18,20(r16)
 8002cf4:	98001a1e 	bne	r19,zero,8002d60 <__smakebuf_r+0x15c>
 8002cf8:	dfc01317 	ldw	ra,76(sp)
 8002cfc:	dcc01217 	ldw	r19,72(sp)
 8002d00:	dc801117 	ldw	r18,68(sp)
 8002d04:	dc401017 	ldw	r17,64(sp)
 8002d08:	dc000f17 	ldw	r16,60(sp)
 8002d0c:	dec01404 	addi	sp,sp,80
 8002d10:	f800283a 	ret
 8002d14:	288010c4 	addi	r2,r5,67
 8002d18:	28800015 	stw	r2,0(r5)
 8002d1c:	28800415 	stw	r2,16(r5)
 8002d20:	00800044 	movi	r2,1
 8002d24:	28800515 	stw	r2,20(r5)
 8002d28:	f800283a 	ret
 8002d2c:	04801004 	movi	r18,64
 8002d30:	003fe006 	br	8002cb4 <__smakebuf_r+0xb0>
 8002d34:	81000a17 	ldw	r4,40(r16)
 8002d38:	00c20034 	movhi	r3,2048
 8002d3c:	18c85604 	addi	r3,r3,8536
 8002d40:	20ffc51e 	bne	r4,r3,8002c58 <__smakebuf_r+0x54>
 8002d44:	8080030b 	ldhu	r2,12(r16)
 8002d48:	04810004 	movi	r18,1024
 8002d4c:	84801315 	stw	r18,76(r16)
 8002d50:	1484b03a 	or	r2,r2,r18
 8002d54:	8080030d 	sth	r2,12(r16)
 8002d58:	0027883a 	mov	r19,zero
 8002d5c:	003fd806 	br	8002cc0 <__smakebuf_r+0xbc>
 8002d60:	8140038f 	ldh	r5,14(r16)
 8002d64:	8809883a 	mov	r4,r17
 8002d68:	8002e7c0 	call	8002e7c <_isatty_r>
 8002d6c:	103fe226 	beq	r2,zero,8002cf8 <__smakebuf_r+0xf4>
 8002d70:	8080030b 	ldhu	r2,12(r16)
 8002d74:	10800054 	ori	r2,r2,1
 8002d78:	8080030d 	sth	r2,12(r16)
 8002d7c:	003fde06 	br	8002cf8 <__smakebuf_r+0xf4>
 8002d80:	8080030b 	ldhu	r2,12(r16)
 8002d84:	10c0800c 	andi	r3,r2,512
 8002d88:	183fdb1e 	bne	r3,zero,8002cf8 <__smakebuf_r+0xf4>
 8002d8c:	10800094 	ori	r2,r2,2
 8002d90:	80c010c4 	addi	r3,r16,67
 8002d94:	8080030d 	sth	r2,12(r16)
 8002d98:	00800044 	movi	r2,1
 8002d9c:	80c00015 	stw	r3,0(r16)
 8002da0:	80c00415 	stw	r3,16(r16)
 8002da4:	80800515 	stw	r2,20(r16)
 8002da8:	003fd306 	br	8002cf8 <__smakebuf_r+0xf4>
 8002dac:	04810004 	movi	r18,1024
 8002db0:	003fc306 	br	8002cc0 <__smakebuf_r+0xbc>
 8002db4:	0027883a 	mov	r19,zero
 8002db8:	04810004 	movi	r18,1024
 8002dbc:	003fc006 	br	8002cc0 <__smakebuf_r+0xbc>

08002dc0 <_read_r>:
 8002dc0:	defffd04 	addi	sp,sp,-12
 8002dc4:	2805883a 	mov	r2,r5
 8002dc8:	dc000015 	stw	r16,0(sp)
 8002dcc:	04020074 	movhi	r16,2049
 8002dd0:	dc400115 	stw	r17,4(sp)
 8002dd4:	300b883a 	mov	r5,r6
 8002dd8:	842a2904 	addi	r16,r16,-22364
 8002ddc:	2023883a 	mov	r17,r4
 8002de0:	380d883a 	mov	r6,r7
 8002de4:	1009883a 	mov	r4,r2
 8002de8:	dfc00215 	stw	ra,8(sp)
 8002dec:	80000015 	stw	zero,0(r16)
 8002df0:	80036cc0 	call	80036cc <read>
 8002df4:	00ffffc4 	movi	r3,-1
 8002df8:	10c00526 	beq	r2,r3,8002e10 <_read_r+0x50>
 8002dfc:	dfc00217 	ldw	ra,8(sp)
 8002e00:	dc400117 	ldw	r17,4(sp)
 8002e04:	dc000017 	ldw	r16,0(sp)
 8002e08:	dec00304 	addi	sp,sp,12
 8002e0c:	f800283a 	ret
 8002e10:	80c00017 	ldw	r3,0(r16)
 8002e14:	183ff926 	beq	r3,zero,8002dfc <_read_r+0x3c>
 8002e18:	88c00015 	stw	r3,0(r17)
 8002e1c:	003ff706 	br	8002dfc <_read_r+0x3c>

08002e20 <_fstat_r>:
 8002e20:	defffd04 	addi	sp,sp,-12
 8002e24:	2805883a 	mov	r2,r5
 8002e28:	dc000015 	stw	r16,0(sp)
 8002e2c:	04020074 	movhi	r16,2049
 8002e30:	dc400115 	stw	r17,4(sp)
 8002e34:	842a2904 	addi	r16,r16,-22364
 8002e38:	2023883a 	mov	r17,r4
 8002e3c:	300b883a 	mov	r5,r6
 8002e40:	1009883a 	mov	r4,r2
 8002e44:	dfc00215 	stw	ra,8(sp)
 8002e48:	80000015 	stw	zero,0(r16)
 8002e4c:	80032280 	call	8003228 <fstat>
 8002e50:	00ffffc4 	movi	r3,-1
 8002e54:	10c00526 	beq	r2,r3,8002e6c <_fstat_r+0x4c>
 8002e58:	dfc00217 	ldw	ra,8(sp)
 8002e5c:	dc400117 	ldw	r17,4(sp)
 8002e60:	dc000017 	ldw	r16,0(sp)
 8002e64:	dec00304 	addi	sp,sp,12
 8002e68:	f800283a 	ret
 8002e6c:	80c00017 	ldw	r3,0(r16)
 8002e70:	183ff926 	beq	r3,zero,8002e58 <_fstat_r+0x38>
 8002e74:	88c00015 	stw	r3,0(r17)
 8002e78:	003ff706 	br	8002e58 <_fstat_r+0x38>

08002e7c <_isatty_r>:
 8002e7c:	defffd04 	addi	sp,sp,-12
 8002e80:	dc000015 	stw	r16,0(sp)
 8002e84:	04020074 	movhi	r16,2049
 8002e88:	dc400115 	stw	r17,4(sp)
 8002e8c:	842a2904 	addi	r16,r16,-22364
 8002e90:	2023883a 	mov	r17,r4
 8002e94:	2809883a 	mov	r4,r5
 8002e98:	dfc00215 	stw	ra,8(sp)
 8002e9c:	80000015 	stw	zero,0(r16)
 8002ea0:	800331c0 	call	800331c <isatty>
 8002ea4:	00ffffc4 	movi	r3,-1
 8002ea8:	10c00526 	beq	r2,r3,8002ec0 <_isatty_r+0x44>
 8002eac:	dfc00217 	ldw	ra,8(sp)
 8002eb0:	dc400117 	ldw	r17,4(sp)
 8002eb4:	dc000017 	ldw	r16,0(sp)
 8002eb8:	dec00304 	addi	sp,sp,12
 8002ebc:	f800283a 	ret
 8002ec0:	80c00017 	ldw	r3,0(r16)
 8002ec4:	183ff926 	beq	r3,zero,8002eac <_isatty_r+0x30>
 8002ec8:	88c00015 	stw	r3,0(r17)
 8002ecc:	003ff706 	br	8002eac <_isatty_r+0x30>

08002ed0 <__divsi3>:
 8002ed0:	20001b16 	blt	r4,zero,8002f40 <__divsi3+0x70>
 8002ed4:	000f883a 	mov	r7,zero
 8002ed8:	28001616 	blt	r5,zero,8002f34 <__divsi3+0x64>
 8002edc:	200d883a 	mov	r6,r4
 8002ee0:	29001a2e 	bgeu	r5,r4,8002f4c <__divsi3+0x7c>
 8002ee4:	00800804 	movi	r2,32
 8002ee8:	00c00044 	movi	r3,1
 8002eec:	00000106 	br	8002ef4 <__divsi3+0x24>
 8002ef0:	10000d26 	beq	r2,zero,8002f28 <__divsi3+0x58>
 8002ef4:	294b883a 	add	r5,r5,r5
 8002ef8:	10bfffc4 	addi	r2,r2,-1
 8002efc:	18c7883a 	add	r3,r3,r3
 8002f00:	293ffb36 	bltu	r5,r4,8002ef0 <__divsi3+0x20>
 8002f04:	0005883a 	mov	r2,zero
 8002f08:	18000726 	beq	r3,zero,8002f28 <__divsi3+0x58>
 8002f0c:	0005883a 	mov	r2,zero
 8002f10:	31400236 	bltu	r6,r5,8002f1c <__divsi3+0x4c>
 8002f14:	314dc83a 	sub	r6,r6,r5
 8002f18:	10c4b03a 	or	r2,r2,r3
 8002f1c:	1806d07a 	srli	r3,r3,1
 8002f20:	280ad07a 	srli	r5,r5,1
 8002f24:	183ffa1e 	bne	r3,zero,8002f10 <__divsi3+0x40>
 8002f28:	38000126 	beq	r7,zero,8002f30 <__divsi3+0x60>
 8002f2c:	0085c83a 	sub	r2,zero,r2
 8002f30:	f800283a 	ret
 8002f34:	014bc83a 	sub	r5,zero,r5
 8002f38:	39c0005c 	xori	r7,r7,1
 8002f3c:	003fe706 	br	8002edc <__divsi3+0xc>
 8002f40:	0109c83a 	sub	r4,zero,r4
 8002f44:	01c00044 	movi	r7,1
 8002f48:	003fe306 	br	8002ed8 <__divsi3+0x8>
 8002f4c:	00c00044 	movi	r3,1
 8002f50:	003fee06 	br	8002f0c <__divsi3+0x3c>

08002f54 <__modsi3>:
 8002f54:	20001716 	blt	r4,zero,8002fb4 <__modsi3+0x60>
 8002f58:	000f883a 	mov	r7,zero
 8002f5c:	2005883a 	mov	r2,r4
 8002f60:	28001216 	blt	r5,zero,8002fac <__modsi3+0x58>
 8002f64:	2900162e 	bgeu	r5,r4,8002fc0 <__modsi3+0x6c>
 8002f68:	01800804 	movi	r6,32
 8002f6c:	00c00044 	movi	r3,1
 8002f70:	00000106 	br	8002f78 <__modsi3+0x24>
 8002f74:	30000a26 	beq	r6,zero,8002fa0 <__modsi3+0x4c>
 8002f78:	294b883a 	add	r5,r5,r5
 8002f7c:	31bfffc4 	addi	r6,r6,-1
 8002f80:	18c7883a 	add	r3,r3,r3
 8002f84:	293ffb36 	bltu	r5,r4,8002f74 <__modsi3+0x20>
 8002f88:	18000526 	beq	r3,zero,8002fa0 <__modsi3+0x4c>
 8002f8c:	1806d07a 	srli	r3,r3,1
 8002f90:	11400136 	bltu	r2,r5,8002f98 <__modsi3+0x44>
 8002f94:	1145c83a 	sub	r2,r2,r5
 8002f98:	280ad07a 	srli	r5,r5,1
 8002f9c:	183ffb1e 	bne	r3,zero,8002f8c <__modsi3+0x38>
 8002fa0:	38000126 	beq	r7,zero,8002fa8 <__modsi3+0x54>
 8002fa4:	0085c83a 	sub	r2,zero,r2
 8002fa8:	f800283a 	ret
 8002fac:	014bc83a 	sub	r5,zero,r5
 8002fb0:	003fec06 	br	8002f64 <__modsi3+0x10>
 8002fb4:	0109c83a 	sub	r4,zero,r4
 8002fb8:	01c00044 	movi	r7,1
 8002fbc:	003fe706 	br	8002f5c <__modsi3+0x8>
 8002fc0:	00c00044 	movi	r3,1
 8002fc4:	003ff106 	br	8002f8c <__modsi3+0x38>

08002fc8 <__udivsi3>:
 8002fc8:	200d883a 	mov	r6,r4
 8002fcc:	2900152e 	bgeu	r5,r4,8003024 <__udivsi3+0x5c>
 8002fd0:	28001416 	blt	r5,zero,8003024 <__udivsi3+0x5c>
 8002fd4:	00800804 	movi	r2,32
 8002fd8:	00c00044 	movi	r3,1
 8002fdc:	00000206 	br	8002fe8 <__udivsi3+0x20>
 8002fe0:	10000e26 	beq	r2,zero,800301c <__udivsi3+0x54>
 8002fe4:	28000516 	blt	r5,zero,8002ffc <__udivsi3+0x34>
 8002fe8:	294b883a 	add	r5,r5,r5
 8002fec:	10bfffc4 	addi	r2,r2,-1
 8002ff0:	18c7883a 	add	r3,r3,r3
 8002ff4:	293ffa36 	bltu	r5,r4,8002fe0 <__udivsi3+0x18>
 8002ff8:	18000826 	beq	r3,zero,800301c <__udivsi3+0x54>
 8002ffc:	0005883a 	mov	r2,zero
 8003000:	31400236 	bltu	r6,r5,800300c <__udivsi3+0x44>
 8003004:	314dc83a 	sub	r6,r6,r5
 8003008:	10c4b03a 	or	r2,r2,r3
 800300c:	1806d07a 	srli	r3,r3,1
 8003010:	280ad07a 	srli	r5,r5,1
 8003014:	183ffa1e 	bne	r3,zero,8003000 <__udivsi3+0x38>
 8003018:	f800283a 	ret
 800301c:	0005883a 	mov	r2,zero
 8003020:	f800283a 	ret
 8003024:	00c00044 	movi	r3,1
 8003028:	003ff406 	br	8002ffc <__udivsi3+0x34>

0800302c <__umodsi3>:
 800302c:	2005883a 	mov	r2,r4
 8003030:	2900122e 	bgeu	r5,r4,800307c <__umodsi3+0x50>
 8003034:	28001116 	blt	r5,zero,800307c <__umodsi3+0x50>
 8003038:	01800804 	movi	r6,32
 800303c:	00c00044 	movi	r3,1
 8003040:	00000206 	br	800304c <__umodsi3+0x20>
 8003044:	30000c26 	beq	r6,zero,8003078 <__umodsi3+0x4c>
 8003048:	28000516 	blt	r5,zero,8003060 <__umodsi3+0x34>
 800304c:	294b883a 	add	r5,r5,r5
 8003050:	31bfffc4 	addi	r6,r6,-1
 8003054:	18c7883a 	add	r3,r3,r3
 8003058:	293ffa36 	bltu	r5,r4,8003044 <__umodsi3+0x18>
 800305c:	18000626 	beq	r3,zero,8003078 <__umodsi3+0x4c>
 8003060:	1806d07a 	srli	r3,r3,1
 8003064:	11400136 	bltu	r2,r5,800306c <__umodsi3+0x40>
 8003068:	1145c83a 	sub	r2,r2,r5
 800306c:	280ad07a 	srli	r5,r5,1
 8003070:	183ffb1e 	bne	r3,zero,8003060 <__umodsi3+0x34>
 8003074:	f800283a 	ret
 8003078:	f800283a 	ret
 800307c:	00c00044 	movi	r3,1
 8003080:	003ff706 	br	8003060 <__umodsi3+0x34>

08003084 <__mulsi3>:
 8003084:	0005883a 	mov	r2,zero
 8003088:	20000726 	beq	r4,zero,80030a8 <__mulsi3+0x24>
 800308c:	20c0004c 	andi	r3,r4,1
 8003090:	2008d07a 	srli	r4,r4,1
 8003094:	18000126 	beq	r3,zero,800309c <__mulsi3+0x18>
 8003098:	1145883a 	add	r2,r2,r5
 800309c:	294b883a 	add	r5,r5,r5
 80030a0:	203ffa1e 	bne	r4,zero,800308c <__mulsi3+0x8>
 80030a4:	f800283a 	ret
 80030a8:	f800283a 	ret

080030ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80030ac:	defffe04 	addi	sp,sp,-8
 80030b0:	dfc00115 	stw	ra,4(sp)
 80030b4:	df000015 	stw	fp,0(sp)
 80030b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80030bc:	d0a00917 	ldw	r2,-32732(gp)
 80030c0:	10000326 	beq	r2,zero,80030d0 <alt_get_errno+0x24>
 80030c4:	d0a00917 	ldw	r2,-32732(gp)
 80030c8:	103ee83a 	callr	r2
 80030cc:	00000106 	br	80030d4 <alt_get_errno+0x28>
 80030d0:	d0a72504 	addi	r2,gp,-25452
}
 80030d4:	e037883a 	mov	sp,fp
 80030d8:	dfc00117 	ldw	ra,4(sp)
 80030dc:	df000017 	ldw	fp,0(sp)
 80030e0:	dec00204 	addi	sp,sp,8
 80030e4:	f800283a 	ret

080030e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80030e8:	defffb04 	addi	sp,sp,-20
 80030ec:	dfc00415 	stw	ra,16(sp)
 80030f0:	df000315 	stw	fp,12(sp)
 80030f4:	df000304 	addi	fp,sp,12
 80030f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80030fc:	e0bfff17 	ldw	r2,-4(fp)
 8003100:	10000816 	blt	r2,zero,8003124 <close+0x3c>
 8003104:	01400304 	movi	r5,12
 8003108:	e13fff17 	ldw	r4,-4(fp)
 800310c:	80030840 	call	8003084 <__mulsi3>
 8003110:	1007883a 	mov	r3,r2
 8003114:	00820034 	movhi	r2,2048
 8003118:	109e1704 	addi	r2,r2,30812
 800311c:	1885883a 	add	r2,r3,r2
 8003120:	00000106 	br	8003128 <close+0x40>
 8003124:	0005883a 	mov	r2,zero
 8003128:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800312c:	e0bffd17 	ldw	r2,-12(fp)
 8003130:	10001926 	beq	r2,zero,8003198 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8003134:	e0bffd17 	ldw	r2,-12(fp)
 8003138:	10800017 	ldw	r2,0(r2)
 800313c:	10800417 	ldw	r2,16(r2)
 8003140:	10000626 	beq	r2,zero,800315c <close+0x74>
 8003144:	e0bffd17 	ldw	r2,-12(fp)
 8003148:	10800017 	ldw	r2,0(r2)
 800314c:	10800417 	ldw	r2,16(r2)
 8003150:	e13ffd17 	ldw	r4,-12(fp)
 8003154:	103ee83a 	callr	r2
 8003158:	00000106 	br	8003160 <close+0x78>
 800315c:	0005883a 	mov	r2,zero
 8003160:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8003164:	e13fff17 	ldw	r4,-4(fp)
 8003168:	80037d00 	call	80037d0 <alt_release_fd>
    if (rval < 0)
 800316c:	e0bffe17 	ldw	r2,-8(fp)
 8003170:	1000070e 	bge	r2,zero,8003190 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8003174:	80030ac0 	call	80030ac <alt_get_errno>
 8003178:	1007883a 	mov	r3,r2
 800317c:	e0bffe17 	ldw	r2,-8(fp)
 8003180:	0085c83a 	sub	r2,zero,r2
 8003184:	18800015 	stw	r2,0(r3)
      return -1;
 8003188:	00bfffc4 	movi	r2,-1
 800318c:	00000706 	br	80031ac <close+0xc4>
    }
    return 0;
 8003190:	0005883a 	mov	r2,zero
 8003194:	00000506 	br	80031ac <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003198:	80030ac0 	call	80030ac <alt_get_errno>
 800319c:	1007883a 	mov	r3,r2
 80031a0:	00801444 	movi	r2,81
 80031a4:	18800015 	stw	r2,0(r3)
    return -1;
 80031a8:	00bfffc4 	movi	r2,-1
  }
}
 80031ac:	e037883a 	mov	sp,fp
 80031b0:	dfc00117 	ldw	ra,4(sp)
 80031b4:	df000017 	ldw	fp,0(sp)
 80031b8:	dec00204 	addi	sp,sp,8
 80031bc:	f800283a 	ret

080031c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80031c0:	defffc04 	addi	sp,sp,-16
 80031c4:	df000315 	stw	fp,12(sp)
 80031c8:	df000304 	addi	fp,sp,12
 80031cc:	e13ffd15 	stw	r4,-12(fp)
 80031d0:	e17ffe15 	stw	r5,-8(fp)
 80031d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80031d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80031dc:	e037883a 	mov	sp,fp
 80031e0:	df000017 	ldw	fp,0(sp)
 80031e4:	dec00104 	addi	sp,sp,4
 80031e8:	f800283a 	ret

080031ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80031ec:	defffe04 	addi	sp,sp,-8
 80031f0:	dfc00115 	stw	ra,4(sp)
 80031f4:	df000015 	stw	fp,0(sp)
 80031f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80031fc:	d0a00917 	ldw	r2,-32732(gp)
 8003200:	10000326 	beq	r2,zero,8003210 <alt_get_errno+0x24>
 8003204:	d0a00917 	ldw	r2,-32732(gp)
 8003208:	103ee83a 	callr	r2
 800320c:	00000106 	br	8003214 <alt_get_errno+0x28>
 8003210:	d0a72504 	addi	r2,gp,-25452
}
 8003214:	e037883a 	mov	sp,fp
 8003218:	dfc00117 	ldw	ra,4(sp)
 800321c:	df000017 	ldw	fp,0(sp)
 8003220:	dec00204 	addi	sp,sp,8
 8003224:	f800283a 	ret

08003228 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8003228:	defffb04 	addi	sp,sp,-20
 800322c:	dfc00415 	stw	ra,16(sp)
 8003230:	df000315 	stw	fp,12(sp)
 8003234:	df000304 	addi	fp,sp,12
 8003238:	e13ffe15 	stw	r4,-8(fp)
 800323c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003240:	e0bffe17 	ldw	r2,-8(fp)
 8003244:	10000816 	blt	r2,zero,8003268 <fstat+0x40>
 8003248:	01400304 	movi	r5,12
 800324c:	e13ffe17 	ldw	r4,-8(fp)
 8003250:	80030840 	call	8003084 <__mulsi3>
 8003254:	1007883a 	mov	r3,r2
 8003258:	00820034 	movhi	r2,2048
 800325c:	109e1704 	addi	r2,r2,30812
 8003260:	1885883a 	add	r2,r3,r2
 8003264:	00000106 	br	800326c <fstat+0x44>
 8003268:	0005883a 	mov	r2,zero
 800326c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8003270:	e0bffd17 	ldw	r2,-12(fp)
 8003274:	10001026 	beq	r2,zero,80032b8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8003278:	e0bffd17 	ldw	r2,-12(fp)
 800327c:	10800017 	ldw	r2,0(r2)
 8003280:	10800817 	ldw	r2,32(r2)
 8003284:	10000726 	beq	r2,zero,80032a4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8003288:	e0bffd17 	ldw	r2,-12(fp)
 800328c:	10800017 	ldw	r2,0(r2)
 8003290:	10800817 	ldw	r2,32(r2)
 8003294:	e17fff17 	ldw	r5,-4(fp)
 8003298:	e13ffd17 	ldw	r4,-12(fp)
 800329c:	103ee83a 	callr	r2
 80032a0:	00000a06 	br	80032cc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80032a4:	e0bfff17 	ldw	r2,-4(fp)
 80032a8:	00c80004 	movi	r3,8192
 80032ac:	10c00115 	stw	r3,4(r2)
      return 0;
 80032b0:	0005883a 	mov	r2,zero
 80032b4:	00000506 	br	80032cc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80032b8:	80031ec0 	call	80031ec <alt_get_errno>
 80032bc:	1007883a 	mov	r3,r2
 80032c0:	00801444 	movi	r2,81
 80032c4:	18800015 	stw	r2,0(r3)
    return -1;
 80032c8:	00bfffc4 	movi	r2,-1
  }
}
 80032cc:	e037883a 	mov	sp,fp
 80032d0:	dfc00117 	ldw	ra,4(sp)
 80032d4:	df000017 	ldw	fp,0(sp)
 80032d8:	dec00204 	addi	sp,sp,8
 80032dc:	f800283a 	ret

080032e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80032e0:	defffe04 	addi	sp,sp,-8
 80032e4:	dfc00115 	stw	ra,4(sp)
 80032e8:	df000015 	stw	fp,0(sp)
 80032ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80032f0:	d0a00917 	ldw	r2,-32732(gp)
 80032f4:	10000326 	beq	r2,zero,8003304 <alt_get_errno+0x24>
 80032f8:	d0a00917 	ldw	r2,-32732(gp)
 80032fc:	103ee83a 	callr	r2
 8003300:	00000106 	br	8003308 <alt_get_errno+0x28>
 8003304:	d0a72504 	addi	r2,gp,-25452
}
 8003308:	e037883a 	mov	sp,fp
 800330c:	dfc00117 	ldw	ra,4(sp)
 8003310:	df000017 	ldw	fp,0(sp)
 8003314:	dec00204 	addi	sp,sp,8
 8003318:	f800283a 	ret

0800331c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800331c:	deffed04 	addi	sp,sp,-76
 8003320:	dfc01215 	stw	ra,72(sp)
 8003324:	df001115 	stw	fp,68(sp)
 8003328:	df001104 	addi	fp,sp,68
 800332c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003330:	e0bfff17 	ldw	r2,-4(fp)
 8003334:	10000816 	blt	r2,zero,8003358 <isatty+0x3c>
 8003338:	01400304 	movi	r5,12
 800333c:	e13fff17 	ldw	r4,-4(fp)
 8003340:	80030840 	call	8003084 <__mulsi3>
 8003344:	1007883a 	mov	r3,r2
 8003348:	00820034 	movhi	r2,2048
 800334c:	109e1704 	addi	r2,r2,30812
 8003350:	1885883a 	add	r2,r3,r2
 8003354:	00000106 	br	800335c <isatty+0x40>
 8003358:	0005883a 	mov	r2,zero
 800335c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8003360:	e0bfef17 	ldw	r2,-68(fp)
 8003364:	10000e26 	beq	r2,zero,80033a0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003368:	e0bfef17 	ldw	r2,-68(fp)
 800336c:	10800017 	ldw	r2,0(r2)
 8003370:	10800817 	ldw	r2,32(r2)
 8003374:	1000021e 	bne	r2,zero,8003380 <isatty+0x64>
    {
      return 1;
 8003378:	00800044 	movi	r2,1
 800337c:	00000d06 	br	80033b4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003380:	e0bff004 	addi	r2,fp,-64
 8003384:	100b883a 	mov	r5,r2
 8003388:	e13fff17 	ldw	r4,-4(fp)
 800338c:	80032280 	call	8003228 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003390:	e0bff117 	ldw	r2,-60(fp)
 8003394:	10880020 	cmpeqi	r2,r2,8192
 8003398:	10803fcc 	andi	r2,r2,255
 800339c:	00000506 	br	80033b4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80033a0:	80032e00 	call	80032e0 <alt_get_errno>
 80033a4:	1007883a 	mov	r3,r2
 80033a8:	00801444 	movi	r2,81
 80033ac:	18800015 	stw	r2,0(r3)
    return 0;
 80033b0:	0005883a 	mov	r2,zero
  }
}
 80033b4:	e037883a 	mov	sp,fp
 80033b8:	dfc00117 	ldw	ra,4(sp)
 80033bc:	df000017 	ldw	fp,0(sp)
 80033c0:	dec00204 	addi	sp,sp,8
 80033c4:	f800283a 	ret

080033c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80033c8:	defffc04 	addi	sp,sp,-16
 80033cc:	df000315 	stw	fp,12(sp)
 80033d0:	df000304 	addi	fp,sp,12
 80033d4:	e13ffd15 	stw	r4,-12(fp)
 80033d8:	e17ffe15 	stw	r5,-8(fp)
 80033dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80033e0:	e0fffe17 	ldw	r3,-8(fp)
 80033e4:	e0bffd17 	ldw	r2,-12(fp)
 80033e8:	18800c26 	beq	r3,r2,800341c <alt_load_section+0x54>
  {
    while( to != end )
 80033ec:	00000806 	br	8003410 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80033f0:	e0bffe17 	ldw	r2,-8(fp)
 80033f4:	10c00104 	addi	r3,r2,4
 80033f8:	e0fffe15 	stw	r3,-8(fp)
 80033fc:	e0fffd17 	ldw	r3,-12(fp)
 8003400:	19000104 	addi	r4,r3,4
 8003404:	e13ffd15 	stw	r4,-12(fp)
 8003408:	18c00017 	ldw	r3,0(r3)
 800340c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8003410:	e0fffe17 	ldw	r3,-8(fp)
 8003414:	e0bfff17 	ldw	r2,-4(fp)
 8003418:	18bff51e 	bne	r3,r2,80033f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800341c:	0001883a 	nop
 8003420:	e037883a 	mov	sp,fp
 8003424:	df000017 	ldw	fp,0(sp)
 8003428:	dec00104 	addi	sp,sp,4
 800342c:	f800283a 	ret

08003430 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003430:	defffe04 	addi	sp,sp,-8
 8003434:	dfc00115 	stw	ra,4(sp)
 8003438:	df000015 	stw	fp,0(sp)
 800343c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003440:	01820074 	movhi	r6,2049
 8003444:	31a31404 	addi	r6,r6,-29616
 8003448:	01420034 	movhi	r5,2048
 800344c:	295c0204 	addi	r5,r5,28680
 8003450:	01020074 	movhi	r4,2049
 8003454:	21231404 	addi	r4,r4,-29616
 8003458:	80033c80 	call	80033c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800345c:	01820034 	movhi	r6,2048
 8003460:	31808c04 	addi	r6,r6,560
 8003464:	01420034 	movhi	r5,2048
 8003468:	29400804 	addi	r5,r5,32
 800346c:	01020034 	movhi	r4,2048
 8003470:	21000804 	addi	r4,r4,32
 8003474:	80033c80 	call	80033c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003478:	01820034 	movhi	r6,2048
 800347c:	319c0204 	addi	r6,r6,28680
 8003480:	01420034 	movhi	r5,2048
 8003484:	295bd804 	addi	r5,r5,28512
 8003488:	01020034 	movhi	r4,2048
 800348c:	211bd804 	addi	r4,r4,28512
 8003490:	80033c80 	call	80033c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8003494:	8005ea80 	call	8005ea8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003498:	80060f80 	call	80060f8 <alt_icache_flush_all>
}
 800349c:	0001883a 	nop
 80034a0:	e037883a 	mov	sp,fp
 80034a4:	dfc00117 	ldw	ra,4(sp)
 80034a8:	df000017 	ldw	fp,0(sp)
 80034ac:	dec00204 	addi	sp,sp,8
 80034b0:	f800283a 	ret

080034b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80034b4:	defffe04 	addi	sp,sp,-8
 80034b8:	dfc00115 	stw	ra,4(sp)
 80034bc:	df000015 	stw	fp,0(sp)
 80034c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80034c4:	d0a00917 	ldw	r2,-32732(gp)
 80034c8:	10000326 	beq	r2,zero,80034d8 <alt_get_errno+0x24>
 80034cc:	d0a00917 	ldw	r2,-32732(gp)
 80034d0:	103ee83a 	callr	r2
 80034d4:	00000106 	br	80034dc <alt_get_errno+0x28>
 80034d8:	d0a72504 	addi	r2,gp,-25452
}
 80034dc:	e037883a 	mov	sp,fp
 80034e0:	dfc00117 	ldw	ra,4(sp)
 80034e4:	df000017 	ldw	fp,0(sp)
 80034e8:	dec00204 	addi	sp,sp,8
 80034ec:	f800283a 	ret

080034f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80034f0:	defff904 	addi	sp,sp,-28
 80034f4:	dfc00615 	stw	ra,24(sp)
 80034f8:	df000515 	stw	fp,20(sp)
 80034fc:	df000504 	addi	fp,sp,20
 8003500:	e13ffd15 	stw	r4,-12(fp)
 8003504:	e17ffe15 	stw	r5,-8(fp)
 8003508:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800350c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003510:	e0bffd17 	ldw	r2,-12(fp)
 8003514:	10000816 	blt	r2,zero,8003538 <lseek+0x48>
 8003518:	01400304 	movi	r5,12
 800351c:	e13ffd17 	ldw	r4,-12(fp)
 8003520:	80030840 	call	8003084 <__mulsi3>
 8003524:	1007883a 	mov	r3,r2
 8003528:	00820034 	movhi	r2,2048
 800352c:	109e1704 	addi	r2,r2,30812
 8003530:	1885883a 	add	r2,r3,r2
 8003534:	00000106 	br	800353c <lseek+0x4c>
 8003538:	0005883a 	mov	r2,zero
 800353c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8003540:	e0bffc17 	ldw	r2,-16(fp)
 8003544:	10001026 	beq	r2,zero,8003588 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8003548:	e0bffc17 	ldw	r2,-16(fp)
 800354c:	10800017 	ldw	r2,0(r2)
 8003550:	10800717 	ldw	r2,28(r2)
 8003554:	10000926 	beq	r2,zero,800357c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8003558:	e0bffc17 	ldw	r2,-16(fp)
 800355c:	10800017 	ldw	r2,0(r2)
 8003560:	10800717 	ldw	r2,28(r2)
 8003564:	e1bfff17 	ldw	r6,-4(fp)
 8003568:	e17ffe17 	ldw	r5,-8(fp)
 800356c:	e13ffc17 	ldw	r4,-16(fp)
 8003570:	103ee83a 	callr	r2
 8003574:	e0bffb15 	stw	r2,-20(fp)
 8003578:	00000506 	br	8003590 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800357c:	00bfde84 	movi	r2,-134
 8003580:	e0bffb15 	stw	r2,-20(fp)
 8003584:	00000206 	br	8003590 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003588:	00bfebc4 	movi	r2,-81
 800358c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003590:	e0bffb17 	ldw	r2,-20(fp)
 8003594:	1000070e 	bge	r2,zero,80035b4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8003598:	80034b40 	call	80034b4 <alt_get_errno>
 800359c:	1007883a 	mov	r3,r2
 80035a0:	e0bffb17 	ldw	r2,-20(fp)
 80035a4:	0085c83a 	sub	r2,zero,r2
 80035a8:	18800015 	stw	r2,0(r3)
    rc = -1;
 80035ac:	00bfffc4 	movi	r2,-1
 80035b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80035b4:	e0bffb17 	ldw	r2,-20(fp)
}
 80035b8:	e037883a 	mov	sp,fp
 80035bc:	dfc00117 	ldw	ra,4(sp)
 80035c0:	df000017 	ldw	fp,0(sp)
 80035c4:	dec00204 	addi	sp,sp,8
 80035c8:	f800283a 	ret

080035cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80035cc:	defffd04 	addi	sp,sp,-12
 80035d0:	dfc00215 	stw	ra,8(sp)
 80035d4:	df000115 	stw	fp,4(sp)
 80035d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80035dc:	0009883a 	mov	r4,zero
 80035e0:	8003a740 	call	8003a74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80035e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80035e8:	8003aac0 	call	8003aac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80035ec:	01820034 	movhi	r6,2048
 80035f0:	319be204 	addi	r6,r6,28552
 80035f4:	01420034 	movhi	r5,2048
 80035f8:	295be204 	addi	r5,r5,28552
 80035fc:	01020034 	movhi	r4,2048
 8003600:	211be204 	addi	r4,r4,28552
 8003604:	800649c0 	call	800649c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003608:	8005fa80 	call	8005fa8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800360c:	01020034 	movhi	r4,2048
 8003610:	21180204 	addi	r4,r4,24584
 8003614:	8006bcc0 	call	8006bcc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003618:	d0a72617 	ldw	r2,-25448(gp)
 800361c:	d0e72717 	ldw	r3,-25444(gp)
 8003620:	d1272817 	ldw	r4,-25440(gp)
 8003624:	200d883a 	mov	r6,r4
 8003628:	180b883a 	mov	r5,r3
 800362c:	1009883a 	mov	r4,r2
 8003630:	800026c0 	call	800026c <main>
 8003634:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003638:	01000044 	movi	r4,1
 800363c:	80030e80 	call	80030e8 <close>
  exit (result);
 8003640:	e13fff17 	ldw	r4,-4(fp)
 8003644:	8006be00 	call	8006be0 <exit>

08003648 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003648:	defffe04 	addi	sp,sp,-8
 800364c:	df000115 	stw	fp,4(sp)
 8003650:	df000104 	addi	fp,sp,4
 8003654:	e13fff15 	stw	r4,-4(fp)
}
 8003658:	0001883a 	nop
 800365c:	e037883a 	mov	sp,fp
 8003660:	df000017 	ldw	fp,0(sp)
 8003664:	dec00104 	addi	sp,sp,4
 8003668:	f800283a 	ret

0800366c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800366c:	defffe04 	addi	sp,sp,-8
 8003670:	df000115 	stw	fp,4(sp)
 8003674:	df000104 	addi	fp,sp,4
 8003678:	e13fff15 	stw	r4,-4(fp)
}
 800367c:	0001883a 	nop
 8003680:	e037883a 	mov	sp,fp
 8003684:	df000017 	ldw	fp,0(sp)
 8003688:	dec00104 	addi	sp,sp,4
 800368c:	f800283a 	ret

08003690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003690:	defffe04 	addi	sp,sp,-8
 8003694:	dfc00115 	stw	ra,4(sp)
 8003698:	df000015 	stw	fp,0(sp)
 800369c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80036a0:	d0a00917 	ldw	r2,-32732(gp)
 80036a4:	10000326 	beq	r2,zero,80036b4 <alt_get_errno+0x24>
 80036a8:	d0a00917 	ldw	r2,-32732(gp)
 80036ac:	103ee83a 	callr	r2
 80036b0:	00000106 	br	80036b8 <alt_get_errno+0x28>
 80036b4:	d0a72504 	addi	r2,gp,-25452
}
 80036b8:	e037883a 	mov	sp,fp
 80036bc:	dfc00117 	ldw	ra,4(sp)
 80036c0:	df000017 	ldw	fp,0(sp)
 80036c4:	dec00204 	addi	sp,sp,8
 80036c8:	f800283a 	ret

080036cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80036cc:	defff904 	addi	sp,sp,-28
 80036d0:	dfc00615 	stw	ra,24(sp)
 80036d4:	df000515 	stw	fp,20(sp)
 80036d8:	df000504 	addi	fp,sp,20
 80036dc:	e13ffd15 	stw	r4,-12(fp)
 80036e0:	e17ffe15 	stw	r5,-8(fp)
 80036e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80036e8:	e0bffd17 	ldw	r2,-12(fp)
 80036ec:	10000816 	blt	r2,zero,8003710 <read+0x44>
 80036f0:	01400304 	movi	r5,12
 80036f4:	e13ffd17 	ldw	r4,-12(fp)
 80036f8:	80030840 	call	8003084 <__mulsi3>
 80036fc:	1007883a 	mov	r3,r2
 8003700:	00820034 	movhi	r2,2048
 8003704:	109e1704 	addi	r2,r2,30812
 8003708:	1885883a 	add	r2,r3,r2
 800370c:	00000106 	br	8003714 <read+0x48>
 8003710:	0005883a 	mov	r2,zero
 8003714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003718:	e0bffb17 	ldw	r2,-20(fp)
 800371c:	10002226 	beq	r2,zero,80037a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8003720:	e0bffb17 	ldw	r2,-20(fp)
 8003724:	10800217 	ldw	r2,8(r2)
 8003728:	108000cc 	andi	r2,r2,3
 800372c:	10800060 	cmpeqi	r2,r2,1
 8003730:	1000181e 	bne	r2,zero,8003794 <read+0xc8>
        (fd->dev->read))
 8003734:	e0bffb17 	ldw	r2,-20(fp)
 8003738:	10800017 	ldw	r2,0(r2)
 800373c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8003740:	10001426 	beq	r2,zero,8003794 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8003744:	e0bffb17 	ldw	r2,-20(fp)
 8003748:	10800017 	ldw	r2,0(r2)
 800374c:	10800517 	ldw	r2,20(r2)
 8003750:	e0ffff17 	ldw	r3,-4(fp)
 8003754:	180d883a 	mov	r6,r3
 8003758:	e17ffe17 	ldw	r5,-8(fp)
 800375c:	e13ffb17 	ldw	r4,-20(fp)
 8003760:	103ee83a 	callr	r2
 8003764:	e0bffc15 	stw	r2,-16(fp)
 8003768:	e0bffc17 	ldw	r2,-16(fp)
 800376c:	1000070e 	bge	r2,zero,800378c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8003770:	80036900 	call	8003690 <alt_get_errno>
 8003774:	1007883a 	mov	r3,r2
 8003778:	e0bffc17 	ldw	r2,-16(fp)
 800377c:	0085c83a 	sub	r2,zero,r2
 8003780:	18800015 	stw	r2,0(r3)
          return -1;
 8003784:	00bfffc4 	movi	r2,-1
 8003788:	00000c06 	br	80037bc <read+0xf0>
        }
        return rval;
 800378c:	e0bffc17 	ldw	r2,-16(fp)
 8003790:	00000a06 	br	80037bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003794:	80036900 	call	8003690 <alt_get_errno>
 8003798:	1007883a 	mov	r3,r2
 800379c:	00800344 	movi	r2,13
 80037a0:	18800015 	stw	r2,0(r3)
 80037a4:	00000406 	br	80037b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 80037a8:	80036900 	call	8003690 <alt_get_errno>
 80037ac:	1007883a 	mov	r3,r2
 80037b0:	00801444 	movi	r2,81
 80037b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80037b8:	00bfffc4 	movi	r2,-1
}
 80037bc:	e037883a 	mov	sp,fp
 80037c0:	dfc00117 	ldw	ra,4(sp)
 80037c4:	df000017 	ldw	fp,0(sp)
 80037c8:	dec00204 	addi	sp,sp,8
 80037cc:	f800283a 	ret

080037d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80037d0:	defffc04 	addi	sp,sp,-16
 80037d4:	dfc00315 	stw	ra,12(sp)
 80037d8:	df000215 	stw	fp,8(sp)
 80037dc:	dc000115 	stw	r16,4(sp)
 80037e0:	df000204 	addi	fp,sp,8
 80037e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80037e8:	e0bffe17 	ldw	r2,-8(fp)
 80037ec:	108000d0 	cmplti	r2,r2,3
 80037f0:	1000111e 	bne	r2,zero,8003838 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80037f4:	04020034 	movhi	r16,2048
 80037f8:	841e1704 	addi	r16,r16,30812
 80037fc:	e0bffe17 	ldw	r2,-8(fp)
 8003800:	01400304 	movi	r5,12
 8003804:	1009883a 	mov	r4,r2
 8003808:	80030840 	call	8003084 <__mulsi3>
 800380c:	8085883a 	add	r2,r16,r2
 8003810:	10800204 	addi	r2,r2,8
 8003814:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8003818:	04020034 	movhi	r16,2048
 800381c:	841e1704 	addi	r16,r16,30812
 8003820:	e0bffe17 	ldw	r2,-8(fp)
 8003824:	01400304 	movi	r5,12
 8003828:	1009883a 	mov	r4,r2
 800382c:	80030840 	call	8003084 <__mulsi3>
 8003830:	8085883a 	add	r2,r16,r2
 8003834:	10000015 	stw	zero,0(r2)
  }
}
 8003838:	0001883a 	nop
 800383c:	e6ffff04 	addi	sp,fp,-4
 8003840:	dfc00217 	ldw	ra,8(sp)
 8003844:	df000117 	ldw	fp,4(sp)
 8003848:	dc000017 	ldw	r16,0(sp)
 800384c:	dec00304 	addi	sp,sp,12
 8003850:	f800283a 	ret

08003854 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8003854:	defff904 	addi	sp,sp,-28
 8003858:	df000615 	stw	fp,24(sp)
 800385c:	df000604 	addi	fp,sp,24
 8003860:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003864:	0005303a 	rdctl	r2,status
 8003868:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800386c:	e0fffe17 	ldw	r3,-8(fp)
 8003870:	00bfff84 	movi	r2,-2
 8003874:	1884703a 	and	r2,r3,r2
 8003878:	1001703a 	wrctl	status,r2
  
  return context;
 800387c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8003880:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8003884:	d0a00a17 	ldw	r2,-32728(gp)
 8003888:	10c000c4 	addi	r3,r2,3
 800388c:	00bfff04 	movi	r2,-4
 8003890:	1884703a 	and	r2,r3,r2
 8003894:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003898:	d0e00a17 	ldw	r3,-32728(gp)
 800389c:	e0bfff17 	ldw	r2,-4(fp)
 80038a0:	1887883a 	add	r3,r3,r2
 80038a4:	00840034 	movhi	r2,4096
 80038a8:	10800004 	addi	r2,r2,0
 80038ac:	10c0062e 	bgeu	r2,r3,80038c8 <sbrk+0x74>
 80038b0:	e0bffb17 	ldw	r2,-20(fp)
 80038b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80038b8:	e0bffa17 	ldw	r2,-24(fp)
 80038bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80038c0:	00bfffc4 	movi	r2,-1
 80038c4:	00000b06 	br	80038f4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80038c8:	d0a00a17 	ldw	r2,-32728(gp)
 80038cc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 80038d0:	d0e00a17 	ldw	r3,-32728(gp)
 80038d4:	e0bfff17 	ldw	r2,-4(fp)
 80038d8:	1885883a 	add	r2,r3,r2
 80038dc:	d0a00a15 	stw	r2,-32728(gp)
 80038e0:	e0bffb17 	ldw	r2,-20(fp)
 80038e4:	e0bffc15 	stw	r2,-16(fp)
 80038e8:	e0bffc17 	ldw	r2,-16(fp)
 80038ec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80038f0:	e0bffd17 	ldw	r2,-12(fp)
} 
 80038f4:	e037883a 	mov	sp,fp
 80038f8:	df000017 	ldw	fp,0(sp)
 80038fc:	dec00104 	addi	sp,sp,4
 8003900:	f800283a 	ret

08003904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003904:	defffe04 	addi	sp,sp,-8
 8003908:	dfc00115 	stw	ra,4(sp)
 800390c:	df000015 	stw	fp,0(sp)
 8003910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003914:	d0a00917 	ldw	r2,-32732(gp)
 8003918:	10000326 	beq	r2,zero,8003928 <alt_get_errno+0x24>
 800391c:	d0a00917 	ldw	r2,-32732(gp)
 8003920:	103ee83a 	callr	r2
 8003924:	00000106 	br	800392c <alt_get_errno+0x28>
 8003928:	d0a72504 	addi	r2,gp,-25452
}
 800392c:	e037883a 	mov	sp,fp
 8003930:	dfc00117 	ldw	ra,4(sp)
 8003934:	df000017 	ldw	fp,0(sp)
 8003938:	dec00204 	addi	sp,sp,8
 800393c:	f800283a 	ret

08003940 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8003940:	defff904 	addi	sp,sp,-28
 8003944:	dfc00615 	stw	ra,24(sp)
 8003948:	df000515 	stw	fp,20(sp)
 800394c:	df000504 	addi	fp,sp,20
 8003950:	e13ffd15 	stw	r4,-12(fp)
 8003954:	e17ffe15 	stw	r5,-8(fp)
 8003958:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800395c:	e0bffd17 	ldw	r2,-12(fp)
 8003960:	10000816 	blt	r2,zero,8003984 <write+0x44>
 8003964:	01400304 	movi	r5,12
 8003968:	e13ffd17 	ldw	r4,-12(fp)
 800396c:	80030840 	call	8003084 <__mulsi3>
 8003970:	1007883a 	mov	r3,r2
 8003974:	00820034 	movhi	r2,2048
 8003978:	109e1704 	addi	r2,r2,30812
 800397c:	1885883a 	add	r2,r3,r2
 8003980:	00000106 	br	8003988 <write+0x48>
 8003984:	0005883a 	mov	r2,zero
 8003988:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800398c:	e0bffb17 	ldw	r2,-20(fp)
 8003990:	10002126 	beq	r2,zero,8003a18 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8003994:	e0bffb17 	ldw	r2,-20(fp)
 8003998:	10800217 	ldw	r2,8(r2)
 800399c:	108000cc 	andi	r2,r2,3
 80039a0:	10001826 	beq	r2,zero,8003a04 <write+0xc4>
 80039a4:	e0bffb17 	ldw	r2,-20(fp)
 80039a8:	10800017 	ldw	r2,0(r2)
 80039ac:	10800617 	ldw	r2,24(r2)
 80039b0:	10001426 	beq	r2,zero,8003a04 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80039b4:	e0bffb17 	ldw	r2,-20(fp)
 80039b8:	10800017 	ldw	r2,0(r2)
 80039bc:	10800617 	ldw	r2,24(r2)
 80039c0:	e0ffff17 	ldw	r3,-4(fp)
 80039c4:	180d883a 	mov	r6,r3
 80039c8:	e17ffe17 	ldw	r5,-8(fp)
 80039cc:	e13ffb17 	ldw	r4,-20(fp)
 80039d0:	103ee83a 	callr	r2
 80039d4:	e0bffc15 	stw	r2,-16(fp)
 80039d8:	e0bffc17 	ldw	r2,-16(fp)
 80039dc:	1000070e 	bge	r2,zero,80039fc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80039e0:	80039040 	call	8003904 <alt_get_errno>
 80039e4:	1007883a 	mov	r3,r2
 80039e8:	e0bffc17 	ldw	r2,-16(fp)
 80039ec:	0085c83a 	sub	r2,zero,r2
 80039f0:	18800015 	stw	r2,0(r3)
        return -1;
 80039f4:	00bfffc4 	movi	r2,-1
 80039f8:	00000c06 	br	8003a2c <write+0xec>
      }
      return rval;
 80039fc:	e0bffc17 	ldw	r2,-16(fp)
 8003a00:	00000a06 	br	8003a2c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8003a04:	80039040 	call	8003904 <alt_get_errno>
 8003a08:	1007883a 	mov	r3,r2
 8003a0c:	00800344 	movi	r2,13
 8003a10:	18800015 	stw	r2,0(r3)
 8003a14:	00000406 	br	8003a28 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8003a18:	80039040 	call	8003904 <alt_get_errno>
 8003a1c:	1007883a 	mov	r3,r2
 8003a20:	00801444 	movi	r2,81
 8003a24:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003a28:	00bfffc4 	movi	r2,-1
}
 8003a2c:	e037883a 	mov	sp,fp
 8003a30:	dfc00117 	ldw	ra,4(sp)
 8003a34:	df000017 	ldw	fp,0(sp)
 8003a38:	dec00204 	addi	sp,sp,8
 8003a3c:	f800283a 	ret

08003a40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8003a40:	defffd04 	addi	sp,sp,-12
 8003a44:	dfc00215 	stw	ra,8(sp)
 8003a48:	df000115 	stw	fp,4(sp)
 8003a4c:	df000104 	addi	fp,sp,4
 8003a50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8003a54:	d1600604 	addi	r5,gp,-32744
 8003a58:	e13fff17 	ldw	r4,-4(fp)
 8003a5c:	8005f040 	call	8005f04 <alt_dev_llist_insert>
}
 8003a60:	e037883a 	mov	sp,fp
 8003a64:	dfc00117 	ldw	ra,4(sp)
 8003a68:	df000017 	ldw	fp,0(sp)
 8003a6c:	dec00204 	addi	sp,sp,8
 8003a70:	f800283a 	ret

08003a74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003a74:	defffd04 	addi	sp,sp,-12
 8003a78:	dfc00215 	stw	ra,8(sp)
 8003a7c:	df000115 	stw	fp,4(sp)
 8003a80:	df000104 	addi	fp,sp,4
 8003a84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8003a88:	80069400 	call	8006940 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003a8c:	00800044 	movi	r2,1
 8003a90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003a94:	0001883a 	nop
 8003a98:	e037883a 	mov	sp,fp
 8003a9c:	dfc00117 	ldw	ra,4(sp)
 8003aa0:	df000017 	ldw	fp,0(sp)
 8003aa4:	dec00204 	addi	sp,sp,8
 8003aa8:	f800283a 	ret

08003aac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003aac:	defffe04 	addi	sp,sp,-8
 8003ab0:	dfc00115 	stw	ra,4(sp)
 8003ab4:	df000015 	stw	fp,0(sp)
 8003ab8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 8003abc:	01c0fa04 	movi	r7,1000
 8003ac0:	01800044 	movi	r6,1
 8003ac4:	000b883a 	mov	r5,zero
 8003ac8:	01040034 	movhi	r4,4096
 8003acc:	21112804 	addi	r4,r4,17568
 8003ad0:	80054000 	call	8005400 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 8003ad4:	000d883a 	mov	r6,zero
 8003ad8:	000b883a 	mov	r5,zero
 8003adc:	01020034 	movhi	r4,2048
 8003ae0:	211e8104 	addi	r4,r4,31236
 8003ae4:	8003cf00 	call	8003cf0 <altera_avalon_jtag_uart_init>
 8003ae8:	01020034 	movhi	r4,2048
 8003aec:	211e7704 	addi	r4,r4,31196
 8003af0:	8003a400 	call	8003a40 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
 8003af4:	018000c4 	movi	r6,3
 8003af8:	000b883a 	mov	r5,zero
 8003afc:	01020074 	movhi	r4,2049
 8003b00:	21228f04 	addi	r4,r4,-30148
 8003b04:	80052e00 	call	80052e0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
 8003b08:	01800104 	movi	r6,4
 8003b0c:	000b883a 	mov	r5,zero
 8003b10:	01020074 	movhi	r4,2049
 8003b14:	21229b04 	addi	r4,r4,-30100
 8003b18:	80052e00 	call	80052e0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 8003b1c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 8003b20:	01800084 	movi	r6,2
 8003b24:	000b883a 	mov	r5,zero
 8003b28:	01020074 	movhi	r4,2049
 8003b2c:	2122b104 	addi	r4,r4,-30012
 8003b30:	800558c0 	call	800558c <altera_avalon_uart_init>
 8003b34:	01020074 	movhi	r4,2049
 8003b38:	2122a704 	addi	r4,r4,-30052
 8003b3c:	8003a400 	call	8003a40 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
 8003b40:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( BUTTON_PIO, Button_Pio);
 8003b44:	01020074 	movhi	r4,2049
 8003b48:	2122d804 	addi	r4,r4,-29856
 8003b4c:	8003a400 	call	8003a40 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( IO_PIO, IO_Pio);
 8003b50:	01020074 	movhi	r4,2049
 8003b54:	2122e304 	addi	r4,r4,-29812
 8003b58:	8003a400 	call	8003a40 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_PIO, LED_Pio);
 8003b5c:	01020074 	movhi	r4,2049
 8003b60:	2122ee04 	addi	r4,r4,-29768
 8003b64:	8003a400 	call	8003a40 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SWITCH_PIO, Switch_Pio);
 8003b68:	01020074 	movhi	r4,2049
 8003b6c:	2122f904 	addi	r4,r4,-29724
 8003b70:	8003a400 	call	8003a40 <alt_dev_reg>
}
 8003b74:	0001883a 	nop
 8003b78:	e037883a 	mov	sp,fp
 8003b7c:	dfc00117 	ldw	ra,4(sp)
 8003b80:	df000017 	ldw	fp,0(sp)
 8003b84:	dec00204 	addi	sp,sp,8
 8003b88:	f800283a 	ret

08003b8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003b8c:	defffa04 	addi	sp,sp,-24
 8003b90:	dfc00515 	stw	ra,20(sp)
 8003b94:	df000415 	stw	fp,16(sp)
 8003b98:	df000404 	addi	fp,sp,16
 8003b9c:	e13ffd15 	stw	r4,-12(fp)
 8003ba0:	e17ffe15 	stw	r5,-8(fp)
 8003ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003ba8:	e0bffd17 	ldw	r2,-12(fp)
 8003bac:	10800017 	ldw	r2,0(r2)
 8003bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003bb4:	e0bffc17 	ldw	r2,-16(fp)
 8003bb8:	10c00a04 	addi	r3,r2,40
 8003bbc:	e0bffd17 	ldw	r2,-12(fp)
 8003bc0:	10800217 	ldw	r2,8(r2)
 8003bc4:	100f883a 	mov	r7,r2
 8003bc8:	e1bfff17 	ldw	r6,-4(fp)
 8003bcc:	e17ffe17 	ldw	r5,-8(fp)
 8003bd0:	1809883a 	mov	r4,r3
 8003bd4:	80041b40 	call	80041b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003bd8:	e037883a 	mov	sp,fp
 8003bdc:	dfc00117 	ldw	ra,4(sp)
 8003be0:	df000017 	ldw	fp,0(sp)
 8003be4:	dec00204 	addi	sp,sp,8
 8003be8:	f800283a 	ret

08003bec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003bec:	defffa04 	addi	sp,sp,-24
 8003bf0:	dfc00515 	stw	ra,20(sp)
 8003bf4:	df000415 	stw	fp,16(sp)
 8003bf8:	df000404 	addi	fp,sp,16
 8003bfc:	e13ffd15 	stw	r4,-12(fp)
 8003c00:	e17ffe15 	stw	r5,-8(fp)
 8003c04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003c08:	e0bffd17 	ldw	r2,-12(fp)
 8003c0c:	10800017 	ldw	r2,0(r2)
 8003c10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003c14:	e0bffc17 	ldw	r2,-16(fp)
 8003c18:	10c00a04 	addi	r3,r2,40
 8003c1c:	e0bffd17 	ldw	r2,-12(fp)
 8003c20:	10800217 	ldw	r2,8(r2)
 8003c24:	100f883a 	mov	r7,r2
 8003c28:	e1bfff17 	ldw	r6,-4(fp)
 8003c2c:	e17ffe17 	ldw	r5,-8(fp)
 8003c30:	1809883a 	mov	r4,r3
 8003c34:	80043d00 	call	80043d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003c38:	e037883a 	mov	sp,fp
 8003c3c:	dfc00117 	ldw	ra,4(sp)
 8003c40:	df000017 	ldw	fp,0(sp)
 8003c44:	dec00204 	addi	sp,sp,8
 8003c48:	f800283a 	ret

08003c4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003c4c:	defffc04 	addi	sp,sp,-16
 8003c50:	dfc00315 	stw	ra,12(sp)
 8003c54:	df000215 	stw	fp,8(sp)
 8003c58:	df000204 	addi	fp,sp,8
 8003c5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003c60:	e0bfff17 	ldw	r2,-4(fp)
 8003c64:	10800017 	ldw	r2,0(r2)
 8003c68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003c6c:	e0bffe17 	ldw	r2,-8(fp)
 8003c70:	10c00a04 	addi	r3,r2,40
 8003c74:	e0bfff17 	ldw	r2,-4(fp)
 8003c78:	10800217 	ldw	r2,8(r2)
 8003c7c:	100b883a 	mov	r5,r2
 8003c80:	1809883a 	mov	r4,r3
 8003c84:	800405c0 	call	800405c <altera_avalon_jtag_uart_close>
}
 8003c88:	e037883a 	mov	sp,fp
 8003c8c:	dfc00117 	ldw	ra,4(sp)
 8003c90:	df000017 	ldw	fp,0(sp)
 8003c94:	dec00204 	addi	sp,sp,8
 8003c98:	f800283a 	ret

08003c9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003c9c:	defffa04 	addi	sp,sp,-24
 8003ca0:	dfc00515 	stw	ra,20(sp)
 8003ca4:	df000415 	stw	fp,16(sp)
 8003ca8:	df000404 	addi	fp,sp,16
 8003cac:	e13ffd15 	stw	r4,-12(fp)
 8003cb0:	e17ffe15 	stw	r5,-8(fp)
 8003cb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003cb8:	e0bffd17 	ldw	r2,-12(fp)
 8003cbc:	10800017 	ldw	r2,0(r2)
 8003cc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8003cc4:	e0bffc17 	ldw	r2,-16(fp)
 8003cc8:	10800a04 	addi	r2,r2,40
 8003ccc:	e1bfff17 	ldw	r6,-4(fp)
 8003cd0:	e17ffe17 	ldw	r5,-8(fp)
 8003cd4:	1009883a 	mov	r4,r2
 8003cd8:	80040c40 	call	80040c4 <altera_avalon_jtag_uart_ioctl>
}
 8003cdc:	e037883a 	mov	sp,fp
 8003ce0:	dfc00117 	ldw	ra,4(sp)
 8003ce4:	df000017 	ldw	fp,0(sp)
 8003ce8:	dec00204 	addi	sp,sp,8
 8003cec:	f800283a 	ret

08003cf0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003cf0:	defffa04 	addi	sp,sp,-24
 8003cf4:	dfc00515 	stw	ra,20(sp)
 8003cf8:	df000415 	stw	fp,16(sp)
 8003cfc:	df000404 	addi	fp,sp,16
 8003d00:	e13ffd15 	stw	r4,-12(fp)
 8003d04:	e17ffe15 	stw	r5,-8(fp)
 8003d08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003d0c:	e0bffd17 	ldw	r2,-12(fp)
 8003d10:	00c00044 	movi	r3,1
 8003d14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003d18:	e0bffd17 	ldw	r2,-12(fp)
 8003d1c:	10800017 	ldw	r2,0(r2)
 8003d20:	10800104 	addi	r2,r2,4
 8003d24:	1007883a 	mov	r3,r2
 8003d28:	e0bffd17 	ldw	r2,-12(fp)
 8003d2c:	10800817 	ldw	r2,32(r2)
 8003d30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003d34:	e0bffe17 	ldw	r2,-8(fp)
 8003d38:	e0ffff17 	ldw	r3,-4(fp)
 8003d3c:	d8000015 	stw	zero,0(sp)
 8003d40:	e1fffd17 	ldw	r7,-12(fp)
 8003d44:	01820034 	movhi	r6,2048
 8003d48:	318f6c04 	addi	r6,r6,15792
 8003d4c:	180b883a 	mov	r5,r3
 8003d50:	1009883a 	mov	r4,r2
 8003d54:	80061180 	call	8006118 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003d58:	e0bffd17 	ldw	r2,-12(fp)
 8003d5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003d60:	e0bffd17 	ldw	r2,-12(fp)
 8003d64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003d68:	d0e72a17 	ldw	r3,-25432(gp)
 8003d6c:	e1fffd17 	ldw	r7,-12(fp)
 8003d70:	01820034 	movhi	r6,2048
 8003d74:	318fef04 	addi	r6,r6,16316
 8003d78:	180b883a 	mov	r5,r3
 8003d7c:	1009883a 	mov	r4,r2
 8003d80:	8005d540 	call	8005d54 <alt_alarm_start>
 8003d84:	1000040e 	bge	r2,zero,8003d98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003d88:	e0fffd17 	ldw	r3,-12(fp)
 8003d8c:	00a00034 	movhi	r2,32768
 8003d90:	10bfffc4 	addi	r2,r2,-1
 8003d94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003d98:	0001883a 	nop
 8003d9c:	e037883a 	mov	sp,fp
 8003da0:	dfc00117 	ldw	ra,4(sp)
 8003da4:	df000017 	ldw	fp,0(sp)
 8003da8:	dec00204 	addi	sp,sp,8
 8003dac:	f800283a 	ret

08003db0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003db0:	defff804 	addi	sp,sp,-32
 8003db4:	df000715 	stw	fp,28(sp)
 8003db8:	df000704 	addi	fp,sp,28
 8003dbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003dc0:	e0bfff17 	ldw	r2,-4(fp)
 8003dc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003dc8:	e0bffb17 	ldw	r2,-20(fp)
 8003dcc:	10800017 	ldw	r2,0(r2)
 8003dd0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003dd4:	e0bffc17 	ldw	r2,-16(fp)
 8003dd8:	10800104 	addi	r2,r2,4
 8003ddc:	10800037 	ldwio	r2,0(r2)
 8003de0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003de4:	e0bffd17 	ldw	r2,-12(fp)
 8003de8:	1080c00c 	andi	r2,r2,768
 8003dec:	10006d26 	beq	r2,zero,8003fa4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003df0:	e0bffd17 	ldw	r2,-12(fp)
 8003df4:	1080400c 	andi	r2,r2,256
 8003df8:	10003526 	beq	r2,zero,8003ed0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003dfc:	00800074 	movhi	r2,1
 8003e00:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003e04:	e0bffb17 	ldw	r2,-20(fp)
 8003e08:	10800a17 	ldw	r2,40(r2)
 8003e0c:	10800044 	addi	r2,r2,1
 8003e10:	1081ffcc 	andi	r2,r2,2047
 8003e14:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003e18:	e0bffb17 	ldw	r2,-20(fp)
 8003e1c:	10c00b17 	ldw	r3,44(r2)
 8003e20:	e0bffe17 	ldw	r2,-8(fp)
 8003e24:	18801526 	beq	r3,r2,8003e7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003e28:	e0bffc17 	ldw	r2,-16(fp)
 8003e2c:	10800037 	ldwio	r2,0(r2)
 8003e30:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003e34:	e0bff917 	ldw	r2,-28(fp)
 8003e38:	10a0000c 	andi	r2,r2,32768
 8003e3c:	10001126 	beq	r2,zero,8003e84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003e40:	e0bffb17 	ldw	r2,-20(fp)
 8003e44:	10800a17 	ldw	r2,40(r2)
 8003e48:	e0fff917 	ldw	r3,-28(fp)
 8003e4c:	1809883a 	mov	r4,r3
 8003e50:	e0fffb17 	ldw	r3,-20(fp)
 8003e54:	1885883a 	add	r2,r3,r2
 8003e58:	10800e04 	addi	r2,r2,56
 8003e5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003e60:	e0bffb17 	ldw	r2,-20(fp)
 8003e64:	10800a17 	ldw	r2,40(r2)
 8003e68:	10800044 	addi	r2,r2,1
 8003e6c:	10c1ffcc 	andi	r3,r2,2047
 8003e70:	e0bffb17 	ldw	r2,-20(fp)
 8003e74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003e78:	003fe206 	br	8003e04 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8003e7c:	0001883a 	nop
 8003e80:	00000106 	br	8003e88 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8003e84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003e88:	e0bff917 	ldw	r2,-28(fp)
 8003e8c:	10bfffec 	andhi	r2,r2,65535
 8003e90:	10000f26 	beq	r2,zero,8003ed0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003e94:	e0bffb17 	ldw	r2,-20(fp)
 8003e98:	10c00817 	ldw	r3,32(r2)
 8003e9c:	00bfff84 	movi	r2,-2
 8003ea0:	1886703a 	and	r3,r3,r2
 8003ea4:	e0bffb17 	ldw	r2,-20(fp)
 8003ea8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003eac:	e0bffc17 	ldw	r2,-16(fp)
 8003eb0:	10800104 	addi	r2,r2,4
 8003eb4:	1007883a 	mov	r3,r2
 8003eb8:	e0bffb17 	ldw	r2,-20(fp)
 8003ebc:	10800817 	ldw	r2,32(r2)
 8003ec0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003ec4:	e0bffc17 	ldw	r2,-16(fp)
 8003ec8:	10800104 	addi	r2,r2,4
 8003ecc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003ed0:	e0bffd17 	ldw	r2,-12(fp)
 8003ed4:	1080800c 	andi	r2,r2,512
 8003ed8:	103fbe26 	beq	r2,zero,8003dd4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003edc:	e0bffd17 	ldw	r2,-12(fp)
 8003ee0:	1004d43a 	srli	r2,r2,16
 8003ee4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003ee8:	00001406 	br	8003f3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003eec:	e0bffc17 	ldw	r2,-16(fp)
 8003ef0:	e0fffb17 	ldw	r3,-20(fp)
 8003ef4:	18c00d17 	ldw	r3,52(r3)
 8003ef8:	e13ffb17 	ldw	r4,-20(fp)
 8003efc:	20c7883a 	add	r3,r4,r3
 8003f00:	18c20e04 	addi	r3,r3,2104
 8003f04:	18c00003 	ldbu	r3,0(r3)
 8003f08:	18c03fcc 	andi	r3,r3,255
 8003f0c:	18c0201c 	xori	r3,r3,128
 8003f10:	18ffe004 	addi	r3,r3,-128
 8003f14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003f18:	e0bffb17 	ldw	r2,-20(fp)
 8003f1c:	10800d17 	ldw	r2,52(r2)
 8003f20:	10800044 	addi	r2,r2,1
 8003f24:	10c1ffcc 	andi	r3,r2,2047
 8003f28:	e0bffb17 	ldw	r2,-20(fp)
 8003f2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003f30:	e0bffa17 	ldw	r2,-24(fp)
 8003f34:	10bfffc4 	addi	r2,r2,-1
 8003f38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003f3c:	e0bffa17 	ldw	r2,-24(fp)
 8003f40:	10000526 	beq	r2,zero,8003f58 <altera_avalon_jtag_uart_irq+0x1a8>
 8003f44:	e0bffb17 	ldw	r2,-20(fp)
 8003f48:	10c00d17 	ldw	r3,52(r2)
 8003f4c:	e0bffb17 	ldw	r2,-20(fp)
 8003f50:	10800c17 	ldw	r2,48(r2)
 8003f54:	18bfe51e 	bne	r3,r2,8003eec <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003f58:	e0bffa17 	ldw	r2,-24(fp)
 8003f5c:	103f9d26 	beq	r2,zero,8003dd4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003f60:	e0bffb17 	ldw	r2,-20(fp)
 8003f64:	10c00817 	ldw	r3,32(r2)
 8003f68:	00bfff44 	movi	r2,-3
 8003f6c:	1886703a 	and	r3,r3,r2
 8003f70:	e0bffb17 	ldw	r2,-20(fp)
 8003f74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003f78:	e0bffb17 	ldw	r2,-20(fp)
 8003f7c:	10800017 	ldw	r2,0(r2)
 8003f80:	10800104 	addi	r2,r2,4
 8003f84:	1007883a 	mov	r3,r2
 8003f88:	e0bffb17 	ldw	r2,-20(fp)
 8003f8c:	10800817 	ldw	r2,32(r2)
 8003f90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003f94:	e0bffc17 	ldw	r2,-16(fp)
 8003f98:	10800104 	addi	r2,r2,4
 8003f9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003fa0:	003f8c06 	br	8003dd4 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8003fa4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8003fa8:	0001883a 	nop
 8003fac:	e037883a 	mov	sp,fp
 8003fb0:	df000017 	ldw	fp,0(sp)
 8003fb4:	dec00104 	addi	sp,sp,4
 8003fb8:	f800283a 	ret

08003fbc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003fbc:	defff804 	addi	sp,sp,-32
 8003fc0:	df000715 	stw	fp,28(sp)
 8003fc4:	df000704 	addi	fp,sp,28
 8003fc8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003fcc:	e0bffb17 	ldw	r2,-20(fp)
 8003fd0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003fd4:	e0bff917 	ldw	r2,-28(fp)
 8003fd8:	10800017 	ldw	r2,0(r2)
 8003fdc:	10800104 	addi	r2,r2,4
 8003fe0:	10800037 	ldwio	r2,0(r2)
 8003fe4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003fe8:	e0bffa17 	ldw	r2,-24(fp)
 8003fec:	1081000c 	andi	r2,r2,1024
 8003ff0:	10000b26 	beq	r2,zero,8004020 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003ff4:	e0bff917 	ldw	r2,-28(fp)
 8003ff8:	10800017 	ldw	r2,0(r2)
 8003ffc:	10800104 	addi	r2,r2,4
 8004000:	1007883a 	mov	r3,r2
 8004004:	e0bff917 	ldw	r2,-28(fp)
 8004008:	10800817 	ldw	r2,32(r2)
 800400c:	10810014 	ori	r2,r2,1024
 8004010:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8004014:	e0bff917 	ldw	r2,-28(fp)
 8004018:	10000915 	stw	zero,36(r2)
 800401c:	00000a06 	br	8004048 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8004020:	e0bff917 	ldw	r2,-28(fp)
 8004024:	10c00917 	ldw	r3,36(r2)
 8004028:	00a00034 	movhi	r2,32768
 800402c:	10bfff04 	addi	r2,r2,-4
 8004030:	10c00536 	bltu	r2,r3,8004048 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8004034:	e0bff917 	ldw	r2,-28(fp)
 8004038:	10800917 	ldw	r2,36(r2)
 800403c:	10c00044 	addi	r3,r2,1
 8004040:	e0bff917 	ldw	r2,-28(fp)
 8004044:	10c00915 	stw	r3,36(r2)
 8004048:	d0a72a17 	ldw	r2,-25432(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800404c:	e037883a 	mov	sp,fp
 8004050:	df000017 	ldw	fp,0(sp)
 8004054:	dec00104 	addi	sp,sp,4
 8004058:	f800283a 	ret

0800405c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800405c:	defffd04 	addi	sp,sp,-12
 8004060:	df000215 	stw	fp,8(sp)
 8004064:	df000204 	addi	fp,sp,8
 8004068:	e13ffe15 	stw	r4,-8(fp)
 800406c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004070:	00000506 	br	8004088 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8004074:	e0bfff17 	ldw	r2,-4(fp)
 8004078:	1090000c 	andi	r2,r2,16384
 800407c:	10000226 	beq	r2,zero,8004088 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8004080:	00bffd44 	movi	r2,-11
 8004084:	00000b06 	br	80040b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8004088:	e0bffe17 	ldw	r2,-8(fp)
 800408c:	10c00d17 	ldw	r3,52(r2)
 8004090:	e0bffe17 	ldw	r2,-8(fp)
 8004094:	10800c17 	ldw	r2,48(r2)
 8004098:	18800526 	beq	r3,r2,80040b0 <altera_avalon_jtag_uart_close+0x54>
 800409c:	e0bffe17 	ldw	r2,-8(fp)
 80040a0:	10c00917 	ldw	r3,36(r2)
 80040a4:	e0bffe17 	ldw	r2,-8(fp)
 80040a8:	10800117 	ldw	r2,4(r2)
 80040ac:	18bff136 	bltu	r3,r2,8004074 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80040b0:	0005883a 	mov	r2,zero
}
 80040b4:	e037883a 	mov	sp,fp
 80040b8:	df000017 	ldw	fp,0(sp)
 80040bc:	dec00104 	addi	sp,sp,4
 80040c0:	f800283a 	ret

080040c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80040c4:	defffa04 	addi	sp,sp,-24
 80040c8:	df000515 	stw	fp,20(sp)
 80040cc:	df000504 	addi	fp,sp,20
 80040d0:	e13ffd15 	stw	r4,-12(fp)
 80040d4:	e17ffe15 	stw	r5,-8(fp)
 80040d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80040dc:	00bff9c4 	movi	r2,-25
 80040e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80040e4:	e0bffe17 	ldw	r2,-8(fp)
 80040e8:	10da8060 	cmpeqi	r3,r2,27137
 80040ec:	1800031e 	bne	r3,zero,80040fc <altera_avalon_jtag_uart_ioctl+0x38>
 80040f0:	109a80a0 	cmpeqi	r2,r2,27138
 80040f4:	1000181e 	bne	r2,zero,8004158 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80040f8:	00002906 	br	80041a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80040fc:	e0bffd17 	ldw	r2,-12(fp)
 8004100:	10c00117 	ldw	r3,4(r2)
 8004104:	00a00034 	movhi	r2,32768
 8004108:	10bfffc4 	addi	r2,r2,-1
 800410c:	18802126 	beq	r3,r2,8004194 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8004110:	e0bfff17 	ldw	r2,-4(fp)
 8004114:	10800017 	ldw	r2,0(r2)
 8004118:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800411c:	e0bffc17 	ldw	r2,-16(fp)
 8004120:	10800090 	cmplti	r2,r2,2
 8004124:	1000061e 	bne	r2,zero,8004140 <altera_avalon_jtag_uart_ioctl+0x7c>
 8004128:	e0fffc17 	ldw	r3,-16(fp)
 800412c:	00a00034 	movhi	r2,32768
 8004130:	10bfffc4 	addi	r2,r2,-1
 8004134:	18800226 	beq	r3,r2,8004140 <altera_avalon_jtag_uart_ioctl+0x7c>
 8004138:	e0bffc17 	ldw	r2,-16(fp)
 800413c:	00000206 	br	8004148 <altera_avalon_jtag_uart_ioctl+0x84>
 8004140:	00a00034 	movhi	r2,32768
 8004144:	10bfff84 	addi	r2,r2,-2
 8004148:	e0fffd17 	ldw	r3,-12(fp)
 800414c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8004150:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8004154:	00000f06 	br	8004194 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8004158:	e0bffd17 	ldw	r2,-12(fp)
 800415c:	10c00117 	ldw	r3,4(r2)
 8004160:	00a00034 	movhi	r2,32768
 8004164:	10bfffc4 	addi	r2,r2,-1
 8004168:	18800c26 	beq	r3,r2,800419c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800416c:	e0bffd17 	ldw	r2,-12(fp)
 8004170:	10c00917 	ldw	r3,36(r2)
 8004174:	e0bffd17 	ldw	r2,-12(fp)
 8004178:	10800117 	ldw	r2,4(r2)
 800417c:	1885803a 	cmpltu	r2,r3,r2
 8004180:	10c03fcc 	andi	r3,r2,255
 8004184:	e0bfff17 	ldw	r2,-4(fp)
 8004188:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800418c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8004190:	00000206 	br	800419c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8004194:	0001883a 	nop
 8004198:	00000106 	br	80041a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800419c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80041a0:	e0bffb17 	ldw	r2,-20(fp)
}
 80041a4:	e037883a 	mov	sp,fp
 80041a8:	df000017 	ldw	fp,0(sp)
 80041ac:	dec00104 	addi	sp,sp,4
 80041b0:	f800283a 	ret

080041b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80041b4:	defff304 	addi	sp,sp,-52
 80041b8:	dfc00c15 	stw	ra,48(sp)
 80041bc:	df000b15 	stw	fp,44(sp)
 80041c0:	df000b04 	addi	fp,sp,44
 80041c4:	e13ffc15 	stw	r4,-16(fp)
 80041c8:	e17ffd15 	stw	r5,-12(fp)
 80041cc:	e1bffe15 	stw	r6,-8(fp)
 80041d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80041d4:	e0bffd17 	ldw	r2,-12(fp)
 80041d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80041dc:	00004706 	br	80042fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80041e0:	e0bffc17 	ldw	r2,-16(fp)
 80041e4:	10800a17 	ldw	r2,40(r2)
 80041e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80041ec:	e0bffc17 	ldw	r2,-16(fp)
 80041f0:	10800b17 	ldw	r2,44(r2)
 80041f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80041f8:	e0fff717 	ldw	r3,-36(fp)
 80041fc:	e0bff817 	ldw	r2,-32(fp)
 8004200:	18800536 	bltu	r3,r2,8004218 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004204:	e0fff717 	ldw	r3,-36(fp)
 8004208:	e0bff817 	ldw	r2,-32(fp)
 800420c:	1885c83a 	sub	r2,r3,r2
 8004210:	e0bff615 	stw	r2,-40(fp)
 8004214:	00000406 	br	8004228 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004218:	00c20004 	movi	r3,2048
 800421c:	e0bff817 	ldw	r2,-32(fp)
 8004220:	1885c83a 	sub	r2,r3,r2
 8004224:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004228:	e0bff617 	ldw	r2,-40(fp)
 800422c:	10001e26 	beq	r2,zero,80042a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8004230:	e0fffe17 	ldw	r3,-8(fp)
 8004234:	e0bff617 	ldw	r2,-40(fp)
 8004238:	1880022e 	bgeu	r3,r2,8004244 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800423c:	e0bffe17 	ldw	r2,-8(fp)
 8004240:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004244:	e0bffc17 	ldw	r2,-16(fp)
 8004248:	10c00e04 	addi	r3,r2,56
 800424c:	e0bff817 	ldw	r2,-32(fp)
 8004250:	1885883a 	add	r2,r3,r2
 8004254:	e1bff617 	ldw	r6,-40(fp)
 8004258:	100b883a 	mov	r5,r2
 800425c:	e13ff517 	ldw	r4,-44(fp)
 8004260:	80016fc0 	call	80016fc <memcpy>
      ptr   += n;
 8004264:	e0fff517 	ldw	r3,-44(fp)
 8004268:	e0bff617 	ldw	r2,-40(fp)
 800426c:	1885883a 	add	r2,r3,r2
 8004270:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8004274:	e0fffe17 	ldw	r3,-8(fp)
 8004278:	e0bff617 	ldw	r2,-40(fp)
 800427c:	1885c83a 	sub	r2,r3,r2
 8004280:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004284:	e0fff817 	ldw	r3,-32(fp)
 8004288:	e0bff617 	ldw	r2,-40(fp)
 800428c:	1885883a 	add	r2,r3,r2
 8004290:	10c1ffcc 	andi	r3,r2,2047
 8004294:	e0bffc17 	ldw	r2,-16(fp)
 8004298:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800429c:	e0bffe17 	ldw	r2,-8(fp)
 80042a0:	00bfcf16 	blt	zero,r2,80041e0 <altera_avalon_jtag_uart_read+0x2c>
 80042a4:	00000106 	br	80042ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80042a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80042ac:	e0fff517 	ldw	r3,-44(fp)
 80042b0:	e0bffd17 	ldw	r2,-12(fp)
 80042b4:	1880141e 	bne	r3,r2,8004308 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80042b8:	e0bfff17 	ldw	r2,-4(fp)
 80042bc:	1090000c 	andi	r2,r2,16384
 80042c0:	1000131e 	bne	r2,zero,8004310 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80042c4:	0001883a 	nop
 80042c8:	e0bffc17 	ldw	r2,-16(fp)
 80042cc:	10c00a17 	ldw	r3,40(r2)
 80042d0:	e0bff717 	ldw	r2,-36(fp)
 80042d4:	1880051e 	bne	r3,r2,80042ec <altera_avalon_jtag_uart_read+0x138>
 80042d8:	e0bffc17 	ldw	r2,-16(fp)
 80042dc:	10c00917 	ldw	r3,36(r2)
 80042e0:	e0bffc17 	ldw	r2,-16(fp)
 80042e4:	10800117 	ldw	r2,4(r2)
 80042e8:	18bff736 	bltu	r3,r2,80042c8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80042ec:	e0bffc17 	ldw	r2,-16(fp)
 80042f0:	10c00a17 	ldw	r3,40(r2)
 80042f4:	e0bff717 	ldw	r2,-36(fp)
 80042f8:	18800726 	beq	r3,r2,8004318 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80042fc:	e0bffe17 	ldw	r2,-8(fp)
 8004300:	00bfb716 	blt	zero,r2,80041e0 <altera_avalon_jtag_uart_read+0x2c>
 8004304:	00000506 	br	800431c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8004308:	0001883a 	nop
 800430c:	00000306 	br	800431c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8004310:	0001883a 	nop
 8004314:	00000106 	br	800431c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8004318:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800431c:	e0fff517 	ldw	r3,-44(fp)
 8004320:	e0bffd17 	ldw	r2,-12(fp)
 8004324:	18801826 	beq	r3,r2,8004388 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004328:	0005303a 	rdctl	r2,status
 800432c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004330:	e0fffb17 	ldw	r3,-20(fp)
 8004334:	00bfff84 	movi	r2,-2
 8004338:	1884703a 	and	r2,r3,r2
 800433c:	1001703a 	wrctl	status,r2
  
  return context;
 8004340:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004344:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004348:	e0bffc17 	ldw	r2,-16(fp)
 800434c:	10800817 	ldw	r2,32(r2)
 8004350:	10c00054 	ori	r3,r2,1
 8004354:	e0bffc17 	ldw	r2,-16(fp)
 8004358:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800435c:	e0bffc17 	ldw	r2,-16(fp)
 8004360:	10800017 	ldw	r2,0(r2)
 8004364:	10800104 	addi	r2,r2,4
 8004368:	1007883a 	mov	r3,r2
 800436c:	e0bffc17 	ldw	r2,-16(fp)
 8004370:	10800817 	ldw	r2,32(r2)
 8004374:	18800035 	stwio	r2,0(r3)
 8004378:	e0bffa17 	ldw	r2,-24(fp)
 800437c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004380:	e0bff917 	ldw	r2,-28(fp)
 8004384:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004388:	e0fff517 	ldw	r3,-44(fp)
 800438c:	e0bffd17 	ldw	r2,-12(fp)
 8004390:	18800426 	beq	r3,r2,80043a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8004394:	e0fff517 	ldw	r3,-44(fp)
 8004398:	e0bffd17 	ldw	r2,-12(fp)
 800439c:	1885c83a 	sub	r2,r3,r2
 80043a0:	00000606 	br	80043bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80043a4:	e0bfff17 	ldw	r2,-4(fp)
 80043a8:	1090000c 	andi	r2,r2,16384
 80043ac:	10000226 	beq	r2,zero,80043b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80043b0:	00bffd44 	movi	r2,-11
 80043b4:	00000106 	br	80043bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80043b8:	00bffec4 	movi	r2,-5
}
 80043bc:	e037883a 	mov	sp,fp
 80043c0:	dfc00117 	ldw	ra,4(sp)
 80043c4:	df000017 	ldw	fp,0(sp)
 80043c8:	dec00204 	addi	sp,sp,8
 80043cc:	f800283a 	ret

080043d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80043d0:	defff304 	addi	sp,sp,-52
 80043d4:	dfc00c15 	stw	ra,48(sp)
 80043d8:	df000b15 	stw	fp,44(sp)
 80043dc:	df000b04 	addi	fp,sp,44
 80043e0:	e13ffc15 	stw	r4,-16(fp)
 80043e4:	e17ffd15 	stw	r5,-12(fp)
 80043e8:	e1bffe15 	stw	r6,-8(fp)
 80043ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80043f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80043f4:	e0bffd17 	ldw	r2,-12(fp)
 80043f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80043fc:	00003706 	br	80044dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004400:	e0bffc17 	ldw	r2,-16(fp)
 8004404:	10800c17 	ldw	r2,48(r2)
 8004408:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800440c:	e0bffc17 	ldw	r2,-16(fp)
 8004410:	10800d17 	ldw	r2,52(r2)
 8004414:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004418:	e0fff917 	ldw	r3,-28(fp)
 800441c:	e0bff517 	ldw	r2,-44(fp)
 8004420:	1880062e 	bgeu	r3,r2,800443c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004424:	e0fff517 	ldw	r3,-44(fp)
 8004428:	e0bff917 	ldw	r2,-28(fp)
 800442c:	1885c83a 	sub	r2,r3,r2
 8004430:	10bfffc4 	addi	r2,r2,-1
 8004434:	e0bff615 	stw	r2,-40(fp)
 8004438:	00000b06 	br	8004468 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800443c:	e0bff517 	ldw	r2,-44(fp)
 8004440:	10000526 	beq	r2,zero,8004458 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004444:	00c20004 	movi	r3,2048
 8004448:	e0bff917 	ldw	r2,-28(fp)
 800444c:	1885c83a 	sub	r2,r3,r2
 8004450:	e0bff615 	stw	r2,-40(fp)
 8004454:	00000406 	br	8004468 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004458:	00c1ffc4 	movi	r3,2047
 800445c:	e0bff917 	ldw	r2,-28(fp)
 8004460:	1885c83a 	sub	r2,r3,r2
 8004464:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004468:	e0bff617 	ldw	r2,-40(fp)
 800446c:	10001e26 	beq	r2,zero,80044e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8004470:	e0fffe17 	ldw	r3,-8(fp)
 8004474:	e0bff617 	ldw	r2,-40(fp)
 8004478:	1880022e 	bgeu	r3,r2,8004484 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800447c:	e0bffe17 	ldw	r2,-8(fp)
 8004480:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004484:	e0bffc17 	ldw	r2,-16(fp)
 8004488:	10c20e04 	addi	r3,r2,2104
 800448c:	e0bff917 	ldw	r2,-28(fp)
 8004490:	1885883a 	add	r2,r3,r2
 8004494:	e1bff617 	ldw	r6,-40(fp)
 8004498:	e17ffd17 	ldw	r5,-12(fp)
 800449c:	1009883a 	mov	r4,r2
 80044a0:	80016fc0 	call	80016fc <memcpy>
      ptr   += n;
 80044a4:	e0fffd17 	ldw	r3,-12(fp)
 80044a8:	e0bff617 	ldw	r2,-40(fp)
 80044ac:	1885883a 	add	r2,r3,r2
 80044b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80044b4:	e0fffe17 	ldw	r3,-8(fp)
 80044b8:	e0bff617 	ldw	r2,-40(fp)
 80044bc:	1885c83a 	sub	r2,r3,r2
 80044c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80044c4:	e0fff917 	ldw	r3,-28(fp)
 80044c8:	e0bff617 	ldw	r2,-40(fp)
 80044cc:	1885883a 	add	r2,r3,r2
 80044d0:	10c1ffcc 	andi	r3,r2,2047
 80044d4:	e0bffc17 	ldw	r2,-16(fp)
 80044d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80044dc:	e0bffe17 	ldw	r2,-8(fp)
 80044e0:	00bfc716 	blt	zero,r2,8004400 <altera_avalon_jtag_uart_write+0x30>
 80044e4:	00000106 	br	80044ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80044e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80044ec:	0005303a 	rdctl	r2,status
 80044f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80044f4:	e0fffb17 	ldw	r3,-20(fp)
 80044f8:	00bfff84 	movi	r2,-2
 80044fc:	1884703a 	and	r2,r3,r2
 8004500:	1001703a 	wrctl	status,r2
  
  return context;
 8004504:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004508:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800450c:	e0bffc17 	ldw	r2,-16(fp)
 8004510:	10800817 	ldw	r2,32(r2)
 8004514:	10c00094 	ori	r3,r2,2
 8004518:	e0bffc17 	ldw	r2,-16(fp)
 800451c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004520:	e0bffc17 	ldw	r2,-16(fp)
 8004524:	10800017 	ldw	r2,0(r2)
 8004528:	10800104 	addi	r2,r2,4
 800452c:	1007883a 	mov	r3,r2
 8004530:	e0bffc17 	ldw	r2,-16(fp)
 8004534:	10800817 	ldw	r2,32(r2)
 8004538:	18800035 	stwio	r2,0(r3)
 800453c:	e0bffa17 	ldw	r2,-24(fp)
 8004540:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004544:	e0bff817 	ldw	r2,-32(fp)
 8004548:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800454c:	e0bffe17 	ldw	r2,-8(fp)
 8004550:	0080100e 	bge	zero,r2,8004594 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8004554:	e0bfff17 	ldw	r2,-4(fp)
 8004558:	1090000c 	andi	r2,r2,16384
 800455c:	1000101e 	bne	r2,zero,80045a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004560:	0001883a 	nop
 8004564:	e0bffc17 	ldw	r2,-16(fp)
 8004568:	10c00d17 	ldw	r3,52(r2)
 800456c:	e0bff517 	ldw	r2,-44(fp)
 8004570:	1880051e 	bne	r3,r2,8004588 <altera_avalon_jtag_uart_write+0x1b8>
 8004574:	e0bffc17 	ldw	r2,-16(fp)
 8004578:	10c00917 	ldw	r3,36(r2)
 800457c:	e0bffc17 	ldw	r2,-16(fp)
 8004580:	10800117 	ldw	r2,4(r2)
 8004584:	18bff736 	bltu	r3,r2,8004564 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8004588:	e0bffc17 	ldw	r2,-16(fp)
 800458c:	10800917 	ldw	r2,36(r2)
 8004590:	1000051e 	bne	r2,zero,80045a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8004594:	e0bffe17 	ldw	r2,-8(fp)
 8004598:	00bfd016 	blt	zero,r2,80044dc <altera_avalon_jtag_uart_write+0x10c>
 800459c:	00000306 	br	80045ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80045a0:	0001883a 	nop
 80045a4:	00000106 	br	80045ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80045a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80045ac:	e0fffd17 	ldw	r3,-12(fp)
 80045b0:	e0bff717 	ldw	r2,-36(fp)
 80045b4:	18800426 	beq	r3,r2,80045c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80045b8:	e0fffd17 	ldw	r3,-12(fp)
 80045bc:	e0bff717 	ldw	r2,-36(fp)
 80045c0:	1885c83a 	sub	r2,r3,r2
 80045c4:	00000606 	br	80045e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80045c8:	e0bfff17 	ldw	r2,-4(fp)
 80045cc:	1090000c 	andi	r2,r2,16384
 80045d0:	10000226 	beq	r2,zero,80045dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80045d4:	00bffd44 	movi	r2,-11
 80045d8:	00000106 	br	80045e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80045dc:	00bffec4 	movi	r2,-5
}
 80045e0:	e037883a 	mov	sp,fp
 80045e4:	dfc00117 	ldw	ra,4(sp)
 80045e8:	df000017 	ldw	fp,0(sp)
 80045ec:	dec00204 	addi	sp,sp,8
 80045f0:	f800283a 	ret

080045f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80045f4:	defffe04 	addi	sp,sp,-8
 80045f8:	dfc00115 	stw	ra,4(sp)
 80045fc:	df000015 	stw	fp,0(sp)
 8004600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004604:	d0a00917 	ldw	r2,-32732(gp)
 8004608:	10000326 	beq	r2,zero,8004618 <alt_get_errno+0x24>
 800460c:	d0a00917 	ldw	r2,-32732(gp)
 8004610:	103ee83a 	callr	r2
 8004614:	00000106 	br	800461c <alt_get_errno+0x28>
 8004618:	d0a72504 	addi	r2,gp,-25452
}
 800461c:	e037883a 	mov	sp,fp
 8004620:	dfc00117 	ldw	ra,4(sp)
 8004624:	df000017 	ldw	fp,0(sp)
 8004628:	dec00204 	addi	sp,sp,8
 800462c:	f800283a 	ret

08004630 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8004630:	defffc04 	addi	sp,sp,-16
 8004634:	df000315 	stw	fp,12(sp)
 8004638:	df000304 	addi	fp,sp,12
 800463c:	e13ffe15 	stw	r4,-8(fp)
 8004640:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8004644:	e0bffe17 	ldw	r2,-8(fp)
 8004648:	10800317 	ldw	r2,12(r2)
 800464c:	10800037 	ldwio	r2,0(r2)
 8004650:	1080040c 	andi	r2,r2,16
 8004654:	10000226 	beq	r2,zero,8004660 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 8004658:	00bffc04 	movi	r2,-16
 800465c:	00003906 	br	8004744 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8004660:	e0bffe17 	ldw	r2,-8(fp)
 8004664:	10800317 	ldw	r2,12(r2)
 8004668:	10800404 	addi	r2,r2,16
 800466c:	e0fffe17 	ldw	r3,-8(fp)
 8004670:	18c00317 	ldw	r3,12(r3)
 8004674:	18c00404 	addi	r3,r3,16
 8004678:	19000037 	ldwio	r4,0(r3)
 800467c:	00fff7c4 	movi	r3,-33
 8004680:	20c6703a 	and	r3,r4,r3
 8004684:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8004688:	e0bffe17 	ldw	r2,-8(fp)
 800468c:	10800317 	ldw	r2,12(r2)
 8004690:	00c03fc4 	movi	r3,255
 8004694:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 8004698:	e0bffe17 	ldw	r2,-8(fp)
 800469c:	10800317 	ldw	r2,12(r2)
 80046a0:	10800804 	addi	r2,r2,32
 80046a4:	e0ffff17 	ldw	r3,-4(fp)
 80046a8:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 80046ac:	e0bffe17 	ldw	r2,-8(fp)
 80046b0:	10800917 	ldw	r2,36(r2)
 80046b4:	10001126 	beq	r2,zero,80046fc <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80046b8:	e0bffe17 	ldw	r2,-8(fp)
 80046bc:	10800317 	ldw	r2,12(r2)
 80046c0:	10800404 	addi	r2,r2,16
 80046c4:	10800037 	ldwio	r2,0(r2)
 80046c8:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 80046cc:	e0bffe17 	ldw	r2,-8(fp)
 80046d0:	10c00b17 	ldw	r3,44(r2)
 80046d4:	e0bffd17 	ldw	r2,-12(fp)
 80046d8:	1884b03a 	or	r2,r3,r2
 80046dc:	10801814 	ori	r2,r2,96
 80046e0:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 80046e4:	e0bffe17 	ldw	r2,-8(fp)
 80046e8:	10800317 	ldw	r2,12(r2)
 80046ec:	10800404 	addi	r2,r2,16
 80046f0:	e0fffd17 	ldw	r3,-12(fp)
 80046f4:	10c00035 	stwio	r3,0(r2)
 80046f8:	00001106 	br	8004740 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 80046fc:	e0bffe17 	ldw	r2,-8(fp)
 8004700:	10800317 	ldw	r2,12(r2)
 8004704:	10800404 	addi	r2,r2,16
 8004708:	10800037 	ldwio	r2,0(r2)
 800470c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 8004710:	e0bffd17 	ldw	r2,-12(fp)
 8004714:	10801814 	ori	r2,r2,96
 8004718:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 800471c:	e0fffd17 	ldw	r3,-12(fp)
 8004720:	00bffbc4 	movi	r2,-17
 8004724:	1884703a 	and	r2,r3,r2
 8004728:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 800472c:	e0bffe17 	ldw	r2,-8(fp)
 8004730:	10800317 	ldw	r2,12(r2)
 8004734:	10800404 	addi	r2,r2,16
 8004738:	e0fffd17 	ldw	r3,-12(fp)
 800473c:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 8004740:	0005883a 	mov	r2,zero
}
 8004744:	e037883a 	mov	sp,fp
 8004748:	df000017 	ldw	fp,0(sp)
 800474c:	dec00104 	addi	sp,sp,4
 8004750:	f800283a 	ret

08004754 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 8004754:	defffc04 	addi	sp,sp,-16
 8004758:	df000315 	stw	fp,12(sp)
 800475c:	df000304 	addi	fp,sp,12
 8004760:	e13ffe15 	stw	r4,-8(fp)
 8004764:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 8004768:	0001883a 	nop
 800476c:	e0bffe17 	ldw	r2,-8(fp)
 8004770:	10800317 	ldw	r2,12(r2)
 8004774:	10800037 	ldwio	r2,0(r2)
 8004778:	1080040c 	andi	r2,r2,16
 800477c:	103ffb1e 	bne	r2,zero,800476c <alt_avalon_sgdma_do_sync_transfer+0x18>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8004780:	e0bffe17 	ldw	r2,-8(fp)
 8004784:	10800317 	ldw	r2,12(r2)
 8004788:	10800404 	addi	r2,r2,16
 800478c:	e0fffe17 	ldw	r3,-8(fp)
 8004790:	18c00317 	ldw	r3,12(r3)
 8004794:	18c00404 	addi	r3,r3,16
 8004798:	19000037 	ldwio	r4,0(r3)
 800479c:	00fff7c4 	movi	r3,-33
 80047a0:	20c6703a 	and	r3,r4,r3
 80047a4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 80047a8:	e0bffe17 	ldw	r2,-8(fp)
 80047ac:	10800317 	ldw	r2,12(r2)
 80047b0:	00c03fc4 	movi	r3,255
 80047b4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 80047b8:	e0bffe17 	ldw	r2,-8(fp)
 80047bc:	10800317 	ldw	r2,12(r2)
 80047c0:	10800804 	addi	r2,r2,32
 80047c4:	e0ffff17 	ldw	r3,-4(fp)
 80047c8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 80047cc:	e0bffe17 	ldw	r2,-8(fp)
 80047d0:	10800317 	ldw	r2,12(r2)
 80047d4:	10800404 	addi	r2,r2,16
 80047d8:	e0fffe17 	ldw	r3,-8(fp)
 80047dc:	18c00317 	ldw	r3,12(r3)
 80047e0:	18c00404 	addi	r3,r3,16
 80047e4:	18c00037 	ldwio	r3,0(r3)
 80047e8:	18c01814 	ori	r3,r3,96
 80047ec:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 80047f0:	0001883a 	nop
 80047f4:	e0bffe17 	ldw	r2,-8(fp)
 80047f8:	10800317 	ldw	r2,12(r2)
 80047fc:	10800037 	ldwio	r2,0(r2)
 8004800:	1080040c 	andi	r2,r2,16
 8004804:	103ffb1e 	bne	r2,zero,80047f4 <alt_avalon_sgdma_do_sync_transfer+0xa0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8004808:	e0bffe17 	ldw	r2,-8(fp)
 800480c:	10800317 	ldw	r2,12(r2)
 8004810:	10800404 	addi	r2,r2,16
 8004814:	e0fffe17 	ldw	r3,-8(fp)
 8004818:	18c00317 	ldw	r3,12(r3)
 800481c:	18c00404 	addi	r3,r3,16
 8004820:	19000037 	ldwio	r4,0(r3)
 8004824:	00fff7c4 	movi	r3,-33
 8004828:	20c6703a 	and	r3,r4,r3
 800482c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 8004830:	e0bffe17 	ldw	r2,-8(fp)
 8004834:	10800317 	ldw	r2,12(r2)
 8004838:	10800037 	ldwio	r2,0(r2)
 800483c:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8004840:	e0bffe17 	ldw	r2,-8(fp)
 8004844:	10800317 	ldw	r2,12(r2)
 8004848:	00c03fc4 	movi	r3,255
 800484c:	10c00035 	stwio	r3,0(r2)

  return status;
 8004850:	e0bffd03 	ldbu	r2,-12(fp)
}
 8004854:	e037883a 	mov	sp,fp
 8004858:	df000017 	ldw	fp,0(sp)
 800485c:	dec00104 	addi	sp,sp,4
 8004860:	f800283a 	ret

08004864 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 8004864:	defff404 	addi	sp,sp,-48
 8004868:	dfc00b15 	stw	ra,44(sp)
 800486c:	df000a15 	stw	fp,40(sp)
 8004870:	df000a04 	addi	fp,sp,40
 8004874:	e13ffb15 	stw	r4,-20(fp)
 8004878:	e17ffc15 	stw	r5,-16(fp)
 800487c:	e1bffd15 	stw	r6,-12(fp)
 8004880:	e1fffe15 	stw	r7,-8(fp)
 8004884:	e0800217 	ldw	r2,8(fp)
 8004888:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 800488c:	e0bfff0b 	ldhu	r2,-4(fp)
 8004890:	d8000415 	stw	zero,16(sp)
 8004894:	d8000315 	stw	zero,12(sp)
 8004898:	e0c00417 	ldw	r3,16(fp)
 800489c:	d8c00215 	stw	r3,8(sp)
 80048a0:	e0c00317 	ldw	r3,12(fp)
 80048a4:	d8c00115 	stw	r3,4(sp)
 80048a8:	d8800015 	stw	r2,0(sp)
 80048ac:	e1fffe17 	ldw	r7,-8(fp)
 80048b0:	e1bffd17 	ldw	r6,-12(fp)
 80048b4:	e17ffc17 	ldw	r5,-16(fp)
 80048b8:	e13ffb17 	ldw	r4,-20(fp)
 80048bc:	80048d80 	call	80048d8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 80048c0:	0001883a 	nop
 80048c4:	e037883a 	mov	sp,fp
 80048c8:	dfc00117 	ldw	ra,4(sp)
 80048cc:	df000017 	ldw	fp,0(sp)
 80048d0:	dec00204 	addi	sp,sp,8
 80048d4:	f800283a 	ret

080048d8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 80048d8:	defff204 	addi	sp,sp,-56
 80048dc:	dfc00d15 	stw	ra,52(sp)
 80048e0:	df000c15 	stw	fp,48(sp)
 80048e4:	df000c04 	addi	fp,sp,48
 80048e8:	e13ffb15 	stw	r4,-20(fp)
 80048ec:	e17ffc15 	stw	r5,-16(fp)
 80048f0:	e1bffd15 	stw	r6,-12(fp)
 80048f4:	e1fffe15 	stw	r7,-8(fp)
 80048f8:	e0800217 	ldw	r2,8(fp)
 80048fc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8004900:	e0bfff0b 	ldhu	r2,-4(fp)
 8004904:	d8000615 	stw	zero,24(sp)
 8004908:	e0c00617 	ldw	r3,24(fp)
 800490c:	d8c00515 	stw	r3,20(sp)
 8004910:	e0c00517 	ldw	r3,20(fp)
 8004914:	d8c00415 	stw	r3,16(sp)
 8004918:	e0c00417 	ldw	r3,16(fp)
 800491c:	d8c00315 	stw	r3,12(sp)
 8004920:	e0c00317 	ldw	r3,12(fp)
 8004924:	d8c00215 	stw	r3,8(sp)
 8004928:	d8000115 	stw	zero,4(sp)
 800492c:	d8800015 	stw	r2,0(sp)
 8004930:	e1fffe17 	ldw	r7,-8(fp)
 8004934:	e1bffd17 	ldw	r6,-12(fp)
 8004938:	e17ffc17 	ldw	r5,-16(fp)
 800493c:	e13ffb17 	ldw	r4,-20(fp)
 8004940:	8004e6c0 	call	8004e6c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 8004944:	0001883a 	nop
 8004948:	e037883a 	mov	sp,fp
 800494c:	dfc00117 	ldw	ra,4(sp)
 8004950:	df000017 	ldw	fp,0(sp)
 8004954:	dec00204 	addi	sp,sp,8
 8004958:	f800283a 	ret

0800495c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 800495c:	defff804 	addi	sp,sp,-32
 8004960:	dfc00715 	stw	ra,28(sp)
 8004964:	df000615 	stw	fp,24(sp)
 8004968:	df000604 	addi	fp,sp,24
 800496c:	e13ffc15 	stw	r4,-16(fp)
 8004970:	e17ffd15 	stw	r5,-12(fp)
 8004974:	e1bffe15 	stw	r6,-8(fp)
 8004978:	3805883a 	mov	r2,r7
 800497c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 8004980:	e0ffff0b 	ldhu	r3,-4(fp)
 8004984:	d8000115 	stw	zero,4(sp)
 8004988:	e0800217 	ldw	r2,8(fp)
 800498c:	d8800015 	stw	r2,0(sp)
 8004990:	180f883a 	mov	r7,r3
 8004994:	e1bffe17 	ldw	r6,-8(fp)
 8004998:	e17ffd17 	ldw	r5,-12(fp)
 800499c:	e13ffc17 	ldw	r4,-16(fp)
 80049a0:	80049bc0 	call	80049bc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 80049a4:	0001883a 	nop
 80049a8:	e037883a 	mov	sp,fp
 80049ac:	dfc00117 	ldw	ra,4(sp)
 80049b0:	df000017 	ldw	fp,0(sp)
 80049b4:	dec00204 	addi	sp,sp,8
 80049b8:	f800283a 	ret

080049bc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 80049bc:	defff304 	addi	sp,sp,-52
 80049c0:	dfc00c15 	stw	ra,48(sp)
 80049c4:	df000b15 	stw	fp,44(sp)
 80049c8:	df000b04 	addi	fp,sp,44
 80049cc:	e13ffc15 	stw	r4,-16(fp)
 80049d0:	e17ffd15 	stw	r5,-12(fp)
 80049d4:	e1bffe15 	stw	r6,-8(fp)
 80049d8:	3805883a 	mov	r2,r7
 80049dc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 80049e0:	e0bfff0b 	ldhu	r2,-4(fp)
 80049e4:	d8000615 	stw	zero,24(sp)
 80049e8:	e0c00317 	ldw	r3,12(fp)
 80049ec:	d8c00515 	stw	r3,20(sp)
 80049f0:	d8000415 	stw	zero,16(sp)
 80049f4:	e0c00217 	ldw	r3,8(fp)
 80049f8:	d8c00315 	stw	r3,12(sp)
 80049fc:	d8000215 	stw	zero,8(sp)
 8004a00:	d8000115 	stw	zero,4(sp)
 8004a04:	d8800015 	stw	r2,0(sp)
 8004a08:	e1fffe17 	ldw	r7,-8(fp)
 8004a0c:	000d883a 	mov	r6,zero
 8004a10:	e17ffd17 	ldw	r5,-12(fp)
 8004a14:	e13ffc17 	ldw	r4,-16(fp)
 8004a18:	8004e6c0 	call	8004e6c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 8004a1c:	0001883a 	nop
 8004a20:	e037883a 	mov	sp,fp
 8004a24:	dfc00117 	ldw	ra,4(sp)
 8004a28:	df000017 	ldw	fp,0(sp)
 8004a2c:	dec00204 	addi	sp,sp,8
 8004a30:	f800283a 	ret

08004a34 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 8004a34:	defff404 	addi	sp,sp,-48
 8004a38:	dfc00b15 	stw	ra,44(sp)
 8004a3c:	df000a15 	stw	fp,40(sp)
 8004a40:	df000a04 	addi	fp,sp,40
 8004a44:	e13ffb15 	stw	r4,-20(fp)
 8004a48:	e17ffc15 	stw	r5,-16(fp)
 8004a4c:	e1bffd15 	stw	r6,-12(fp)
 8004a50:	3807883a 	mov	r3,r7
 8004a54:	e0800517 	ldw	r2,20(fp)
 8004a58:	e0fffe0d 	sth	r3,-8(fp)
 8004a5c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 8004a60:	e0fffe0b 	ldhu	r3,-8(fp)
 8004a64:	e0bfff03 	ldbu	r2,-4(fp)
 8004a68:	d8800415 	stw	r2,16(sp)
 8004a6c:	d8000315 	stw	zero,12(sp)
 8004a70:	e0800417 	ldw	r2,16(fp)
 8004a74:	d8800215 	stw	r2,8(sp)
 8004a78:	e0800317 	ldw	r2,12(fp)
 8004a7c:	d8800115 	stw	r2,4(sp)
 8004a80:	e0800217 	ldw	r2,8(fp)
 8004a84:	d8800015 	stw	r2,0(sp)
 8004a88:	180f883a 	mov	r7,r3
 8004a8c:	e1bffd17 	ldw	r6,-12(fp)
 8004a90:	e17ffc17 	ldw	r5,-16(fp)
 8004a94:	e13ffb17 	ldw	r4,-20(fp)
 8004a98:	8004ab40 	call	8004ab4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 8004a9c:	0001883a 	nop
 8004aa0:	e037883a 	mov	sp,fp
 8004aa4:	dfc00117 	ldw	ra,4(sp)
 8004aa8:	df000017 	ldw	fp,0(sp)
 8004aac:	dec00204 	addi	sp,sp,8
 8004ab0:	f800283a 	ret

08004ab4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 8004ab4:	defff204 	addi	sp,sp,-56
 8004ab8:	dfc00d15 	stw	ra,52(sp)
 8004abc:	df000c15 	stw	fp,48(sp)
 8004ac0:	df000c04 	addi	fp,sp,48
 8004ac4:	e13ffb15 	stw	r4,-20(fp)
 8004ac8:	e17ffc15 	stw	r5,-16(fp)
 8004acc:	e1bffd15 	stw	r6,-12(fp)
 8004ad0:	3807883a 	mov	r3,r7
 8004ad4:	e0800617 	ldw	r2,24(fp)
 8004ad8:	e0fffe0d 	sth	r3,-8(fp)
 8004adc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 8004ae0:	e0bffe0b 	ldhu	r2,-8(fp)
 8004ae4:	e0ffff03 	ldbu	r3,-4(fp)
 8004ae8:	d8c00615 	stw	r3,24(sp)
 8004aec:	d8000515 	stw	zero,20(sp)
 8004af0:	e0c00517 	ldw	r3,20(fp)
 8004af4:	d8c00415 	stw	r3,16(sp)
 8004af8:	e0c00317 	ldw	r3,12(fp)
 8004afc:	d8c00315 	stw	r3,12(sp)
 8004b00:	e0c00217 	ldw	r3,8(fp)
 8004b04:	d8c00215 	stw	r3,8(sp)
 8004b08:	e0c00417 	ldw	r3,16(fp)
 8004b0c:	d8c00115 	stw	r3,4(sp)
 8004b10:	d8800015 	stw	r2,0(sp)
 8004b14:	000f883a 	mov	r7,zero
 8004b18:	e1bffd17 	ldw	r6,-12(fp)
 8004b1c:	e17ffc17 	ldw	r5,-16(fp)
 8004b20:	e13ffb17 	ldw	r4,-20(fp)
 8004b24:	8004e6c0 	call	8004e6c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 8004b28:	0001883a 	nop
 8004b2c:	e037883a 	mov	sp,fp
 8004b30:	dfc00117 	ldw	ra,4(sp)
 8004b34:	df000017 	ldw	fp,0(sp)
 8004b38:	dec00204 	addi	sp,sp,8
 8004b3c:	f800283a 	ret

08004b40 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 8004b40:	defffb04 	addi	sp,sp,-20
 8004b44:	df000415 	stw	fp,16(sp)
 8004b48:	df000404 	addi	fp,sp,16
 8004b4c:	e13ffc15 	stw	r4,-16(fp)
 8004b50:	e17ffd15 	stw	r5,-12(fp)
 8004b54:	e1bffe15 	stw	r6,-8(fp)
 8004b58:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 8004b5c:	e0bffc17 	ldw	r2,-16(fp)
 8004b60:	e0fffd17 	ldw	r3,-12(fp)
 8004b64:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 8004b68:	e0bffc17 	ldw	r2,-16(fp)
 8004b6c:	e0ffff17 	ldw	r3,-4(fp)
 8004b70:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 8004b74:	e0bffc17 	ldw	r2,-16(fp)
 8004b78:	e0fffe17 	ldw	r3,-8(fp)
 8004b7c:	10c00b15 	stw	r3,44(r2)
}
 8004b80:	0001883a 	nop
 8004b84:	e037883a 	mov	sp,fp
 8004b88:	df000017 	ldw	fp,0(sp)
 8004b8c:	dec00104 	addi	sp,sp,4
 8004b90:	f800283a 	ret

08004b94 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 8004b94:	defffd04 	addi	sp,sp,-12
 8004b98:	df000215 	stw	fp,8(sp)
 8004b9c:	df000204 	addi	fp,sp,8
 8004ba0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8004ba4:	e0bfff17 	ldw	r2,-4(fp)
 8004ba8:	10800317 	ldw	r2,12(r2)
 8004bac:	10800404 	addi	r2,r2,16
 8004bb0:	10800037 	ldwio	r2,0(r2)
 8004bb4:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 8004bb8:	e0bffe17 	ldw	r2,-8(fp)
 8004bbc:	10800814 	ori	r2,r2,32
 8004bc0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8004bc4:	e0bfff17 	ldw	r2,-4(fp)
 8004bc8:	10800317 	ldw	r2,12(r2)
 8004bcc:	10800404 	addi	r2,r2,16
 8004bd0:	e0fffe17 	ldw	r3,-8(fp)
 8004bd4:	10c00035 	stwio	r3,0(r2)
}
 8004bd8:	0001883a 	nop
 8004bdc:	e037883a 	mov	sp,fp
 8004be0:	df000017 	ldw	fp,0(sp)
 8004be4:	dec00104 	addi	sp,sp,4
 8004be8:	f800283a 	ret

08004bec <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 8004bec:	defffd04 	addi	sp,sp,-12
 8004bf0:	df000215 	stw	fp,8(sp)
 8004bf4:	df000204 	addi	fp,sp,8
 8004bf8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8004bfc:	e0bfff17 	ldw	r2,-4(fp)
 8004c00:	10800317 	ldw	r2,12(r2)
 8004c04:	10800404 	addi	r2,r2,16
 8004c08:	10800037 	ldwio	r2,0(r2)
 8004c0c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 8004c10:	e0fffe17 	ldw	r3,-8(fp)
 8004c14:	00bff7c4 	movi	r2,-33
 8004c18:	1884703a 	and	r2,r3,r2
 8004c1c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8004c20:	e0bfff17 	ldw	r2,-4(fp)
 8004c24:	10800317 	ldw	r2,12(r2)
 8004c28:	10800404 	addi	r2,r2,16
 8004c2c:	e0fffe17 	ldw	r3,-8(fp)
 8004c30:	10c00035 	stwio	r3,0(r2)
}
 8004c34:	0001883a 	nop
 8004c38:	e037883a 	mov	sp,fp
 8004c3c:	df000017 	ldw	fp,0(sp)
 8004c40:	dec00104 	addi	sp,sp,4
 8004c44:	f800283a 	ret

08004c48 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 8004c48:	defffe04 	addi	sp,sp,-8
 8004c4c:	df000115 	stw	fp,4(sp)
 8004c50:	df000104 	addi	fp,sp,4
 8004c54:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 8004c58:	e0bfff17 	ldw	r2,-4(fp)
 8004c5c:	10800784 	addi	r2,r2,30
 8004c60:	10800023 	ldbuio	r2,0(r2)
 8004c64:	10803fcc 	andi	r2,r2,255
 8004c68:	10801fcc 	andi	r2,r2,127
 8004c6c:	10000226 	beq	r2,zero,8004c78 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 8004c70:	00bffec4 	movi	r2,-5
 8004c74:	00000906 	br	8004c9c <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 8004c78:	e0bfff17 	ldw	r2,-4(fp)
 8004c7c:	108007c4 	addi	r2,r2,31
 8004c80:	10800023 	ldbuio	r2,0(r2)
 8004c84:	10803fcc 	andi	r2,r2,255
 8004c88:	1080200c 	andi	r2,r2,128
 8004c8c:	10000226 	beq	r2,zero,8004c98 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 8004c90:	00bfe244 	movi	r2,-119
 8004c94:	00000106 	br	8004c9c <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 8004c98:	0005883a 	mov	r2,zero
}
 8004c9c:	e037883a 	mov	sp,fp
 8004ca0:	df000017 	ldw	fp,0(sp)
 8004ca4:	dec00104 	addi	sp,sp,4
 8004ca8:	f800283a 	ret

08004cac <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 8004cac:	defffc04 	addi	sp,sp,-16
 8004cb0:	dfc00315 	stw	ra,12(sp)
 8004cb4:	df000215 	stw	fp,8(sp)
 8004cb8:	df000204 	addi	fp,sp,8
 8004cbc:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 8004cc0:	d1600b04 	addi	r5,gp,-32724
 8004cc4:	e13fff17 	ldw	r4,-4(fp)
 8004cc8:	80060680 	call	8006068 <alt_find_dev>
 8004ccc:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 8004cd0:	e0bffe17 	ldw	r2,-8(fp)
 8004cd4:	1000041e 	bne	r2,zero,8004ce8 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 8004cd8:	80045f40 	call	80045f4 <alt_get_errno>
 8004cdc:	1007883a 	mov	r3,r2
 8004ce0:	008004c4 	movi	r2,19
 8004ce4:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8004ce8:	e0bffe17 	ldw	r2,-8(fp)
}
 8004cec:	e037883a 	mov	sp,fp
 8004cf0:	dfc00117 	ldw	ra,4(sp)
 8004cf4:	df000017 	ldw	fp,0(sp)
 8004cf8:	dec00204 	addi	sp,sp,8
 8004cfc:	f800283a 	ret

08004d00 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 8004d00:	defff104 	addi	sp,sp,-60
 8004d04:	dfc00e15 	stw	ra,56(sp)
 8004d08:	df000d15 	stw	fp,52(sp)
 8004d0c:	df000d04 	addi	fp,sp,52
 8004d10:	e13ffa15 	stw	r4,-24(fp)
 8004d14:	e17ffb15 	stw	r5,-20(fp)
 8004d18:	e1bffc15 	stw	r6,-16(fp)
 8004d1c:	e1fffd15 	stw	r7,-12(fp)
 8004d20:	e0c00217 	ldw	r3,8(fp)
 8004d24:	e0800617 	ldw	r2,24(fp)
 8004d28:	e0fffe0d 	sth	r3,-8(fp)
 8004d2c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 8004d30:	e0bffe0b 	ldhu	r2,-8(fp)
 8004d34:	e0ffff03 	ldbu	r3,-4(fp)
 8004d38:	d8c00615 	stw	r3,24(sp)
 8004d3c:	d8000515 	stw	zero,20(sp)
 8004d40:	d8000415 	stw	zero,16(sp)
 8004d44:	e0c00517 	ldw	r3,20(fp)
 8004d48:	d8c00315 	stw	r3,12(sp)
 8004d4c:	e0c00417 	ldw	r3,16(fp)
 8004d50:	d8c00215 	stw	r3,8(sp)
 8004d54:	e0c00317 	ldw	r3,12(fp)
 8004d58:	d8c00115 	stw	r3,4(sp)
 8004d5c:	d8800015 	stw	r2,0(sp)
 8004d60:	e1fffd17 	ldw	r7,-12(fp)
 8004d64:	e1bffc17 	ldw	r6,-16(fp)
 8004d68:	e17ffb17 	ldw	r5,-20(fp)
 8004d6c:	e13ffa17 	ldw	r4,-24(fp)
 8004d70:	8004e6c0 	call	8004e6c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 8004d74:	0001883a 	nop
 8004d78:	e037883a 	mov	sp,fp
 8004d7c:	dfc00117 	ldw	ra,4(sp)
 8004d80:	df000017 	ldw	fp,0(sp)
 8004d84:	dec00204 	addi	sp,sp,8
 8004d88:	f800283a 	ret

08004d8c <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 8004d8c:	defffc04 	addi	sp,sp,-16
 8004d90:	df000315 	stw	fp,12(sp)
 8004d94:	df000304 	addi	fp,sp,12
 8004d98:	e13ffe15 	stw	r4,-8(fp)
 8004d9c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8004da0:	e0bffe17 	ldw	r2,-8(fp)
 8004da4:	10800317 	ldw	r2,12(r2)
 8004da8:	10800404 	addi	r2,r2,16
 8004dac:	10800037 	ldwio	r2,0(r2)
 8004db0:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 8004db4:	e0fffd17 	ldw	r3,-12(fp)
 8004db8:	00a00434 	movhi	r2,32784
 8004dbc:	10bfffc4 	addi	r2,r2,-1
 8004dc0:	1884703a 	and	r2,r3,r2
 8004dc4:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 8004dc8:	e0bfff17 	ldw	r2,-4(fp)
 8004dcc:	1004953a 	slli	r2,r2,20
 8004dd0:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 8004dd4:	e0bffd17 	ldw	r2,-12(fp)
 8004dd8:	1884b03a 	or	r2,r3,r2
 8004ddc:	10800134 	orhi	r2,r2,4
 8004de0:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8004de4:	e0bffe17 	ldw	r2,-8(fp)
 8004de8:	10800317 	ldw	r2,12(r2)
 8004dec:	10800404 	addi	r2,r2,16
 8004df0:	e0fffd17 	ldw	r3,-12(fp)
 8004df4:	10c00035 	stwio	r3,0(r2)
  
  return;
 8004df8:	0001883a 	nop
}
 8004dfc:	e037883a 	mov	sp,fp
 8004e00:	df000017 	ldw	fp,0(sp)
 8004e04:	dec00104 	addi	sp,sp,4
 8004e08:	f800283a 	ret

08004e0c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 8004e0c:	defffd04 	addi	sp,sp,-12
 8004e10:	df000215 	stw	fp,8(sp)
 8004e14:	df000204 	addi	fp,sp,8
 8004e18:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8004e1c:	e0bfff17 	ldw	r2,-4(fp)
 8004e20:	10800317 	ldw	r2,12(r2)
 8004e24:	10800404 	addi	r2,r2,16
 8004e28:	10800037 	ldwio	r2,0(r2)
 8004e2c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 8004e30:	e0fffe17 	ldw	r3,-8(fp)
 8004e34:	00bfff34 	movhi	r2,65532
 8004e38:	10bfffc4 	addi	r2,r2,-1
 8004e3c:	1884703a 	and	r2,r3,r2
 8004e40:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 8004e44:	e0bfff17 	ldw	r2,-4(fp)
 8004e48:	10800317 	ldw	r2,12(r2)
 8004e4c:	10800404 	addi	r2,r2,16
 8004e50:	e0fffe17 	ldw	r3,-8(fp)
 8004e54:	10c00035 	stwio	r3,0(r2)
  
  return;
 8004e58:	0001883a 	nop
}
 8004e5c:	e037883a 	mov	sp,fp
 8004e60:	df000017 	ldw	fp,0(sp)
 8004e64:	dec00104 	addi	sp,sp,4
 8004e68:	f800283a 	ret

08004e6c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 8004e6c:	defff804 	addi	sp,sp,-32
 8004e70:	dfc00715 	stw	ra,28(sp)
 8004e74:	df000615 	stw	fp,24(sp)
 8004e78:	df000604 	addi	fp,sp,24
 8004e7c:	e13ffa15 	stw	r4,-24(fp)
 8004e80:	e17ffb15 	stw	r5,-20(fp)
 8004e84:	e1bffc15 	stw	r6,-16(fp)
 8004e88:	e1fffd15 	stw	r7,-12(fp)
 8004e8c:	e0c00217 	ldw	r3,8(fp)
 8004e90:	e0800817 	ldw	r2,32(fp)
 8004e94:	e0fffe0d 	sth	r3,-8(fp)
 8004e98:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 8004e9c:	e0bffb17 	ldw	r2,-20(fp)
 8004ea0:	108007c4 	addi	r2,r2,31
 8004ea4:	e0fffb17 	ldw	r3,-20(fp)
 8004ea8:	18c007c3 	ldbu	r3,31(r3)
 8004eac:	19003fcc 	andi	r4,r3,255
 8004eb0:	00ffdfc4 	movi	r3,-129
 8004eb4:	20c6703a 	and	r3,r4,r3
 8004eb8:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 8004ebc:	e0bffa17 	ldw	r2,-24(fp)
 8004ec0:	e0fffc17 	ldw	r3,-16(fp)
 8004ec4:	19403fcc 	andi	r5,r3,255
 8004ec8:	10c00003 	ldbu	r3,0(r2)
 8004ecc:	1806703a 	and	r3,r3,zero
 8004ed0:	1809883a 	mov	r4,r3
 8004ed4:	2807883a 	mov	r3,r5
 8004ed8:	20c6b03a 	or	r3,r4,r3
 8004edc:	10c00005 	stb	r3,0(r2)
 8004ee0:	e0fffc17 	ldw	r3,-16(fp)
 8004ee4:	1806d23a 	srli	r3,r3,8
 8004ee8:	19403fcc 	andi	r5,r3,255
 8004eec:	10c00043 	ldbu	r3,1(r2)
 8004ef0:	1806703a 	and	r3,r3,zero
 8004ef4:	1809883a 	mov	r4,r3
 8004ef8:	2807883a 	mov	r3,r5
 8004efc:	20c6b03a 	or	r3,r4,r3
 8004f00:	10c00045 	stb	r3,1(r2)
 8004f04:	e0fffc17 	ldw	r3,-16(fp)
 8004f08:	1806d43a 	srli	r3,r3,16
 8004f0c:	19403fcc 	andi	r5,r3,255
 8004f10:	10c00083 	ldbu	r3,2(r2)
 8004f14:	1806703a 	and	r3,r3,zero
 8004f18:	1809883a 	mov	r4,r3
 8004f1c:	2807883a 	mov	r3,r5
 8004f20:	20c6b03a 	or	r3,r4,r3
 8004f24:	10c00085 	stb	r3,2(r2)
 8004f28:	e0fffc17 	ldw	r3,-16(fp)
 8004f2c:	180ad63a 	srli	r5,r3,24
 8004f30:	10c000c3 	ldbu	r3,3(r2)
 8004f34:	1806703a 	and	r3,r3,zero
 8004f38:	1809883a 	mov	r4,r3
 8004f3c:	2807883a 	mov	r3,r5
 8004f40:	20c6b03a 	or	r3,r4,r3
 8004f44:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 8004f48:	e0bffa17 	ldw	r2,-24(fp)
 8004f4c:	e0fffd17 	ldw	r3,-12(fp)
 8004f50:	19403fcc 	andi	r5,r3,255
 8004f54:	10c00203 	ldbu	r3,8(r2)
 8004f58:	1806703a 	and	r3,r3,zero
 8004f5c:	1809883a 	mov	r4,r3
 8004f60:	2807883a 	mov	r3,r5
 8004f64:	20c6b03a 	or	r3,r4,r3
 8004f68:	10c00205 	stb	r3,8(r2)
 8004f6c:	e0fffd17 	ldw	r3,-12(fp)
 8004f70:	1806d23a 	srli	r3,r3,8
 8004f74:	19403fcc 	andi	r5,r3,255
 8004f78:	10c00243 	ldbu	r3,9(r2)
 8004f7c:	1806703a 	and	r3,r3,zero
 8004f80:	1809883a 	mov	r4,r3
 8004f84:	2807883a 	mov	r3,r5
 8004f88:	20c6b03a 	or	r3,r4,r3
 8004f8c:	10c00245 	stb	r3,9(r2)
 8004f90:	e0fffd17 	ldw	r3,-12(fp)
 8004f94:	1806d43a 	srli	r3,r3,16
 8004f98:	19403fcc 	andi	r5,r3,255
 8004f9c:	10c00283 	ldbu	r3,10(r2)
 8004fa0:	1806703a 	and	r3,r3,zero
 8004fa4:	1809883a 	mov	r4,r3
 8004fa8:	2807883a 	mov	r3,r5
 8004fac:	20c6b03a 	or	r3,r4,r3
 8004fb0:	10c00285 	stb	r3,10(r2)
 8004fb4:	e0fffd17 	ldw	r3,-12(fp)
 8004fb8:	180ad63a 	srli	r5,r3,24
 8004fbc:	10c002c3 	ldbu	r3,11(r2)
 8004fc0:	1806703a 	and	r3,r3,zero
 8004fc4:	1809883a 	mov	r4,r3
 8004fc8:	2807883a 	mov	r3,r5
 8004fcc:	20c6b03a 	or	r3,r4,r3
 8004fd0:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 8004fd4:	e0bffa17 	ldw	r2,-24(fp)
 8004fd8:	e0fffb17 	ldw	r3,-20(fp)
 8004fdc:	19403fcc 	andi	r5,r3,255
 8004fe0:	10c00403 	ldbu	r3,16(r2)
 8004fe4:	1806703a 	and	r3,r3,zero
 8004fe8:	1809883a 	mov	r4,r3
 8004fec:	2807883a 	mov	r3,r5
 8004ff0:	20c6b03a 	or	r3,r4,r3
 8004ff4:	10c00405 	stb	r3,16(r2)
 8004ff8:	e0fffb17 	ldw	r3,-20(fp)
 8004ffc:	1806d23a 	srli	r3,r3,8
 8005000:	19403fcc 	andi	r5,r3,255
 8005004:	10c00443 	ldbu	r3,17(r2)
 8005008:	1806703a 	and	r3,r3,zero
 800500c:	1809883a 	mov	r4,r3
 8005010:	2807883a 	mov	r3,r5
 8005014:	20c6b03a 	or	r3,r4,r3
 8005018:	10c00445 	stb	r3,17(r2)
 800501c:	e0fffb17 	ldw	r3,-20(fp)
 8005020:	1806d43a 	srli	r3,r3,16
 8005024:	19403fcc 	andi	r5,r3,255
 8005028:	10c00483 	ldbu	r3,18(r2)
 800502c:	1806703a 	and	r3,r3,zero
 8005030:	1809883a 	mov	r4,r3
 8005034:	2807883a 	mov	r3,r5
 8005038:	20c6b03a 	or	r3,r4,r3
 800503c:	10c00485 	stb	r3,18(r2)
 8005040:	e0fffb17 	ldw	r3,-20(fp)
 8005044:	180ad63a 	srli	r5,r3,24
 8005048:	10c004c3 	ldbu	r3,19(r2)
 800504c:	1806703a 	and	r3,r3,zero
 8005050:	1809883a 	mov	r4,r3
 8005054:	2807883a 	mov	r3,r5
 8005058:	20c6b03a 	or	r3,r4,r3
 800505c:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 8005060:	e0bffa17 	ldw	r2,-24(fp)
 8005064:	10c00103 	ldbu	r3,4(r2)
 8005068:	1806703a 	and	r3,r3,zero
 800506c:	10c00105 	stb	r3,4(r2)
 8005070:	10c00143 	ldbu	r3,5(r2)
 8005074:	1806703a 	and	r3,r3,zero
 8005078:	10c00145 	stb	r3,5(r2)
 800507c:	10c00183 	ldbu	r3,6(r2)
 8005080:	1806703a 	and	r3,r3,zero
 8005084:	10c00185 	stb	r3,6(r2)
 8005088:	10c001c3 	ldbu	r3,7(r2)
 800508c:	1806703a 	and	r3,r3,zero
 8005090:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 8005094:	e0bffa17 	ldw	r2,-24(fp)
 8005098:	10c00303 	ldbu	r3,12(r2)
 800509c:	1806703a 	and	r3,r3,zero
 80050a0:	10c00305 	stb	r3,12(r2)
 80050a4:	10c00343 	ldbu	r3,13(r2)
 80050a8:	1806703a 	and	r3,r3,zero
 80050ac:	10c00345 	stb	r3,13(r2)
 80050b0:	10c00383 	ldbu	r3,14(r2)
 80050b4:	1806703a 	and	r3,r3,zero
 80050b8:	10c00385 	stb	r3,14(r2)
 80050bc:	10c003c3 	ldbu	r3,15(r2)
 80050c0:	1806703a 	and	r3,r3,zero
 80050c4:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 80050c8:	e0bffa17 	ldw	r2,-24(fp)
 80050cc:	10c00503 	ldbu	r3,20(r2)
 80050d0:	1806703a 	and	r3,r3,zero
 80050d4:	10c00505 	stb	r3,20(r2)
 80050d8:	10c00543 	ldbu	r3,21(r2)
 80050dc:	1806703a 	and	r3,r3,zero
 80050e0:	10c00545 	stb	r3,21(r2)
 80050e4:	10c00583 	ldbu	r3,22(r2)
 80050e8:	1806703a 	and	r3,r3,zero
 80050ec:	10c00585 	stb	r3,22(r2)
 80050f0:	10c005c3 	ldbu	r3,23(r2)
 80050f4:	1806703a 	and	r3,r3,zero
 80050f8:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 80050fc:	e0bffa17 	ldw	r2,-24(fp)
 8005100:	e0fffe17 	ldw	r3,-8(fp)
 8005104:	19403fcc 	andi	r5,r3,255
 8005108:	10c00603 	ldbu	r3,24(r2)
 800510c:	1806703a 	and	r3,r3,zero
 8005110:	1809883a 	mov	r4,r3
 8005114:	2807883a 	mov	r3,r5
 8005118:	20c6b03a 	or	r3,r4,r3
 800511c:	10c00605 	stb	r3,24(r2)
 8005120:	e0fffe17 	ldw	r3,-8(fp)
 8005124:	1806d23a 	srli	r3,r3,8
 8005128:	19403fcc 	andi	r5,r3,255
 800512c:	10c00643 	ldbu	r3,25(r2)
 8005130:	1806703a 	and	r3,r3,zero
 8005134:	1809883a 	mov	r4,r3
 8005138:	2807883a 	mov	r3,r5
 800513c:	20c6b03a 	or	r3,r4,r3
 8005140:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 8005144:	e0bffa17 	ldw	r2,-24(fp)
 8005148:	10c00703 	ldbu	r3,28(r2)
 800514c:	1806703a 	and	r3,r3,zero
 8005150:	10c00705 	stb	r3,28(r2)
 8005154:	10c00743 	ldbu	r3,29(r2)
 8005158:	1806703a 	and	r3,r3,zero
 800515c:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 8005160:	e0bffa17 	ldw	r2,-24(fp)
 8005164:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 8005168:	e0800617 	ldw	r2,24(fp)
 800516c:	1007883a 	mov	r3,r2
 8005170:	e0bffa17 	ldw	r2,-24(fp)
 8005174:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 8005178:	e0800717 	ldw	r2,28(fp)
 800517c:	1007883a 	mov	r3,r2
 8005180:	e0bffa17 	ldw	r2,-24(fp)
 8005184:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 8005188:	e0800317 	ldw	r2,12(fp)
 800518c:	10000226 	beq	r2,zero,8005198 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 8005190:	00bfe044 	movi	r2,-127
 8005194:	00000106 	br	800519c <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 8005198:	00bfe004 	movi	r2,-128
 800519c:	e0c00417 	ldw	r3,16(fp)
 80051a0:	18000226 	beq	r3,zero,80051ac <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 80051a4:	00c00084 	movi	r3,2
 80051a8:	00000106 	br	80051b0 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 80051ac:	0007883a 	mov	r3,zero
 80051b0:	10c4b03a 	or	r2,r2,r3
 80051b4:	1007883a 	mov	r3,r2
 80051b8:	e0800517 	ldw	r2,20(fp)
 80051bc:	10000226 	beq	r2,zero,80051c8 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 80051c0:	00800104 	movi	r2,4
 80051c4:	00000106 	br	80051cc <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 80051c8:	0005883a 	mov	r2,zero
 80051cc:	1884b03a 	or	r2,r3,r2
 80051d0:	1007883a 	mov	r3,r2
 80051d4:	e0bfff03 	ldbu	r2,-4(fp)
 80051d8:	10000426 	beq	r2,zero,80051ec <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 80051dc:	e0bfff03 	ldbu	r2,-4(fp)
 80051e0:	108003cc 	andi	r2,r2,15
 80051e4:	100490fa 	slli	r2,r2,3
 80051e8:	00000106 	br	80051f0 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 80051ec:	0005883a 	mov	r2,zero
 80051f0:	1884b03a 	or	r2,r3,r2
 80051f4:	1007883a 	mov	r3,r2
 80051f8:	e0bffa17 	ldw	r2,-24(fp)
 80051fc:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 8005200:	01400804 	movi	r5,32
 8005204:	e13ffa17 	ldw	r4,-24(fp)
 8005208:	8005e800 	call	8005e80 <alt_dcache_flush>
}
 800520c:	0001883a 	nop
 8005210:	e037883a 	mov	sp,fp
 8005214:	dfc00117 	ldw	ra,4(sp)
 8005218:	df000017 	ldw	fp,0(sp)
 800521c:	dec00204 	addi	sp,sp,8
 8005220:	f800283a 	ret

08005224 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 8005224:	defff904 	addi	sp,sp,-28
 8005228:	dfc00615 	stw	ra,24(sp)
 800522c:	df000515 	stw	fp,20(sp)
 8005230:	df000504 	addi	fp,sp,20
 8005234:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 8005238:	e0bfff17 	ldw	r2,-4(fp)
 800523c:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 8005240:	e0bffb17 	ldw	r2,-20(fp)
 8005244:	10800317 	ldw	r2,12(r2)
 8005248:	10800404 	addi	r2,r2,16
 800524c:	e0fffb17 	ldw	r3,-20(fp)
 8005250:	18c00317 	ldw	r3,12(r3)
 8005254:	18c00404 	addi	r3,r3,16
 8005258:	18c00037 	ldwio	r3,0(r3)
 800525c:	18e00034 	orhi	r3,r3,32768
 8005260:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 8005264:	e0bffb17 	ldw	r2,-20(fp)
 8005268:	10800317 	ldw	r2,12(r2)
 800526c:	10800404 	addi	r2,r2,16
 8005270:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 8005274:	e0bffb17 	ldw	r2,-20(fp)
 8005278:	10800917 	ldw	r2,36(r2)
 800527c:	10001226 	beq	r2,zero,80052c8 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005280:	0005303a 	rdctl	r2,status
 8005284:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005288:	e0fffd17 	ldw	r3,-12(fp)
 800528c:	00bfff84 	movi	r2,-2
 8005290:	1884703a 	and	r2,r3,r2
 8005294:	1001703a 	wrctl	status,r2
  
  return context;
 8005298:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 800529c:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 80052a0:	e0bffb17 	ldw	r2,-20(fp)
 80052a4:	10800917 	ldw	r2,36(r2)
 80052a8:	e0fffb17 	ldw	r3,-20(fp)
 80052ac:	18c00a17 	ldw	r3,40(r3)
 80052b0:	1809883a 	mov	r4,r3
 80052b4:	103ee83a 	callr	r2
 80052b8:	e0bffc17 	ldw	r2,-16(fp)
 80052bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80052c0:	e0bffe17 	ldw	r2,-8(fp)
 80052c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 80052c8:	0001883a 	nop
 80052cc:	e037883a 	mov	sp,fp
 80052d0:	dfc00117 	ldw	ra,4(sp)
 80052d4:	df000017 	ldw	fp,0(sp)
 80052d8:	dec00204 	addi	sp,sp,8
 80052dc:	f800283a 	ret

080052e0 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 80052e0:	defffa04 	addi	sp,sp,-24
 80052e4:	dfc00515 	stw	ra,20(sp)
 80052e8:	df000415 	stw	fp,16(sp)
 80052ec:	df000404 	addi	fp,sp,16
 80052f0:	e13ffd15 	stw	r4,-12(fp)
 80052f4:	e17ffe15 	stw	r5,-8(fp)
 80052f8:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 80052fc:	e0bffd17 	ldw	r2,-12(fp)
 8005300:	10800317 	ldw	r2,12(r2)
 8005304:	10800404 	addi	r2,r2,16
 8005308:	00c00074 	movhi	r3,1
 800530c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 8005310:	e0bffd17 	ldw	r2,-12(fp)
 8005314:	10800317 	ldw	r2,12(r2)
 8005318:	10800404 	addi	r2,r2,16
 800531c:	00c00074 	movhi	r3,1
 8005320:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 8005324:	e0bffd17 	ldw	r2,-12(fp)
 8005328:	10800317 	ldw	r2,12(r2)
 800532c:	10800404 	addi	r2,r2,16
 8005330:	0007883a 	mov	r3,zero
 8005334:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 8005338:	e0bffd17 	ldw	r2,-12(fp)
 800533c:	10800317 	ldw	r2,12(r2)
 8005340:	00c03fc4 	movi	r3,255
 8005344:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 8005348:	d1600b04 	addi	r5,gp,-32724
 800534c:	e13ffd17 	ldw	r4,-12(fp)
 8005350:	8005f040 	call	8005f04 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 8005354:	d8000015 	stw	zero,0(sp)
 8005358:	e1fffd17 	ldw	r7,-12(fp)
 800535c:	01820034 	movhi	r6,2048
 8005360:	31948904 	addi	r6,r6,21028
 8005364:	e17fff17 	ldw	r5,-4(fp)
 8005368:	e13ffe17 	ldw	r4,-8(fp)
 800536c:	80061180 	call	8006118 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 8005370:	0001883a 	nop
 8005374:	e037883a 	mov	sp,fp
 8005378:	dfc00117 	ldw	ra,4(sp)
 800537c:	df000017 	ldw	fp,0(sp)
 8005380:	dec00204 	addi	sp,sp,8
 8005384:	f800283a 	ret

08005388 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8005388:	defffa04 	addi	sp,sp,-24
 800538c:	dfc00515 	stw	ra,20(sp)
 8005390:	df000415 	stw	fp,16(sp)
 8005394:	df000404 	addi	fp,sp,16
 8005398:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800539c:	0007883a 	mov	r3,zero
 80053a0:	e0bfff17 	ldw	r2,-4(fp)
 80053a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 80053a8:	e0bfff17 	ldw	r2,-4(fp)
 80053ac:	10800104 	addi	r2,r2,4
 80053b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80053b4:	0005303a 	rdctl	r2,status
 80053b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80053bc:	e0fffd17 	ldw	r3,-12(fp)
 80053c0:	00bfff84 	movi	r2,-2
 80053c4:	1884703a 	and	r2,r3,r2
 80053c8:	1001703a 	wrctl	status,r2
  
  return context;
 80053cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 80053d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 80053d4:	80068380 	call	8006838 <alt_tick>
 80053d8:	e0bffc17 	ldw	r2,-16(fp)
 80053dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80053e0:	e0bffe17 	ldw	r2,-8(fp)
 80053e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 80053e8:	0001883a 	nop
 80053ec:	e037883a 	mov	sp,fp
 80053f0:	dfc00117 	ldw	ra,4(sp)
 80053f4:	df000017 	ldw	fp,0(sp)
 80053f8:	dec00204 	addi	sp,sp,8
 80053fc:	f800283a 	ret

08005400 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8005400:	defff804 	addi	sp,sp,-32
 8005404:	dfc00715 	stw	ra,28(sp)
 8005408:	df000615 	stw	fp,24(sp)
 800540c:	df000604 	addi	fp,sp,24
 8005410:	e13ffc15 	stw	r4,-16(fp)
 8005414:	e17ffd15 	stw	r5,-12(fp)
 8005418:	e1bffe15 	stw	r6,-8(fp)
 800541c:	e1ffff15 	stw	r7,-4(fp)
 8005420:	e0bfff17 	ldw	r2,-4(fp)
 8005424:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8005428:	d0a72a17 	ldw	r2,-25432(gp)
 800542c:	1000021e 	bne	r2,zero,8005438 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8005430:	e0bffb17 	ldw	r2,-20(fp)
 8005434:	d0a72a15 	stw	r2,-25432(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8005438:	e0bffc17 	ldw	r2,-16(fp)
 800543c:	10800104 	addi	r2,r2,4
 8005440:	00c001c4 	movi	r3,7
 8005444:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8005448:	d8000015 	stw	zero,0(sp)
 800544c:	e1fffc17 	ldw	r7,-16(fp)
 8005450:	01820034 	movhi	r6,2048
 8005454:	3194e204 	addi	r6,r6,21384
 8005458:	e17ffe17 	ldw	r5,-8(fp)
 800545c:	e13ffd17 	ldw	r4,-12(fp)
 8005460:	80061180 	call	8006118 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8005464:	0001883a 	nop
 8005468:	e037883a 	mov	sp,fp
 800546c:	dfc00117 	ldw	ra,4(sp)
 8005470:	df000017 	ldw	fp,0(sp)
 8005474:	dec00204 	addi	sp,sp,8
 8005478:	f800283a 	ret

0800547c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800547c:	defffa04 	addi	sp,sp,-24
 8005480:	dfc00515 	stw	ra,20(sp)
 8005484:	df000415 	stw	fp,16(sp)
 8005488:	df000404 	addi	fp,sp,16
 800548c:	e13ffd15 	stw	r4,-12(fp)
 8005490:	e17ffe15 	stw	r5,-8(fp)
 8005494:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8005498:	e0bffd17 	ldw	r2,-12(fp)
 800549c:	10800017 	ldw	r2,0(r2)
 80054a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 80054a4:	e0bffc17 	ldw	r2,-16(fp)
 80054a8:	10c00a04 	addi	r3,r2,40
 80054ac:	e0bffd17 	ldw	r2,-12(fp)
 80054b0:	10800217 	ldw	r2,8(r2)
 80054b4:	100f883a 	mov	r7,r2
 80054b8:	e1bfff17 	ldw	r6,-4(fp)
 80054bc:	e17ffe17 	ldw	r5,-8(fp)
 80054c0:	1809883a 	mov	r4,r3
 80054c4:	80059900 	call	8005990 <altera_avalon_uart_read>
      fd->fd_flags);
}
 80054c8:	e037883a 	mov	sp,fp
 80054cc:	dfc00117 	ldw	ra,4(sp)
 80054d0:	df000017 	ldw	fp,0(sp)
 80054d4:	dec00204 	addi	sp,sp,8
 80054d8:	f800283a 	ret

080054dc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80054dc:	defffa04 	addi	sp,sp,-24
 80054e0:	dfc00515 	stw	ra,20(sp)
 80054e4:	df000415 	stw	fp,16(sp)
 80054e8:	df000404 	addi	fp,sp,16
 80054ec:	e13ffd15 	stw	r4,-12(fp)
 80054f0:	e17ffe15 	stw	r5,-8(fp)
 80054f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 80054f8:	e0bffd17 	ldw	r2,-12(fp)
 80054fc:	10800017 	ldw	r2,0(r2)
 8005500:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 8005504:	e0bffc17 	ldw	r2,-16(fp)
 8005508:	10c00a04 	addi	r3,r2,40
 800550c:	e0bffd17 	ldw	r2,-12(fp)
 8005510:	10800217 	ldw	r2,8(r2)
 8005514:	100f883a 	mov	r7,r2
 8005518:	e1bfff17 	ldw	r6,-4(fp)
 800551c:	e17ffe17 	ldw	r5,-8(fp)
 8005520:	1809883a 	mov	r4,r3
 8005524:	8005ba80 	call	8005ba8 <altera_avalon_uart_write>
      fd->fd_flags);
}
 8005528:	e037883a 	mov	sp,fp
 800552c:	dfc00117 	ldw	ra,4(sp)
 8005530:	df000017 	ldw	fp,0(sp)
 8005534:	dec00204 	addi	sp,sp,8
 8005538:	f800283a 	ret

0800553c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 800553c:	defffc04 	addi	sp,sp,-16
 8005540:	dfc00315 	stw	ra,12(sp)
 8005544:	df000215 	stw	fp,8(sp)
 8005548:	df000204 	addi	fp,sp,8
 800554c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 8005550:	e0bfff17 	ldw	r2,-4(fp)
 8005554:	10800017 	ldw	r2,0(r2)
 8005558:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 800555c:	e0bffe17 	ldw	r2,-8(fp)
 8005560:	10c00a04 	addi	r3,r2,40
 8005564:	e0bfff17 	ldw	r2,-4(fp)
 8005568:	10800217 	ldw	r2,8(r2)
 800556c:	100b883a 	mov	r5,r2
 8005570:	1809883a 	mov	r4,r3
 8005574:	80059000 	call	8005900 <altera_avalon_uart_close>
}
 8005578:	e037883a 	mov	sp,fp
 800557c:	dfc00117 	ldw	ra,4(sp)
 8005580:	df000017 	ldw	fp,0(sp)
 8005584:	dec00204 	addi	sp,sp,8
 8005588:	f800283a 	ret

0800558c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 800558c:	defff804 	addi	sp,sp,-32
 8005590:	dfc00715 	stw	ra,28(sp)
 8005594:	df000615 	stw	fp,24(sp)
 8005598:	df000604 	addi	fp,sp,24
 800559c:	e13ffd15 	stw	r4,-12(fp)
 80055a0:	e17ffe15 	stw	r5,-8(fp)
 80055a4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 80055a8:	e0bffd17 	ldw	r2,-12(fp)
 80055ac:	10800017 	ldw	r2,0(r2)
 80055b0:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80055b4:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 80055b8:	1000041e 	bne	r2,zero,80055cc <altera_avalon_uart_init+0x40>
 80055bc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 80055c0:	1000021e 	bne	r2,zero,80055cc <altera_avalon_uart_init+0x40>
 80055c4:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 80055c8:	10000226 	beq	r2,zero,80055d4 <altera_avalon_uart_init+0x48>
 80055cc:	00800044 	movi	r2,1
 80055d0:	00000106 	br	80055d8 <altera_avalon_uart_init+0x4c>
 80055d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 80055d8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 80055dc:	e0bffc17 	ldw	r2,-16(fp)
 80055e0:	10000f1e 	bne	r2,zero,8005620 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 80055e4:	e0bffd17 	ldw	r2,-12(fp)
 80055e8:	00c32004 	movi	r3,3200
 80055ec:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 80055f0:	e0bffb17 	ldw	r2,-20(fp)
 80055f4:	10800304 	addi	r2,r2,12
 80055f8:	e0fffd17 	ldw	r3,-12(fp)
 80055fc:	18c00117 	ldw	r3,4(r3)
 8005600:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 8005604:	d8000015 	stw	zero,0(sp)
 8005608:	e1fffd17 	ldw	r7,-12(fp)
 800560c:	01820034 	movhi	r6,2048
 8005610:	31958e04 	addi	r6,r6,22072
 8005614:	e17fff17 	ldw	r5,-4(fp)
 8005618:	e13ffe17 	ldw	r4,-8(fp)
 800561c:	80061180 	call	8006118 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 8005620:	0001883a 	nop
 8005624:	e037883a 	mov	sp,fp
 8005628:	dfc00117 	ldw	ra,4(sp)
 800562c:	df000017 	ldw	fp,0(sp)
 8005630:	dec00204 	addi	sp,sp,8
 8005634:	f800283a 	ret

08005638 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 8005638:	defffa04 	addi	sp,sp,-24
 800563c:	dfc00515 	stw	ra,20(sp)
 8005640:	df000415 	stw	fp,16(sp)
 8005644:	df000404 	addi	fp,sp,16
 8005648:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 800564c:	e0bfff17 	ldw	r2,-4(fp)
 8005650:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 8005654:	e0bffc17 	ldw	r2,-16(fp)
 8005658:	10800017 	ldw	r2,0(r2)
 800565c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 8005660:	e0bffd17 	ldw	r2,-12(fp)
 8005664:	10800204 	addi	r2,r2,8
 8005668:	10800037 	ldwio	r2,0(r2)
 800566c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 8005670:	e0bffd17 	ldw	r2,-12(fp)
 8005674:	10800204 	addi	r2,r2,8
 8005678:	0007883a 	mov	r3,zero
 800567c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 8005680:	e0bffd17 	ldw	r2,-12(fp)
 8005684:	10800204 	addi	r2,r2,8
 8005688:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 800568c:	e0bffe17 	ldw	r2,-8(fp)
 8005690:	1080200c 	andi	r2,r2,128
 8005694:	10000326 	beq	r2,zero,80056a4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 8005698:	e17ffe17 	ldw	r5,-8(fp)
 800569c:	e13ffc17 	ldw	r4,-16(fp)
 80056a0:	80056d40 	call	80056d4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 80056a4:	e0bffe17 	ldw	r2,-8(fp)
 80056a8:	1081100c 	andi	r2,r2,1088
 80056ac:	10000326 	beq	r2,zero,80056bc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 80056b0:	e17ffe17 	ldw	r5,-8(fp)
 80056b4:	e13ffc17 	ldw	r4,-16(fp)
 80056b8:	80057b80 	call	80057b8 <altera_avalon_uart_txirq>
  }
  

}
 80056bc:	0001883a 	nop
 80056c0:	e037883a 	mov	sp,fp
 80056c4:	dfc00117 	ldw	ra,4(sp)
 80056c8:	df000017 	ldw	fp,0(sp)
 80056cc:	dec00204 	addi	sp,sp,8
 80056d0:	f800283a 	ret

080056d4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 80056d4:	defffc04 	addi	sp,sp,-16
 80056d8:	df000315 	stw	fp,12(sp)
 80056dc:	df000304 	addi	fp,sp,12
 80056e0:	e13ffe15 	stw	r4,-8(fp)
 80056e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 80056e8:	e0bfff17 	ldw	r2,-4(fp)
 80056ec:	108000cc 	andi	r2,r2,3
 80056f0:	10002c1e 	bne	r2,zero,80057a4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 80056f4:	e0bffe17 	ldw	r2,-8(fp)
 80056f8:	10800317 	ldw	r2,12(r2)
 80056fc:	e0bffe17 	ldw	r2,-8(fp)
 8005700:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8005704:	e0bffe17 	ldw	r2,-8(fp)
 8005708:	10800317 	ldw	r2,12(r2)
 800570c:	10800044 	addi	r2,r2,1
 8005710:	10800fcc 	andi	r2,r2,63
 8005714:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 8005718:	e0bffe17 	ldw	r2,-8(fp)
 800571c:	10800317 	ldw	r2,12(r2)
 8005720:	e0fffe17 	ldw	r3,-8(fp)
 8005724:	18c00017 	ldw	r3,0(r3)
 8005728:	18c00037 	ldwio	r3,0(r3)
 800572c:	1809883a 	mov	r4,r3
 8005730:	e0fffe17 	ldw	r3,-8(fp)
 8005734:	1885883a 	add	r2,r3,r2
 8005738:	10800704 	addi	r2,r2,28
 800573c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 8005740:	e0bffe17 	ldw	r2,-8(fp)
 8005744:	e0fffd17 	ldw	r3,-12(fp)
 8005748:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 800574c:	e0bffe17 	ldw	r2,-8(fp)
 8005750:	10800317 	ldw	r2,12(r2)
 8005754:	10800044 	addi	r2,r2,1
 8005758:	10800fcc 	andi	r2,r2,63
 800575c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 8005760:	e0bffe17 	ldw	r2,-8(fp)
 8005764:	10c00217 	ldw	r3,8(r2)
 8005768:	e0bffd17 	ldw	r2,-12(fp)
 800576c:	18800e1e 	bne	r3,r2,80057a8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8005770:	e0bffe17 	ldw	r2,-8(fp)
 8005774:	10c00117 	ldw	r3,4(r2)
 8005778:	00bfdfc4 	movi	r2,-129
 800577c:	1886703a 	and	r3,r3,r2
 8005780:	e0bffe17 	ldw	r2,-8(fp)
 8005784:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 8005788:	e0bffe17 	ldw	r2,-8(fp)
 800578c:	10800017 	ldw	r2,0(r2)
 8005790:	10800304 	addi	r2,r2,12
 8005794:	e0fffe17 	ldw	r3,-8(fp)
 8005798:	18c00117 	ldw	r3,4(r3)
 800579c:	10c00035 	stwio	r3,0(r2)
 80057a0:	00000106 	br	80057a8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 80057a4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 80057a8:	e037883a 	mov	sp,fp
 80057ac:	df000017 	ldw	fp,0(sp)
 80057b0:	dec00104 	addi	sp,sp,4
 80057b4:	f800283a 	ret

080057b8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 80057b8:	defffb04 	addi	sp,sp,-20
 80057bc:	df000415 	stw	fp,16(sp)
 80057c0:	df000404 	addi	fp,sp,16
 80057c4:	e13ffc15 	stw	r4,-16(fp)
 80057c8:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 80057cc:	e0bffc17 	ldw	r2,-16(fp)
 80057d0:	10c00417 	ldw	r3,16(r2)
 80057d4:	e0bffc17 	ldw	r2,-16(fp)
 80057d8:	10800517 	ldw	r2,20(r2)
 80057dc:	18803226 	beq	r3,r2,80058a8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 80057e0:	e0bffc17 	ldw	r2,-16(fp)
 80057e4:	10800617 	ldw	r2,24(r2)
 80057e8:	1080008c 	andi	r2,r2,2
 80057ec:	10000326 	beq	r2,zero,80057fc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 80057f0:	e0bffd17 	ldw	r2,-12(fp)
 80057f4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 80057f8:	10001d26 	beq	r2,zero,8005870 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 80057fc:	e0bffc17 	ldw	r2,-16(fp)
 8005800:	10800417 	ldw	r2,16(r2)
 8005804:	e0bffc17 	ldw	r2,-16(fp)
 8005808:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 800580c:	e0bffc17 	ldw	r2,-16(fp)
 8005810:	10800017 	ldw	r2,0(r2)
 8005814:	10800104 	addi	r2,r2,4
 8005818:	e0fffc17 	ldw	r3,-16(fp)
 800581c:	18c00417 	ldw	r3,16(r3)
 8005820:	e13ffc17 	ldw	r4,-16(fp)
 8005824:	20c7883a 	add	r3,r4,r3
 8005828:	18c01704 	addi	r3,r3,92
 800582c:	18c00003 	ldbu	r3,0(r3)
 8005830:	18c03fcc 	andi	r3,r3,255
 8005834:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 8005838:	e0bffc17 	ldw	r2,-16(fp)
 800583c:	10800417 	ldw	r2,16(r2)
 8005840:	10800044 	addi	r2,r2,1
 8005844:	e0fffc17 	ldw	r3,-16(fp)
 8005848:	18800415 	stw	r2,16(r3)
 800584c:	10c00fcc 	andi	r3,r2,63
 8005850:	e0bffc17 	ldw	r2,-16(fp)
 8005854:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8005858:	e0bffc17 	ldw	r2,-16(fp)
 800585c:	10800117 	ldw	r2,4(r2)
 8005860:	10c01014 	ori	r3,r2,64
 8005864:	e0bffc17 	ldw	r2,-16(fp)
 8005868:	10c00115 	stw	r3,4(r2)
 800586c:	00000e06 	br	80058a8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 8005870:	e0bffc17 	ldw	r2,-16(fp)
 8005874:	10800017 	ldw	r2,0(r2)
 8005878:	10800204 	addi	r2,r2,8
 800587c:	10800037 	ldwio	r2,0(r2)
 8005880:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 8005884:	e0bffd17 	ldw	r2,-12(fp)
 8005888:	1082000c 	andi	r2,r2,2048
 800588c:	1000061e 	bne	r2,zero,80058a8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 8005890:	e0bffc17 	ldw	r2,-16(fp)
 8005894:	10c00117 	ldw	r3,4(r2)
 8005898:	00bfefc4 	movi	r2,-65
 800589c:	1886703a 	and	r3,r3,r2
 80058a0:	e0bffc17 	ldw	r2,-16(fp)
 80058a4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 80058a8:	e0bffc17 	ldw	r2,-16(fp)
 80058ac:	10c00417 	ldw	r3,16(r2)
 80058b0:	e0bffc17 	ldw	r2,-16(fp)
 80058b4:	10800517 	ldw	r2,20(r2)
 80058b8:	1880061e 	bne	r3,r2,80058d4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 80058bc:	e0bffc17 	ldw	r2,-16(fp)
 80058c0:	10c00117 	ldw	r3,4(r2)
 80058c4:	00beefc4 	movi	r2,-1089
 80058c8:	1886703a 	and	r3,r3,r2
 80058cc:	e0bffc17 	ldw	r2,-16(fp)
 80058d0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 80058d4:	e0bffc17 	ldw	r2,-16(fp)
 80058d8:	10800017 	ldw	r2,0(r2)
 80058dc:	10800304 	addi	r2,r2,12
 80058e0:	e0fffc17 	ldw	r3,-16(fp)
 80058e4:	18c00117 	ldw	r3,4(r3)
 80058e8:	10c00035 	stwio	r3,0(r2)
}
 80058ec:	0001883a 	nop
 80058f0:	e037883a 	mov	sp,fp
 80058f4:	df000017 	ldw	fp,0(sp)
 80058f8:	dec00104 	addi	sp,sp,4
 80058fc:	f800283a 	ret

08005900 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 8005900:	defffd04 	addi	sp,sp,-12
 8005904:	df000215 	stw	fp,8(sp)
 8005908:	df000204 	addi	fp,sp,8
 800590c:	e13ffe15 	stw	r4,-8(fp)
 8005910:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 8005914:	00000506 	br	800592c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8005918:	e0bfff17 	ldw	r2,-4(fp)
 800591c:	1090000c 	andi	r2,r2,16384
 8005920:	10000226 	beq	r2,zero,800592c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8005924:	00bffd44 	movi	r2,-11
 8005928:	00000606 	br	8005944 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 800592c:	e0bffe17 	ldw	r2,-8(fp)
 8005930:	10c00417 	ldw	r3,16(r2)
 8005934:	e0bffe17 	ldw	r2,-8(fp)
 8005938:	10800517 	ldw	r2,20(r2)
 800593c:	18bff61e 	bne	r3,r2,8005918 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8005940:	0005883a 	mov	r2,zero
}
 8005944:	e037883a 	mov	sp,fp
 8005948:	df000017 	ldw	fp,0(sp)
 800594c:	dec00104 	addi	sp,sp,4
 8005950:	f800283a 	ret

08005954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005954:	defffe04 	addi	sp,sp,-8
 8005958:	dfc00115 	stw	ra,4(sp)
 800595c:	df000015 	stw	fp,0(sp)
 8005960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005964:	d0a00917 	ldw	r2,-32732(gp)
 8005968:	10000326 	beq	r2,zero,8005978 <alt_get_errno+0x24>
 800596c:	d0a00917 	ldw	r2,-32732(gp)
 8005970:	103ee83a 	callr	r2
 8005974:	00000106 	br	800597c <alt_get_errno+0x28>
 8005978:	d0a72504 	addi	r2,gp,-25452
}
 800597c:	e037883a 	mov	sp,fp
 8005980:	dfc00117 	ldw	ra,4(sp)
 8005984:	df000017 	ldw	fp,0(sp)
 8005988:	dec00204 	addi	sp,sp,8
 800598c:	f800283a 	ret

08005990 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 8005990:	defff204 	addi	sp,sp,-56
 8005994:	dfc00d15 	stw	ra,52(sp)
 8005998:	df000c15 	stw	fp,48(sp)
 800599c:	df000c04 	addi	fp,sp,48
 80059a0:	e13ffc15 	stw	r4,-16(fp)
 80059a4:	e17ffd15 	stw	r5,-12(fp)
 80059a8:	e1bffe15 	stw	r6,-8(fp)
 80059ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 80059b0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 80059b4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 80059b8:	e0bfff17 	ldw	r2,-4(fp)
 80059bc:	1090000c 	andi	r2,r2,16384
 80059c0:	1005003a 	cmpeq	r2,r2,zero
 80059c4:	10803fcc 	andi	r2,r2,255
 80059c8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 80059cc:	00001306 	br	8005a1c <altera_avalon_uart_read+0x8c>
    {
      count++;
 80059d0:	e0bff517 	ldw	r2,-44(fp)
 80059d4:	10800044 	addi	r2,r2,1
 80059d8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 80059dc:	e0bffd17 	ldw	r2,-12(fp)
 80059e0:	10c00044 	addi	r3,r2,1
 80059e4:	e0fffd15 	stw	r3,-12(fp)
 80059e8:	e0fffc17 	ldw	r3,-16(fp)
 80059ec:	18c00217 	ldw	r3,8(r3)
 80059f0:	e13ffc17 	ldw	r4,-16(fp)
 80059f4:	20c7883a 	add	r3,r4,r3
 80059f8:	18c00704 	addi	r3,r3,28
 80059fc:	18c00003 	ldbu	r3,0(r3)
 8005a00:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 8005a04:	e0bffc17 	ldw	r2,-16(fp)
 8005a08:	10800217 	ldw	r2,8(r2)
 8005a0c:	10800044 	addi	r2,r2,1
 8005a10:	10c00fcc 	andi	r3,r2,63
 8005a14:	e0bffc17 	ldw	r2,-16(fp)
 8005a18:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 8005a1c:	e0fff517 	ldw	r3,-44(fp)
 8005a20:	e0bffe17 	ldw	r2,-8(fp)
 8005a24:	1880050e 	bge	r3,r2,8005a3c <altera_avalon_uart_read+0xac>
 8005a28:	e0bffc17 	ldw	r2,-16(fp)
 8005a2c:	10c00217 	ldw	r3,8(r2)
 8005a30:	e0bffc17 	ldw	r2,-16(fp)
 8005a34:	10800317 	ldw	r2,12(r2)
 8005a38:	18bfe51e 	bne	r3,r2,80059d0 <altera_avalon_uart_read+0x40>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 8005a3c:	e0bff517 	ldw	r2,-44(fp)
 8005a40:	1000251e 	bne	r2,zero,8005ad8 <altera_avalon_uart_read+0x148>
 8005a44:	e0bffc17 	ldw	r2,-16(fp)
 8005a48:	10c00217 	ldw	r3,8(r2)
 8005a4c:	e0bffc17 	ldw	r2,-16(fp)
 8005a50:	10800317 	ldw	r2,12(r2)
 8005a54:	1880201e 	bne	r3,r2,8005ad8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 8005a58:	e0bff617 	ldw	r2,-40(fp)
 8005a5c:	1000071e 	bne	r2,zero,8005a7c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 8005a60:	80059540 	call	8005954 <alt_get_errno>
 8005a64:	1007883a 	mov	r3,r2
 8005a68:	008002c4 	movi	r2,11
 8005a6c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 8005a70:	00800044 	movi	r2,1
 8005a74:	e0bff405 	stb	r2,-48(fp)
        break;
 8005a78:	00001b06 	br	8005ae8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005a7c:	0005303a 	rdctl	r2,status
 8005a80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005a84:	e0fff917 	ldw	r3,-28(fp)
 8005a88:	00bfff84 	movi	r2,-2
 8005a8c:	1884703a 	and	r2,r3,r2
 8005a90:	1001703a 	wrctl	status,r2
  
  return context;
 8005a94:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 8005a98:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8005a9c:	e0bffc17 	ldw	r2,-16(fp)
 8005aa0:	10800117 	ldw	r2,4(r2)
 8005aa4:	10c02014 	ori	r3,r2,128
 8005aa8:	e0bffc17 	ldw	r2,-16(fp)
 8005aac:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005ab0:	e0bffc17 	ldw	r2,-16(fp)
 8005ab4:	10800017 	ldw	r2,0(r2)
 8005ab8:	10800304 	addi	r2,r2,12
 8005abc:	e0fffc17 	ldw	r3,-16(fp)
 8005ac0:	18c00117 	ldw	r3,4(r3)
 8005ac4:	10c00035 	stwio	r3,0(r2)
 8005ac8:	e0bff817 	ldw	r2,-32(fp)
 8005acc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005ad0:	e0bffa17 	ldw	r2,-24(fp)
 8005ad4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 8005ad8:	e0bff517 	ldw	r2,-44(fp)
 8005adc:	1000021e 	bne	r2,zero,8005ae8 <altera_avalon_uart_read+0x158>
 8005ae0:	e0bffe17 	ldw	r2,-8(fp)
 8005ae4:	103fcd1e 	bne	r2,zero,8005a1c <altera_avalon_uart_read+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005ae8:	0005303a 	rdctl	r2,status
 8005aec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005af0:	e0fffb17 	ldw	r3,-20(fp)
 8005af4:	00bfff84 	movi	r2,-2
 8005af8:	1884703a 	and	r2,r3,r2
 8005afc:	1001703a 	wrctl	status,r2
  
  return context;
 8005b00:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 8005b04:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 8005b08:	e0bffc17 	ldw	r2,-16(fp)
 8005b0c:	10800117 	ldw	r2,4(r2)
 8005b10:	10c02014 	ori	r3,r2,128
 8005b14:	e0bffc17 	ldw	r2,-16(fp)
 8005b18:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005b1c:	e0bffc17 	ldw	r2,-16(fp)
 8005b20:	10800017 	ldw	r2,0(r2)
 8005b24:	10800304 	addi	r2,r2,12
 8005b28:	e0fffc17 	ldw	r3,-16(fp)
 8005b2c:	18c00117 	ldw	r3,4(r3)
 8005b30:	10c00035 	stwio	r3,0(r2)
 8005b34:	e0bff817 	ldw	r2,-32(fp)
 8005b38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005b3c:	e0bff717 	ldw	r2,-36(fp)
 8005b40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 8005b44:	e0bff403 	ldbu	r2,-48(fp)
 8005b48:	10000226 	beq	r2,zero,8005b54 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 8005b4c:	00bffd44 	movi	r2,-11
 8005b50:	00000106 	br	8005b58 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 8005b54:	e0bff517 	ldw	r2,-44(fp)
  }
}
 8005b58:	e037883a 	mov	sp,fp
 8005b5c:	dfc00117 	ldw	ra,4(sp)
 8005b60:	df000017 	ldw	fp,0(sp)
 8005b64:	dec00204 	addi	sp,sp,8
 8005b68:	f800283a 	ret

08005b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005b6c:	defffe04 	addi	sp,sp,-8
 8005b70:	dfc00115 	stw	ra,4(sp)
 8005b74:	df000015 	stw	fp,0(sp)
 8005b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005b7c:	d0a00917 	ldw	r2,-32732(gp)
 8005b80:	10000326 	beq	r2,zero,8005b90 <alt_get_errno+0x24>
 8005b84:	d0a00917 	ldw	r2,-32732(gp)
 8005b88:	103ee83a 	callr	r2
 8005b8c:	00000106 	br	8005b94 <alt_get_errno+0x28>
 8005b90:	d0a72504 	addi	r2,gp,-25452
}
 8005b94:	e037883a 	mov	sp,fp
 8005b98:	dfc00117 	ldw	ra,4(sp)
 8005b9c:	df000017 	ldw	fp,0(sp)
 8005ba0:	dec00204 	addi	sp,sp,8
 8005ba4:	f800283a 	ret

08005ba8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 8005ba8:	defff204 	addi	sp,sp,-56
 8005bac:	dfc00d15 	stw	ra,52(sp)
 8005bb0:	df000c15 	stw	fp,48(sp)
 8005bb4:	df000c04 	addi	fp,sp,48
 8005bb8:	e13ffc15 	stw	r4,-16(fp)
 8005bbc:	e17ffd15 	stw	r5,-12(fp)
 8005bc0:	e1bffe15 	stw	r6,-8(fp)
 8005bc4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 8005bc8:	e0bffe17 	ldw	r2,-8(fp)
 8005bcc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 8005bd0:	e0bfff17 	ldw	r2,-4(fp)
 8005bd4:	1090000c 	andi	r2,r2,16384
 8005bd8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8005bdc:	00003c06 	br	8005cd0 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 8005be0:	e0bffc17 	ldw	r2,-16(fp)
 8005be4:	10800517 	ldw	r2,20(r2)
 8005be8:	10800044 	addi	r2,r2,1
 8005bec:	10800fcc 	andi	r2,r2,63
 8005bf0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 8005bf4:	e0bffc17 	ldw	r2,-16(fp)
 8005bf8:	10c00417 	ldw	r3,16(r2)
 8005bfc:	e0bff717 	ldw	r2,-36(fp)
 8005c00:	1880221e 	bne	r3,r2,8005c8c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 8005c04:	e0bff517 	ldw	r2,-44(fp)
 8005c08:	10000526 	beq	r2,zero,8005c20 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 8005c0c:	8005b6c0 	call	8005b6c <alt_get_errno>
 8005c10:	1007883a 	mov	r3,r2
 8005c14:	008002c4 	movi	r2,11
 8005c18:	18800015 	stw	r2,0(r3)
        break;
 8005c1c:	00002e06 	br	8005cd8 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005c20:	0005303a 	rdctl	r2,status
 8005c24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005c28:	e0fff917 	ldw	r3,-28(fp)
 8005c2c:	00bfff84 	movi	r2,-2
 8005c30:	1884703a 	and	r2,r3,r2
 8005c34:	1001703a 	wrctl	status,r2
  
  return context;
 8005c38:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 8005c3c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8005c40:	e0bffc17 	ldw	r2,-16(fp)
 8005c44:	10800117 	ldw	r2,4(r2)
 8005c48:	10c11014 	ori	r3,r2,1088
 8005c4c:	e0bffc17 	ldw	r2,-16(fp)
 8005c50:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005c54:	e0bffc17 	ldw	r2,-16(fp)
 8005c58:	10800017 	ldw	r2,0(r2)
 8005c5c:	10800304 	addi	r2,r2,12
 8005c60:	e0fffc17 	ldw	r3,-16(fp)
 8005c64:	18c00117 	ldw	r3,4(r3)
 8005c68:	10c00035 	stwio	r3,0(r2)
 8005c6c:	e0bff817 	ldw	r2,-32(fp)
 8005c70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005c74:	e0bff617 	ldw	r2,-40(fp)
 8005c78:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 8005c7c:	e0bffc17 	ldw	r2,-16(fp)
 8005c80:	10c00417 	ldw	r3,16(r2)
 8005c84:	e0bff717 	ldw	r2,-36(fp)
 8005c88:	18bffc26 	beq	r3,r2,8005c7c <altera_avalon_uart_write+0xd4>
      }
    }

    count--;
 8005c8c:	e0bff417 	ldw	r2,-48(fp)
 8005c90:	10bfffc4 	addi	r2,r2,-1
 8005c94:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 8005c98:	e0bffc17 	ldw	r2,-16(fp)
 8005c9c:	10c00517 	ldw	r3,20(r2)
 8005ca0:	e0bffd17 	ldw	r2,-12(fp)
 8005ca4:	11000044 	addi	r4,r2,1
 8005ca8:	e13ffd15 	stw	r4,-12(fp)
 8005cac:	10800003 	ldbu	r2,0(r2)
 8005cb0:	1009883a 	mov	r4,r2
 8005cb4:	e0bffc17 	ldw	r2,-16(fp)
 8005cb8:	10c5883a 	add	r2,r2,r3
 8005cbc:	10801704 	addi	r2,r2,92
 8005cc0:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 8005cc4:	e0bffc17 	ldw	r2,-16(fp)
 8005cc8:	e0fff717 	ldw	r3,-36(fp)
 8005ccc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 8005cd0:	e0bff417 	ldw	r2,-48(fp)
 8005cd4:	103fc21e 	bne	r2,zero,8005be0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005cd8:	0005303a 	rdctl	r2,status
 8005cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005ce0:	e0fffb17 	ldw	r3,-20(fp)
 8005ce4:	00bfff84 	movi	r2,-2
 8005ce8:	1884703a 	and	r2,r3,r2
 8005cec:	1001703a 	wrctl	status,r2
  
  return context;
 8005cf0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 8005cf4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 8005cf8:	e0bffc17 	ldw	r2,-16(fp)
 8005cfc:	10800117 	ldw	r2,4(r2)
 8005d00:	10c11014 	ori	r3,r2,1088
 8005d04:	e0bffc17 	ldw	r2,-16(fp)
 8005d08:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 8005d0c:	e0bffc17 	ldw	r2,-16(fp)
 8005d10:	10800017 	ldw	r2,0(r2)
 8005d14:	10800304 	addi	r2,r2,12
 8005d18:	e0fffc17 	ldw	r3,-16(fp)
 8005d1c:	18c00117 	ldw	r3,4(r3)
 8005d20:	10c00035 	stwio	r3,0(r2)
 8005d24:	e0bff817 	ldw	r2,-32(fp)
 8005d28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005d2c:	e0bffa17 	ldw	r2,-24(fp)
 8005d30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 8005d34:	e0fffe17 	ldw	r3,-8(fp)
 8005d38:	e0bff417 	ldw	r2,-48(fp)
 8005d3c:	1885c83a 	sub	r2,r3,r2
}
 8005d40:	e037883a 	mov	sp,fp
 8005d44:	dfc00117 	ldw	ra,4(sp)
 8005d48:	df000017 	ldw	fp,0(sp)
 8005d4c:	dec00204 	addi	sp,sp,8
 8005d50:	f800283a 	ret

08005d54 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8005d54:	defff504 	addi	sp,sp,-44
 8005d58:	df000a15 	stw	fp,40(sp)
 8005d5c:	df000a04 	addi	fp,sp,40
 8005d60:	e13ffc15 	stw	r4,-16(fp)
 8005d64:	e17ffd15 	stw	r5,-12(fp)
 8005d68:	e1bffe15 	stw	r6,-8(fp)
 8005d6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8005d70:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005d74:	d0a72a17 	ldw	r2,-25432(gp)
  
  if (alt_ticks_per_second ())
 8005d78:	10003c26 	beq	r2,zero,8005e6c <alt_alarm_start+0x118>
  {
    if (alarm)
 8005d7c:	e0bffc17 	ldw	r2,-16(fp)
 8005d80:	10003826 	beq	r2,zero,8005e64 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8005d84:	e0bffc17 	ldw	r2,-16(fp)
 8005d88:	e0fffe17 	ldw	r3,-8(fp)
 8005d8c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8005d90:	e0bffc17 	ldw	r2,-16(fp)
 8005d94:	e0ffff17 	ldw	r3,-4(fp)
 8005d98:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005d9c:	0005303a 	rdctl	r2,status
 8005da0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005da4:	e0fff917 	ldw	r3,-28(fp)
 8005da8:	00bfff84 	movi	r2,-2
 8005dac:	1884703a 	and	r2,r3,r2
 8005db0:	1001703a 	wrctl	status,r2
  
  return context;
 8005db4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8005db8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005dbc:	d0a72b17 	ldw	r2,-25428(gp)
      
      current_nticks = alt_nticks();
 8005dc0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005dc4:	e0fffd17 	ldw	r3,-12(fp)
 8005dc8:	e0bff617 	ldw	r2,-40(fp)
 8005dcc:	1885883a 	add	r2,r3,r2
 8005dd0:	10c00044 	addi	r3,r2,1
 8005dd4:	e0bffc17 	ldw	r2,-16(fp)
 8005dd8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005ddc:	e0bffc17 	ldw	r2,-16(fp)
 8005de0:	10c00217 	ldw	r3,8(r2)
 8005de4:	e0bff617 	ldw	r2,-40(fp)
 8005de8:	1880042e 	bgeu	r3,r2,8005dfc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8005dec:	e0bffc17 	ldw	r2,-16(fp)
 8005df0:	00c00044 	movi	r3,1
 8005df4:	10c00405 	stb	r3,16(r2)
 8005df8:	00000206 	br	8005e04 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8005dfc:	e0bffc17 	ldw	r2,-16(fp)
 8005e00:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005e04:	e0bffc17 	ldw	r2,-16(fp)
 8005e08:	d0e00e04 	addi	r3,gp,-32712
 8005e0c:	e0fffa15 	stw	r3,-24(fp)
 8005e10:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005e14:	e0bffb17 	ldw	r2,-20(fp)
 8005e18:	e0fffa17 	ldw	r3,-24(fp)
 8005e1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005e20:	e0bffa17 	ldw	r2,-24(fp)
 8005e24:	10c00017 	ldw	r3,0(r2)
 8005e28:	e0bffb17 	ldw	r2,-20(fp)
 8005e2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005e30:	e0bffa17 	ldw	r2,-24(fp)
 8005e34:	10800017 	ldw	r2,0(r2)
 8005e38:	e0fffb17 	ldw	r3,-20(fp)
 8005e3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005e40:	e0bffa17 	ldw	r2,-24(fp)
 8005e44:	e0fffb17 	ldw	r3,-20(fp)
 8005e48:	10c00015 	stw	r3,0(r2)
 8005e4c:	e0bff817 	ldw	r2,-32(fp)
 8005e50:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005e54:	e0bff717 	ldw	r2,-36(fp)
 8005e58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8005e5c:	0005883a 	mov	r2,zero
 8005e60:	00000306 	br	8005e70 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8005e64:	00bffa84 	movi	r2,-22
 8005e68:	00000106 	br	8005e70 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8005e6c:	00bfde84 	movi	r2,-134
  }
}
 8005e70:	e037883a 	mov	sp,fp
 8005e74:	df000017 	ldw	fp,0(sp)
 8005e78:	dec00104 	addi	sp,sp,4
 8005e7c:	f800283a 	ret

08005e80 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 8005e80:	defffd04 	addi	sp,sp,-12
 8005e84:	df000215 	stw	fp,8(sp)
 8005e88:	df000204 	addi	fp,sp,8
 8005e8c:	e13ffe15 	stw	r4,-8(fp)
 8005e90:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005e94:	0001883a 	nop
 8005e98:	e037883a 	mov	sp,fp
 8005e9c:	df000017 	ldw	fp,0(sp)
 8005ea0:	dec00104 	addi	sp,sp,4
 8005ea4:	f800283a 	ret

08005ea8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005ea8:	deffff04 	addi	sp,sp,-4
 8005eac:	df000015 	stw	fp,0(sp)
 8005eb0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005eb4:	0001883a 	nop
 8005eb8:	e037883a 	mov	sp,fp
 8005ebc:	df000017 	ldw	fp,0(sp)
 8005ec0:	dec00104 	addi	sp,sp,4
 8005ec4:	f800283a 	ret

08005ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005ec8:	defffe04 	addi	sp,sp,-8
 8005ecc:	dfc00115 	stw	ra,4(sp)
 8005ed0:	df000015 	stw	fp,0(sp)
 8005ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005ed8:	d0a00917 	ldw	r2,-32732(gp)
 8005edc:	10000326 	beq	r2,zero,8005eec <alt_get_errno+0x24>
 8005ee0:	d0a00917 	ldw	r2,-32732(gp)
 8005ee4:	103ee83a 	callr	r2
 8005ee8:	00000106 	br	8005ef0 <alt_get_errno+0x28>
 8005eec:	d0a72504 	addi	r2,gp,-25452
}
 8005ef0:	e037883a 	mov	sp,fp
 8005ef4:	dfc00117 	ldw	ra,4(sp)
 8005ef8:	df000017 	ldw	fp,0(sp)
 8005efc:	dec00204 	addi	sp,sp,8
 8005f00:	f800283a 	ret

08005f04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8005f04:	defffa04 	addi	sp,sp,-24
 8005f08:	dfc00515 	stw	ra,20(sp)
 8005f0c:	df000415 	stw	fp,16(sp)
 8005f10:	df000404 	addi	fp,sp,16
 8005f14:	e13ffe15 	stw	r4,-8(fp)
 8005f18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8005f1c:	e0bffe17 	ldw	r2,-8(fp)
 8005f20:	10000326 	beq	r2,zero,8005f30 <alt_dev_llist_insert+0x2c>
 8005f24:	e0bffe17 	ldw	r2,-8(fp)
 8005f28:	10800217 	ldw	r2,8(r2)
 8005f2c:	1000061e 	bne	r2,zero,8005f48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8005f30:	8005ec80 	call	8005ec8 <alt_get_errno>
 8005f34:	1007883a 	mov	r3,r2
 8005f38:	00800584 	movi	r2,22
 8005f3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8005f40:	00bffa84 	movi	r2,-22
 8005f44:	00001306 	br	8005f94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8005f48:	e0bffe17 	ldw	r2,-8(fp)
 8005f4c:	e0ffff17 	ldw	r3,-4(fp)
 8005f50:	e0fffc15 	stw	r3,-16(fp)
 8005f54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005f58:	e0bffd17 	ldw	r2,-12(fp)
 8005f5c:	e0fffc17 	ldw	r3,-16(fp)
 8005f60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005f64:	e0bffc17 	ldw	r2,-16(fp)
 8005f68:	10c00017 	ldw	r3,0(r2)
 8005f6c:	e0bffd17 	ldw	r2,-12(fp)
 8005f70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005f74:	e0bffc17 	ldw	r2,-16(fp)
 8005f78:	10800017 	ldw	r2,0(r2)
 8005f7c:	e0fffd17 	ldw	r3,-12(fp)
 8005f80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005f84:	e0bffc17 	ldw	r2,-16(fp)
 8005f88:	e0fffd17 	ldw	r3,-12(fp)
 8005f8c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8005f90:	0005883a 	mov	r2,zero
}
 8005f94:	e037883a 	mov	sp,fp
 8005f98:	dfc00117 	ldw	ra,4(sp)
 8005f9c:	df000017 	ldw	fp,0(sp)
 8005fa0:	dec00204 	addi	sp,sp,8
 8005fa4:	f800283a 	ret

08005fa8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8005fa8:	defffd04 	addi	sp,sp,-12
 8005fac:	dfc00215 	stw	ra,8(sp)
 8005fb0:	df000115 	stw	fp,4(sp)
 8005fb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8005fb8:	00820034 	movhi	r2,2048
 8005fbc:	109bd704 	addi	r2,r2,28508
 8005fc0:	e0bfff15 	stw	r2,-4(fp)
 8005fc4:	00000606 	br	8005fe0 <_do_ctors+0x38>
        (*ctor) (); 
 8005fc8:	e0bfff17 	ldw	r2,-4(fp)
 8005fcc:	10800017 	ldw	r2,0(r2)
 8005fd0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8005fd4:	e0bfff17 	ldw	r2,-4(fp)
 8005fd8:	10bfff04 	addi	r2,r2,-4
 8005fdc:	e0bfff15 	stw	r2,-4(fp)
 8005fe0:	e0ffff17 	ldw	r3,-4(fp)
 8005fe4:	00820034 	movhi	r2,2048
 8005fe8:	109bd804 	addi	r2,r2,28512
 8005fec:	18bff62e 	bgeu	r3,r2,8005fc8 <_do_ctors+0x20>
        (*ctor) (); 
}
 8005ff0:	0001883a 	nop
 8005ff4:	e037883a 	mov	sp,fp
 8005ff8:	dfc00117 	ldw	ra,4(sp)
 8005ffc:	df000017 	ldw	fp,0(sp)
 8006000:	dec00204 	addi	sp,sp,8
 8006004:	f800283a 	ret

08006008 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8006008:	defffd04 	addi	sp,sp,-12
 800600c:	dfc00215 	stw	ra,8(sp)
 8006010:	df000115 	stw	fp,4(sp)
 8006014:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006018:	00820034 	movhi	r2,2048
 800601c:	109bd704 	addi	r2,r2,28508
 8006020:	e0bfff15 	stw	r2,-4(fp)
 8006024:	00000606 	br	8006040 <_do_dtors+0x38>
        (*dtor) (); 
 8006028:	e0bfff17 	ldw	r2,-4(fp)
 800602c:	10800017 	ldw	r2,0(r2)
 8006030:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006034:	e0bfff17 	ldw	r2,-4(fp)
 8006038:	10bfff04 	addi	r2,r2,-4
 800603c:	e0bfff15 	stw	r2,-4(fp)
 8006040:	e0ffff17 	ldw	r3,-4(fp)
 8006044:	00820034 	movhi	r2,2048
 8006048:	109bd804 	addi	r2,r2,28512
 800604c:	18bff62e 	bgeu	r3,r2,8006028 <_do_dtors+0x20>
        (*dtor) (); 
}
 8006050:	0001883a 	nop
 8006054:	e037883a 	mov	sp,fp
 8006058:	dfc00117 	ldw	ra,4(sp)
 800605c:	df000017 	ldw	fp,0(sp)
 8006060:	dec00204 	addi	sp,sp,8
 8006064:	f800283a 	ret

08006068 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006068:	defffa04 	addi	sp,sp,-24
 800606c:	dfc00515 	stw	ra,20(sp)
 8006070:	df000415 	stw	fp,16(sp)
 8006074:	df000404 	addi	fp,sp,16
 8006078:	e13ffe15 	stw	r4,-8(fp)
 800607c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006080:	e0bfff17 	ldw	r2,-4(fp)
 8006084:	10800017 	ldw	r2,0(r2)
 8006088:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800608c:	e13ffe17 	ldw	r4,-8(fp)
 8006090:	80003740 	call	8000374 <strlen>
 8006094:	10800044 	addi	r2,r2,1
 8006098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800609c:	00000d06 	br	80060d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80060a0:	e0bffc17 	ldw	r2,-16(fp)
 80060a4:	10800217 	ldw	r2,8(r2)
 80060a8:	e0fffd17 	ldw	r3,-12(fp)
 80060ac:	180d883a 	mov	r6,r3
 80060b0:	e17ffe17 	ldw	r5,-8(fp)
 80060b4:	1009883a 	mov	r4,r2
 80060b8:	8006c180 	call	8006c18 <memcmp>
 80060bc:	1000021e 	bne	r2,zero,80060c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80060c0:	e0bffc17 	ldw	r2,-16(fp)
 80060c4:	00000706 	br	80060e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80060c8:	e0bffc17 	ldw	r2,-16(fp)
 80060cc:	10800017 	ldw	r2,0(r2)
 80060d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80060d4:	e0fffc17 	ldw	r3,-16(fp)
 80060d8:	e0bfff17 	ldw	r2,-4(fp)
 80060dc:	18bff01e 	bne	r3,r2,80060a0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80060e0:	0005883a 	mov	r2,zero
}
 80060e4:	e037883a 	mov	sp,fp
 80060e8:	dfc00117 	ldw	ra,4(sp)
 80060ec:	df000017 	ldw	fp,0(sp)
 80060f0:	dec00204 	addi	sp,sp,8
 80060f4:	f800283a 	ret

080060f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80060f8:	deffff04 	addi	sp,sp,-4
 80060fc:	df000015 	stw	fp,0(sp)
 8006100:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8006104:	0001883a 	nop
 8006108:	e037883a 	mov	sp,fp
 800610c:	df000017 	ldw	fp,0(sp)
 8006110:	dec00104 	addi	sp,sp,4
 8006114:	f800283a 	ret

08006118 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006118:	defff904 	addi	sp,sp,-28
 800611c:	dfc00615 	stw	ra,24(sp)
 8006120:	df000515 	stw	fp,20(sp)
 8006124:	df000504 	addi	fp,sp,20
 8006128:	e13ffc15 	stw	r4,-16(fp)
 800612c:	e17ffd15 	stw	r5,-12(fp)
 8006130:	e1bffe15 	stw	r6,-8(fp)
 8006134:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8006138:	e0800217 	ldw	r2,8(fp)
 800613c:	d8800015 	stw	r2,0(sp)
 8006140:	e1ffff17 	ldw	r7,-4(fp)
 8006144:	e1bffe17 	ldw	r6,-8(fp)
 8006148:	e17ffd17 	ldw	r5,-12(fp)
 800614c:	e13ffc17 	ldw	r4,-16(fp)
 8006150:	80062c80 	call	80062c8 <alt_iic_isr_register>
}  
 8006154:	e037883a 	mov	sp,fp
 8006158:	dfc00117 	ldw	ra,4(sp)
 800615c:	df000017 	ldw	fp,0(sp)
 8006160:	dec00204 	addi	sp,sp,8
 8006164:	f800283a 	ret

08006168 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8006168:	defff904 	addi	sp,sp,-28
 800616c:	df000615 	stw	fp,24(sp)
 8006170:	df000604 	addi	fp,sp,24
 8006174:	e13ffe15 	stw	r4,-8(fp)
 8006178:	e17fff15 	stw	r5,-4(fp)
 800617c:	e0bfff17 	ldw	r2,-4(fp)
 8006180:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006184:	0005303a 	rdctl	r2,status
 8006188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800618c:	e0fffb17 	ldw	r3,-20(fp)
 8006190:	00bfff84 	movi	r2,-2
 8006194:	1884703a 	and	r2,r3,r2
 8006198:	1001703a 	wrctl	status,r2
  
  return context;
 800619c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80061a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80061a4:	00c00044 	movi	r3,1
 80061a8:	e0bffa17 	ldw	r2,-24(fp)
 80061ac:	1884983a 	sll	r2,r3,r2
 80061b0:	1007883a 	mov	r3,r2
 80061b4:	d0a72917 	ldw	r2,-25436(gp)
 80061b8:	1884b03a 	or	r2,r3,r2
 80061bc:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80061c0:	d0a72917 	ldw	r2,-25436(gp)
 80061c4:	100170fa 	wrctl	ienable,r2
 80061c8:	e0bffc17 	ldw	r2,-16(fp)
 80061cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80061d0:	e0bffd17 	ldw	r2,-12(fp)
 80061d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80061d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80061dc:	0001883a 	nop
}
 80061e0:	e037883a 	mov	sp,fp
 80061e4:	df000017 	ldw	fp,0(sp)
 80061e8:	dec00104 	addi	sp,sp,4
 80061ec:	f800283a 	ret

080061f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80061f0:	defff904 	addi	sp,sp,-28
 80061f4:	df000615 	stw	fp,24(sp)
 80061f8:	df000604 	addi	fp,sp,24
 80061fc:	e13ffe15 	stw	r4,-8(fp)
 8006200:	e17fff15 	stw	r5,-4(fp)
 8006204:	e0bfff17 	ldw	r2,-4(fp)
 8006208:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800620c:	0005303a 	rdctl	r2,status
 8006210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006214:	e0fffb17 	ldw	r3,-20(fp)
 8006218:	00bfff84 	movi	r2,-2
 800621c:	1884703a 	and	r2,r3,r2
 8006220:	1001703a 	wrctl	status,r2
  
  return context;
 8006224:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006228:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800622c:	00c00044 	movi	r3,1
 8006230:	e0bffa17 	ldw	r2,-24(fp)
 8006234:	1884983a 	sll	r2,r3,r2
 8006238:	0084303a 	nor	r2,zero,r2
 800623c:	1007883a 	mov	r3,r2
 8006240:	d0a72917 	ldw	r2,-25436(gp)
 8006244:	1884703a 	and	r2,r3,r2
 8006248:	d0a72915 	stw	r2,-25436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800624c:	d0a72917 	ldw	r2,-25436(gp)
 8006250:	100170fa 	wrctl	ienable,r2
 8006254:	e0bffc17 	ldw	r2,-16(fp)
 8006258:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800625c:	e0bffd17 	ldw	r2,-12(fp)
 8006260:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006264:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8006268:	0001883a 	nop
}
 800626c:	e037883a 	mov	sp,fp
 8006270:	df000017 	ldw	fp,0(sp)
 8006274:	dec00104 	addi	sp,sp,4
 8006278:	f800283a 	ret

0800627c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800627c:	defffc04 	addi	sp,sp,-16
 8006280:	df000315 	stw	fp,12(sp)
 8006284:	df000304 	addi	fp,sp,12
 8006288:	e13ffe15 	stw	r4,-8(fp)
 800628c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8006290:	000530fa 	rdctl	r2,ienable
 8006294:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8006298:	00c00044 	movi	r3,1
 800629c:	e0bfff17 	ldw	r2,-4(fp)
 80062a0:	1884983a 	sll	r2,r3,r2
 80062a4:	1007883a 	mov	r3,r2
 80062a8:	e0bffd17 	ldw	r2,-12(fp)
 80062ac:	1884703a 	and	r2,r3,r2
 80062b0:	1004c03a 	cmpne	r2,r2,zero
 80062b4:	10803fcc 	andi	r2,r2,255
}
 80062b8:	e037883a 	mov	sp,fp
 80062bc:	df000017 	ldw	fp,0(sp)
 80062c0:	dec00104 	addi	sp,sp,4
 80062c4:	f800283a 	ret

080062c8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80062c8:	defff504 	addi	sp,sp,-44
 80062cc:	dfc00a15 	stw	ra,40(sp)
 80062d0:	df000915 	stw	fp,36(sp)
 80062d4:	df000904 	addi	fp,sp,36
 80062d8:	e13ffc15 	stw	r4,-16(fp)
 80062dc:	e17ffd15 	stw	r5,-12(fp)
 80062e0:	e1bffe15 	stw	r6,-8(fp)
 80062e4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80062e8:	00bffa84 	movi	r2,-22
 80062ec:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80062f0:	e0bffd17 	ldw	r2,-12(fp)
 80062f4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80062f8:	e0bff817 	ldw	r2,-32(fp)
 80062fc:	10800808 	cmpgei	r2,r2,32
 8006300:	1000271e 	bne	r2,zero,80063a0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006304:	0005303a 	rdctl	r2,status
 8006308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800630c:	e0fffb17 	ldw	r3,-20(fp)
 8006310:	00bfff84 	movi	r2,-2
 8006314:	1884703a 	and	r2,r3,r2
 8006318:	1001703a 	wrctl	status,r2
  
  return context;
 800631c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8006320:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8006324:	00820074 	movhi	r2,2049
 8006328:	10aa3b04 	addi	r2,r2,-22292
 800632c:	e0fff817 	ldw	r3,-32(fp)
 8006330:	180690fa 	slli	r3,r3,3
 8006334:	10c5883a 	add	r2,r2,r3
 8006338:	e0fffe17 	ldw	r3,-8(fp)
 800633c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8006340:	00820074 	movhi	r2,2049
 8006344:	10aa3b04 	addi	r2,r2,-22292
 8006348:	e0fff817 	ldw	r3,-32(fp)
 800634c:	180690fa 	slli	r3,r3,3
 8006350:	10c5883a 	add	r2,r2,r3
 8006354:	10800104 	addi	r2,r2,4
 8006358:	e0ffff17 	ldw	r3,-4(fp)
 800635c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8006360:	e0bffe17 	ldw	r2,-8(fp)
 8006364:	10000526 	beq	r2,zero,800637c <alt_iic_isr_register+0xb4>
 8006368:	e0bff817 	ldw	r2,-32(fp)
 800636c:	100b883a 	mov	r5,r2
 8006370:	e13ffc17 	ldw	r4,-16(fp)
 8006374:	80061680 	call	8006168 <alt_ic_irq_enable>
 8006378:	00000406 	br	800638c <alt_iic_isr_register+0xc4>
 800637c:	e0bff817 	ldw	r2,-32(fp)
 8006380:	100b883a 	mov	r5,r2
 8006384:	e13ffc17 	ldw	r4,-16(fp)
 8006388:	80061f00 	call	80061f0 <alt_ic_irq_disable>
 800638c:	e0bff715 	stw	r2,-36(fp)
 8006390:	e0bffa17 	ldw	r2,-24(fp)
 8006394:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006398:	e0bff917 	ldw	r2,-28(fp)
 800639c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80063a0:	e0bff717 	ldw	r2,-36(fp)
}
 80063a4:	e037883a 	mov	sp,fp
 80063a8:	dfc00117 	ldw	ra,4(sp)
 80063ac:	df000017 	ldw	fp,0(sp)
 80063b0:	dec00204 	addi	sp,sp,8
 80063b4:	f800283a 	ret

080063b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80063b8:	defff804 	addi	sp,sp,-32
 80063bc:	dfc00715 	stw	ra,28(sp)
 80063c0:	df000615 	stw	fp,24(sp)
 80063c4:	dc000515 	stw	r16,20(sp)
 80063c8:	df000604 	addi	fp,sp,24
 80063cc:	e13ffb15 	stw	r4,-20(fp)
 80063d0:	e17ffc15 	stw	r5,-16(fp)
 80063d4:	e1bffd15 	stw	r6,-12(fp)
 80063d8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80063dc:	e1bffe17 	ldw	r6,-8(fp)
 80063e0:	e17ffd17 	ldw	r5,-12(fp)
 80063e4:	e13ffc17 	ldw	r4,-16(fp)
 80063e8:	80066400 	call	8006640 <open>
 80063ec:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80063f0:	e0bffa17 	ldw	r2,-24(fp)
 80063f4:	10002216 	blt	r2,zero,8006480 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80063f8:	04020034 	movhi	r16,2048
 80063fc:	841e1704 	addi	r16,r16,30812
 8006400:	e0bffa17 	ldw	r2,-24(fp)
 8006404:	01400304 	movi	r5,12
 8006408:	1009883a 	mov	r4,r2
 800640c:	80030840 	call	8003084 <__mulsi3>
 8006410:	8085883a 	add	r2,r16,r2
 8006414:	10c00017 	ldw	r3,0(r2)
 8006418:	e0bffb17 	ldw	r2,-20(fp)
 800641c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006420:	04020034 	movhi	r16,2048
 8006424:	841e1704 	addi	r16,r16,30812
 8006428:	e0bffa17 	ldw	r2,-24(fp)
 800642c:	01400304 	movi	r5,12
 8006430:	1009883a 	mov	r4,r2
 8006434:	80030840 	call	8003084 <__mulsi3>
 8006438:	8085883a 	add	r2,r16,r2
 800643c:	10800104 	addi	r2,r2,4
 8006440:	10c00017 	ldw	r3,0(r2)
 8006444:	e0bffb17 	ldw	r2,-20(fp)
 8006448:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800644c:	04020034 	movhi	r16,2048
 8006450:	841e1704 	addi	r16,r16,30812
 8006454:	e0bffa17 	ldw	r2,-24(fp)
 8006458:	01400304 	movi	r5,12
 800645c:	1009883a 	mov	r4,r2
 8006460:	80030840 	call	8003084 <__mulsi3>
 8006464:	8085883a 	add	r2,r16,r2
 8006468:	10800204 	addi	r2,r2,8
 800646c:	10c00017 	ldw	r3,0(r2)
 8006470:	e0bffb17 	ldw	r2,-20(fp)
 8006474:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006478:	e13ffa17 	ldw	r4,-24(fp)
 800647c:	80037d00 	call	80037d0 <alt_release_fd>
  }
} 
 8006480:	0001883a 	nop
 8006484:	e6ffff04 	addi	sp,fp,-4
 8006488:	dfc00217 	ldw	ra,8(sp)
 800648c:	df000117 	ldw	fp,4(sp)
 8006490:	dc000017 	ldw	r16,0(sp)
 8006494:	dec00304 	addi	sp,sp,12
 8006498:	f800283a 	ret

0800649c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800649c:	defffb04 	addi	sp,sp,-20
 80064a0:	dfc00415 	stw	ra,16(sp)
 80064a4:	df000315 	stw	fp,12(sp)
 80064a8:	df000304 	addi	fp,sp,12
 80064ac:	e13ffd15 	stw	r4,-12(fp)
 80064b0:	e17ffe15 	stw	r5,-8(fp)
 80064b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80064b8:	01c07fc4 	movi	r7,511
 80064bc:	01800044 	movi	r6,1
 80064c0:	e17ffd17 	ldw	r5,-12(fp)
 80064c4:	01020034 	movhi	r4,2048
 80064c8:	211e1a04 	addi	r4,r4,30824
 80064cc:	80063b80 	call	80063b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80064d0:	01c07fc4 	movi	r7,511
 80064d4:	000d883a 	mov	r6,zero
 80064d8:	e17ffe17 	ldw	r5,-8(fp)
 80064dc:	01020034 	movhi	r4,2048
 80064e0:	211e1704 	addi	r4,r4,30812
 80064e4:	80063b80 	call	80063b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80064e8:	01c07fc4 	movi	r7,511
 80064ec:	01800044 	movi	r6,1
 80064f0:	e17fff17 	ldw	r5,-4(fp)
 80064f4:	01020034 	movhi	r4,2048
 80064f8:	211e1d04 	addi	r4,r4,30836
 80064fc:	80063b80 	call	80063b8 <alt_open_fd>
}  
 8006500:	0001883a 	nop
 8006504:	e037883a 	mov	sp,fp
 8006508:	dfc00117 	ldw	ra,4(sp)
 800650c:	df000017 	ldw	fp,0(sp)
 8006510:	dec00204 	addi	sp,sp,8
 8006514:	f800283a 	ret

08006518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006518:	defffe04 	addi	sp,sp,-8
 800651c:	dfc00115 	stw	ra,4(sp)
 8006520:	df000015 	stw	fp,0(sp)
 8006524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006528:	d0a00917 	ldw	r2,-32732(gp)
 800652c:	10000326 	beq	r2,zero,800653c <alt_get_errno+0x24>
 8006530:	d0a00917 	ldw	r2,-32732(gp)
 8006534:	103ee83a 	callr	r2
 8006538:	00000106 	br	8006540 <alt_get_errno+0x28>
 800653c:	d0a72504 	addi	r2,gp,-25452
}
 8006540:	e037883a 	mov	sp,fp
 8006544:	dfc00117 	ldw	ra,4(sp)
 8006548:	df000017 	ldw	fp,0(sp)
 800654c:	dec00204 	addi	sp,sp,8
 8006550:	f800283a 	ret

08006554 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8006554:	defffb04 	addi	sp,sp,-20
 8006558:	dfc00415 	stw	ra,16(sp)
 800655c:	df000315 	stw	fp,12(sp)
 8006560:	dc000215 	stw	r16,8(sp)
 8006564:	df000304 	addi	fp,sp,12
 8006568:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800656c:	e0bffe17 	ldw	r2,-8(fp)
 8006570:	10800217 	ldw	r2,8(r2)
 8006574:	10d00034 	orhi	r3,r2,16384
 8006578:	e0bffe17 	ldw	r2,-8(fp)
 800657c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006580:	e03ffd15 	stw	zero,-12(fp)
 8006584:	00002306 	br	8006614 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006588:	04020034 	movhi	r16,2048
 800658c:	841e1704 	addi	r16,r16,30812
 8006590:	e0bffd17 	ldw	r2,-12(fp)
 8006594:	01400304 	movi	r5,12
 8006598:	1009883a 	mov	r4,r2
 800659c:	80030840 	call	8003084 <__mulsi3>
 80065a0:	8085883a 	add	r2,r16,r2
 80065a4:	10c00017 	ldw	r3,0(r2)
 80065a8:	e0bffe17 	ldw	r2,-8(fp)
 80065ac:	10800017 	ldw	r2,0(r2)
 80065b0:	1880151e 	bne	r3,r2,8006608 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80065b4:	04020034 	movhi	r16,2048
 80065b8:	841e1704 	addi	r16,r16,30812
 80065bc:	e0bffd17 	ldw	r2,-12(fp)
 80065c0:	01400304 	movi	r5,12
 80065c4:	1009883a 	mov	r4,r2
 80065c8:	80030840 	call	8003084 <__mulsi3>
 80065cc:	8085883a 	add	r2,r16,r2
 80065d0:	10800204 	addi	r2,r2,8
 80065d4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80065d8:	10000b0e 	bge	r2,zero,8006608 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80065dc:	01400304 	movi	r5,12
 80065e0:	e13ffd17 	ldw	r4,-12(fp)
 80065e4:	80030840 	call	8003084 <__mulsi3>
 80065e8:	1007883a 	mov	r3,r2
 80065ec:	00820034 	movhi	r2,2048
 80065f0:	109e1704 	addi	r2,r2,30812
 80065f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80065f8:	e0bffe17 	ldw	r2,-8(fp)
 80065fc:	18800226 	beq	r3,r2,8006608 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8006600:	00bffcc4 	movi	r2,-13
 8006604:	00000806 	br	8006628 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006608:	e0bffd17 	ldw	r2,-12(fp)
 800660c:	10800044 	addi	r2,r2,1
 8006610:	e0bffd15 	stw	r2,-12(fp)
 8006614:	d0a00817 	ldw	r2,-32736(gp)
 8006618:	1007883a 	mov	r3,r2
 800661c:	e0bffd17 	ldw	r2,-12(fp)
 8006620:	18bfd92e 	bgeu	r3,r2,8006588 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8006624:	0005883a 	mov	r2,zero
}
 8006628:	e6ffff04 	addi	sp,fp,-4
 800662c:	dfc00217 	ldw	ra,8(sp)
 8006630:	df000117 	ldw	fp,4(sp)
 8006634:	dc000017 	ldw	r16,0(sp)
 8006638:	dec00304 	addi	sp,sp,12
 800663c:	f800283a 	ret

08006640 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8006640:	defff604 	addi	sp,sp,-40
 8006644:	dfc00915 	stw	ra,36(sp)
 8006648:	df000815 	stw	fp,32(sp)
 800664c:	df000804 	addi	fp,sp,32
 8006650:	e13ffd15 	stw	r4,-12(fp)
 8006654:	e17ffe15 	stw	r5,-8(fp)
 8006658:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800665c:	00bfffc4 	movi	r2,-1
 8006660:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8006664:	00bffb44 	movi	r2,-19
 8006668:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800666c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8006670:	d1600604 	addi	r5,gp,-32744
 8006674:	e13ffd17 	ldw	r4,-12(fp)
 8006678:	80060680 	call	8006068 <alt_find_dev>
 800667c:	e0bff815 	stw	r2,-32(fp)
 8006680:	e0bff817 	ldw	r2,-32(fp)
 8006684:	1000051e 	bne	r2,zero,800669c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8006688:	e13ffd17 	ldw	r4,-12(fp)
 800668c:	80069640 	call	8006964 <alt_find_file>
 8006690:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8006694:	00800044 	movi	r2,1
 8006698:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800669c:	e0bff817 	ldw	r2,-32(fp)
 80066a0:	10002b26 	beq	r2,zero,8006750 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80066a4:	e13ff817 	ldw	r4,-32(fp)
 80066a8:	8006a6c0 	call	8006a6c <alt_get_fd>
 80066ac:	e0bff915 	stw	r2,-28(fp)
 80066b0:	e0bff917 	ldw	r2,-28(fp)
 80066b4:	1000030e 	bge	r2,zero,80066c4 <open+0x84>
    {
      status = index;
 80066b8:	e0bff917 	ldw	r2,-28(fp)
 80066bc:	e0bffa15 	stw	r2,-24(fp)
 80066c0:	00002506 	br	8006758 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 80066c4:	01400304 	movi	r5,12
 80066c8:	e13ff917 	ldw	r4,-28(fp)
 80066cc:	80030840 	call	8003084 <__mulsi3>
 80066d0:	1007883a 	mov	r3,r2
 80066d4:	00820034 	movhi	r2,2048
 80066d8:	109e1704 	addi	r2,r2,30812
 80066dc:	1885883a 	add	r2,r3,r2
 80066e0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80066e4:	e0fffe17 	ldw	r3,-8(fp)
 80066e8:	00900034 	movhi	r2,16384
 80066ec:	10bfffc4 	addi	r2,r2,-1
 80066f0:	1886703a 	and	r3,r3,r2
 80066f4:	e0bffc17 	ldw	r2,-16(fp)
 80066f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80066fc:	e0bffb17 	ldw	r2,-20(fp)
 8006700:	1000051e 	bne	r2,zero,8006718 <open+0xd8>
 8006704:	e13ffc17 	ldw	r4,-16(fp)
 8006708:	80065540 	call	8006554 <alt_file_locked>
 800670c:	e0bffa15 	stw	r2,-24(fp)
 8006710:	e0bffa17 	ldw	r2,-24(fp)
 8006714:	10001016 	blt	r2,zero,8006758 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8006718:	e0bff817 	ldw	r2,-32(fp)
 800671c:	10800317 	ldw	r2,12(r2)
 8006720:	10000826 	beq	r2,zero,8006744 <open+0x104>
 8006724:	e0bff817 	ldw	r2,-32(fp)
 8006728:	10800317 	ldw	r2,12(r2)
 800672c:	e1ffff17 	ldw	r7,-4(fp)
 8006730:	e1bffe17 	ldw	r6,-8(fp)
 8006734:	e17ffd17 	ldw	r5,-12(fp)
 8006738:	e13ffc17 	ldw	r4,-16(fp)
 800673c:	103ee83a 	callr	r2
 8006740:	00000106 	br	8006748 <open+0x108>
 8006744:	0005883a 	mov	r2,zero
 8006748:	e0bffa15 	stw	r2,-24(fp)
 800674c:	00000206 	br	8006758 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8006750:	00bffb44 	movi	r2,-19
 8006754:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8006758:	e0bffa17 	ldw	r2,-24(fp)
 800675c:	1000090e 	bge	r2,zero,8006784 <open+0x144>
  {
    alt_release_fd (index);  
 8006760:	e13ff917 	ldw	r4,-28(fp)
 8006764:	80037d00 	call	80037d0 <alt_release_fd>
    ALT_ERRNO = -status;
 8006768:	80065180 	call	8006518 <alt_get_errno>
 800676c:	1007883a 	mov	r3,r2
 8006770:	e0bffa17 	ldw	r2,-24(fp)
 8006774:	0085c83a 	sub	r2,zero,r2
 8006778:	18800015 	stw	r2,0(r3)
    return -1;
 800677c:	00bfffc4 	movi	r2,-1
 8006780:	00000106 	br	8006788 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8006784:	e0bff917 	ldw	r2,-28(fp)
}
 8006788:	e037883a 	mov	sp,fp
 800678c:	dfc00117 	ldw	ra,4(sp)
 8006790:	df000017 	ldw	fp,0(sp)
 8006794:	dec00204 	addi	sp,sp,8
 8006798:	f800283a 	ret

0800679c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800679c:	defffa04 	addi	sp,sp,-24
 80067a0:	df000515 	stw	fp,20(sp)
 80067a4:	df000504 	addi	fp,sp,20
 80067a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80067ac:	0005303a 	rdctl	r2,status
 80067b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80067b4:	e0fffc17 	ldw	r3,-16(fp)
 80067b8:	00bfff84 	movi	r2,-2
 80067bc:	1884703a 	and	r2,r3,r2
 80067c0:	1001703a 	wrctl	status,r2
  
  return context;
 80067c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80067c8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80067cc:	e0bfff17 	ldw	r2,-4(fp)
 80067d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80067d4:	e0bffd17 	ldw	r2,-12(fp)
 80067d8:	10800017 	ldw	r2,0(r2)
 80067dc:	e0fffd17 	ldw	r3,-12(fp)
 80067e0:	18c00117 	ldw	r3,4(r3)
 80067e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80067e8:	e0bffd17 	ldw	r2,-12(fp)
 80067ec:	10800117 	ldw	r2,4(r2)
 80067f0:	e0fffd17 	ldw	r3,-12(fp)
 80067f4:	18c00017 	ldw	r3,0(r3)
 80067f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80067fc:	e0bffd17 	ldw	r2,-12(fp)
 8006800:	e0fffd17 	ldw	r3,-12(fp)
 8006804:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8006808:	e0bffd17 	ldw	r2,-12(fp)
 800680c:	e0fffd17 	ldw	r3,-12(fp)
 8006810:	10c00015 	stw	r3,0(r2)
 8006814:	e0bffb17 	ldw	r2,-20(fp)
 8006818:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800681c:	e0bffe17 	ldw	r2,-8(fp)
 8006820:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8006824:	0001883a 	nop
 8006828:	e037883a 	mov	sp,fp
 800682c:	df000017 	ldw	fp,0(sp)
 8006830:	dec00104 	addi	sp,sp,4
 8006834:	f800283a 	ret

08006838 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8006838:	defffb04 	addi	sp,sp,-20
 800683c:	dfc00415 	stw	ra,16(sp)
 8006840:	df000315 	stw	fp,12(sp)
 8006844:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8006848:	d0a00e17 	ldw	r2,-32712(gp)
 800684c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8006850:	d0a72b17 	ldw	r2,-25428(gp)
 8006854:	10800044 	addi	r2,r2,1
 8006858:	d0a72b15 	stw	r2,-25428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800685c:	00002e06 	br	8006918 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8006860:	e0bffd17 	ldw	r2,-12(fp)
 8006864:	10800017 	ldw	r2,0(r2)
 8006868:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800686c:	e0bffd17 	ldw	r2,-12(fp)
 8006870:	10800403 	ldbu	r2,16(r2)
 8006874:	10803fcc 	andi	r2,r2,255
 8006878:	10000426 	beq	r2,zero,800688c <alt_tick+0x54>
 800687c:	d0a72b17 	ldw	r2,-25428(gp)
 8006880:	1000021e 	bne	r2,zero,800688c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8006884:	e0bffd17 	ldw	r2,-12(fp)
 8006888:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800688c:	e0bffd17 	ldw	r2,-12(fp)
 8006890:	10800217 	ldw	r2,8(r2)
 8006894:	d0e72b17 	ldw	r3,-25428(gp)
 8006898:	18801d36 	bltu	r3,r2,8006910 <alt_tick+0xd8>
 800689c:	e0bffd17 	ldw	r2,-12(fp)
 80068a0:	10800403 	ldbu	r2,16(r2)
 80068a4:	10803fcc 	andi	r2,r2,255
 80068a8:	1000191e 	bne	r2,zero,8006910 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80068ac:	e0bffd17 	ldw	r2,-12(fp)
 80068b0:	10800317 	ldw	r2,12(r2)
 80068b4:	e0fffd17 	ldw	r3,-12(fp)
 80068b8:	18c00517 	ldw	r3,20(r3)
 80068bc:	1809883a 	mov	r4,r3
 80068c0:	103ee83a 	callr	r2
 80068c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80068c8:	e0bfff17 	ldw	r2,-4(fp)
 80068cc:	1000031e 	bne	r2,zero,80068dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80068d0:	e13ffd17 	ldw	r4,-12(fp)
 80068d4:	800679c0 	call	800679c <alt_alarm_stop>
 80068d8:	00000d06 	br	8006910 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80068dc:	e0bffd17 	ldw	r2,-12(fp)
 80068e0:	10c00217 	ldw	r3,8(r2)
 80068e4:	e0bfff17 	ldw	r2,-4(fp)
 80068e8:	1887883a 	add	r3,r3,r2
 80068ec:	e0bffd17 	ldw	r2,-12(fp)
 80068f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80068f4:	e0bffd17 	ldw	r2,-12(fp)
 80068f8:	10c00217 	ldw	r3,8(r2)
 80068fc:	d0a72b17 	ldw	r2,-25428(gp)
 8006900:	1880032e 	bgeu	r3,r2,8006910 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8006904:	e0bffd17 	ldw	r2,-12(fp)
 8006908:	00c00044 	movi	r3,1
 800690c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8006910:	e0bffe17 	ldw	r2,-8(fp)
 8006914:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006918:	e0fffd17 	ldw	r3,-12(fp)
 800691c:	d0a00e04 	addi	r2,gp,-32712
 8006920:	18bfcf1e 	bne	r3,r2,8006860 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8006924:	0001883a 	nop
}
 8006928:	0001883a 	nop
 800692c:	e037883a 	mov	sp,fp
 8006930:	dfc00117 	ldw	ra,4(sp)
 8006934:	df000017 	ldw	fp,0(sp)
 8006938:	dec00204 	addi	sp,sp,8
 800693c:	f800283a 	ret

08006940 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8006940:	deffff04 	addi	sp,sp,-4
 8006944:	df000015 	stw	fp,0(sp)
 8006948:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800694c:	000170fa 	wrctl	ienable,zero
}
 8006950:	0001883a 	nop
 8006954:	e037883a 	mov	sp,fp
 8006958:	df000017 	ldw	fp,0(sp)
 800695c:	dec00104 	addi	sp,sp,4
 8006960:	f800283a 	ret

08006964 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006964:	defffb04 	addi	sp,sp,-20
 8006968:	dfc00415 	stw	ra,16(sp)
 800696c:	df000315 	stw	fp,12(sp)
 8006970:	df000304 	addi	fp,sp,12
 8006974:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006978:	d0a00417 	ldw	r2,-32752(gp)
 800697c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006980:	00003106 	br	8006a48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8006984:	e0bffd17 	ldw	r2,-12(fp)
 8006988:	10800217 	ldw	r2,8(r2)
 800698c:	1009883a 	mov	r4,r2
 8006990:	80003740 	call	8000374 <strlen>
 8006994:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8006998:	e0bffd17 	ldw	r2,-12(fp)
 800699c:	10c00217 	ldw	r3,8(r2)
 80069a0:	e0bffe17 	ldw	r2,-8(fp)
 80069a4:	10bfffc4 	addi	r2,r2,-1
 80069a8:	1885883a 	add	r2,r3,r2
 80069ac:	10800003 	ldbu	r2,0(r2)
 80069b0:	10803fcc 	andi	r2,r2,255
 80069b4:	1080201c 	xori	r2,r2,128
 80069b8:	10bfe004 	addi	r2,r2,-128
 80069bc:	10800bd8 	cmpnei	r2,r2,47
 80069c0:	1000031e 	bne	r2,zero,80069d0 <alt_find_file+0x6c>
    {
      len -= 1;
 80069c4:	e0bffe17 	ldw	r2,-8(fp)
 80069c8:	10bfffc4 	addi	r2,r2,-1
 80069cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80069d0:	e0bffe17 	ldw	r2,-8(fp)
 80069d4:	e0ffff17 	ldw	r3,-4(fp)
 80069d8:	1885883a 	add	r2,r3,r2
 80069dc:	10800003 	ldbu	r2,0(r2)
 80069e0:	10803fcc 	andi	r2,r2,255
 80069e4:	1080201c 	xori	r2,r2,128
 80069e8:	10bfe004 	addi	r2,r2,-128
 80069ec:	10800be0 	cmpeqi	r2,r2,47
 80069f0:	1000081e 	bne	r2,zero,8006a14 <alt_find_file+0xb0>
 80069f4:	e0bffe17 	ldw	r2,-8(fp)
 80069f8:	e0ffff17 	ldw	r3,-4(fp)
 80069fc:	1885883a 	add	r2,r3,r2
 8006a00:	10800003 	ldbu	r2,0(r2)
 8006a04:	10803fcc 	andi	r2,r2,255
 8006a08:	1080201c 	xori	r2,r2,128
 8006a0c:	10bfe004 	addi	r2,r2,-128
 8006a10:	10000a1e 	bne	r2,zero,8006a3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8006a14:	e0bffd17 	ldw	r2,-12(fp)
 8006a18:	10800217 	ldw	r2,8(r2)
 8006a1c:	e0fffe17 	ldw	r3,-8(fp)
 8006a20:	180d883a 	mov	r6,r3
 8006a24:	e17fff17 	ldw	r5,-4(fp)
 8006a28:	1009883a 	mov	r4,r2
 8006a2c:	8006c180 	call	8006c18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006a30:	1000021e 	bne	r2,zero,8006a3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006a34:	e0bffd17 	ldw	r2,-12(fp)
 8006a38:	00000706 	br	8006a58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8006a3c:	e0bffd17 	ldw	r2,-12(fp)
 8006a40:	10800017 	ldw	r2,0(r2)
 8006a44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006a48:	e0fffd17 	ldw	r3,-12(fp)
 8006a4c:	d0a00404 	addi	r2,gp,-32752
 8006a50:	18bfcc1e 	bne	r3,r2,8006984 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006a54:	0005883a 	mov	r2,zero
}
 8006a58:	e037883a 	mov	sp,fp
 8006a5c:	dfc00117 	ldw	ra,4(sp)
 8006a60:	df000017 	ldw	fp,0(sp)
 8006a64:	dec00204 	addi	sp,sp,8
 8006a68:	f800283a 	ret

08006a6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006a6c:	defffa04 	addi	sp,sp,-24
 8006a70:	dfc00515 	stw	ra,20(sp)
 8006a74:	df000415 	stw	fp,16(sp)
 8006a78:	dc000315 	stw	r16,12(sp)
 8006a7c:	df000404 	addi	fp,sp,16
 8006a80:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006a84:	00bffa04 	movi	r2,-24
 8006a88:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006a8c:	e03ffc15 	stw	zero,-16(fp)
 8006a90:	00001d06 	br	8006b08 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8006a94:	04020034 	movhi	r16,2048
 8006a98:	841e1704 	addi	r16,r16,30812
 8006a9c:	e0bffc17 	ldw	r2,-16(fp)
 8006aa0:	01400304 	movi	r5,12
 8006aa4:	1009883a 	mov	r4,r2
 8006aa8:	80030840 	call	8003084 <__mulsi3>
 8006aac:	8085883a 	add	r2,r16,r2
 8006ab0:	10800017 	ldw	r2,0(r2)
 8006ab4:	1000111e 	bne	r2,zero,8006afc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8006ab8:	04020034 	movhi	r16,2048
 8006abc:	841e1704 	addi	r16,r16,30812
 8006ac0:	e0bffc17 	ldw	r2,-16(fp)
 8006ac4:	01400304 	movi	r5,12
 8006ac8:	1009883a 	mov	r4,r2
 8006acc:	80030840 	call	8003084 <__mulsi3>
 8006ad0:	8085883a 	add	r2,r16,r2
 8006ad4:	e0fffe17 	ldw	r3,-8(fp)
 8006ad8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8006adc:	d0e00817 	ldw	r3,-32736(gp)
 8006ae0:	e0bffc17 	ldw	r2,-16(fp)
 8006ae4:	1880020e 	bge	r3,r2,8006af0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8006ae8:	e0bffc17 	ldw	r2,-16(fp)
 8006aec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8006af0:	e0bffc17 	ldw	r2,-16(fp)
 8006af4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8006af8:	00000606 	br	8006b14 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006afc:	e0bffc17 	ldw	r2,-16(fp)
 8006b00:	10800044 	addi	r2,r2,1
 8006b04:	e0bffc15 	stw	r2,-16(fp)
 8006b08:	e0bffc17 	ldw	r2,-16(fp)
 8006b0c:	10800810 	cmplti	r2,r2,32
 8006b10:	103fe01e 	bne	r2,zero,8006a94 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006b14:	e0bffd17 	ldw	r2,-12(fp)
}
 8006b18:	e6ffff04 	addi	sp,fp,-4
 8006b1c:	dfc00217 	ldw	ra,8(sp)
 8006b20:	df000117 	ldw	fp,4(sp)
 8006b24:	dc000017 	ldw	r16,0(sp)
 8006b28:	dec00304 	addi	sp,sp,12
 8006b2c:	f800283a 	ret

08006b30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8006b30:	defffe04 	addi	sp,sp,-8
 8006b34:	df000115 	stw	fp,4(sp)
 8006b38:	df000104 	addi	fp,sp,4
 8006b3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8006b40:	e0bfff17 	ldw	r2,-4(fp)
 8006b44:	10bffe84 	addi	r2,r2,-6
 8006b48:	10c00428 	cmpgeui	r3,r2,16
 8006b4c:	18001a1e 	bne	r3,zero,8006bb8 <alt_exception_cause_generated_bad_addr+0x88>
 8006b50:	100690ba 	slli	r3,r2,2
 8006b54:	00820034 	movhi	r2,2048
 8006b58:	109ada04 	addi	r2,r2,27496
 8006b5c:	1885883a 	add	r2,r3,r2
 8006b60:	10800017 	ldw	r2,0(r2)
 8006b64:	1000683a 	jmp	r2
 8006b68:	08006ba8 	cmpgeui	zero,at,430
 8006b6c:	08006ba8 	cmpgeui	zero,at,430
 8006b70:	08006bb8 	rdprs	zero,at,430
 8006b74:	08006bb8 	rdprs	zero,at,430
 8006b78:	08006bb8 	rdprs	zero,at,430
 8006b7c:	08006ba8 	cmpgeui	zero,at,430
 8006b80:	08006bb0 	cmpltui	zero,at,430
 8006b84:	08006bb8 	rdprs	zero,at,430
 8006b88:	08006ba8 	cmpgeui	zero,at,430
 8006b8c:	08006ba8 	cmpgeui	zero,at,430
 8006b90:	08006bb8 	rdprs	zero,at,430
 8006b94:	08006ba8 	cmpgeui	zero,at,430
 8006b98:	08006bb0 	cmpltui	zero,at,430
 8006b9c:	08006bb8 	rdprs	zero,at,430
 8006ba0:	08006bb8 	rdprs	zero,at,430
 8006ba4:	08006ba8 	cmpgeui	zero,at,430
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006ba8:	00800044 	movi	r2,1
 8006bac:	00000306 	br	8006bbc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006bb0:	0005883a 	mov	r2,zero
 8006bb4:	00000106 	br	8006bbc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8006bb8:	0005883a 	mov	r2,zero
  }
}
 8006bbc:	e037883a 	mov	sp,fp
 8006bc0:	df000017 	ldw	fp,0(sp)
 8006bc4:	dec00104 	addi	sp,sp,4
 8006bc8:	f800283a 	ret

08006bcc <atexit>:
 8006bcc:	200b883a 	mov	r5,r4
 8006bd0:	000f883a 	mov	r7,zero
 8006bd4:	000d883a 	mov	r6,zero
 8006bd8:	0009883a 	mov	r4,zero
 8006bdc:	8006c941 	jmpi	8006c94 <__register_exitproc>

08006be0 <exit>:
 8006be0:	defffe04 	addi	sp,sp,-8
 8006be4:	000b883a 	mov	r5,zero
 8006be8:	dc000015 	stw	r16,0(sp)
 8006bec:	dfc00115 	stw	ra,4(sp)
 8006bf0:	2021883a 	mov	r16,r4
 8006bf4:	8006dac0 	call	8006dac <__call_exitprocs>
 8006bf8:	00820074 	movhi	r2,2049
 8006bfc:	10a30404 	addi	r2,r2,-29680
 8006c00:	11000017 	ldw	r4,0(r2)
 8006c04:	20800f17 	ldw	r2,60(r4)
 8006c08:	10000126 	beq	r2,zero,8006c10 <exit+0x30>
 8006c0c:	103ee83a 	callr	r2
 8006c10:	8009883a 	mov	r4,r16
 8006c14:	8006f2c0 	call	8006f2c <_exit>

08006c18 <memcmp>:
 8006c18:	01c000c4 	movi	r7,3
 8006c1c:	3980192e 	bgeu	r7,r6,8006c84 <memcmp+0x6c>
 8006c20:	2144b03a 	or	r2,r4,r5
 8006c24:	11c4703a 	and	r2,r2,r7
 8006c28:	10000f26 	beq	r2,zero,8006c68 <memcmp+0x50>
 8006c2c:	20800003 	ldbu	r2,0(r4)
 8006c30:	28c00003 	ldbu	r3,0(r5)
 8006c34:	10c0151e 	bne	r2,r3,8006c8c <memcmp+0x74>
 8006c38:	31bfff84 	addi	r6,r6,-2
 8006c3c:	01ffffc4 	movi	r7,-1
 8006c40:	00000406 	br	8006c54 <memcmp+0x3c>
 8006c44:	20800003 	ldbu	r2,0(r4)
 8006c48:	28c00003 	ldbu	r3,0(r5)
 8006c4c:	31bfffc4 	addi	r6,r6,-1
 8006c50:	10c00e1e 	bne	r2,r3,8006c8c <memcmp+0x74>
 8006c54:	21000044 	addi	r4,r4,1
 8006c58:	29400044 	addi	r5,r5,1
 8006c5c:	31fff91e 	bne	r6,r7,8006c44 <memcmp+0x2c>
 8006c60:	0005883a 	mov	r2,zero
 8006c64:	f800283a 	ret
 8006c68:	20c00017 	ldw	r3,0(r4)
 8006c6c:	28800017 	ldw	r2,0(r5)
 8006c70:	18bfee1e 	bne	r3,r2,8006c2c <memcmp+0x14>
 8006c74:	31bfff04 	addi	r6,r6,-4
 8006c78:	21000104 	addi	r4,r4,4
 8006c7c:	29400104 	addi	r5,r5,4
 8006c80:	39bff936 	bltu	r7,r6,8006c68 <memcmp+0x50>
 8006c84:	303fe91e 	bne	r6,zero,8006c2c <memcmp+0x14>
 8006c88:	003ff506 	br	8006c60 <memcmp+0x48>
 8006c8c:	10c5c83a 	sub	r2,r2,r3
 8006c90:	f800283a 	ret

08006c94 <__register_exitproc>:
 8006c94:	defffa04 	addi	sp,sp,-24
 8006c98:	dc000315 	stw	r16,12(sp)
 8006c9c:	04020074 	movhi	r16,2049
 8006ca0:	84230404 	addi	r16,r16,-29680
 8006ca4:	80c00017 	ldw	r3,0(r16)
 8006ca8:	dc400415 	stw	r17,16(sp)
 8006cac:	dfc00515 	stw	ra,20(sp)
 8006cb0:	18805217 	ldw	r2,328(r3)
 8006cb4:	2023883a 	mov	r17,r4
 8006cb8:	10003726 	beq	r2,zero,8006d98 <__register_exitproc+0x104>
 8006cbc:	10c00117 	ldw	r3,4(r2)
 8006cc0:	010007c4 	movi	r4,31
 8006cc4:	20c00e16 	blt	r4,r3,8006d00 <__register_exitproc+0x6c>
 8006cc8:	1a000044 	addi	r8,r3,1
 8006ccc:	8800221e 	bne	r17,zero,8006d58 <__register_exitproc+0xc4>
 8006cd0:	18c00084 	addi	r3,r3,2
 8006cd4:	18c7883a 	add	r3,r3,r3
 8006cd8:	18c7883a 	add	r3,r3,r3
 8006cdc:	12000115 	stw	r8,4(r2)
 8006ce0:	10c7883a 	add	r3,r2,r3
 8006ce4:	19400015 	stw	r5,0(r3)
 8006ce8:	0005883a 	mov	r2,zero
 8006cec:	dfc00517 	ldw	ra,20(sp)
 8006cf0:	dc400417 	ldw	r17,16(sp)
 8006cf4:	dc000317 	ldw	r16,12(sp)
 8006cf8:	dec00604 	addi	sp,sp,24
 8006cfc:	f800283a 	ret
 8006d00:	00800034 	movhi	r2,0
 8006d04:	10800004 	addi	r2,r2,0
 8006d08:	10002626 	beq	r2,zero,8006da4 <__register_exitproc+0x110>
 8006d0c:	01006404 	movi	r4,400
 8006d10:	d9400015 	stw	r5,0(sp)
 8006d14:	d9800115 	stw	r6,4(sp)
 8006d18:	d9c00215 	stw	r7,8(sp)
 8006d1c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8006d20:	d9400017 	ldw	r5,0(sp)
 8006d24:	d9800117 	ldw	r6,4(sp)
 8006d28:	d9c00217 	ldw	r7,8(sp)
 8006d2c:	10001d26 	beq	r2,zero,8006da4 <__register_exitproc+0x110>
 8006d30:	81000017 	ldw	r4,0(r16)
 8006d34:	10000115 	stw	zero,4(r2)
 8006d38:	02000044 	movi	r8,1
 8006d3c:	22405217 	ldw	r9,328(r4)
 8006d40:	0007883a 	mov	r3,zero
 8006d44:	12400015 	stw	r9,0(r2)
 8006d48:	20805215 	stw	r2,328(r4)
 8006d4c:	10006215 	stw	zero,392(r2)
 8006d50:	10006315 	stw	zero,396(r2)
 8006d54:	883fde26 	beq	r17,zero,8006cd0 <__register_exitproc+0x3c>
 8006d58:	18c9883a 	add	r4,r3,r3
 8006d5c:	2109883a 	add	r4,r4,r4
 8006d60:	1109883a 	add	r4,r2,r4
 8006d64:	21802215 	stw	r6,136(r4)
 8006d68:	01800044 	movi	r6,1
 8006d6c:	12406217 	ldw	r9,392(r2)
 8006d70:	30cc983a 	sll	r6,r6,r3
 8006d74:	4992b03a 	or	r9,r9,r6
 8006d78:	12406215 	stw	r9,392(r2)
 8006d7c:	21c04215 	stw	r7,264(r4)
 8006d80:	01000084 	movi	r4,2
 8006d84:	893fd21e 	bne	r17,r4,8006cd0 <__register_exitproc+0x3c>
 8006d88:	11006317 	ldw	r4,396(r2)
 8006d8c:	218cb03a 	or	r6,r4,r6
 8006d90:	11806315 	stw	r6,396(r2)
 8006d94:	003fce06 	br	8006cd0 <__register_exitproc+0x3c>
 8006d98:	18805304 	addi	r2,r3,332
 8006d9c:	18805215 	stw	r2,328(r3)
 8006da0:	003fc606 	br	8006cbc <__register_exitproc+0x28>
 8006da4:	00bfffc4 	movi	r2,-1
 8006da8:	003fd006 	br	8006cec <__register_exitproc+0x58>

08006dac <__call_exitprocs>:
 8006dac:	defff504 	addi	sp,sp,-44
 8006db0:	df000915 	stw	fp,36(sp)
 8006db4:	dd400615 	stw	r21,24(sp)
 8006db8:	dc800315 	stw	r18,12(sp)
 8006dbc:	dfc00a15 	stw	ra,40(sp)
 8006dc0:	ddc00815 	stw	r23,32(sp)
 8006dc4:	dd800715 	stw	r22,28(sp)
 8006dc8:	dd000515 	stw	r20,20(sp)
 8006dcc:	dcc00415 	stw	r19,16(sp)
 8006dd0:	dc400215 	stw	r17,8(sp)
 8006dd4:	dc000115 	stw	r16,4(sp)
 8006dd8:	d9000015 	stw	r4,0(sp)
 8006ddc:	2839883a 	mov	fp,r5
 8006de0:	04800044 	movi	r18,1
 8006de4:	057fffc4 	movi	r21,-1
 8006de8:	00820074 	movhi	r2,2049
 8006dec:	10a30404 	addi	r2,r2,-29680
 8006df0:	12000017 	ldw	r8,0(r2)
 8006df4:	45005217 	ldw	r20,328(r8)
 8006df8:	44c05204 	addi	r19,r8,328
 8006dfc:	a0001c26 	beq	r20,zero,8006e70 <__call_exitprocs+0xc4>
 8006e00:	a0800117 	ldw	r2,4(r20)
 8006e04:	15ffffc4 	addi	r23,r2,-1
 8006e08:	b8000d16 	blt	r23,zero,8006e40 <__call_exitprocs+0x94>
 8006e0c:	14000044 	addi	r16,r2,1
 8006e10:	8421883a 	add	r16,r16,r16
 8006e14:	8421883a 	add	r16,r16,r16
 8006e18:	84402004 	addi	r17,r16,128
 8006e1c:	a463883a 	add	r17,r20,r17
 8006e20:	a421883a 	add	r16,r20,r16
 8006e24:	e0001e26 	beq	fp,zero,8006ea0 <__call_exitprocs+0xf4>
 8006e28:	80804017 	ldw	r2,256(r16)
 8006e2c:	e0801c26 	beq	fp,r2,8006ea0 <__call_exitprocs+0xf4>
 8006e30:	bdffffc4 	addi	r23,r23,-1
 8006e34:	843fff04 	addi	r16,r16,-4
 8006e38:	8c7fff04 	addi	r17,r17,-4
 8006e3c:	bd7ff91e 	bne	r23,r21,8006e24 <__call_exitprocs+0x78>
 8006e40:	00800034 	movhi	r2,0
 8006e44:	10800004 	addi	r2,r2,0
 8006e48:	10000926 	beq	r2,zero,8006e70 <__call_exitprocs+0xc4>
 8006e4c:	a0800117 	ldw	r2,4(r20)
 8006e50:	1000301e 	bne	r2,zero,8006f14 <__call_exitprocs+0x168>
 8006e54:	a0800017 	ldw	r2,0(r20)
 8006e58:	10003226 	beq	r2,zero,8006f24 <__call_exitprocs+0x178>
 8006e5c:	a009883a 	mov	r4,r20
 8006e60:	98800015 	stw	r2,0(r19)
 8006e64:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8006e68:	9d000017 	ldw	r20,0(r19)
 8006e6c:	a03fe41e 	bne	r20,zero,8006e00 <__call_exitprocs+0x54>
 8006e70:	dfc00a17 	ldw	ra,40(sp)
 8006e74:	df000917 	ldw	fp,36(sp)
 8006e78:	ddc00817 	ldw	r23,32(sp)
 8006e7c:	dd800717 	ldw	r22,28(sp)
 8006e80:	dd400617 	ldw	r21,24(sp)
 8006e84:	dd000517 	ldw	r20,20(sp)
 8006e88:	dcc00417 	ldw	r19,16(sp)
 8006e8c:	dc800317 	ldw	r18,12(sp)
 8006e90:	dc400217 	ldw	r17,8(sp)
 8006e94:	dc000117 	ldw	r16,4(sp)
 8006e98:	dec00b04 	addi	sp,sp,44
 8006e9c:	f800283a 	ret
 8006ea0:	a0800117 	ldw	r2,4(r20)
 8006ea4:	80c00017 	ldw	r3,0(r16)
 8006ea8:	10bfffc4 	addi	r2,r2,-1
 8006eac:	15c01426 	beq	r2,r23,8006f00 <__call_exitprocs+0x154>
 8006eb0:	80000015 	stw	zero,0(r16)
 8006eb4:	183fde26 	beq	r3,zero,8006e30 <__call_exitprocs+0x84>
 8006eb8:	95c8983a 	sll	r4,r18,r23
 8006ebc:	a0806217 	ldw	r2,392(r20)
 8006ec0:	a5800117 	ldw	r22,4(r20)
 8006ec4:	2084703a 	and	r2,r4,r2
 8006ec8:	10000b26 	beq	r2,zero,8006ef8 <__call_exitprocs+0x14c>
 8006ecc:	a0806317 	ldw	r2,396(r20)
 8006ed0:	2088703a 	and	r4,r4,r2
 8006ed4:	20000c1e 	bne	r4,zero,8006f08 <__call_exitprocs+0x15c>
 8006ed8:	89400017 	ldw	r5,0(r17)
 8006edc:	d9000017 	ldw	r4,0(sp)
 8006ee0:	183ee83a 	callr	r3
 8006ee4:	a0800117 	ldw	r2,4(r20)
 8006ee8:	15bfbf1e 	bne	r2,r22,8006de8 <__call_exitprocs+0x3c>
 8006eec:	98800017 	ldw	r2,0(r19)
 8006ef0:	153fcf26 	beq	r2,r20,8006e30 <__call_exitprocs+0x84>
 8006ef4:	003fbc06 	br	8006de8 <__call_exitprocs+0x3c>
 8006ef8:	183ee83a 	callr	r3
 8006efc:	003ff906 	br	8006ee4 <__call_exitprocs+0x138>
 8006f00:	a5c00115 	stw	r23,4(r20)
 8006f04:	003feb06 	br	8006eb4 <__call_exitprocs+0x108>
 8006f08:	89000017 	ldw	r4,0(r17)
 8006f0c:	183ee83a 	callr	r3
 8006f10:	003ff406 	br	8006ee4 <__call_exitprocs+0x138>
 8006f14:	a0800017 	ldw	r2,0(r20)
 8006f18:	a027883a 	mov	r19,r20
 8006f1c:	1029883a 	mov	r20,r2
 8006f20:	003fb606 	br	8006dfc <__call_exitprocs+0x50>
 8006f24:	0005883a 	mov	r2,zero
 8006f28:	003ffb06 	br	8006f18 <__call_exitprocs+0x16c>

08006f2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8006f2c:	defffd04 	addi	sp,sp,-12
 8006f30:	df000215 	stw	fp,8(sp)
 8006f34:	df000204 	addi	fp,sp,8
 8006f38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8006f3c:	0001883a 	nop
 8006f40:	e0bfff17 	ldw	r2,-4(fp)
 8006f44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8006f48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8006f4c:	10000226 	beq	r2,zero,8006f58 <_exit+0x2c>
    ALT_SIM_FAIL();
 8006f50:	002af070 	cmpltui	zero,zero,43969
 8006f54:	00000106 	br	8006f5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8006f58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8006f5c:	003fff06 	br	8006f5c <_exit+0x30>
